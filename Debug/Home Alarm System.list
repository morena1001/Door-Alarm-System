
Home Alarm System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800b780  0800b780  0000c780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc18  0800bc18  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc18  0800bc18  0000cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc20  0800bc20  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc20  0800bc20  0000cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc24  0800bc24  0000cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800bc28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001e8  0800be0c  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800be0c  0000d5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001490a  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a84  00000000  00000000  00021b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  000245a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e93  00000000  00000000  00025838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e19c  00000000  00000000  000266cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017681  00000000  00000000  00044867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd4b  00000000  00000000  0005bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bc33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006370  00000000  00000000  0010bc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00111fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b764 	.word	0x0800b764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b764 	.word	0x0800b764

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <Check_Password>:
	alarm_system->password= "1001";

	user_input = "\0";
}

bool Check_Password(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	if (!strcmp(alarm_system->password, user_input))		return true;
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <Check_Password+0x28>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <Check_Password+0x2c>)
 8000d20:	6812      	ldr	r2, [r2, #0]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa53 	bl	80001d0 <strcmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <Check_Password+0x20>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <Check_Password+0x22>
	return false;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000208 	.word	0x20000208
 8000d40:	20000204 	.word	0x20000204

08000d44 <Lock_System>:

bool Lock_System(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == ready) {
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <Lock_System+0x28>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d105      	bne.n	8000d5e <Lock_System+0x1a>
		alarm_system->state = set;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <Lock_System+0x28>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2201      	movs	r2, #1
 8000d58:	711a      	strb	r2, [r3, #4]
		return true;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <Lock_System+0x1c>
	}
	return false;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000208 	.word	0x20000208

08000d70 <Unlock_System>:

bool Unlock_System(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == set && Check_Password()) {
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <Unlock_System+0x2c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10a      	bne.n	8000d94 <Unlock_System+0x24>
 8000d7e:	f7ff ffc9 	bl	8000d14 <Check_Password>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <Unlock_System+0x24>
		alarm_system->state = ready;
 8000d88:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <Unlock_System+0x2c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	711a      	strb	r2, [r3, #4]
		return true;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <Unlock_System+0x26>
	}
	return false;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000208 	.word	0x20000208

08000da0 <HD44780_Init>:
	0b01010,
	0b00100
};

void HD44780_Init(uint8_t rows)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000daa:	4a38      	ldr	r2, [pc, #224]	@ (8000e8c <HD44780_Init+0xec>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000db0:	4b37      	ldr	r3, [pc, #220]	@ (8000e90 <HD44780_Init+0xf0>)
 8000db2:	2208      	movs	r2, #8
 8000db4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000db6:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <HD44780_Init+0xf4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000dbc:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <HD44780_Init+0xec>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d907      	bls.n	8000dd4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000dc4:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <HD44780_Init+0xf4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <HD44780_Init+0xf4>)
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e006      	b.n	8000de2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HD44780_Init+0xf4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <HD44780_Init+0xf4>)
 8000de0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000de2:	f000 f985 	bl	80010f0 <DelayInit>
  HAL_Delay(50);
 8000de6:	2032      	movs	r0, #50	@ 0x32
 8000de8:	f001 f9c6 	bl	8002178 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000dec:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <HD44780_Init+0xf0>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f943 	bl	800107c <ExpanderWrite>
  HAL_Delay(1000);
 8000df6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dfa:	f001 f9bd 	bl	8002178 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000dfe:	2030      	movs	r0, #48	@ 0x30
 8000e00:	f000 f92b 	bl	800105a <Write4Bits>
  DelayUS(4500);
 8000e04:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e08:	f000 f99c 	bl	8001144 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e0c:	2030      	movs	r0, #48	@ 0x30
 8000e0e:	f000 f924 	bl	800105a <Write4Bits>
  DelayUS(4500);
 8000e12:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e16:	f000 f995 	bl	8001144 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e1a:	2030      	movs	r0, #48	@ 0x30
 8000e1c:	f000 f91d 	bl	800105a <Write4Bits>
  DelayUS(4500);
 8000e20:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e24:	f000 f98e 	bl	8001144 <DelayUS>

  Write4Bits(0x02 << 4);
 8000e28:	2020      	movs	r0, #32
 8000e2a:	f000 f916 	bl	800105a <Write4Bits>
  DelayUS(100);
 8000e2e:	2064      	movs	r0, #100	@ 0x64
 8000e30:	f000 f988 	bl	8001144 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HD44780_Init+0xf4>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f8ce 	bl	8000fe0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HD44780_Init+0xf8>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000e4a:	f000 f875 	bl	8000f38 <HD44780_Display>
  HD44780_Clear();
 8000e4e:	f000 f82b 	bl	8000ea8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HD44780_Init+0xfc>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HD44780_Init+0xfc>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f8bc 	bl	8000fe0 <SendCommand>
  DelayUS(4500);
 8000e68:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e6c:	f000 f96a 	bl	8001144 <DelayUS>

  HD44780_CreateSpecialChar(0, up_arrow);
 8000e70:	490b      	ldr	r1, [pc, #44]	@ (8000ea0 <HD44780_Init+0x100>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f876 	bl	8000f64 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, down_arrow);
 8000e78:	490a      	ldr	r1, [pc, #40]	@ (8000ea4 <HD44780_Init+0x104>)
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 f872 	bl	8000f64 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000e80:	f000 f81d 	bl	8000ebe <HD44780_Home>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000020f 	.word	0x2000020f
 8000e90:	20000210 	.word	0x20000210
 8000e94:	2000020c 	.word	0x2000020c
 8000e98:	2000020d 	.word	0x2000020d
 8000e9c:	2000020e 	.word	0x2000020e
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HD44780_Clear>:

void HD44780_Clear()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 f897 	bl	8000fe0 <SendCommand>
  DelayUS(2000);
 8000eb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eb6:	f000 f945 	bl	8001144 <DelayUS>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HD44780_Home>:

void HD44780_Home()
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f000 f88c 	bl	8000fe0 <SendCommand>
  DelayUS(2000);
 8000ec8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ecc:	f000 f93a 	bl	8001144 <DelayUS>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HD44780_SetCursor+0x5c>)
 8000ee6:	f107 0408 	add.w	r4, r7, #8
 8000eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HD44780_SetCursor+0x60>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d303      	bcc.n	8000f02 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HD44780_SetCursor+0x60>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	3318      	adds	r3, #24
 8000f08:	443b      	add	r3, r7
 8000f0a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4413      	add	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f85d 	bl	8000fe0 <SendCommand>
}
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800b780 	.word	0x0800b780
 8000f34:	2000020f 	.word	0x2000020f

08000f38 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HD44780_Display+0x28>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HD44780_Display+0x28>)
 8000f48:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HD44780_Display+0x28>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f843 	bl	8000fe0 <SendCommand>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000020d 	.word	0x2000020d

08000f64 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f82a 	bl	8000fe0 <SendCommand>
  for (int i=0; i<8; i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e009      	b.n	8000fa6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f82e 	bl	8000ffc <SendChar>
  for (int i=0; i<8; i++)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	ddf2      	ble.n	8000f92 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000fbe:	e006      	b.n	8000fce <HD44780_PrintStr+0x18>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f817 	bl	8000ffc <SendChar>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f4      	bne.n	8000fc0 <HD44780_PrintStr+0xa>
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f812 	bl	8001018 <Send>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2101      	movs	r1, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f804 	bl	8001018 <Send>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f023 030f 	bic.w	r3, r3, #15
 800102e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	4313      	orrs	r3, r2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f80b 	bl	800105a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001044:	7bba      	ldrb	r2, [r7, #14]
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4313      	orrs	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f804 	bl	800105a <Write4Bits>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f808 	bl	800107c <ExpanderWrite>
  PulseEnable(value);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f820 	bl	80010b4 <PulseEnable>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <ExpanderWrite+0x30>)
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001092:	f107 020f 	add.w	r2, r7, #15
 8001096:	230a      	movs	r3, #10
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	214e      	movs	r1, #78	@ 0x4e
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <ExpanderWrite+0x34>)
 80010a0:	f002 fa3c 	bl	800351c <HAL_I2C_Master_Transmit>
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000210 	.word	0x20000210
 80010b0:	20000264 	.word	0x20000264

080010b4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffd8 	bl	800107c <ExpanderWrite>
  DelayUS(20);
 80010cc:	2014      	movs	r0, #20
 80010ce:	f000 f839 	bl	8001144 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffce 	bl	800107c <ExpanderWrite>
  DelayUS(20);
 80010e0:	2014      	movs	r0, #20
 80010e2:	f000 f82f 	bl	8001144 <DelayUS>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <DelayInit>:

static void DelayInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <DelayInit+0x4c>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4a10      	ldr	r2, [pc, #64]	@ (800113c <DelayInit+0x4c>)
 80010fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010fe:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <DelayInit+0x4c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <DelayInit+0x4c>)
 8001106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800110a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <DelayInit+0x50>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <DelayInit+0x50>)
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <DelayInit+0x50>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <DelayInit+0x50>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <DelayInit+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800112a:	bf00      	nop
  __ASM volatile ("NOP");
 800112c:	bf00      	nop
  __ASM volatile ("NOP");
 800112e:	bf00      	nop
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000edf0 	.word	0xe000edf0
 8001140:	e0001000 	.word	0xe0001000

08001144 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <DelayUS+0x44>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <DelayUS+0x48>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9a      	lsrs	r2, r3, #18
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <DelayUS+0x4c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <DelayUS+0x4c>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f6      	bhi.n	8001166 <DelayUS+0x22>
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	371c      	adds	r7, #28
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000010 	.word	0x20000010
 800118c:	431bde83 	.word	0x431bde83
 8001190:	e0001000 	.word	0xe0001000

08001194 <AlarmPeripheral_Init>:
void AlarmIO_Test(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AlarmPeripheral_Init(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	// Set up timer 1 PWM and timer 2 and 6 interrupts
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4810      	ldr	r0, [pc, #64]	@ (80011dc <AlarmPeripheral_Init+0x48>)
 800119c:	f004 fa7c 	bl	8005698 <HAL_TIM_PWM_Start>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2036      	movs	r0, #54	@ 0x36
 80011a6:	f001 ff22 	bl	8002fee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011aa:	2036      	movs	r0, #54	@ 0x36
 80011ac:	f001 ff3b 	bl	8003026 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <AlarmPeripheral_Init+0x4c>)
 80011b2:	f004 f9c5 	bl	8005540 <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	201c      	movs	r0, #28
 80011bc:	f001 ff17 	bl	8002fee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c0:	201c      	movs	r0, #28
 80011c2:	f001 ff30 	bl	8003026 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <AlarmPeripheral_Init+0x50>)
 80011c8:	f004 f9ba 	bl	8005540 <HAL_TIM_Base_Start_IT>

	// Set up LCD screen
	HD44780_Init(2);
 80011cc:	2002      	movs	r0, #2
 80011ce:	f7ff fde7 	bl	8000da0 <HD44780_Init>
	HD44780_Clear();
 80011d2:	f7ff fe69 	bl	8000ea8 <HD44780_Clear>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002b8 	.word	0x200002b8
 80011e0:	20000350 	.word	0x20000350
 80011e4:	20000304 	.word	0x20000304

080011e8 <AlarmIO_Test>:

void AlarmIO_Test(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	// Test LCD screen
	HD44780_SetCursor(0, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fe70 	bl	8000ed4 <HD44780_SetCursor>
	HD44780_PrintStr("WELCOME TO");
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <AlarmIO_Test+0xa4>)
 80011f6:	f7ff fede 	bl	8000fb6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 80011fa:	2101      	movs	r1, #1
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fe69 	bl	8000ed4 <HD44780_SetCursor>
	HD44780_PrintStr("VANDAR SYSTEMS");
 8001202:	4823      	ldr	r0, [pc, #140]	@ (8001290 <AlarmIO_Test+0xa8>)
 8001204:	f7ff fed7 	bl	8000fb6 <HD44780_PrintStr>

	// Test Passive buzzer
	__HAL_TIM_SET_AUTORELOAD(&htim1, ENABLE_BEEP * 2);
 8001208:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <AlarmIO_Test+0xac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <AlarmIO_Test+0xac>)
 8001214:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001218:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ENABLE_BEEP);
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <AlarmIO_Test+0xac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34

	// Test LEDs
	HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2120      	movs	r1, #32
 8001228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122c:	f002 f8a0 	bl	8003370 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001230:	20fa      	movs	r0, #250	@ 0xfa
 8001232:	f000 ffa1 	bl	8002178 <HAL_Delay>

	HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f002 f897 	bl	8003370 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001242:	20fa      	movs	r0, #250	@ 0xfa
 8001244:	f000 ff98 	bl	8002178 <HAL_Delay>

	HD44780_Clear();
 8001248:	f7ff fe2e 	bl	8000ea8 <HD44780_Clear>
	__HAL_TIM_SET_AUTORELOAD(&htim1, DISABLE_BEEP * 2);
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <AlarmIO_Test+0xac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <AlarmIO_Test+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, DISABLE_BEEP);
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <AlarmIO_Test+0xac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2120      	movs	r1, #32
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f002 f881 	bl	8003370 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 800126e:	20fa      	movs	r0, #250	@ 0xfa
 8001270:	f000 ff82 	bl	8002178 <HAL_Delay>

	HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2140      	movs	r1, #64	@ 0x40
 8001278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127c:	f002 f878 	bl	8003370 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001280:	20fa      	movs	r0, #250	@ 0xfa
 8001282:	f000 ff79 	bl	8002178 <HAL_Delay>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	0800b790 	.word	0x0800b790
 8001290:	0800b79c 	.word	0x0800b79c
 8001294:	200002b8 	.word	0x200002b8

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 ff06 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f814 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 fa56 	bl	8001754 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a8:	f000 f872 	bl	8001390 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012ac:	f000 f8cc 	bl	8001448 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012b0:	f000 f90a 	bl	80014c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012b4:	f000 f998 	bl	80015e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80012b8:	f000 fa1c 	bl	80016f4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012bc:	f000 f9e2 	bl	8001684 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  AlarmPeripheral_Init();
 80012c0:	f7ff ff68 	bl	8001194 <AlarmPeripheral_Init>
  AlarmIO_Test();
 80012c4:	f7ff ff90 	bl	80011e8 <AlarmIO_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <main+0x30>

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09c      	sub	sp, #112	@ 0x70
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012d6:	2228      	movs	r2, #40	@ 0x28
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 ff35 	bl	800814a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2234      	movs	r2, #52	@ 0x34
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 ff27 	bl	800814a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012fc:	2303      	movs	r3, #3
 80012fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2310      	movs	r3, #16
 8001310:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800131a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001320:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fcc2 	bl	8003cb0 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001332:	f000 faa1 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133a:	2302      	movs	r3, #2
 800133c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fcea 	bl	8004d2c <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800135e:	f000 fa8b 	bl	8001878 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8001362:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 8001366:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001374:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fef7 	bl	800516c <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001384:	f000 fa78 	bl	8001878 <Error_Handler>
  }
}
 8001388:	bf00      	nop
 800138a:	3770      	adds	r7, #112	@ 0x70
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a6:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013ae:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ba:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001400:	4810      	ldr	r0, [pc, #64]	@ (8001444 <MX_ADC1_Init+0xb4>)
 8001402:	f000 fedd 	bl	80021c0 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800140c:	f000 fa34 	bl	8001878 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001410:	2301      	movs	r3, #1
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_ADC1_Init+0xb4>)
 800142e:	f001 f987 	bl	8002740 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001438:	f000 fa1e 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000214 	.word	0x20000214

08001448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_I2C1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <MX_I2C1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <MX_I2C1_Init+0x7c>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001460:	2201      	movs	r2, #1
 8001462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_I2C1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_I2C1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001482:	480e      	ldr	r0, [pc, #56]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001484:	f001 ffaf 	bl	80033e6 <HAL_I2C_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800148e:	f000 f9f3 	bl	8001878 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001496:	f002 fb73 	bl	8003b80 <HAL_I2CEx_ConfigAnalogFilter>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014a0:	f000 f9ea 	bl	8001878 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_I2C1_Init+0x74>)
 80014a8:	f002 fbb5 	bl	8003c16 <HAL_I2CEx_ConfigDigitalFilter>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 f9e1 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000264 	.word	0x20000264
 80014c0:	40005400 	.word	0x40005400
 80014c4:	00201d2b 	.word	0x00201d2b

080014c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	@ 0x58
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	222c      	movs	r2, #44	@ 0x2c
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f006 fe28 	bl	800814a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fa:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <MX_TIM1_Init+0x118>)
 80014fc:	4a39      	ldr	r2, [pc, #228]	@ (80015e4 <MX_TIM1_Init+0x11c>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001502:	221e      	movs	r2, #30
 8001504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b36      	ldr	r3, [pc, #216]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3522;
 800150c:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800150e:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001526:	482e      	ldr	r0, [pc, #184]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001528:	f004 f85e 	bl	80055e8 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001532:	f000 f9a1 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001542:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001546:	4619      	mov	r1, r3
 8001548:	4825      	ldr	r0, [pc, #148]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800154a:	f005 f87d 	bl	8006648 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001554:	f000 f990 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	@ 0x60
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800157e:	f004 fa73 	bl	8005a68 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001588:	f000 f976 	bl	8001878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MX_TIM1_Init+0x118>)
 80015c2:	f005 f8a7 	bl	8006714 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80015cc:	f000 f954 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MX_TIM1_Init+0x118>)
 80015d2:	f000 fa5b 	bl	8001a8c <HAL_TIM_MspPostInit>

}
 80015d6:	bf00      	nop
 80015d8:	3758      	adds	r7, #88	@ 0x58
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002b8 	.word	0x200002b8
 80015e4:	40012c00 	.word	0x40012c00

080015e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001606:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001608:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800160c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001610:	221e      	movs	r2, #30
 8001612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3522;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_TIM2_Init+0x98>)
 800161c:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_TIM2_Init+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800162e:	4814      	ldr	r0, [pc, #80]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001630:	f003 ff2e 	bl	8005490 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800163a:	f000 f91d 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_TIM2_Init+0x98>)
 800164c:	f004 fb20 	bl	8005c90 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001656:	f000 f90f 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001668:	f004 ffee 	bl	8006648 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001672:	f000 f901 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000304 	.word	0x20000304

08001684 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001694:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_TIM6_Init+0x68>)
 8001696:	4a16      	ldr	r2, [pc, #88]	@ (80016f0 <MX_TIM6_Init+0x6c>)
 8001698:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_TIM6_Init+0x68>)
 800169c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80016a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1799;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016aa:	f240 7207 	movw	r2, #1799	@ 0x707
 80016ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016b8:	f003 feea 	bl	8005490 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80016c2:	f000 f8d9 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016d4:	f004 ffb8 	bl	8006648 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80016de:	f000 f8cb 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000350 	.word	0x20000350
 80016f0:	40001000 	.word	0x40001000

080016f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_USART2_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <MX_USART2_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001700:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_USART2_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001738:	f005 f882 	bl	8006840 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 f899 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000039c 	.word	0x2000039c
 8001750:	40004400 	.word	0x40004400

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176a:	4b40      	ldr	r3, [pc, #256]	@ (800186c <MX_GPIO_Init+0x118>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a3f      	ldr	r2, [pc, #252]	@ (800186c <MX_GPIO_Init+0x118>)
 8001770:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <MX_GPIO_Init+0x118>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <MX_GPIO_Init+0x118>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a39      	ldr	r2, [pc, #228]	@ (800186c <MX_GPIO_Init+0x118>)
 8001788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800178c:	6153      	str	r3, [r2, #20]
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <MX_GPIO_Init+0x118>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <MX_GPIO_Init+0x118>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a33      	ldr	r2, [pc, #204]	@ (800186c <MX_GPIO_Init+0x118>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	6153      	str	r3, [r2, #20]
 80017a6:	4b31      	ldr	r3, [pc, #196]	@ (800186c <MX_GPIO_Init+0x118>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <MX_GPIO_Init+0x118>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a2d      	ldr	r2, [pc, #180]	@ (800186c <MX_GPIO_Init+0x118>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017bc:	6153      	str	r3, [r2, #20]
 80017be:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <MX_GPIO_Init+0x118>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RM_Pin|SM_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2160      	movs	r1, #96	@ 0x60
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d2:	f001 fdcd 	bl	8003370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NP1_Pin NP2_Pin NP3_Pin NP4_Pin
                           NP5_Pin NP6_Pin NP7_Pin NP8_Pin
                           NP9_Pin NP0_Pin */
  GPIO_InitStruct.Pin = NP1_Pin|NP2_Pin|NP3_Pin|NP4_Pin
 80017d6:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80017da:	617b      	str	r3, [r7, #20]
                          |NP5_Pin|NP6_Pin|NP7_Pin|NP8_Pin
                          |NP9_Pin|NP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	@ (8001870 <MX_GPIO_Init+0x11c>)
 80017ec:	f001 fc36 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : RM_Pin SM_Pin */
  GPIO_InitStruct.Pin = RM_Pin|SM_Pin;
 80017f0:	2360      	movs	r3, #96	@ 0x60
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180a:	f001 fc27 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : LUB_Pin */
  GPIO_InitStruct.Pin = LUB_Pin;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001818:	2301      	movs	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LUB_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_GPIO_Init+0x120>)
 8001824:	f001 fc1a 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : RPB_Pin */
  GPIO_InitStruct.Pin = RPB_Pin;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPB_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <MX_GPIO_Init+0x120>)
 800183e:	f001 fc0d 	bl	800305c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2006      	movs	r0, #6
 8001848:	f001 fbd1 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800184c:	2006      	movs	r0, #6
 800184e:	f001 fbea 	bl	8003026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2007      	movs	r0, #7
 8001858:	f001 fbc9 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800185c:	2007      	movs	r0, #7
 800185e:	f001 fbe2 	bl	8003026 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	48000800 	.word	0x48000800
 8001874:	48000400 	.word	0x48000400

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <Error_Handler+0x8>

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_MspInit+0x44>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a0e      	ldr	r2, [pc, #56]	@ (80018c8 <HAL_MspInit+0x44>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <HAL_MspInit+0x44>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_MspInit+0x44>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a08      	ldr	r2, [pc, #32]	@ (80018c8 <HAL_MspInit+0x44>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_MspInit+0x44>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ec:	d124      	bne.n	8001938 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001934:	f001 fb92 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	@ 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a17      	ldr	r2, [pc, #92]	@ (80019c0 <HAL_I2C_MspInit+0x7c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d127      	bne.n	80019b6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001970:	6153      	str	r3, [r2, #20]
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197e:	23c0      	movs	r3, #192	@ 0xc0
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001982:	2312      	movs	r3, #18
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800198e:	2304      	movs	r3, #4
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <HAL_I2C_MspInit+0x84>)
 800199a:	f001 fb5f 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 80019a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	@ 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40005400 	.word	0x40005400
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000400 	.word	0x48000400

080019cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_TIM_PWM_MspInit+0x38>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10b      	bne.n	80019f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1c:	d114      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f001 fad7 	bl	8002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a40:	201c      	movs	r0, #28
 8001a42:	f001 faf0 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a46:	e018      	b.n	8001a7a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <HAL_TIM_Base_MspInit+0x7c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d113      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2036      	movs	r0, #54	@ 0x36
 8001a70:	f001 fabd 	bl	8002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a74:	2036      	movs	r0, #54	@ 0x36
 8001a76:	f001 fad6 	bl	8003026 <HAL_NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40001000 	.word	0x40001000

08001a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <HAL_TIM_MspPostInit+0x64>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d11b      	bne.n	8001ae6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	@ (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001ab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ae2:	f001 fabb 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	48000800 	.word	0x48000800

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_UART_MspInit+0x7c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d128      	bne.n	8001b70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	6153      	str	r3, [r2, #20]
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6c:	f001 fa76 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	@ 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40004400 	.word	0x40004400
 8001b7c:	40021000 	.word	0x40021000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <NMI_Handler+0x4>

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <MemManage_Handler+0x4>

08001b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd6:	f000 faaf 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e002      	b.n	8001bf2 <EXTI0_IRQHandler+0x12>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	ddf7      	ble.n	8001bec <EXTI0_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(LUB_GPIO_Port, LUB_Pin)) {
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4810      	ldr	r0, [pc, #64]	@ (8001c40 <EXTI0_IRQHandler+0x60>)
 8001c00:	f001 fb9e 	bl	8003340 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <EXTI0_IRQHandler+0x50>
		// If the system cannot be locked, try to unlock the system
		user_input = buffer;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <EXTI0_IRQHandler+0x64>)
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c48 <EXTI0_IRQHandler+0x68>)
 8001c0e:	601a      	str	r2, [r3, #0]
		if (!Lock_System())	{
 8001c10:	f7ff f898 	bl	8000d44 <Lock_System>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f083 0301 	eor.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <EXTI0_IRQHandler+0x44>
			if (Unlock_System()) {
 8001c20:	f7ff f8a6 	bl	8000d70 <Unlock_System>

		}


		// Reset input from number pad
		buffer[0] = '\0';
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <EXTI0_IRQHandler+0x68>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
		idx = 0;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <EXTI0_IRQHandler+0x6c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LUB_Pin);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f001 fbb5 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	48000400 	.word	0x48000400
 8001c44:	20000204 	.word	0x20000204
 8001c48:	20000430 	.word	0x20000430
 8001c4c:	20000435 	.word	0x20000435

08001c50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e002      	b.n	8001c62 <EXTI1_IRQHandler+0x12>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	ddf7      	ble.n	8001c5c <EXTI1_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(RPB_GPIO_Port, RPB_Pin)) {
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <EXTI1_IRQHandler+0x34>)
 8001c70:	f001 fb66 	bl	8003340 <HAL_GPIO_ReadPin>

	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPB_Pin);
 8001c74:	2002      	movs	r0, #2
 8001c76:	f001 fb93 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	48000400 	.word	0x48000400

08001c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!buzzer_length_counter--)	Generate_Tone(false);
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <TIM2_IRQHandler+0x24>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	b291      	uxth	r1, r2
 8001c94:	4a05      	ldr	r2, [pc, #20]	@ (8001cac <TIM2_IRQHandler+0x24>)
 8001c96:	8011      	strh	r1, [r2, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <TIM2_IRQHandler+0x1a>
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 f8cd 	bl	8001e3c <Generate_Tone>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca2:	4803      	ldr	r0, [pc, #12]	@ (8001cb0 <TIM2_IRQHandler+0x28>)
 8001ca4:	f003 fdde 	bl	8005864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000436 	.word	0x20000436
 8001cb0:	20000304 	.word	0x20000304

08001cb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	// Poll for the value of the IR sensor
	HAL_ADC_Start(&hadc1);
 8001cb8:	484a      	ldr	r0, [pc, #296]	@ (8001de4 <TIM6_DAC_IRQHandler+0x130>)
 8001cba:	f000 fc07 	bl	80024cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001cbe:	2164      	movs	r1, #100	@ 0x64
 8001cc0:	4848      	ldr	r0, [pc, #288]	@ (8001de4 <TIM6_DAC_IRQHandler+0x130>)
 8001cc2:	f000 fc71 	bl	80025a8 <HAL_ADC_PollForConversion>
	raw = (double) HAL_ADC_GetValue(&hadc1);
 8001cc6:	4847      	ldr	r0, [pc, #284]	@ (8001de4 <TIM6_DAC_IRQHandler+0x130>)
 8001cc8:	f000 fd2c 	bl	8002724 <HAL_ADC_GetValue>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_ui2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4943      	ldr	r1, [pc, #268]	@ (8001de8 <TIM6_DAC_IRQHandler+0x134>)
 8001cda:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf(m, "%f\r\n", raw);
 8001cde:	4b42      	ldr	r3, [pc, #264]	@ (8001de8 <TIM6_DAC_IRQHandler+0x134>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	4941      	ldr	r1, [pc, #260]	@ (8001dec <TIM6_DAC_IRQHandler+0x138>)
 8001ce6:	4842      	ldr	r0, [pc, #264]	@ (8001df0 <TIM6_DAC_IRQHandler+0x13c>)
 8001ce8:	f006 f9cc 	bl	8008084 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) m, 20, 100);
 8001cec:	2364      	movs	r3, #100	@ 0x64
 8001cee:	2214      	movs	r2, #20
 8001cf0:	493f      	ldr	r1, [pc, #252]	@ (8001df0 <TIM6_DAC_IRQHandler+0x13c>)
 8001cf2:	4840      	ldr	r0, [pc, #256]	@ (8001df4 <TIM6_DAC_IRQHandler+0x140>)
 8001cf4:	f004 fdf2 	bl	80068dc <HAL_UART_Transmit>
	if (raw < 1000.0) {
		// BEGIN TO SOUND THE ALARM
	}

	// Poll for the number pad
	if      (!HAL_GPIO_ReadPin(NP0_GPIO_Port, NP0_Pin))     Update_Buffer('0');
 8001cf8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cfc:	483e      	ldr	r0, [pc, #248]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001cfe:	f001 fb1f 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <TIM6_DAC_IRQHandler+0x5c>
 8001d08:	2030      	movs	r0, #48	@ 0x30
 8001d0a:	f000 f879 	bl	8001e00 <Update_Buffer>
 8001d0e:	e063      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP1_GPIO_Port, NP1_Pin)) 	Update_Buffer('1');
 8001d10:	2102      	movs	r1, #2
 8001d12:	4839      	ldr	r0, [pc, #228]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001d14:	f001 fb14 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <TIM6_DAC_IRQHandler+0x72>
 8001d1e:	2031      	movs	r0, #49	@ 0x31
 8001d20:	f000 f86e 	bl	8001e00 <Update_Buffer>
 8001d24:	e058      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP2_GPIO_Port, NP2_Pin))		Update_Buffer('2');
 8001d26:	2104      	movs	r1, #4
 8001d28:	4833      	ldr	r0, [pc, #204]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001d2a:	f001 fb09 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <TIM6_DAC_IRQHandler+0x88>
 8001d34:	2032      	movs	r0, #50	@ 0x32
 8001d36:	f000 f863 	bl	8001e00 <Update_Buffer>
 8001d3a:	e04d      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP3_GPIO_Port, NP3_Pin))		Update_Buffer('3');
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	482e      	ldr	r0, [pc, #184]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001d40:	f001 fafe 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <TIM6_DAC_IRQHandler+0x9e>
 8001d4a:	2033      	movs	r0, #51	@ 0x33
 8001d4c:	f000 f858 	bl	8001e00 <Update_Buffer>
 8001d50:	e042      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP4_GPIO_Port, NP4_Pin))		Update_Buffer('4');
 8001d52:	2110      	movs	r1, #16
 8001d54:	4828      	ldr	r0, [pc, #160]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001d56:	f001 faf3 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <TIM6_DAC_IRQHandler+0xb4>
 8001d60:	2034      	movs	r0, #52	@ 0x34
 8001d62:	f000 f84d 	bl	8001e00 <Update_Buffer>
 8001d66:	e037      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP5_GPIO_Port, NP5_Pin))		Update_Buffer('5');
 8001d68:	2120      	movs	r1, #32
 8001d6a:	4823      	ldr	r0, [pc, #140]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001d6c:	f001 fae8 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <TIM6_DAC_IRQHandler+0xca>
 8001d76:	2035      	movs	r0, #53	@ 0x35
 8001d78:	f000 f842 	bl	8001e00 <Update_Buffer>
 8001d7c:	e02c      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP6_GPIO_Port, NP6_Pin))		Update_Buffer('6');
 8001d7e:	2140      	movs	r1, #64	@ 0x40
 8001d80:	481d      	ldr	r0, [pc, #116]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001d82:	f001 fadd 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <TIM6_DAC_IRQHandler+0xe0>
 8001d8c:	2036      	movs	r0, #54	@ 0x36
 8001d8e:	f000 f837 	bl	8001e00 <Update_Buffer>
 8001d92:	e021      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP7_GPIO_Port, NP7_Pin))		Update_Buffer('7');
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	4818      	ldr	r0, [pc, #96]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001d98:	f001 fad2 	bl	8003340 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <TIM6_DAC_IRQHandler+0xf6>
 8001da2:	2037      	movs	r0, #55	@ 0x37
 8001da4:	f000 f82c 	bl	8001e00 <Update_Buffer>
 8001da8:	e016      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP8_GPIO_Port, NP8_Pin))		Update_Buffer('8');
 8001daa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dae:	4812      	ldr	r0, [pc, #72]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001db0:	f001 fac6 	bl	8003340 <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <TIM6_DAC_IRQHandler+0x10e>
 8001dba:	2038      	movs	r0, #56	@ 0x38
 8001dbc:	f000 f820 	bl	8001e00 <Update_Buffer>
 8001dc0:	e00a      	b.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
	else if (!HAL_GPIO_ReadPin(NP9_GPIO_Port, NP9_Pin))		Update_Buffer('9');
 8001dc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dc6:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <TIM6_DAC_IRQHandler+0x144>)
 8001dc8:	f001 faba 	bl	8003340 <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <TIM6_DAC_IRQHandler+0x124>
 8001dd2:	2039      	movs	r0, #57	@ 0x39
 8001dd4:	f000 f814 	bl	8001e00 <Update_Buffer>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dd8:	4808      	ldr	r0, [pc, #32]	@ (8001dfc <TIM6_DAC_IRQHandler+0x148>)
 8001dda:	f003 fd43 	bl	8005864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000214 	.word	0x20000214
 8001de8:	20000428 	.word	0x20000428
 8001dec:	0800b7ac 	.word	0x0800b7ac
 8001df0:	20000438 	.word	0x20000438
 8001df4:	2000039c 	.word	0x2000039c
 8001df8:	48000800 	.word	0x48000800
 8001dfc:	20000350 	.word	0x20000350

08001e00 <Update_Buffer>:

/* USER CODE BEGIN 1 */
void Update_Buffer(char val) {
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
	if (idx < 3)
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <Update_Buffer+0x34>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d809      	bhi.n	8001e26 <Update_Buffer+0x26>
		buffer[idx++] = val;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <Update_Buffer+0x34>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	b2d1      	uxtb	r1, r2
 8001e1a:	4a06      	ldr	r2, [pc, #24]	@ (8001e34 <Update_Buffer+0x34>)
 8001e1c:	7011      	strb	r1, [r2, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <Update_Buffer+0x38>)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	5453      	strb	r3, [r2, r1]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000435 	.word	0x20000435
 8001e38:	20000430 	.word	0x20000430

08001e3c <Generate_Tone>:

void Generate_Tone(bool enable, ...) {
 8001e3c:	b40f      	push	{r0, r1, r2, r3}
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
	if (enable) {
 8001e44:	7c3b      	ldrb	r3, [r7, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d018      	beq.n	8001e7c <Generate_Tone+0x40>
		va_list arg_list;
		va_start(arg_list, enable);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	607b      	str	r3, [r7, #4]

		__HAL_TIM_SET_AUTORELOAD(&htim1, ENABLE_BEEP * 2);
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <Generate_Tone+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <Generate_Tone+0x64>)
 8001e5c:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001e60:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ENABLE_BEEP);
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <Generate_Tone+0x64>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34
		buzzer_length_counter = (uint16_t) va_arg(arg_list, int);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1d1a      	adds	r2, r3, #4
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <Generate_Tone+0x68>)
 8001e78:	801a      	strh	r2, [r3, #0]
	} else {
		__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	}
}
 8001e7a:	e00a      	b.n	8001e92 <Generate_Tone+0x56>
		__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <Generate_Tone+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <Generate_Tone+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001e8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <Generate_Tone+0x64>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	b004      	add	sp, #16
 8001e9e:	4770      	bx	lr
 8001ea0:	200002b8 	.word	0x200002b8
 8001ea4:	20000436 	.word	0x20000436

08001ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_kill>:

int _kill(int pid, int sig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec2:	f006 f9a5 	bl	8008210 <__errno>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2216      	movs	r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
  return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_exit>:

void _exit (int status)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ffe7 	bl	8001eb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <_exit+0x12>

08001eee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e00a      	b.n	8001f16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f00:	f3af 8000 	nop.w
 8001f04:	4601      	mov	r1, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	60ba      	str	r2, [r7, #8]
 8001f0c:	b2ca      	uxtb	r2, r1
 8001f0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf0      	blt.n	8001f00 <_read+0x12>
  }

  return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e009      	b.n	8001f4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf1      	blt.n	8001f3a <_write+0x12>
  }
  return len;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_close>:

int _close(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f88:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_isatty>:

int _isatty(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f006 f90a 	bl	8008210 <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20004000 	.word	0x20004000
 8002028:	00000400 	.word	0x00000400
 800202c:	2000046c 	.word	0x2000046c
 8002030:	200005c0 	.word	0x200005c0

08002034 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002090 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800205c:	f7ff ffea 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LoopForever+0x6>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <LoopForever+0xe>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	@ (80020a4 <LoopForever+0x16>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002086:	f006 f8c9 	bl	800821c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800208a:	f7ff f905 	bl	8001298 <main>

0800208e <LoopForever>:

LoopForever:
    b LoopForever
 800208e:	e7fe      	b.n	800208e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002090:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800209c:	0800bc28 	.word	0x0800bc28
  ldr r2, =_sbss
 80020a0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80020a4:	200005c0 	.word	0x200005c0

080020a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC1_IRQHandler>
	...

080020ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_Init+0x28>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_Init+0x28>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 ff8b 	bl	8002fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	200f      	movs	r0, #15
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff fbdc 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40022000 	.word	0x40022000

080020d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 ffa3 	bl	8003042 <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 ff6b 	bl	8002fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002118:	4a06      	ldr	r2, [pc, #24]	@ (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000010 	.word	0x20000010
 8002130:	20000018 	.word	0x20000018
 8002134:	20000014 	.word	0x20000014

08002138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000018 	.word	0x20000018
 800215c:	20000470 	.word	0x20000470

08002160 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;  
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000470 	.word	0x20000470

08002178 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff ffee 	bl	8002160 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d005      	beq.n	800219e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_Delay+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800219e:	bf00      	nop
 80021a0:	f7ff ffde 	bl	8002160 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d8f7      	bhi.n	80021a0 <HAL_Delay+0x28>
  {
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000018 	.word	0x20000018

080021c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b09a      	sub	sp, #104	@ 0x68
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e169      	b.n	80024b4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d176      	bne.n	80022e0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d152      	bne.n	80022a0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fb59 	bl	80018cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d13b      	bne.n	80022a0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fd9f 	bl	8002d6c <ADC_Disable>
 800222e:	4603      	mov	r3, r0
 8002230:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d12f      	bne.n	80022a0 <HAL_ADC_Init+0xe0>
 8002240:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12b      	bne.n	80022a0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002250:	f023 0302 	bic.w	r3, r3, #2
 8002254:	f043 0202 	orr.w	r2, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800226a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800227a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800227c:	4b8f      	ldr	r3, [pc, #572]	@ (80024bc <HAL_ADC_Init+0x2fc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a8f      	ldr	r2, [pc, #572]	@ (80024c0 <HAL_ADC_Init+0x300>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9a      	lsrs	r2, r3, #18
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002292:	e002      	b.n	800229a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3b01      	subs	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f9      	bne.n	8002294 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022bc:	d110      	bne.n	80022e0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f023 0312 	bic.w	r3, r3, #18
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 80d6 	bne.w	800249a <HAL_ADC_Init+0x2da>
 80022ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 80d1 	bne.w	800249a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80c9 	bne.w	800249a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002310:	f043 0202 	orr.w	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002318:	4b6a      	ldr	r3, [pc, #424]	@ (80024c4 <HAL_ADC_Init+0x304>)
 800231a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_ADC_Init+0x180>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_ADC_Init+0x180>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_ADC_Init+0x182>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11c      	bne.n	8002380 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002346:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d010      	beq.n	800236e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_ADC_Init+0x1a8>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_ADC_Init+0x1a8>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_ADC_Init+0x1aa>
 8002368:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800236e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	431a      	orrs	r2, r3
 800237c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800237e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e5b      	ldrb	r3, [r3, #25]
 8002384:	035b      	lsls	r3, r3, #13
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800238a:	2a01      	cmp	r2, #1
 800238c:	d002      	beq.n	8002394 <HAL_ADC_Init+0x1d4>
 800238e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002392:	e000      	b.n	8002396 <HAL_ADC_Init+0x1d6>
 8002394:	2200      	movs	r2, #0
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023a6:	4313      	orrs	r3, r2
 80023a8:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d11b      	bne.n	80023ec <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e5b      	ldrb	r3, [r3, #25]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	3b01      	subs	r3, #1
 80023c2:	045a      	lsls	r2, r3, #17
 80023c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ce:	e00d      	b.n	80023ec <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d007      	beq.n	8002404 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	4313      	orrs	r3, r2
 80023fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002400:	4313      	orrs	r3, r2
 8002402:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d114      	bne.n	800243c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002420:	f023 0302 	bic.w	r3, r3, #2
 8002424:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7e1b      	ldrb	r3, [r3, #24]
 800242a:	039a      	lsls	r2, r3, #14
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4313      	orrs	r3, r2
 8002436:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002438:	4313      	orrs	r3, r2
 800243a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <HAL_ADC_Init+0x308>)
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10c      	bne.n	8002472 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f023 010f 	bic.w	r1, r3, #15
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	1e5a      	subs	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002470:	e007      	b.n	8002482 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 020f 	bic.w	r2, r2, #15
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f023 0303 	bic.w	r3, r3, #3
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
 8002498:	e00a      	b.n	80024b0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f023 0312 	bic.w	r3, r3, #18
 80024a2:	f043 0210 	orr.w	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3768      	adds	r7, #104	@ 0x68
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000010 	.word	0x20000010
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	50000300 	.word	0x50000300
 80024c8:	fff0c007 	.word	0xfff0c007

080024cc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d158      	bne.n	8002598 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_Start+0x28>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e054      	b.n	800259e <HAL_ADC_Start+0xd2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fbd1 	bl	8002ca4 <ADC_Enable>
 8002502:	4603      	mov	r3, r0
 8002504:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d140      	bne.n	800258e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002542:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002556:	d106      	bne.n	8002566 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255c:	f023 0206 	bic.w	r2, r3, #6
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	645a      	str	r2, [r3, #68]	@ 0x44
 8002564:	e002      	b.n	800256c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	221c      	movs	r2, #28
 800257a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0204 	orr.w	r2, r2, #4
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	e006      	b.n	800259c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002596:	e001      	b.n	800259c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d102      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80025be:	2308      	movs	r3, #8
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e02e      	b.n	8002622 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c4:	4b56      	ldr	r3, [pc, #344]	@ (8002720 <HAL_ADC_PollForConversion+0x178>)
 80025c6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d112      	bne.n	80025fa <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d11d      	bne.n	800261e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f043 0220 	orr.w	r2, r3, #32
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e08d      	b.n	8002716 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f043 0220 	orr.w	r2, r3, #32
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07b      	b.n	8002716 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800261e:	230c      	movs	r3, #12
 8002620:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800262a:	f7ff fd99 	bl	8002160 <HAL_GetTick>
 800262e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002630:	e021      	b.n	8002676 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d01d      	beq.n	8002676 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_ADC_PollForConversion+0xa8>
 8002640:	f7ff fd8e 	bl	8002160 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d212      	bcs.n	8002676 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04f      	b.n	8002716 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0d6      	beq.n	8002632 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800269a:	2b00      	cmp	r3, #0
 800269c:	d131      	bne.n	8002702 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d12c      	bne.n	8002702 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d125      	bne.n	8002702 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d112      	bne.n	80026ea <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d112      	bne.n	8002702 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026e8:	e00b      	b.n	8002702 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	50000300 	.word	0x50000300

08002724 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002740:	b480      	push	{r7}
 8002742:	b09b      	sub	sp, #108	@ 0x6c
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x22>
 800275e:	2302      	movs	r3, #2
 8002760:	e295      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x54e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 8279 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b04      	cmp	r3, #4
 8002780:	d81c      	bhi.n	80027bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	461a      	mov	r2, r3
 8002796:	231f      	movs	r3, #31
 8002798:	4093      	lsls	r3, r2
 800279a:	43db      	mvns	r3, r3
 800279c:	4019      	ands	r1, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa00 f203 	lsl.w	r2, r0, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ba:	e063      	b.n	8002884 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d81e      	bhi.n	8002802 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	3b1e      	subs	r3, #30
 80027d8:	221f      	movs	r2, #31
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	4019      	ands	r1, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	3b1e      	subs	r3, #30
 80027f4:	fa00 f203 	lsl.w	r2, r0, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002800:	e040      	b.n	8002884 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b0e      	cmp	r3, #14
 8002808:	d81e      	bhi.n	8002848 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	3b3c      	subs	r3, #60	@ 0x3c
 800281e:	221f      	movs	r2, #31
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	4019      	ands	r1, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	3b3c      	subs	r3, #60	@ 0x3c
 800283a:	fa00 f203 	lsl.w	r2, r0, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38
 8002846:	e01d      	b.n	8002884 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	3b5a      	subs	r3, #90	@ 0x5a
 800285c:	221f      	movs	r2, #31
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	4019      	ands	r1, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	3b5a      	subs	r3, #90	@ 0x5a
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 80e5 	bne.w	8002a5e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b09      	cmp	r3, #9
 800289a:	d91c      	bls.n	80028d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6999      	ldr	r1, [r3, #24]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	3b1e      	subs	r3, #30
 80028ae:	2207      	movs	r2, #7
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6898      	ldr	r0, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	3b1e      	subs	r3, #30
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]
 80028d4:	e019      	b.n	800290a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6959      	ldr	r1, [r3, #20]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	2207      	movs	r2, #7
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4019      	ands	r1, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6898      	ldr	r0, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	08db      	lsrs	r3, r3, #3
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	3b01      	subs	r3, #1
 8002928:	2b03      	cmp	r3, #3
 800292a:	d84f      	bhi.n	80029cc <HAL_ADC_ConfigChannel+0x28c>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_ADC_ConfigChannel+0x1f4>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	08002967 	.word	0x08002967
 800293c:	08002989 	.word	0x08002989
 8002940:	080029ab 	.word	0x080029ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800294a:	4b97      	ldr	r3, [pc, #604]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x468>)
 800294c:	4013      	ands	r3, r2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	0691      	lsls	r1, r2, #26
 8002954:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002956:	430a      	orrs	r2, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002962:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002964:	e07b      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800296c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x468>)
 800296e:	4013      	ands	r3, r2
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	0691      	lsls	r1, r2, #26
 8002976:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002978:	430a      	orrs	r2, r1
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002984:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002986:	e06a      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800298e:	4b86      	ldr	r3, [pc, #536]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x468>)
 8002990:	4013      	ands	r3, r2
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	0691      	lsls	r1, r2, #26
 8002998:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800299a:	430a      	orrs	r2, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029a6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029a8:	e059      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80029b0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x468>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	0691      	lsls	r1, r2, #26
 80029ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029bc:	430a      	orrs	r2, r1
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029c8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029ca:	e048      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029ee:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	069b      	lsls	r3, r3, #26
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a12:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	069b      	lsls	r3, r3, #26
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a36:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	069b      	lsls	r3, r3, #26
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d107      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002a5c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x33e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x33e>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x340>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 80fe 	bne.w	8002c82 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d00f      	beq.n	8002aae <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002aac:	e049      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	409a      	lsls	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d91c      	bls.n	8002b0a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6999      	ldr	r1, [r3, #24]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b1b      	subs	r3, #27
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	4019      	ands	r1, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6898      	ldr	r0, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	3b1b      	subs	r3, #27
 8002afc:	fa00 f203 	lsl.w	r2, r0, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	619a      	str	r2, [r3, #24]
 8002b08:	e01b      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6959      	ldr	r1, [r3, #20]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	4019      	ands	r1, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6898      	ldr	r0, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b42:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <HAL_ADC_ConfigChannel+0x46c>)
 8002b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d014      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d105      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b72:	2b12      	cmp	r3, #18
 8002b74:	f040 8085 	bne.w	8002c82 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d17e      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10c      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x470>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x470>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e004      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x472>
 8002ba8:	83fff000 	.word	0x83fff000
 8002bac:	50000300 	.word	0x50000300
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d150      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d010      	beq.n	8002bde <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x498>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x498>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_ConfigChannel+0x49a>
 8002bd8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d13c      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d11d      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4e2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bee:	d118      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bfa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfc:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <HAL_ADC_ConfigChannel+0x55c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a27      	ldr	r2, [pc, #156]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x560>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0c9a      	lsrs	r2, r3, #18
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c20:	e02e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d10b      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x502>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c32:	d106      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c40:	e01e      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d11a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c54:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c56:	e013      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c6a:	e00a      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002c7e:	e000      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c80:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	376c      	adds	r7, #108	@ 0x6c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d108      	bne.n	8002cd0 <ADC_Enable+0x2c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <ADC_Enable+0x2c>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <ADC_Enable+0x2e>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d143      	bne.n	8002d5e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b22      	ldr	r3, [pc, #136]	@ (8002d68 <ADC_Enable+0xc4>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f043 0210 	orr.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e02f      	b.n	8002d60 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002d10:	f7ff fa26 	bl	8002160 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d16:	e01b      	b.n	8002d50 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d18:	f7ff fa22 	bl	8002160 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d914      	bls.n	8002d50 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d00d      	beq.n	8002d50 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0210 	orr.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d1dc      	bne.n	8002d18 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	8000003f 	.word	0x8000003f

08002d6c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <ADC_Disable+0x2c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <ADC_Disable+0x2c>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <ADC_Disable+0x2e>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d047      	beq.n	8002e2e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030d 	and.w	r3, r3, #13
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d10f      	bne.n	8002dcc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0202 	orr.w	r2, r2, #2
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002dc4:	f7ff f9cc 	bl	8002160 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dca:	e029      	b.n	8002e20 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e023      	b.n	8002e30 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002de8:	f7ff f9ba 	bl	8002160 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d914      	bls.n	8002e20 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10d      	bne.n	8002e20 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	f043 0210 	orr.w	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e007      	b.n	8002e30 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d0dc      	beq.n	8002de8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6a:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60d3      	str	r3, [r2, #12]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e84:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <__NVIC_GetPriorityGrouping+0x18>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	f003 0307 	and.w	r3, r3, #7
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db0b      	blt.n	8002ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	4907      	ldr	r1, [pc, #28]	@ (8002ed4 <__NVIC_EnableIRQ+0x38>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	@ (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	@ (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa4:	d301      	bcc.n	8002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002faa:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	f7ff ff8e 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff29 	bl	8002e38 <__NVIC_SetPriorityGrouping>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003000:	f7ff ff3e 	bl	8002e80 <__NVIC_GetPriorityGrouping>
 8003004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff ff8e 	bl	8002f2c <NVIC_EncodePriority>
 8003010:	4602      	mov	r2, r0
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff5d 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff31 	bl	8002e9c <__NVIC_EnableIRQ>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffa2 	bl	8002f94 <SysTick_Config>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306a:	e14e      	b.n	800330a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8140 	beq.w	8003304 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d005      	beq.n	800309c <HAL_GPIO_Init+0x40>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d130      	bne.n	80030fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d2:	2201      	movs	r2, #1
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 0201 	and.w	r2, r3, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b03      	cmp	r3, #3
 8003108:	d017      	beq.n	800313a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d123      	bne.n	800318e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	08da      	lsrs	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3208      	adds	r2, #8
 8003188:	6939      	ldr	r1, [r7, #16]
 800318a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0203 	and.w	r2, r3, #3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 809a 	beq.w	8003304 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d0:	4b55      	ldr	r3, [pc, #340]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4a54      	ldr	r2, [pc, #336]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6193      	str	r3, [r2, #24]
 80031dc:	4b52      	ldr	r3, [pc, #328]	@ (8003328 <HAL_GPIO_Init+0x2cc>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031e8:	4a50      	ldr	r2, [pc, #320]	@ (800332c <HAL_GPIO_Init+0x2d0>)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	3302      	adds	r3, #2
 80031f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003212:	d013      	beq.n	800323c <HAL_GPIO_Init+0x1e0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a46      	ldr	r2, [pc, #280]	@ (8003330 <HAL_GPIO_Init+0x2d4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00d      	beq.n	8003238 <HAL_GPIO_Init+0x1dc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a45      	ldr	r2, [pc, #276]	@ (8003334 <HAL_GPIO_Init+0x2d8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <HAL_GPIO_Init+0x1d8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a44      	ldr	r2, [pc, #272]	@ (8003338 <HAL_GPIO_Init+0x2dc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_GPIO_Init+0x1d4>
 800322c:	2303      	movs	r3, #3
 800322e:	e006      	b.n	800323e <HAL_GPIO_Init+0x1e2>
 8003230:	2305      	movs	r3, #5
 8003232:	e004      	b.n	800323e <HAL_GPIO_Init+0x1e2>
 8003234:	2302      	movs	r3, #2
 8003236:	e002      	b.n	800323e <HAL_GPIO_Init+0x1e2>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_GPIO_Init+0x1e2>
 800323c:	2300      	movs	r3, #0
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	f002 0203 	and.w	r2, r2, #3
 8003244:	0092      	lsls	r2, r2, #2
 8003246:	4093      	lsls	r3, r2
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800324e:	4937      	ldr	r1, [pc, #220]	@ (800332c <HAL_GPIO_Init+0x2d0>)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3302      	adds	r3, #2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325c:	4b37      	ldr	r3, [pc, #220]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	43db      	mvns	r3, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003280:	4a2e      	ldr	r2, [pc, #184]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003286:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43db      	mvns	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032aa:	4a24      	ldr	r2, [pc, #144]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032b0:	4b22      	ldr	r3, [pc, #136]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032d4:	4a19      	ldr	r2, [pc, #100]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032da:	4b18      	ldr	r3, [pc, #96]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032fe:	4a0f      	ldr	r2, [pc, #60]	@ (800333c <HAL_GPIO_Init+0x2e0>)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3301      	adds	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	f47f aea9 	bne.w	800306c <HAL_GPIO_Init+0x10>
  }
}
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000
 8003330:	48000400 	.word	0x48000400
 8003334:	48000800 	.word	0x48000800
 8003338:	48000c00 	.word	0x48000c00
 800333c:	40010400 	.word	0x40010400

08003340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e001      	b.n	8003362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
 800337c:	4613      	mov	r3, r2
 800337e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003380:	787b      	ldrb	r3, [r7, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800338c:	e002      	b.n	8003394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033b6:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f806 	bl	80033d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40010400 	.word	0x40010400

080033d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e08d      	b.n	8003514 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7fe fa99 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2224      	movs	r2, #36	@ 0x24
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003436:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003446:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	e006      	b.n	800346e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800346c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d108      	bne.n	8003488 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	e007      	b.n	8003498 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003496:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034aa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69d9      	ldr	r1, [r3, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	f040 80fd 	bne.w	8003738 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_I2C_Master_Transmit+0x30>
 8003548:	2302      	movs	r3, #2
 800354a:	e0f6      	b.n	800373a <HAL_I2C_Master_Transmit+0x21e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003554:	f7fe fe04 	bl	8002160 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2319      	movs	r3, #25
 8003560:	2201      	movs	r2, #1
 8003562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f914 	bl	8003794 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0e1      	b.n	800373a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	@ 0x21
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2210      	movs	r2, #16
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	893a      	ldrh	r2, [r7, #8]
 8003596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2bff      	cmp	r3, #255	@ 0xff
 80035a6:	d906      	bls.n	80035b6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	22ff      	movs	r2, #255	@ 0xff
 80035ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80035ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e007      	b.n	80035c6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80035c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d024      	beq.n	8003618 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	8979      	ldrh	r1, [r7, #10]
 800360a:	4b4e      	ldr	r3, [pc, #312]	@ (8003744 <HAL_I2C_Master_Transmit+0x228>)
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fa83 	bl	8003b1c <I2C_TransferConfig>
 8003616:	e066      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361c:	b2da      	uxtb	r2, r3
 800361e:	8979      	ldrh	r1, [r7, #10]
 8003620:	4b48      	ldr	r3, [pc, #288]	@ (8003744 <HAL_I2C_Master_Transmit+0x228>)
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fa78 	bl	8003b1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800362c:	e05b      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f907 	bl	8003846 <I2C_WaitOnTXISFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07b      	b.n	800373a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d034      	beq.n	80036e6 <HAL_I2C_Master_Transmit+0x1ca>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d130      	bne.n	80036e6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2200      	movs	r2, #0
 800368c:	2180      	movs	r1, #128	@ 0x80
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f880 	bl	8003794 <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e04d      	b.n	800373a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2bff      	cmp	r3, #255	@ 0xff
 80036a6:	d90e      	bls.n	80036c6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	22ff      	movs	r2, #255	@ 0xff
 80036ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	8979      	ldrh	r1, [r7, #10]
 80036b6:	2300      	movs	r3, #0
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa2c 	bl	8003b1c <I2C_TransferConfig>
 80036c4:	e00f      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8979      	ldrh	r1, [r7, #10]
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa1b 	bl	8003b1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d19e      	bne.n	800362e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	6a39      	ldr	r1, [r7, #32]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f8ed 	bl	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e01a      	b.n	800373a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2220      	movs	r2, #32
 800370a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <HAL_I2C_Master_Transmit+0x22c>)
 8003718:	400b      	ands	r3, r1
 800371a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	80002000 	.word	0x80002000
 8003748:	fe00e800 	.word	0xfe00e800

0800374c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d103      	bne.n	800376a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2200      	movs	r2, #0
 8003768:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d007      	beq.n	8003788 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	619a      	str	r2, [r3, #24]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a4:	e03b      	b.n	800381e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	6839      	ldr	r1, [r7, #0]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f8d6 	bl	800395c <I2C_IsErrorOccurred>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e041      	b.n	800383e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d02d      	beq.n	800381e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fe fccd 	bl	8002160 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d122      	bne.n	800381e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d113      	bne.n	800381e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e00f      	b.n	800383e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	429a      	cmp	r2, r3
 800383a:	d0b4      	beq.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003852:	e033      	b.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f87f 	bl	800395c <I2C_IsErrorOccurred>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e031      	b.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d025      	beq.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003870:	f7fe fc76 	bl	8002160 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11a      	bne.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d013      	beq.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e007      	b.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d1c4      	bne.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e0:	e02f      	b.n	8003942 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f838 	bl	800395c <I2C_IsErrorOccurred>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e02d      	b.n	8003952 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7fe fc33 	bl	8002160 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11a      	bne.n	8003942 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b20      	cmp	r3, #32
 8003918:	d013      	beq.n	8003942 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b20      	cmp	r3, #32
 800394e:	d1c8      	bne.n	80038e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	@ 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d068      	beq.n	8003a5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003990:	e049      	b.n	8003a26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d045      	beq.n	8003a26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe fbe1 	bl	8002160 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_IsErrorOccurred+0x54>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d13a      	bne.n	8003a26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d2:	d121      	bne.n	8003a18 <I2C_IsErrorOccurred+0xbc>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039da:	d01d      	beq.n	8003a18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d01a      	beq.n	8003a18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039f2:	f7fe fbb5 	bl	8002160 <HAL_GetTick>
 80039f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f8:	e00e      	b.n	8003a18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039fa:	f7fe fbb1 	bl	8002160 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b19      	cmp	r3, #25
 8003a06:	d907      	bls.n	8003a18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f043 0320 	orr.w	r3, r3, #32
 8003a0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a16:	e006      	b.n	8003a26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d1e9      	bne.n	80039fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d003      	beq.n	8003a3c <I2C_IsErrorOccurred+0xe0>
 8003a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0aa      	beq.n	8003992 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f043 0304 	orr.w	r3, r3, #4
 8003a52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01c      	beq.n	8003b0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff fe3b 	bl	800374c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <I2C_IsErrorOccurred+0x1bc>)
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3728      	adds	r7, #40	@ 0x28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	fe00e800 	.word	0xfe00e800

08003b1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	817b      	strh	r3, [r7, #10]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b2e:	897b      	ldrh	r3, [r7, #10]
 8003b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b34:	7a7b      	ldrb	r3, [r7, #9]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	0d5b      	lsrs	r3, r3, #21
 8003b56:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b5a:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <I2C_TransferConfig+0x60>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	ea02 0103 	and.w	r1, r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	03ff63ff 	.word	0x03ff63ff

08003b80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d138      	bne.n	8003c08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e032      	b.n	8003c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	@ 0x24
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6819      	ldr	r1, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d139      	bne.n	8003ca0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e033      	b.n	8003ca2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2224      	movs	r2, #36	@ 0x24
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e000      	b.n	8003ca2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cc0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f001 b823 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 817d 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cec:	4bbc      	ldr	r3, [pc, #752]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d00c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cf8:	4bb9      	ldr	r3, [pc, #740]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d15c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x10e>
 8003d04:	4bb6      	ldr	r3, [pc, #728]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d155      	bne.n	8003dbe <HAL_RCC_OscConfig+0x10e>
 8003d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d16:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_OscConfig+0x94>
 8003d3e:	4ba8      	ldr	r3, [pc, #672]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e015      	b.n	8003d70 <HAL_RCC_OscConfig+0xc0>
 8003d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d48:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003d58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d5c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003d60:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d74:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003d78:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003d7c:	fa92 f2a2 	rbit	r2, r2
 8003d80:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003d84:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003d88:	fab2 f282 	clz	r2, r2
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	f042 0220 	orr.w	r2, r2, #32
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	f002 021f 	and.w	r2, r2, #31
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 811f 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x334>
 8003da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003daa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 8116 	bne.w	8003fe4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f000 bfaf 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x12e>
 8003dd0:	4b83      	ldr	r3, [pc, #524]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a82      	ldr	r2, [pc, #520]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e036      	b.n	8003e4c <HAL_RCC_OscConfig+0x19c>
 8003dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x158>
 8003dee:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7b      	ldr	r2, [pc, #492]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b79      	ldr	r3, [pc, #484]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a78      	ldr	r2, [pc, #480]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e021      	b.n	8003e4c <HAL_RCC_OscConfig+0x19c>
 8003e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x184>
 8003e1a:	4b71      	ldr	r3, [pc, #452]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a70      	ldr	r2, [pc, #448]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b6e      	ldr	r3, [pc, #440]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0x19c>
 8003e34:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a69      	ldr	r2, [pc, #420]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b67      	ldr	r3, [pc, #412]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a66      	ldr	r2, [pc, #408]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e4c:	4b64      	ldr	r3, [pc, #400]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	f023 020f 	bic.w	r2, r3, #15
 8003e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	495f      	ldr	r1, [pc, #380]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d059      	beq.n	8003f2a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe f973 	bl	8002160 <HAL_GetTick>
 8003e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe f96e 	bl	8002160 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	@ 0x64
 8003e8e:	d902      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	f000 bf43 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
 8003e96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e9a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003eaa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x218>
 8003ec2:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	e015      	b.n	8003ef4 <HAL_RCC_OscConfig+0x244>
 8003ec8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ecc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003edc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ee0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003ee4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ef8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003efc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003f00:	fa92 f2a2 	rbit	r2, r2
 8003f04:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003f08:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003f0c:	fab2 f282 	clz	r2, r2
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	f042 0220 	orr.w	r2, r2, #32
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f002 021f 	and.w	r2, r2, #31
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ab      	beq.n	8003e80 <HAL_RCC_OscConfig+0x1d0>
 8003f28:	e05d      	b.n	8003fe6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fe f919 	bl	8002160 <HAL_GetTick>
 8003f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fe f914 	bl	8002160 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	@ 0x64
 8003f42:	d902      	bls.n	8003f4a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	f000 bee9 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
 8003f4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f4e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003f5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d102      	bne.n	8003f7c <HAL_RCC_OscConfig+0x2cc>
 8003f76:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	e015      	b.n	8003fa8 <HAL_RCC_OscConfig+0x2f8>
 8003f7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f80:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f94:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f98:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe0 <HAL_RCC_OscConfig+0x330>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fac:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003fb0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003fb4:	fa92 f2a2 	rbit	r2, r2
 8003fb8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003fbc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003fc0:	fab2 f282 	clz	r2, r2
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f042 0220 	orr.w	r2, r2, #32
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	f002 021f 	and.w	r2, r2, #31
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ab      	bne.n	8003f34 <HAL_RCC_OscConfig+0x284>
 8003fdc:	e003      	b.n	8003fe6 <HAL_RCC_OscConfig+0x336>
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 817d 	beq.w	80042f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ffc:	4ba6      	ldr	r3, [pc, #664]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004008:	4ba3      	ldr	r3, [pc, #652]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d172      	bne.n	80040fa <HAL_RCC_OscConfig+0x44a>
 8004014:	4ba0      	ldr	r3, [pc, #640]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d16c      	bne.n	80040fa <HAL_RCC_OscConfig+0x44a>
 8004020:	2302      	movs	r3, #2
 8004022:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004032:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <HAL_RCC_OscConfig+0x3a0>
 800404a:	4b93      	ldr	r3, [pc, #588]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	e013      	b.n	8004078 <HAL_RCC_OscConfig+0x3c8>
 8004050:	2302      	movs	r3, #2
 8004052:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004062:	2302      	movs	r3, #2
 8004064:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004068:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004074:	4b88      	ldr	r3, [pc, #544]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	2202      	movs	r2, #2
 800407a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800407e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004082:	fa92 f2a2 	rbit	r2, r2
 8004086:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800408a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f042 0220 	orr.w	r2, r2, #32
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f002 021f 	and.w	r2, r2, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCC_OscConfig+0x410>
 80040aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d002      	beq.n	80040c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f000 be2e 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b75      	ldr	r3, [pc, #468]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	21f8      	movs	r1, #248	@ 0xf8
 80040d6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80040de:	fa91 f1a1 	rbit	r1, r1
 80040e2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80040e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80040ea:	fab1 f181 	clz	r1, r1
 80040ee:	b2c9      	uxtb	r1, r1
 80040f0:	408b      	lsls	r3, r1
 80040f2:	4969      	ldr	r1, [pc, #420]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f8:	e0fd      	b.n	80042f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8088 	beq.w	800421c <HAL_RCC_OscConfig+0x56c>
 800410c:	2301      	movs	r3, #1
 800410e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800411e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800412c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	461a      	mov	r2, r3
 8004134:	2301      	movs	r3, #1
 8004136:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe f812 	bl	8002160 <HAL_GetTick>
 800413c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004142:	f7fe f80d 	bl	8002160 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d902      	bls.n	8004158 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	f000 bde2 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004158:	2302      	movs	r3, #2
 800415a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800416a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_RCC_OscConfig+0x4d8>
 8004182:	4b45      	ldr	r3, [pc, #276]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e013      	b.n	80041b0 <HAL_RCC_OscConfig+0x500>
 8004188:	2302      	movs	r3, #2
 800418a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800419a:	2302      	movs	r3, #2
 800419c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80041a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80041ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	2202      	movs	r2, #2
 80041b2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80041b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80041ba:	fa92 f2a2 	rbit	r2, r2
 80041be:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80041c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80041c6:	fab2 f282 	clz	r2, r2
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	f042 0220 	orr.w	r2, r2, #32
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f002 021f 	and.w	r2, r2, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f202 	lsl.w	r2, r1, r2
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0af      	beq.n	8004142 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	21f8      	movs	r1, #248	@ 0xf8
 80041f8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004200:	fa91 f1a1 	rbit	r1, r1
 8004204:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004208:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800420c:	fab1 f181 	clz	r1, r1
 8004210:	b2c9      	uxtb	r1, r1
 8004212:	408b      	lsls	r3, r1
 8004214:	4920      	ldr	r1, [pc, #128]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
 800421a:	e06c      	b.n	80042f6 <HAL_RCC_OscConfig+0x646>
 800421c:	2301      	movs	r3, #1
 800421e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800422e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800423c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	461a      	mov	r2, r3
 8004244:	2300      	movs	r3, #0
 8004246:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd ff8a 	bl	8002160 <HAL_GetTick>
 800424c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004252:	f7fd ff85 	bl	8002160 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d902      	bls.n	8004268 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	f000 bd5a 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004268:	2302      	movs	r3, #2
 800426a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800427a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d104      	bne.n	800429c <HAL_RCC_OscConfig+0x5ec>
 8004292:	4b01      	ldr	r3, [pc, #4]	@ (8004298 <HAL_RCC_OscConfig+0x5e8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	e015      	b.n	80042c4 <HAL_RCC_OscConfig+0x614>
 8004298:	40021000 	.word	0x40021000
 800429c:	2302      	movs	r3, #2
 800429e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80042ae:	2302      	movs	r3, #2
 80042b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80042b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80042c0:	4bc8      	ldr	r3, [pc, #800]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	2202      	movs	r2, #2
 80042c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80042ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80042ce:	fa92 f2a2 	rbit	r2, r2
 80042d2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80042d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80042da:	fab2 f282 	clz	r2, r2
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f042 0220 	orr.w	r2, r2, #32
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f002 021f 	and.w	r2, r2, #31
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ad      	bne.n	8004252 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8110 	beq.w	800452c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800430c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004310:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d079      	beq.n	8004410 <HAL_RCC_OscConfig+0x760>
 800431c:	2301      	movs	r3, #1
 800431e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004326:	fa93 f3a3 	rbit	r3, r3
 800432a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800432e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	4bab      	ldr	r3, [pc, #684]	@ (80045e8 <HAL_RCC_OscConfig+0x938>)
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	461a      	mov	r2, r3
 8004342:	2301      	movs	r3, #1
 8004344:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fd ff0b 	bl	8002160 <HAL_GetTick>
 800434a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	e00a      	b.n	8004366 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004350:	f7fd ff06 	bl	8002160 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d902      	bls.n	8004366 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	f000 bcdb 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004366:	2302      	movs	r3, #2
 8004368:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004380:	2202      	movs	r2, #2
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004388:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	fa93 f2a3 	rbit	r2, r3
 8004392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043a4:	2202      	movs	r2, #2
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	fa93 f2a3 	rbit	r2, r3
 80043b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80043be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c0:	4b88      	ldr	r3, [pc, #544]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 80043c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80043cc:	2102      	movs	r1, #2
 80043ce:	6019      	str	r1, [r3, #0]
 80043d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	fa93 f1a3 	rbit	r1, r3
 80043de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80043e6:	6019      	str	r1, [r3, #0]
  return result;
 80043e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2101      	movs	r1, #1
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0a0      	beq.n	8004350 <HAL_RCC_OscConfig+0x6a0>
 800440e:	e08d      	b.n	800452c <HAL_RCC_OscConfig+0x87c>
 8004410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004414:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004420:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	fa93 f2a3 	rbit	r2, r3
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004432:	601a      	str	r2, [r3, #0]
  return result;
 8004434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004438:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800443c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	4b68      	ldr	r3, [pc, #416]	@ (80045e8 <HAL_RCC_OscConfig+0x938>)
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	461a      	mov	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004452:	f7fd fe85 	bl	8002160 <HAL_GetTick>
 8004456:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445a:	e00a      	b.n	8004472 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445c:	f7fd fe80 	bl	8002160 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d902      	bls.n	8004472 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	f000 bc55 	b.w	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004476:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800447a:	2202      	movs	r2, #2
 800447c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004482:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	fa93 f2a3 	rbit	r2, r3
 800448c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004490:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800449e:	2202      	movs	r2, #2
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	fa93 f2a3 	rbit	r2, r3
 80044b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80044c2:	2202      	movs	r2, #2
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	fa93 f2a3 	rbit	r2, r3
 80044d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80044dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044de:	4b41      	ldr	r3, [pc, #260]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 80044e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80044ea:	2102      	movs	r1, #2
 80044ec:	6019      	str	r1, [r3, #0]
 80044ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	fa93 f1a3 	rbit	r1, r3
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004504:	6019      	str	r1, [r3, #0]
  return result;
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2101      	movs	r1, #1
 8004522:	fa01 f303 	lsl.w	r3, r1, r3
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d197      	bne.n	800445c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 81a1 	beq.w	8004884 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004548:	4b26      	ldr	r3, [pc, #152]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b23      	ldr	r3, [pc, #140]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455e:	61d3      	str	r3, [r2, #28]
 8004560:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004576:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800457a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004582:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <HAL_RCC_OscConfig+0x93c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11a      	bne.n	80045c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458e:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <HAL_RCC_OscConfig+0x93c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a16      	ldr	r2, [pc, #88]	@ (80045ec <HAL_RCC_OscConfig+0x93c>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004598:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7fd fde1 	bl	8002160 <HAL_GetTick>
 800459e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	e009      	b.n	80045b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fd fddc 	bl	8002160 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	@ 0x64
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e3b1      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <HAL_RCC_OscConfig+0x93c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ef      	beq.n	80045a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCC_OscConfig+0x940>
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4a02      	ldr	r2, [pc, #8]	@ (80045e4 <HAL_RCC_OscConfig+0x934>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6213      	str	r3, [r2, #32]
 80045e0:	e03c      	b.n	800465c <HAL_RCC_OscConfig+0x9ac>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	10908120 	.word	0x10908120
 80045ec:	40007000 	.word	0x40007000
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <HAL_RCC_OscConfig+0x96a>
 8004600:	4bc1      	ldr	r3, [pc, #772]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4ac0      	ldr	r2, [pc, #768]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	4bbe      	ldr	r3, [pc, #760]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	4abd      	ldr	r2, [pc, #756]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004612:	f023 0304 	bic.w	r3, r3, #4
 8004616:	6213      	str	r3, [r2, #32]
 8004618:	e020      	b.n	800465c <HAL_RCC_OscConfig+0x9ac>
 800461a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x994>
 800462a:	4bb7      	ldr	r3, [pc, #732]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4ab6      	ldr	r2, [pc, #728]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6213      	str	r3, [r2, #32]
 8004636:	4bb4      	ldr	r3, [pc, #720]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	4ab3      	ldr	r2, [pc, #716]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6213      	str	r3, [r2, #32]
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0x9ac>
 8004644:	4bb0      	ldr	r3, [pc, #704]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4aaf      	ldr	r2, [pc, #700]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	4bad      	ldr	r3, [pc, #692]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	4aac      	ldr	r2, [pc, #688]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004656:	f023 0304 	bic.w	r3, r3, #4
 800465a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800465c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004660:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8081 	beq.w	8004770 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466e:	f7fd fd77 	bl	8002160 <HAL_GetTick>
 8004672:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd fd72 	bl	8002160 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e345      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004694:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004698:	2202      	movs	r2, #2
 800469a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f2a3 	rbit	r2, r3
 80046aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80046bc:	2202      	movs	r2, #2
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	fa93 f2a3 	rbit	r2, r3
 80046ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80046d6:	601a      	str	r2, [r3, #0]
  return result;
 80046d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80046e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d102      	bne.n	80046fc <HAL_RCC_OscConfig+0xa4c>
 80046f6:	4b84      	ldr	r3, [pc, #528]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	e013      	b.n	8004724 <HAL_RCC_OscConfig+0xa74>
 80046fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004700:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004704:	2202      	movs	r2, #2
 8004706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	fa93 f2a3 	rbit	r2, r3
 8004716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	4b79      	ldr	r3, [pc, #484]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004728:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800472c:	2102      	movs	r1, #2
 800472e:	6011      	str	r1, [r2, #0]
 8004730:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004734:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	fa92 f1a2 	rbit	r1, r2
 800473e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004742:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004746:	6011      	str	r1, [r2, #0]
  return result;
 8004748:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800474c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	fab2 f282 	clz	r2, r2
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	f002 021f 	and.w	r2, r2, #31
 8004762:	2101      	movs	r1, #1
 8004764:	fa01 f202 	lsl.w	r2, r1, r2
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d084      	beq.n	8004678 <HAL_RCC_OscConfig+0x9c8>
 800476e:	e07f      	b.n	8004870 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004770:	f7fd fcf6 	bl	8002160 <HAL_GetTick>
 8004774:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	e00b      	b.n	8004792 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fd fcf1 	bl	8002160 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e2c4      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004796:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800479a:	2202      	movs	r2, #2
 800479c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	fa93 f2a3 	rbit	r2, r3
 80047ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80047be:	2202      	movs	r2, #2
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fa93 f2a3 	rbit	r2, r3
 80047d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80047d8:	601a      	str	r2, [r3, #0]
  return result;
 80047da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047de:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80047e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f043 0302 	orr.w	r3, r3, #2
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d102      	bne.n	80047fe <HAL_RCC_OscConfig+0xb4e>
 80047f8:	4b43      	ldr	r3, [pc, #268]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	e013      	b.n	8004826 <HAL_RCC_OscConfig+0xb76>
 80047fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004802:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004806:	2202      	movs	r2, #2
 8004808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	fa93 f2a3 	rbit	r2, r3
 8004818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	4b39      	ldr	r3, [pc, #228]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800482a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800482e:	2102      	movs	r1, #2
 8004830:	6011      	str	r1, [r2, #0]
 8004832:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004836:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	fa92 f1a2 	rbit	r1, r2
 8004840:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004844:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004848:	6011      	str	r1, [r2, #0]
  return result;
 800484a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800484e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	fab2 f282 	clz	r2, r2
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	f002 021f 	and.w	r2, r2, #31
 8004864:	2101      	movs	r1, #1
 8004866:	fa01 f202 	lsl.w	r2, r1, r2
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d184      	bne.n	800477a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004870:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004878:	4b23      	ldr	r3, [pc, #140]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4a22      	ldr	r2, [pc, #136]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 800487e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004882:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004888:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8242 	beq.w	8004d1a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004896:	4b1c      	ldr	r3, [pc, #112]	@ (8004908 <HAL_RCC_OscConfig+0xc58>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b08      	cmp	r3, #8
 80048a0:	f000 8213 	beq.w	8004cca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	f040 8162 	bne.w	8004b7a <HAL_RCC_OscConfig+0xeca>
 80048b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ba:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80048be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	fa93 f2a3 	rbit	r2, r3
 80048d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80048da:	601a      	str	r2, [r3, #0]
  return result;
 80048dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80048e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80048f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	461a      	mov	r2, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd fc30 	bl	8002160 <HAL_GetTick>
 8004900:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004904:	e00c      	b.n	8004920 <HAL_RCC_OscConfig+0xc70>
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fc28 	bl	8002160 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1fd      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004924:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004928:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800492c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004932:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	fa93 f2a3 	rbit	r2, r3
 800493c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004940:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004944:	601a      	str	r2, [r3, #0]
  return result;
 8004946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800494a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800494e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_RCC_OscConfig+0xcba>
 8004964:	4bb0      	ldr	r3, [pc, #704]	@ (8004c28 <HAL_RCC_OscConfig+0xf78>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	e027      	b.n	80049ba <HAL_RCC_OscConfig+0xd0a>
 800496a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004972:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800497c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	fa93 f2a3 	rbit	r2, r3
 8004986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800498a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004994:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004998:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	fa93 f2a3 	rbit	r2, r3
 80049ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c28 <HAL_RCC_OscConfig+0xf78>)
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049be:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80049c2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80049c6:	6011      	str	r1, [r2, #0]
 80049c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049cc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	fa92 f1a2 	rbit	r1, r2
 80049d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049da:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80049de:	6011      	str	r1, [r2, #0]
  return result;
 80049e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049e4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	fab2 f282 	clz	r2, r2
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	f042 0220 	orr.w	r2, r2, #32
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	f002 021f 	and.w	r2, r2, #31
 80049fa:	2101      	movs	r1, #1
 80049fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d182      	bne.n	800490c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a06:	4b88      	ldr	r3, [pc, #544]	@ (8004c28 <HAL_RCC_OscConfig+0xf78>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	430b      	orrs	r3, r1
 8004a28:	497f      	ldr	r1, [pc, #508]	@ (8004c28 <HAL_RCC_OscConfig+0xf78>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
 8004a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a32:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004a36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a40:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	fa93 f2a3 	rbit	r2, r3
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004a52:	601a      	str	r2, [r3, #0]
  return result;
 8004a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a58:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004a5c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2301      	movs	r3, #1
 8004a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd fb74 	bl	8002160 <HAL_GetTick>
 8004a78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a7c:	e009      	b.n	8004a92 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fd fb6f 	bl	8002160 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e144      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a96:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	fa93 f2a3 	rbit	r2, r3
 8004aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004ab6:	601a      	str	r2, [r3, #0]
  return result;
 8004ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004abc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ac2:	fab3 f383 	clz	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d102      	bne.n	8004adc <HAL_RCC_OscConfig+0xe2c>
 8004ad6:	4b54      	ldr	r3, [pc, #336]	@ (8004c28 <HAL_RCC_OscConfig+0xf78>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	e027      	b.n	8004b2c <HAL_RCC_OscConfig+0xe7c>
 8004adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004ae4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	fa93 f2a3 	rbit	r2, r3
 8004af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b06:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004b0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b14:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	fa93 f2a3 	rbit	r2, r3
 8004b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b22:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	4b3f      	ldr	r3, [pc, #252]	@ (8004c28 <HAL_RCC_OscConfig+0xf78>)
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b30:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004b34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b3e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	fa92 f1a2 	rbit	r1, r2
 8004b48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b4c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004b50:	6011      	str	r1, [r2, #0]
  return result;
 8004b52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b56:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	fab2 f282 	clz	r2, r2
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	f042 0220 	orr.w	r2, r2, #32
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	f002 021f 	and.w	r2, r2, #31
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d082      	beq.n	8004a7e <HAL_RCC_OscConfig+0xdce>
 8004b78:	e0cf      	b.n	8004d1a <HAL_RCC_OscConfig+0x106a>
 8004b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b7e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b8c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	fa93 f2a3 	rbit	r2, r3
 8004b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b9e:	601a      	str	r2, [r3, #0]
  return result;
 8004ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004ba8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004bb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fd face 	bl	8002160 <HAL_GetTick>
 8004bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc8:	e009      	b.n	8004bde <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fd fac9 	bl	8002160 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e09e      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
 8004bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004be6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	fa93 f2a3 	rbit	r2, r3
 8004bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bfe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004c02:	601a      	str	r2, [r3, #0]
  return result;
 8004c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c08:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004c0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d104      	bne.n	8004c2c <HAL_RCC_OscConfig+0xf7c>
 8004c22:	4b01      	ldr	r3, [pc, #4]	@ (8004c28 <HAL_RCC_OscConfig+0xf78>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	e029      	b.n	8004c7c <HAL_RCC_OscConfig+0xfcc>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c30:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004c34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	fa93 f2a3 	rbit	r2, r3
 8004c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c4c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c56:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004c5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c64:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	fa93 f2a3 	rbit	r2, r3
 8004c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c72:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	4b2b      	ldr	r3, [pc, #172]	@ (8004d28 <HAL_RCC_OscConfig+0x1078>)
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c80:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c8e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	fa92 f1a2 	rbit	r1, r2
 8004c98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c9c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004ca0:	6011      	str	r1, [r2, #0]
  return result;
 8004ca2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ca6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	fab2 f282 	clz	r2, r2
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	f042 0220 	orr.w	r2, r2, #32
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	f002 021f 	and.w	r2, r2, #31
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d180      	bne.n	8004bca <HAL_RCC_OscConfig+0xf1a>
 8004cc8:	e027      	b.n	8004d1a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e01e      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cde:	4b12      	ldr	r3, [pc, #72]	@ (8004d28 <HAL_RCC_OscConfig+0x1078>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ce6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004cea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004cfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004d02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d001      	beq.n	8004d1a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000

08004d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b09e      	sub	sp, #120	@ 0x78
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e162      	b.n	800500a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d44:	4b90      	ldr	r3, [pc, #576]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d910      	bls.n	8004d74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b8d      	ldr	r3, [pc, #564]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 0207 	bic.w	r2, r3, #7
 8004d5a:	498b      	ldr	r1, [pc, #556]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b89      	ldr	r3, [pc, #548]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e14a      	b.n	800500a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b82      	ldr	r3, [pc, #520]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	497f      	ldr	r1, [pc, #508]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80dc 	beq.w	8004f58 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d13c      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xf6>
 8004da8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xa6>
 8004dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	e00f      	b.n	8004df2 <HAL_RCC_ClockConfig+0xc6>
 8004dd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	667b      	str	r3, [r7, #100]	@ 0x64
 8004de0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004de4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004de8:	fa93 f3a3 	rbit	r3, r3
 8004dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dee:	4b67      	ldr	r3, [pc, #412]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004df6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004df8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dfa:	fa92 f2a2 	rbit	r2, r2
 8004dfe:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004e00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e02:	fab2 f282 	clz	r2, r2
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	f042 0220 	orr.w	r2, r2, #32
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	f002 021f 	and.w	r2, r2, #31
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f202 	lsl.w	r2, r1, r2
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d17b      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e0f3      	b.n	800500a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d13c      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0x178>
 8004e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e2e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x128>
 8004e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	e00f      	b.n	8004e74 <HAL_RCC_ClockConfig+0x148>
 8004e54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e6a:	fa93 f3a3 	rbit	r3, r3
 8004e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e70:	4b46      	ldr	r3, [pc, #280]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e78:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e7c:	fa92 f2a2 	rbit	r2, r2
 8004e80:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004e82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e84:	fab2 f282 	clz	r2, r2
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	f042 0220 	orr.w	r2, r2, #32
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	f002 021f 	and.w	r2, r2, #31
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f202 	lsl.w	r2, r1, r2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d13a      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0b2      	b.n	800500a <HAL_RCC_ClockConfig+0x2de>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x1a0>
 8004ec6:	4b31      	ldr	r3, [pc, #196]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	e00d      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x1bc>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed8:	2302      	movs	r3, #2
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	fa93 f3a3 	rbit	r3, r3
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	2202      	movs	r2, #2
 8004eea:	61ba      	str	r2, [r7, #24]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	fa92 f2a2 	rbit	r2, r2
 8004ef2:	617a      	str	r2, [r7, #20]
  return result;
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	fab2 f282 	clz	r2, r2
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	f042 0220 	orr.w	r2, r2, #32
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	f002 021f 	and.w	r2, r2, #31
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e079      	b.n	800500a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f16:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f023 0203 	bic.w	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	491a      	ldr	r1, [pc, #104]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f28:	f7fd f91a 	bl	8002160 <HAL_GetTick>
 8004f2c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f30:	f7fd f916 	bl	8002160 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e061      	b.n	800500a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f46:	4b11      	ldr	r3, [pc, #68]	@ (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 020c 	and.w	r2, r3, #12
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1eb      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d214      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 0207 	bic.w	r2, r3, #7
 8004f6e:	4906      	ldr	r1, [pc, #24]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b04      	ldr	r3, [pc, #16]	@ (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e040      	b.n	800500a <HAL_RCC_ClockConfig+0x2de>
 8004f88:	40022000 	.word	0x40022000
 8004f8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005014 <HAL_RCC_ClockConfig+0x2e8>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	491a      	ldr	r1, [pc, #104]	@ (8005014 <HAL_RCC_ClockConfig+0x2e8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fba:	4b16      	ldr	r3, [pc, #88]	@ (8005014 <HAL_RCC_ClockConfig+0x2e8>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4912      	ldr	r1, [pc, #72]	@ (8005014 <HAL_RCC_ClockConfig+0x2e8>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fce:	f000 f829 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004fd2:	4601      	mov	r1, r0
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <HAL_RCC_ClockConfig+0x2e8>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fdc:	22f0      	movs	r2, #240	@ 0xf0
 8004fde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	fa92 f2a2 	rbit	r2, r2
 8004fe6:	60fa      	str	r2, [r7, #12]
  return result;
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	fab2 f282 	clz	r2, r2
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	40d3      	lsrs	r3, r2
 8004ff2:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <HAL_RCC_ClockConfig+0x2ec>)
 8004ff4:	5cd3      	ldrb	r3, [r2, r3]
 8004ff6:	fa21 f303 	lsr.w	r3, r1, r3
 8004ffa:	4a08      	ldr	r2, [pc, #32]	@ (800501c <HAL_RCC_ClockConfig+0x2f0>)
 8004ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ffe:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <HAL_RCC_ClockConfig+0x2f4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd f868 	bl	80020d8 <HAL_InitTick>
  
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3778      	adds	r7, #120	@ 0x78
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000
 8005018:	0800b7b4 	.word	0x0800b7b4
 800501c:	20000010 	.word	0x20000010
 8005020:	20000014 	.word	0x20000014

08005024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	2300      	movs	r3, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	2300      	movs	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800503e:	4b1e      	ldr	r3, [pc, #120]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b04      	cmp	r3, #4
 800504c:	d002      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x30>
 800504e:	2b08      	cmp	r3, #8
 8005050:	d003      	beq.n	800505a <HAL_RCC_GetSysClockFreq+0x36>
 8005052:	e026      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005054:	4b19      	ldr	r3, [pc, #100]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005056:	613b      	str	r3, [r7, #16]
      break;
 8005058:	e026      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	0c9b      	lsrs	r3, r3, #18
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005064:	5cd3      	ldrb	r3, [r2, r3]
 8005066:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005068:	4b13      	ldr	r3, [pc, #76]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	4a14      	ldr	r2, [pc, #80]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005080:	4a0e      	ldr	r2, [pc, #56]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	fbb2 f2f3 	udiv	r2, r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e004      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a0c      	ldr	r2, [pc, #48]	@ (80050c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]
      break;
 80050a0:	e002      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050a2:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x98>)
 80050a4:	613b      	str	r3, [r7, #16]
      break;
 80050a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a8:	693b      	ldr	r3, [r7, #16]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	007a1200 	.word	0x007a1200
 80050c0:	0800b7cc 	.word	0x0800b7cc
 80050c4:	0800b7dc 	.word	0x0800b7dc
 80050c8:	003d0900 	.word	0x003d0900

080050cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d0:	4b03      	ldr	r3, [pc, #12]	@ (80050e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000010 	.word	0x20000010

080050e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050ea:	f7ff ffef 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80050fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	fa92 f2a2 	rbit	r2, r2
 8005104:	603a      	str	r2, [r7, #0]
  return result;
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	fab2 f282 	clz	r2, r2
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	40d3      	lsrs	r3, r2
 8005110:	4a04      	ldr	r2, [pc, #16]	@ (8005124 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005112:	5cd3      	ldrb	r3, [r2, r3]
 8005114:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	0800b7c4 	.word	0x0800b7c4

08005128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800512e:	f7ff ffcd 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005132:	4601      	mov	r1, r0
 8005134:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800513c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	fa92 f2a2 	rbit	r2, r2
 8005148:	603a      	str	r2, [r7, #0]
  return result;
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	fab2 f282 	clz	r2, r2
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	40d3      	lsrs	r3, r2
 8005154:	4a04      	ldr	r2, [pc, #16]	@ (8005168 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005156:	5cd3      	ldrb	r3, [r2, r3]
 8005158:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	0800b7c4 	.word	0x0800b7c4

0800516c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b092      	sub	sp, #72	@ 0x48
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80d4 	beq.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005190:	4b4e      	ldr	r3, [pc, #312]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10e      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519c:	4b4b      	ldr	r3, [pc, #300]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4a4a      	ldr	r2, [pc, #296]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051a6:	61d3      	str	r3, [r2, #28]
 80051a8:	4b48      	ldr	r3, [pc, #288]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ba:	4b45      	ldr	r3, [pc, #276]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d118      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051c6:	4b42      	ldr	r3, [pc, #264]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a41      	ldr	r2, [pc, #260]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d2:	f7fc ffc5 	bl	8002160 <HAL_GetTick>
 80051d6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d8:	e008      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051da:	f7fc ffc1 	bl	8002160 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b64      	cmp	r3, #100	@ 0x64
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e14b      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ec:	4b38      	ldr	r3, [pc, #224]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f8:	4b34      	ldr	r3, [pc, #208]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005200:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8084 	beq.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005212:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005214:	429a      	cmp	r2, r3
 8005216:	d07c      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005218:	4b2c      	ldr	r3, [pc, #176]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005222:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005226:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	461a      	mov	r2, r3
 8005242:	2301      	movs	r3, #1
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800524a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	4b1d      	ldr	r3, [pc, #116]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	461a      	mov	r2, r3
 8005266:	2300      	movs	r3, #0
 8005268:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800526a:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04b      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fc ff71 	bl	8002160 <HAL_GetTick>
 800527e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005280:	e00a      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fc ff6d 	bl	8002160 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005290:	4293      	cmp	r3, r2
 8005292:	d901      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0f5      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005298:	2302      	movs	r3, #2
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a4:	2302      	movs	r3, #2
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
  return result;
 80052b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d108      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052c6:	4b01      	ldr	r3, [pc, #4]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	e00d      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40007000 	.word	0x40007000
 80052d4:	10908100 	.word	0x10908100
 80052d8:	2302      	movs	r3, #2
 80052da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	4b69      	ldr	r3, [pc, #420]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	2202      	movs	r2, #2
 80052ea:	613a      	str	r2, [r7, #16]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	fa92 f2a2 	rbit	r2, r2
 80052f2:	60fa      	str	r2, [r7, #12]
  return result;
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	fab2 f282 	clz	r2, r2
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	f002 021f 	and.w	r2, r2, #31
 8005306:	2101      	movs	r1, #1
 8005308:	fa01 f202 	lsl.w	r2, r1, r2
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0b7      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005312:	4b5e      	ldr	r3, [pc, #376]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	495b      	ldr	r1, [pc, #364]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005320:	4313      	orrs	r3, r2
 8005322:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005324:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532c:	4b57      	ldr	r3, [pc, #348]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	4a56      	ldr	r2, [pc, #344]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005344:	4b51      	ldr	r3, [pc, #324]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005348:	f023 0203 	bic.w	r2, r3, #3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	494e      	ldr	r1, [pc, #312]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005352:	4313      	orrs	r3, r2
 8005354:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005362:	4b4a      	ldr	r3, [pc, #296]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005366:	f023 0210 	bic.w	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4947      	ldr	r1, [pc, #284]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005370:	4313      	orrs	r3, r2
 8005372:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005380:	4b42      	ldr	r3, [pc, #264]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538c:	493f      	ldr	r1, [pc, #252]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800539e:	4b3b      	ldr	r3, [pc, #236]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	f023 0220 	bic.w	r2, r3, #32
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	4938      	ldr	r1, [pc, #224]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053bc:	4b33      	ldr	r3, [pc, #204]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	4930      	ldr	r1, [pc, #192]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053da:	4b2c      	ldr	r3, [pc, #176]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	4929      	ldr	r1, [pc, #164]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80053f8:	4b24      	ldr	r3, [pc, #144]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	4921      	ldr	r1, [pc, #132]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005406:	4313      	orrs	r3, r2
 8005408:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005416:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	491a      	ldr	r1, [pc, #104]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005424:	4313      	orrs	r3, r2
 8005426:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005438:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	4912      	ldr	r1, [pc, #72]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005442:	4313      	orrs	r3, r2
 8005444:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005452:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545e:	490b      	ldr	r1, [pc, #44]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005460:	4313      	orrs	r3, r2
 8005462:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005470:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	4903      	ldr	r1, [pc, #12]	@ (800548c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800547e:	4313      	orrs	r3, r2
 8005480:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3748      	adds	r7, #72	@ 0x48
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000

08005490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e049      	b.n	8005536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fc faa8 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 fcda 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e03b      	b.n	80055d0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <HAL_TIM_Base_Start_IT+0x9c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x4e>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005582:	d004      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x4e>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a15      	ldr	r2, [pc, #84]	@ (80055e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d115      	bne.n	80055ba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	4b13      	ldr	r3, [pc, #76]	@ (80055e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b06      	cmp	r3, #6
 800559e:	d015      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x8c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055a6:	d011      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	e008      	b.n	80055cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e000      	b.n	80055ce <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40014000 	.word	0x40014000
 80055e4:	00010007 	.word	0x00010007

080055e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e049      	b.n	800568e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc f9dc 	bl	80019cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f000 fc2e 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <HAL_TIM_PWM_Start+0x24>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	bf14      	ite	ne
 80056b4:	2301      	movne	r3, #1
 80056b6:	2300      	moveq	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	e03c      	b.n	8005736 <HAL_TIM_PWM_Start+0x9e>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d109      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x3e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	bf14      	ite	ne
 80056ce:	2301      	movne	r3, #1
 80056d0:	2300      	moveq	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	e02f      	b.n	8005736 <HAL_TIM_PWM_Start+0x9e>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d109      	bne.n	80056f0 <HAL_TIM_PWM_Start+0x58>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e022      	b.n	8005736 <HAL_TIM_PWM_Start+0x9e>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d109      	bne.n	800570a <HAL_TIM_PWM_Start+0x72>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	bf14      	ite	ne
 8005702:	2301      	movne	r3, #1
 8005704:	2300      	moveq	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	e015      	b.n	8005736 <HAL_TIM_PWM_Start+0x9e>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b10      	cmp	r3, #16
 800570e:	d109      	bne.n	8005724 <HAL_TIM_PWM_Start+0x8c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e008      	b.n	8005736 <HAL_TIM_PWM_Start+0x9e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e083      	b.n	8005846 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <HAL_TIM_PWM_Start+0xb6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800574c:	e023      	b.n	8005796 <HAL_TIM_PWM_Start+0xfe>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b04      	cmp	r3, #4
 8005752:	d104      	bne.n	800575e <HAL_TIM_PWM_Start+0xc6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800575c:	e01b      	b.n	8005796 <HAL_TIM_PWM_Start+0xfe>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d104      	bne.n	800576e <HAL_TIM_PWM_Start+0xd6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800576c:	e013      	b.n	8005796 <HAL_TIM_PWM_Start+0xfe>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d104      	bne.n	800577e <HAL_TIM_PWM_Start+0xe6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800577c:	e00b      	b.n	8005796 <HAL_TIM_PWM_Start+0xfe>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b10      	cmp	r3, #16
 8005782:	d104      	bne.n	800578e <HAL_TIM_PWM_Start+0xf6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800578c:	e003      	b.n	8005796 <HAL_TIM_PWM_Start+0xfe>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2201      	movs	r2, #1
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 ff2c 	bl	80065fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a29      	ldr	r2, [pc, #164]	@ (8005850 <HAL_TIM_PWM_Start+0x1b8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <HAL_TIM_PWM_Start+0x134>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a28      	ldr	r2, [pc, #160]	@ (8005854 <HAL_TIM_PWM_Start+0x1bc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <HAL_TIM_PWM_Start+0x134>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a26      	ldr	r2, [pc, #152]	@ (8005858 <HAL_TIM_PWM_Start+0x1c0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIM_PWM_Start+0x134>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a25      	ldr	r2, [pc, #148]	@ (800585c <HAL_TIM_PWM_Start+0x1c4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <HAL_TIM_PWM_Start+0x138>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_TIM_PWM_Start+0x13a>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a19      	ldr	r2, [pc, #100]	@ (8005850 <HAL_TIM_PWM_Start+0x1b8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_TIM_PWM_Start+0x16c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_PWM_Start+0x16c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <HAL_TIM_PWM_Start+0x1bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d115      	bne.n	8005830 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <HAL_TIM_PWM_Start+0x1c8>)
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d015      	beq.n	8005842 <HAL_TIM_PWM_Start+0x1aa>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800581c:	d011      	beq.n	8005842 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582e:	e008      	b.n	8005842 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e000      	b.n	8005844 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800
 8005860:	00010007 	.word	0x00010007

08005864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d020      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01b      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0202 	mvn.w	r2, #2
 8005898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 facb 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fabd 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 face 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0204 	mvn.w	r2, #4
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 faa5 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa97 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 faa8 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d020      	beq.n	8005960 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0208 	mvn.w	r2, #8
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa7f 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa71 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fa82 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0210 	mvn.w	r2, #16
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2208      	movs	r2, #8
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa59 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa4b 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fa5c 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d007      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0201 	mvn.w	r2, #1
 80059c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa29 	bl	8005e22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 ff12 	bl	8006818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 ff0a 	bl	800682c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa1b 	bl	8005e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0220 	mvn.w	r2, #32
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fed2 	bl	8006804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e0ff      	b.n	8005c86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b14      	cmp	r3, #20
 8005a92:	f200 80f0 	bhi.w	8005c76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005c77 	.word	0x08005c77
 8005aa4:	08005c77 	.word	0x08005c77
 8005aa8:	08005c77 	.word	0x08005c77
 8005aac:	08005b31 	.word	0x08005b31
 8005ab0:	08005c77 	.word	0x08005c77
 8005ab4:	08005c77 	.word	0x08005c77
 8005ab8:	08005c77 	.word	0x08005c77
 8005abc:	08005b73 	.word	0x08005b73
 8005ac0:	08005c77 	.word	0x08005c77
 8005ac4:	08005c77 	.word	0x08005c77
 8005ac8:	08005c77 	.word	0x08005c77
 8005acc:	08005bb3 	.word	0x08005bb3
 8005ad0:	08005c77 	.word	0x08005c77
 8005ad4:	08005c77 	.word	0x08005c77
 8005ad8:	08005c77 	.word	0x08005c77
 8005adc:	08005bf5 	.word	0x08005bf5
 8005ae0:	08005c77 	.word	0x08005c77
 8005ae4:	08005c77 	.word	0x08005c77
 8005ae8:	08005c77 	.word	0x08005c77
 8005aec:	08005c35 	.word	0x08005c35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fa40 	bl	8005f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0208 	orr.w	r2, r2, #8
 8005b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0204 	bic.w	r2, r2, #4
 8005b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	619a      	str	r2, [r3, #24]
      break;
 8005b2e:	e0a5      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 faa6 	bl	8006088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6999      	ldr	r1, [r3, #24]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	021a      	lsls	r2, r3, #8
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	619a      	str	r2, [r3, #24]
      break;
 8005b70:	e084      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fb05 	bl	8006188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0208 	orr.w	r2, r2, #8
 8005b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0204 	bic.w	r2, r2, #4
 8005b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69d9      	ldr	r1, [r3, #28]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	61da      	str	r2, [r3, #28]
      break;
 8005bb0:	e064      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fb63 	bl	8006284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69d9      	ldr	r1, [r3, #28]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	021a      	lsls	r2, r3, #8
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	61da      	str	r2, [r3, #28]
      break;
 8005bf2:	e043      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fba6 	bl	800634c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c32:	e023      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fbe4 	bl	8006408 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c74:	e002      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop

08005c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_TIM_ConfigClockSource+0x1c>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e0b6      	b.n	8005e1a <HAL_TIM_ConfigClockSource+0x18a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce8:	d03e      	beq.n	8005d68 <HAL_TIM_ConfigClockSource+0xd8>
 8005cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cee:	f200 8087 	bhi.w	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf6:	f000 8086 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x176>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfe:	d87f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005d00:	2b70      	cmp	r3, #112	@ 0x70
 8005d02:	d01a      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0xaa>
 8005d04:	2b70      	cmp	r3, #112	@ 0x70
 8005d06:	d87b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005d08:	2b60      	cmp	r3, #96	@ 0x60
 8005d0a:	d050      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x11e>
 8005d0c:	2b60      	cmp	r3, #96	@ 0x60
 8005d0e:	d877      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005d10:	2b50      	cmp	r3, #80	@ 0x50
 8005d12:	d03c      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0xfe>
 8005d14:	2b50      	cmp	r3, #80	@ 0x50
 8005d16:	d873      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d058      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x13e>
 8005d1c:	2b40      	cmp	r3, #64	@ 0x40
 8005d1e:	d86f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005d20:	2b30      	cmp	r3, #48	@ 0x30
 8005d22:	d064      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15e>
 8005d24:	2b30      	cmp	r3, #48	@ 0x30
 8005d26:	d86b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d060      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15e>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d867      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d05c      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15e>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d05a      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15e>
 8005d38:	e062      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d4a:	f000 fc37 	bl	80065bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]
      break;
 8005d66:	e04f      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d78:	f000 fc20 	bl	80065bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d8a:	609a      	str	r2, [r3, #8]
      break;
 8005d8c:	e03c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fb94 	bl	80064c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2150      	movs	r1, #80	@ 0x50
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fbed 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 8005dac:	e02c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fbb3 	bl	8006526 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2160      	movs	r1, #96	@ 0x60
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fbdd 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e01c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 fb74 	bl	80064c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2140      	movs	r1, #64	@ 0x40
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fbcd 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 8005dec:	e00c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f000 fbc4 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 8005dfe:	e003      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e000      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a34      	ldr	r2, [pc, #208]	@ (8005f6c <TIM_Base_SetConfig+0xe4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_Base_SetConfig+0x20>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea6:	d108      	bne.n	8005eba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8005f6c <TIM_Base_SetConfig+0xe4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00f      	beq.n	8005ee2 <TIM_Base_SetConfig+0x5a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_Base_SetConfig+0x5a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a28      	ldr	r2, [pc, #160]	@ (8005f70 <TIM_Base_SetConfig+0xe8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_Base_SetConfig+0x5a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	@ (8005f74 <TIM_Base_SetConfig+0xec>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_Base_SetConfig+0x5a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a26      	ldr	r2, [pc, #152]	@ (8005f78 <TIM_Base_SetConfig+0xf0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d108      	bne.n	8005ef4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a14      	ldr	r2, [pc, #80]	@ (8005f6c <TIM_Base_SetConfig+0xe4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_Base_SetConfig+0xb0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a13      	ldr	r2, [pc, #76]	@ (8005f70 <TIM_Base_SetConfig+0xe8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_Base_SetConfig+0xb0>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	@ (8005f74 <TIM_Base_SetConfig+0xec>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0xb0>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <TIM_Base_SetConfig+0xf0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d103      	bne.n	8005f40 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d105      	bne.n	8005f5e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40012c00 	.word	0x40012c00
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800

08005f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f023 0201 	bic.w	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0302 	bic.w	r3, r3, #2
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a28      	ldr	r2, [pc, #160]	@ (8006078 <TIM_OC1_SetConfig+0xfc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_OC1_SetConfig+0x78>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a27      	ldr	r2, [pc, #156]	@ (800607c <TIM_OC1_SetConfig+0x100>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_OC1_SetConfig+0x78>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a26      	ldr	r2, [pc, #152]	@ (8006080 <TIM_OC1_SetConfig+0x104>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC1_SetConfig+0x78>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a25      	ldr	r2, [pc, #148]	@ (8006084 <TIM_OC1_SetConfig+0x108>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d10c      	bne.n	800600e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0308 	bic.w	r3, r3, #8
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 0304 	bic.w	r3, r3, #4
 800600c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a19      	ldr	r2, [pc, #100]	@ (8006078 <TIM_OC1_SetConfig+0xfc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_OC1_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a18      	ldr	r2, [pc, #96]	@ (800607c <TIM_OC1_SetConfig+0x100>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_OC1_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a17      	ldr	r2, [pc, #92]	@ (8006080 <TIM_OC1_SetConfig+0x104>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_OC1_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a16      	ldr	r2, [pc, #88]	@ (8006084 <TIM_OC1_SetConfig+0x108>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d111      	bne.n	8006052 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800603c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40012c00 	.word	0x40012c00
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 0210 	bic.w	r2, r3, #16
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0320 	bic.w	r3, r3, #32
 80060d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a24      	ldr	r2, [pc, #144]	@ (8006178 <TIM_OC2_SetConfig+0xf0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d10d      	bne.n	8006108 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a1b      	ldr	r2, [pc, #108]	@ (8006178 <TIM_OC2_SetConfig+0xf0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00b      	beq.n	8006128 <TIM_OC2_SetConfig+0xa0>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a1a      	ldr	r2, [pc, #104]	@ (800617c <TIM_OC2_SetConfig+0xf4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <TIM_OC2_SetConfig+0xa0>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a19      	ldr	r2, [pc, #100]	@ (8006180 <TIM_OC2_SetConfig+0xf8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC2_SetConfig+0xa0>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a18      	ldr	r2, [pc, #96]	@ (8006184 <TIM_OC2_SetConfig+0xfc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d113      	bne.n	8006150 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800612e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006136:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a23      	ldr	r2, [pc, #140]	@ (8006274 <TIM_OC3_SetConfig+0xec>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d10d      	bne.n	8006206 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006204:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1a      	ldr	r2, [pc, #104]	@ (8006274 <TIM_OC3_SetConfig+0xec>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00b      	beq.n	8006226 <TIM_OC3_SetConfig+0x9e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <TIM_OC3_SetConfig+0xf0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d007      	beq.n	8006226 <TIM_OC3_SetConfig+0x9e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a18      	ldr	r2, [pc, #96]	@ (800627c <TIM_OC3_SetConfig+0xf4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d003      	beq.n	8006226 <TIM_OC3_SetConfig+0x9e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <TIM_OC3_SetConfig+0xf8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d113      	bne.n	800624e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800622c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	621a      	str	r2, [r3, #32]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800

08006284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a16      	ldr	r2, [pc, #88]	@ (800633c <TIM_OC4_SetConfig+0xb8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00b      	beq.n	8006300 <TIM_OC4_SetConfig+0x7c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a15      	ldr	r2, [pc, #84]	@ (8006340 <TIM_OC4_SetConfig+0xbc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d007      	beq.n	8006300 <TIM_OC4_SetConfig+0x7c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a14      	ldr	r2, [pc, #80]	@ (8006344 <TIM_OC4_SetConfig+0xc0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC4_SetConfig+0x7c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a13      	ldr	r2, [pc, #76]	@ (8006348 <TIM_OC4_SetConfig+0xc4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d109      	bne.n	8006314 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	019b      	lsls	r3, r3, #6
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800

0800634c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a15      	ldr	r2, [pc, #84]	@ (80063f8 <TIM_OC5_SetConfig+0xac>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_OC5_SetConfig+0x72>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <TIM_OC5_SetConfig+0xb0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_OC5_SetConfig+0x72>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a13      	ldr	r2, [pc, #76]	@ (8006400 <TIM_OC5_SetConfig+0xb4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC5_SetConfig+0x72>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a12      	ldr	r2, [pc, #72]	@ (8006404 <TIM_OC5_SetConfig+0xb8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d109      	bne.n	80063d2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800643a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800644e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	051b      	lsls	r3, r3, #20
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <TIM_OC6_SetConfig+0xb0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00b      	beq.n	800647c <TIM_OC6_SetConfig+0x74>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a15      	ldr	r2, [pc, #84]	@ (80064bc <TIM_OC6_SetConfig+0xb4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d007      	beq.n	800647c <TIM_OC6_SetConfig+0x74>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a14      	ldr	r2, [pc, #80]	@ (80064c0 <TIM_OC6_SetConfig+0xb8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_OC6_SetConfig+0x74>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a13      	ldr	r2, [pc, #76]	@ (80064c4 <TIM_OC6_SetConfig+0xbc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d109      	bne.n	8006490 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006482:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	029b      	lsls	r3, r3, #10
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800

080064c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 030a 	bic.w	r3, r3, #10
 8006504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006526:	b480      	push	{r7}
 8006528:	b087      	sub	sp, #28
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f023 0210 	bic.w	r2, r3, #16
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	031b      	lsls	r3, r3, #12
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f043 0307 	orr.w	r3, r3, #7
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	609a      	str	r2, [r3, #8]
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	021a      	lsls	r2, r3, #8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	431a      	orrs	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	609a      	str	r2, [r3, #8]
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	2201      	movs	r2, #1
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1a      	ldr	r2, [r3, #32]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	43db      	mvns	r3, r3
 800661e:	401a      	ands	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a1a      	ldr	r2, [r3, #32]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	fa01 f303 	lsl.w	r3, r1, r3
 8006634:	431a      	orrs	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800665c:	2302      	movs	r3, #2
 800665e:	e04f      	b.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a21      	ldr	r2, [pc, #132]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006690:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a14      	ldr	r2, [pc, #80]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c8:	d004      	beq.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a10      	ldr	r2, [pc, #64]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d10c      	bne.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40014000 	.word	0x40014000

08006714 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800672c:	2302      	movs	r3, #2
 800672e:	e060      	b.n	80067f2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a14      	ldr	r2, [pc, #80]	@ (8006800 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d115      	bne.n	80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	051b      	lsls	r3, r3, #20
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40012c00 	.word	0x40012c00

08006804 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e040      	b.n	80068d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb f94a 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2224      	movs	r2, #36	@ 0x24
 800686c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9e8 	bl	8006c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f8af 	bl	80069f0 <UART_SetConfig>
 8006892:	4603      	mov	r3, r0
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e01b      	b.n	80068d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa67 	bl	8006da0 <UART_CheckIdleState>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	@ 0x28
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d177      	bne.n	80069e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_UART_Transmit+0x24>
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e070      	b.n	80069e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2221      	movs	r2, #33	@ 0x21
 8006910:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006912:	f7fb fc25 	bl	8002160 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006930:	d108      	bne.n	8006944 <HAL_UART_Transmit+0x68>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e003      	b.n	800694c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800694c:	e02f      	b.n	80069ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	@ 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fac9 	bl	8006ef0 <UART_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e03b      	b.n	80069e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	881a      	ldrh	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006980:	b292      	uxth	r2, r2
 8006982:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	3302      	adds	r3, #2
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	e007      	b.n	800699c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	3301      	adds	r3, #1
 800699a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1c9      	bne.n	800694e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2200      	movs	r2, #0
 80069c2:	2140      	movs	r1, #64	@ 0x40
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fa93 	bl	8006ef0 <UART_WaitOnFlagUntilTimeout>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e005      	b.n	80069e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b8a      	ldr	r3, [pc, #552]	@ (8006c44 <UART_SetConfig+0x254>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	6979      	ldr	r1, [r7, #20]
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a78      	ldr	r2, [pc, #480]	@ (8006c48 <UART_SetConfig+0x258>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d120      	bne.n	8006aae <UART_SetConfig+0xbe>
 8006a6c:	4b77      	ldr	r3, [pc, #476]	@ (8006c4c <UART_SetConfig+0x25c>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d817      	bhi.n	8006aa8 <UART_SetConfig+0xb8>
 8006a78:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <UART_SetConfig+0x90>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006a91 	.word	0x08006a91
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006aa3 	.word	0x08006aa3
 8006a8c:	08006a97 	.word	0x08006a97
 8006a90:	2300      	movs	r3, #0
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e01d      	b.n	8006ad2 <UART_SetConfig+0xe2>
 8006a96:	2302      	movs	r3, #2
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e01a      	b.n	8006ad2 <UART_SetConfig+0xe2>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e017      	b.n	8006ad2 <UART_SetConfig+0xe2>
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e014      	b.n	8006ad2 <UART_SetConfig+0xe2>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e011      	b.n	8006ad2 <UART_SetConfig+0xe2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a67      	ldr	r2, [pc, #412]	@ (8006c50 <UART_SetConfig+0x260>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d102      	bne.n	8006abe <UART_SetConfig+0xce>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e009      	b.n	8006ad2 <UART_SetConfig+0xe2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a64      	ldr	r2, [pc, #400]	@ (8006c54 <UART_SetConfig+0x264>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d102      	bne.n	8006ace <UART_SetConfig+0xde>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e001      	b.n	8006ad2 <UART_SetConfig+0xe2>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ada:	d15a      	bne.n	8006b92 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006adc:	7ffb      	ldrb	r3, [r7, #31]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d827      	bhi.n	8006b32 <UART_SetConfig+0x142>
 8006ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <UART_SetConfig+0xf8>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	08006b33 	.word	0x08006b33
 8006af8:	08006b23 	.word	0x08006b23
 8006afc:	08006b33 	.word	0x08006b33
 8006b00:	08006b33 	.word	0x08006b33
 8006b04:	08006b33 	.word	0x08006b33
 8006b08:	08006b2b 	.word	0x08006b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fe faea 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8006b10:	61b8      	str	r0, [r7, #24]
        break;
 8006b12:	e013      	b.n	8006b3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fe fb08 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 8006b18:	61b8      	str	r0, [r7, #24]
        break;
 8006b1a:	e00f      	b.n	8006b3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8006c58 <UART_SetConfig+0x268>)
 8006b1e:	61bb      	str	r3, [r7, #24]
        break;
 8006b20:	e00c      	b.n	8006b3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b22:	f7fe fa7f 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8006b26:	61b8      	str	r0, [r7, #24]
        break;
 8006b28:	e008      	b.n	8006b3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2e:	61bb      	str	r3, [r7, #24]
        break;
 8006b30:	e004      	b.n	8006b3c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	77bb      	strb	r3, [r7, #30]
        break;
 8006b3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d074      	beq.n	8006c2c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	005a      	lsls	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d916      	bls.n	8006b8c <UART_SetConfig+0x19c>
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b64:	d212      	bcs.n	8006b8c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f023 030f 	bic.w	r3, r3, #15
 8006b6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	89fb      	ldrh	r3, [r7, #14]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	89fa      	ldrh	r2, [r7, #14]
 8006b88:	60da      	str	r2, [r3, #12]
 8006b8a:	e04f      	b.n	8006c2c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	77bb      	strb	r3, [r7, #30]
 8006b90:	e04c      	b.n	8006c2c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b92:	7ffb      	ldrb	r3, [r7, #31]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d828      	bhi.n	8006bea <UART_SetConfig+0x1fa>
 8006b98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <UART_SetConfig+0x1b0>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bd5 	.word	0x08006bd5
 8006bac:	08006beb 	.word	0x08006beb
 8006bb0:	08006bdb 	.word	0x08006bdb
 8006bb4:	08006beb 	.word	0x08006beb
 8006bb8:	08006beb 	.word	0x08006beb
 8006bbc:	08006beb 	.word	0x08006beb
 8006bc0:	08006be3 	.word	0x08006be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc4:	f7fe fa8e 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8006bc8:	61b8      	str	r0, [r7, #24]
        break;
 8006bca:	e013      	b.n	8006bf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bcc:	f7fe faac 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 8006bd0:	61b8      	str	r0, [r7, #24]
        break;
 8006bd2:	e00f      	b.n	8006bf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd4:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <UART_SetConfig+0x268>)
 8006bd6:	61bb      	str	r3, [r7, #24]
        break;
 8006bd8:	e00c      	b.n	8006bf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bda:	f7fe fa23 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8006bde:	61b8      	str	r0, [r7, #24]
        break;
 8006be0:	e008      	b.n	8006bf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006be6:	61bb      	str	r3, [r7, #24]
        break;
 8006be8:	e004      	b.n	8006bf4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bf2:	bf00      	nop
    }

    if (pclk != 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	085a      	lsrs	r2, r3, #1
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	441a      	add	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b0f      	cmp	r3, #15
 8006c12:	d909      	bls.n	8006c28 <UART_SetConfig+0x238>
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c1a:	d205      	bcs.n	8006c28 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	e001      	b.n	8006c2c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c38:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	efff69f3 	.word	0xefff69f3
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	40004400 	.word	0x40004400
 8006c54:	40004800 	.word	0x40004800
 8006c58:	007a1200 	.word	0x007a1200

08006c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01a      	beq.n	8006d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d5a:	d10a      	bne.n	8006d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	605a      	str	r2, [r3, #4]
  }
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b098      	sub	sp, #96	@ 0x60
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006db0:	f7fb f9d6 	bl	8002160 <HAL_GetTick>
 8006db4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d12e      	bne.n	8006e22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f88c 	bl	8006ef0 <UART_WaitOnFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d021      	beq.n	8006e22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dfe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e6      	bne.n	8006dde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e062      	b.n	8006ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d149      	bne.n	8006ec4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f856 	bl	8006ef0 <UART_WaitOnFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d03c      	beq.n	8006ec4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	623b      	str	r3, [r7, #32]
   return(result);
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e6      	bne.n	8006e4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0301 	bic.w	r3, r3, #1
 8006e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3308      	adds	r3, #8
 8006e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e9c:	61fa      	str	r2, [r7, #28]
 8006e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	69b9      	ldr	r1, [r7, #24]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e5      	bne.n	8006e7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e011      	b.n	8006ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3758      	adds	r7, #88	@ 0x58
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f00:	e04f      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f08:	d04b      	beq.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0a:	f7fb f929 	bl	8002160 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e04e      	b.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d037      	beq.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b80      	cmp	r3, #128	@ 0x80
 8006f36:	d034      	beq.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b40      	cmp	r3, #64	@ 0x40
 8006f3c:	d031      	beq.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d110      	bne.n	8006f6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2208      	movs	r2, #8
 8006f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f838 	bl	8006fca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2208      	movs	r2, #8
 8006f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e029      	b.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f7c:	d111      	bne.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f81e 	bl	8006fca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e00f      	b.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69da      	ldr	r2, [r3, #28]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	4013      	ands	r3, r2
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	bf0c      	ite	eq
 8006fb2:	2301      	moveq	r3, #1
 8006fb4:	2300      	movne	r3, #0
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d0a0      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b095      	sub	sp, #84	@ 0x54
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ff2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e6      	bne.n	8006fd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	61fb      	str	r3, [r7, #28]
   return(result);
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800702a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800703c:	2b01      	cmp	r3, #1
 800703e:	d118      	bne.n	8007072 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	60bb      	str	r3, [r7, #8]
   return(result);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f023 0310 	bic.w	r3, r3, #16
 8007054:	647b      	str	r3, [r7, #68]	@ 0x44
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6979      	ldr	r1, [r7, #20]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	613b      	str	r3, [r7, #16]
   return(result);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e6      	bne.n	8007040 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007086:	bf00      	nop
 8007088:	3754      	adds	r7, #84	@ 0x54
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <_calloc_r>:
 8007092:	b570      	push	{r4, r5, r6, lr}
 8007094:	fba1 5402 	umull	r5, r4, r1, r2
 8007098:	b93c      	cbnz	r4, 80070aa <_calloc_r+0x18>
 800709a:	4629      	mov	r1, r5
 800709c:	f000 f838 	bl	8007110 <_malloc_r>
 80070a0:	4606      	mov	r6, r0
 80070a2:	b928      	cbnz	r0, 80070b0 <_calloc_r+0x1e>
 80070a4:	2600      	movs	r6, #0
 80070a6:	4630      	mov	r0, r6
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	220c      	movs	r2, #12
 80070ac:	6002      	str	r2, [r0, #0]
 80070ae:	e7f9      	b.n	80070a4 <_calloc_r+0x12>
 80070b0:	462a      	mov	r2, r5
 80070b2:	4621      	mov	r1, r4
 80070b4:	f001 f849 	bl	800814a <memset>
 80070b8:	e7f5      	b.n	80070a6 <_calloc_r+0x14>
	...

080070bc <malloc>:
 80070bc:	4b02      	ldr	r3, [pc, #8]	@ (80070c8 <malloc+0xc>)
 80070be:	4601      	mov	r1, r0
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	f000 b825 	b.w	8007110 <_malloc_r>
 80070c6:	bf00      	nop
 80070c8:	20000028 	.word	0x20000028

080070cc <sbrk_aligned>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4e0f      	ldr	r6, [pc, #60]	@ (800710c <sbrk_aligned+0x40>)
 80070d0:	460c      	mov	r4, r1
 80070d2:	6831      	ldr	r1, [r6, #0]
 80070d4:	4605      	mov	r5, r0
 80070d6:	b911      	cbnz	r1, 80070de <sbrk_aligned+0x12>
 80070d8:	f001 f878 	bl	80081cc <_sbrk_r>
 80070dc:	6030      	str	r0, [r6, #0]
 80070de:	4621      	mov	r1, r4
 80070e0:	4628      	mov	r0, r5
 80070e2:	f001 f873 	bl	80081cc <_sbrk_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d103      	bne.n	80070f2 <sbrk_aligned+0x26>
 80070ea:	f04f 34ff 	mov.w	r4, #4294967295
 80070ee:	4620      	mov	r0, r4
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
 80070f2:	1cc4      	adds	r4, r0, #3
 80070f4:	f024 0403 	bic.w	r4, r4, #3
 80070f8:	42a0      	cmp	r0, r4
 80070fa:	d0f8      	beq.n	80070ee <sbrk_aligned+0x22>
 80070fc:	1a21      	subs	r1, r4, r0
 80070fe:	4628      	mov	r0, r5
 8007100:	f001 f864 	bl	80081cc <_sbrk_r>
 8007104:	3001      	adds	r0, #1
 8007106:	d1f2      	bne.n	80070ee <sbrk_aligned+0x22>
 8007108:	e7ef      	b.n	80070ea <sbrk_aligned+0x1e>
 800710a:	bf00      	nop
 800710c:	20000474 	.word	0x20000474

08007110 <_malloc_r>:
 8007110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007114:	1ccd      	adds	r5, r1, #3
 8007116:	f025 0503 	bic.w	r5, r5, #3
 800711a:	3508      	adds	r5, #8
 800711c:	2d0c      	cmp	r5, #12
 800711e:	bf38      	it	cc
 8007120:	250c      	movcc	r5, #12
 8007122:	2d00      	cmp	r5, #0
 8007124:	4606      	mov	r6, r0
 8007126:	db01      	blt.n	800712c <_malloc_r+0x1c>
 8007128:	42a9      	cmp	r1, r5
 800712a:	d904      	bls.n	8007136 <_malloc_r+0x26>
 800712c:	230c      	movs	r3, #12
 800712e:	6033      	str	r3, [r6, #0]
 8007130:	2000      	movs	r0, #0
 8007132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007136:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800720c <_malloc_r+0xfc>
 800713a:	f000 f869 	bl	8007210 <__malloc_lock>
 800713e:	f8d8 3000 	ldr.w	r3, [r8]
 8007142:	461c      	mov	r4, r3
 8007144:	bb44      	cbnz	r4, 8007198 <_malloc_r+0x88>
 8007146:	4629      	mov	r1, r5
 8007148:	4630      	mov	r0, r6
 800714a:	f7ff ffbf 	bl	80070cc <sbrk_aligned>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	4604      	mov	r4, r0
 8007152:	d158      	bne.n	8007206 <_malloc_r+0xf6>
 8007154:	f8d8 4000 	ldr.w	r4, [r8]
 8007158:	4627      	mov	r7, r4
 800715a:	2f00      	cmp	r7, #0
 800715c:	d143      	bne.n	80071e6 <_malloc_r+0xd6>
 800715e:	2c00      	cmp	r4, #0
 8007160:	d04b      	beq.n	80071fa <_malloc_r+0xea>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	4639      	mov	r1, r7
 8007166:	4630      	mov	r0, r6
 8007168:	eb04 0903 	add.w	r9, r4, r3
 800716c:	f001 f82e 	bl	80081cc <_sbrk_r>
 8007170:	4581      	cmp	r9, r0
 8007172:	d142      	bne.n	80071fa <_malloc_r+0xea>
 8007174:	6821      	ldr	r1, [r4, #0]
 8007176:	1a6d      	subs	r5, r5, r1
 8007178:	4629      	mov	r1, r5
 800717a:	4630      	mov	r0, r6
 800717c:	f7ff ffa6 	bl	80070cc <sbrk_aligned>
 8007180:	3001      	adds	r0, #1
 8007182:	d03a      	beq.n	80071fa <_malloc_r+0xea>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	442b      	add	r3, r5
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	f8d8 3000 	ldr.w	r3, [r8]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	bb62      	cbnz	r2, 80071ec <_malloc_r+0xdc>
 8007192:	f8c8 7000 	str.w	r7, [r8]
 8007196:	e00f      	b.n	80071b8 <_malloc_r+0xa8>
 8007198:	6822      	ldr	r2, [r4, #0]
 800719a:	1b52      	subs	r2, r2, r5
 800719c:	d420      	bmi.n	80071e0 <_malloc_r+0xd0>
 800719e:	2a0b      	cmp	r2, #11
 80071a0:	d917      	bls.n	80071d2 <_malloc_r+0xc2>
 80071a2:	1961      	adds	r1, r4, r5
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	6025      	str	r5, [r4, #0]
 80071a8:	bf18      	it	ne
 80071aa:	6059      	strne	r1, [r3, #4]
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	bf08      	it	eq
 80071b0:	f8c8 1000 	streq.w	r1, [r8]
 80071b4:	5162      	str	r2, [r4, r5]
 80071b6:	604b      	str	r3, [r1, #4]
 80071b8:	4630      	mov	r0, r6
 80071ba:	f000 f82f 	bl	800721c <__malloc_unlock>
 80071be:	f104 000b 	add.w	r0, r4, #11
 80071c2:	1d23      	adds	r3, r4, #4
 80071c4:	f020 0007 	bic.w	r0, r0, #7
 80071c8:	1ac2      	subs	r2, r0, r3
 80071ca:	bf1c      	itt	ne
 80071cc:	1a1b      	subne	r3, r3, r0
 80071ce:	50a3      	strne	r3, [r4, r2]
 80071d0:	e7af      	b.n	8007132 <_malloc_r+0x22>
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	bf0c      	ite	eq
 80071d8:	f8c8 2000 	streq.w	r2, [r8]
 80071dc:	605a      	strne	r2, [r3, #4]
 80071de:	e7eb      	b.n	80071b8 <_malloc_r+0xa8>
 80071e0:	4623      	mov	r3, r4
 80071e2:	6864      	ldr	r4, [r4, #4]
 80071e4:	e7ae      	b.n	8007144 <_malloc_r+0x34>
 80071e6:	463c      	mov	r4, r7
 80071e8:	687f      	ldr	r7, [r7, #4]
 80071ea:	e7b6      	b.n	800715a <_malloc_r+0x4a>
 80071ec:	461a      	mov	r2, r3
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	d1fb      	bne.n	80071ec <_malloc_r+0xdc>
 80071f4:	2300      	movs	r3, #0
 80071f6:	6053      	str	r3, [r2, #4]
 80071f8:	e7de      	b.n	80071b8 <_malloc_r+0xa8>
 80071fa:	230c      	movs	r3, #12
 80071fc:	6033      	str	r3, [r6, #0]
 80071fe:	4630      	mov	r0, r6
 8007200:	f000 f80c 	bl	800721c <__malloc_unlock>
 8007204:	e794      	b.n	8007130 <_malloc_r+0x20>
 8007206:	6005      	str	r5, [r0, #0]
 8007208:	e7d6      	b.n	80071b8 <_malloc_r+0xa8>
 800720a:	bf00      	nop
 800720c:	20000478 	.word	0x20000478

08007210 <__malloc_lock>:
 8007210:	4801      	ldr	r0, [pc, #4]	@ (8007218 <__malloc_lock+0x8>)
 8007212:	f001 b828 	b.w	8008266 <__retarget_lock_acquire_recursive>
 8007216:	bf00      	nop
 8007218:	200005bc 	.word	0x200005bc

0800721c <__malloc_unlock>:
 800721c:	4801      	ldr	r0, [pc, #4]	@ (8007224 <__malloc_unlock+0x8>)
 800721e:	f001 b823 	b.w	8008268 <__retarget_lock_release_recursive>
 8007222:	bf00      	nop
 8007224:	200005bc 	.word	0x200005bc

08007228 <__cvt>:
 8007228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800722c:	ec57 6b10 	vmov	r6, r7, d0
 8007230:	2f00      	cmp	r7, #0
 8007232:	460c      	mov	r4, r1
 8007234:	4619      	mov	r1, r3
 8007236:	463b      	mov	r3, r7
 8007238:	bfbb      	ittet	lt
 800723a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800723e:	461f      	movlt	r7, r3
 8007240:	2300      	movge	r3, #0
 8007242:	232d      	movlt	r3, #45	@ 0x2d
 8007244:	700b      	strb	r3, [r1, #0]
 8007246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007248:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800724c:	4691      	mov	r9, r2
 800724e:	f023 0820 	bic.w	r8, r3, #32
 8007252:	bfbc      	itt	lt
 8007254:	4632      	movlt	r2, r6
 8007256:	4616      	movlt	r6, r2
 8007258:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800725c:	d005      	beq.n	800726a <__cvt+0x42>
 800725e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007262:	d100      	bne.n	8007266 <__cvt+0x3e>
 8007264:	3401      	adds	r4, #1
 8007266:	2102      	movs	r1, #2
 8007268:	e000      	b.n	800726c <__cvt+0x44>
 800726a:	2103      	movs	r1, #3
 800726c:	ab03      	add	r3, sp, #12
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	ab02      	add	r3, sp, #8
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	ec47 6b10 	vmov	d0, r6, r7
 8007278:	4653      	mov	r3, sl
 800727a:	4622      	mov	r2, r4
 800727c:	f001 f884 	bl	8008388 <_dtoa_r>
 8007280:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007284:	4605      	mov	r5, r0
 8007286:	d119      	bne.n	80072bc <__cvt+0x94>
 8007288:	f019 0f01 	tst.w	r9, #1
 800728c:	d00e      	beq.n	80072ac <__cvt+0x84>
 800728e:	eb00 0904 	add.w	r9, r0, r4
 8007292:	2200      	movs	r2, #0
 8007294:	2300      	movs	r3, #0
 8007296:	4630      	mov	r0, r6
 8007298:	4639      	mov	r1, r7
 800729a:	f7f9 fc25 	bl	8000ae8 <__aeabi_dcmpeq>
 800729e:	b108      	cbz	r0, 80072a4 <__cvt+0x7c>
 80072a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80072a4:	2230      	movs	r2, #48	@ 0x30
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	454b      	cmp	r3, r9
 80072aa:	d31e      	bcc.n	80072ea <__cvt+0xc2>
 80072ac:	9b03      	ldr	r3, [sp, #12]
 80072ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072b0:	1b5b      	subs	r3, r3, r5
 80072b2:	4628      	mov	r0, r5
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	b004      	add	sp, #16
 80072b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072c0:	eb00 0904 	add.w	r9, r0, r4
 80072c4:	d1e5      	bne.n	8007292 <__cvt+0x6a>
 80072c6:	7803      	ldrb	r3, [r0, #0]
 80072c8:	2b30      	cmp	r3, #48	@ 0x30
 80072ca:	d10a      	bne.n	80072e2 <__cvt+0xba>
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f9 fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80072d8:	b918      	cbnz	r0, 80072e2 <__cvt+0xba>
 80072da:	f1c4 0401 	rsb	r4, r4, #1
 80072de:	f8ca 4000 	str.w	r4, [sl]
 80072e2:	f8da 3000 	ldr.w	r3, [sl]
 80072e6:	4499      	add	r9, r3
 80072e8:	e7d3      	b.n	8007292 <__cvt+0x6a>
 80072ea:	1c59      	adds	r1, r3, #1
 80072ec:	9103      	str	r1, [sp, #12]
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e7d9      	b.n	80072a6 <__cvt+0x7e>

080072f2 <__exponent>:
 80072f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f4:	2900      	cmp	r1, #0
 80072f6:	bfba      	itte	lt
 80072f8:	4249      	neglt	r1, r1
 80072fa:	232d      	movlt	r3, #45	@ 0x2d
 80072fc:	232b      	movge	r3, #43	@ 0x2b
 80072fe:	2909      	cmp	r1, #9
 8007300:	7002      	strb	r2, [r0, #0]
 8007302:	7043      	strb	r3, [r0, #1]
 8007304:	dd29      	ble.n	800735a <__exponent+0x68>
 8007306:	f10d 0307 	add.w	r3, sp, #7
 800730a:	461d      	mov	r5, r3
 800730c:	270a      	movs	r7, #10
 800730e:	461a      	mov	r2, r3
 8007310:	fbb1 f6f7 	udiv	r6, r1, r7
 8007314:	fb07 1416 	mls	r4, r7, r6, r1
 8007318:	3430      	adds	r4, #48	@ 0x30
 800731a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800731e:	460c      	mov	r4, r1
 8007320:	2c63      	cmp	r4, #99	@ 0x63
 8007322:	f103 33ff 	add.w	r3, r3, #4294967295
 8007326:	4631      	mov	r1, r6
 8007328:	dcf1      	bgt.n	800730e <__exponent+0x1c>
 800732a:	3130      	adds	r1, #48	@ 0x30
 800732c:	1e94      	subs	r4, r2, #2
 800732e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007332:	1c41      	adds	r1, r0, #1
 8007334:	4623      	mov	r3, r4
 8007336:	42ab      	cmp	r3, r5
 8007338:	d30a      	bcc.n	8007350 <__exponent+0x5e>
 800733a:	f10d 0309 	add.w	r3, sp, #9
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	42ac      	cmp	r4, r5
 8007342:	bf88      	it	hi
 8007344:	2300      	movhi	r3, #0
 8007346:	3302      	adds	r3, #2
 8007348:	4403      	add	r3, r0
 800734a:	1a18      	subs	r0, r3, r0
 800734c:	b003      	add	sp, #12
 800734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007350:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007354:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007358:	e7ed      	b.n	8007336 <__exponent+0x44>
 800735a:	2330      	movs	r3, #48	@ 0x30
 800735c:	3130      	adds	r1, #48	@ 0x30
 800735e:	7083      	strb	r3, [r0, #2]
 8007360:	70c1      	strb	r1, [r0, #3]
 8007362:	1d03      	adds	r3, r0, #4
 8007364:	e7f1      	b.n	800734a <__exponent+0x58>
	...

08007368 <_printf_float>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	b08d      	sub	sp, #52	@ 0x34
 800736e:	460c      	mov	r4, r1
 8007370:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007374:	4616      	mov	r6, r2
 8007376:	461f      	mov	r7, r3
 8007378:	4605      	mov	r5, r0
 800737a:	f000 feef 	bl	800815c <_localeconv_r>
 800737e:	6803      	ldr	r3, [r0, #0]
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	4618      	mov	r0, r3
 8007384:	f7f8 ff84 	bl	8000290 <strlen>
 8007388:	2300      	movs	r3, #0
 800738a:	930a      	str	r3, [sp, #40]	@ 0x28
 800738c:	f8d8 3000 	ldr.w	r3, [r8]
 8007390:	9005      	str	r0, [sp, #20]
 8007392:	3307      	adds	r3, #7
 8007394:	f023 0307 	bic.w	r3, r3, #7
 8007398:	f103 0208 	add.w	r2, r3, #8
 800739c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073a0:	f8d4 b000 	ldr.w	fp, [r4]
 80073a4:	f8c8 2000 	str.w	r2, [r8]
 80073a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80073b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80073ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073be:	4b9c      	ldr	r3, [pc, #624]	@ (8007630 <_printf_float+0x2c8>)
 80073c0:	f04f 32ff 	mov.w	r2, #4294967295
 80073c4:	f7f9 fbc2 	bl	8000b4c <__aeabi_dcmpun>
 80073c8:	bb70      	cbnz	r0, 8007428 <_printf_float+0xc0>
 80073ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ce:	4b98      	ldr	r3, [pc, #608]	@ (8007630 <_printf_float+0x2c8>)
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295
 80073d4:	f7f9 fb9c 	bl	8000b10 <__aeabi_dcmple>
 80073d8:	bb30      	cbnz	r0, 8007428 <_printf_float+0xc0>
 80073da:	2200      	movs	r2, #0
 80073dc:	2300      	movs	r3, #0
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f9 fb8b 	bl	8000afc <__aeabi_dcmplt>
 80073e6:	b110      	cbz	r0, 80073ee <_printf_float+0x86>
 80073e8:	232d      	movs	r3, #45	@ 0x2d
 80073ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073ee:	4a91      	ldr	r2, [pc, #580]	@ (8007634 <_printf_float+0x2cc>)
 80073f0:	4b91      	ldr	r3, [pc, #580]	@ (8007638 <_printf_float+0x2d0>)
 80073f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073f6:	bf94      	ite	ls
 80073f8:	4690      	movls	r8, r2
 80073fa:	4698      	movhi	r8, r3
 80073fc:	2303      	movs	r3, #3
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	f02b 0304 	bic.w	r3, fp, #4
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	f04f 0900 	mov.w	r9, #0
 800740a:	9700      	str	r7, [sp, #0]
 800740c:	4633      	mov	r3, r6
 800740e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f000 f9d2 	bl	80077bc <_printf_common>
 8007418:	3001      	adds	r0, #1
 800741a:	f040 808d 	bne.w	8007538 <_printf_float+0x1d0>
 800741e:	f04f 30ff 	mov.w	r0, #4294967295
 8007422:	b00d      	add	sp, #52	@ 0x34
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 fb8c 	bl	8000b4c <__aeabi_dcmpun>
 8007434:	b140      	cbz	r0, 8007448 <_printf_float+0xe0>
 8007436:	464b      	mov	r3, r9
 8007438:	2b00      	cmp	r3, #0
 800743a:	bfbc      	itt	lt
 800743c:	232d      	movlt	r3, #45	@ 0x2d
 800743e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007442:	4a7e      	ldr	r2, [pc, #504]	@ (800763c <_printf_float+0x2d4>)
 8007444:	4b7e      	ldr	r3, [pc, #504]	@ (8007640 <_printf_float+0x2d8>)
 8007446:	e7d4      	b.n	80073f2 <_printf_float+0x8a>
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800744e:	9206      	str	r2, [sp, #24]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	d13b      	bne.n	80074cc <_printf_float+0x164>
 8007454:	2306      	movs	r3, #6
 8007456:	6063      	str	r3, [r4, #4]
 8007458:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800745c:	2300      	movs	r3, #0
 800745e:	6022      	str	r2, [r4, #0]
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	ab0a      	add	r3, sp, #40	@ 0x28
 8007464:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007468:	ab09      	add	r3, sp, #36	@ 0x24
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	6861      	ldr	r1, [r4, #4]
 800746e:	ec49 8b10 	vmov	d0, r8, r9
 8007472:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007476:	4628      	mov	r0, r5
 8007478:	f7ff fed6 	bl	8007228 <__cvt>
 800747c:	9b06      	ldr	r3, [sp, #24]
 800747e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007480:	2b47      	cmp	r3, #71	@ 0x47
 8007482:	4680      	mov	r8, r0
 8007484:	d129      	bne.n	80074da <_printf_float+0x172>
 8007486:	1cc8      	adds	r0, r1, #3
 8007488:	db02      	blt.n	8007490 <_printf_float+0x128>
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	4299      	cmp	r1, r3
 800748e:	dd41      	ble.n	8007514 <_printf_float+0x1ac>
 8007490:	f1aa 0a02 	sub.w	sl, sl, #2
 8007494:	fa5f fa8a 	uxtb.w	sl, sl
 8007498:	3901      	subs	r1, #1
 800749a:	4652      	mov	r2, sl
 800749c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80074a2:	f7ff ff26 	bl	80072f2 <__exponent>
 80074a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074a8:	1813      	adds	r3, r2, r0
 80074aa:	2a01      	cmp	r2, #1
 80074ac:	4681      	mov	r9, r0
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	dc02      	bgt.n	80074b8 <_printf_float+0x150>
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	07d2      	lsls	r2, r2, #31
 80074b6:	d501      	bpl.n	80074bc <_printf_float+0x154>
 80074b8:	3301      	adds	r3, #1
 80074ba:	6123      	str	r3, [r4, #16]
 80074bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0a2      	beq.n	800740a <_printf_float+0xa2>
 80074c4:	232d      	movs	r3, #45	@ 0x2d
 80074c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ca:	e79e      	b.n	800740a <_printf_float+0xa2>
 80074cc:	9a06      	ldr	r2, [sp, #24]
 80074ce:	2a47      	cmp	r2, #71	@ 0x47
 80074d0:	d1c2      	bne.n	8007458 <_printf_float+0xf0>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1c0      	bne.n	8007458 <_printf_float+0xf0>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e7bd      	b.n	8007456 <_printf_float+0xee>
 80074da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074de:	d9db      	bls.n	8007498 <_printf_float+0x130>
 80074e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80074e4:	d118      	bne.n	8007518 <_printf_float+0x1b0>
 80074e6:	2900      	cmp	r1, #0
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	dd0b      	ble.n	8007504 <_printf_float+0x19c>
 80074ec:	6121      	str	r1, [r4, #16]
 80074ee:	b913      	cbnz	r3, 80074f6 <_printf_float+0x18e>
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	07d0      	lsls	r0, r2, #31
 80074f4:	d502      	bpl.n	80074fc <_printf_float+0x194>
 80074f6:	3301      	adds	r3, #1
 80074f8:	440b      	add	r3, r1
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	e7db      	b.n	80074bc <_printf_float+0x154>
 8007504:	b913      	cbnz	r3, 800750c <_printf_float+0x1a4>
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	07d2      	lsls	r2, r2, #31
 800750a:	d501      	bpl.n	8007510 <_printf_float+0x1a8>
 800750c:	3302      	adds	r3, #2
 800750e:	e7f4      	b.n	80074fa <_printf_float+0x192>
 8007510:	2301      	movs	r3, #1
 8007512:	e7f2      	b.n	80074fa <_printf_float+0x192>
 8007514:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751a:	4299      	cmp	r1, r3
 800751c:	db05      	blt.n	800752a <_printf_float+0x1c2>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	6121      	str	r1, [r4, #16]
 8007522:	07d8      	lsls	r0, r3, #31
 8007524:	d5ea      	bpl.n	80074fc <_printf_float+0x194>
 8007526:	1c4b      	adds	r3, r1, #1
 8007528:	e7e7      	b.n	80074fa <_printf_float+0x192>
 800752a:	2900      	cmp	r1, #0
 800752c:	bfd4      	ite	le
 800752e:	f1c1 0202 	rsble	r2, r1, #2
 8007532:	2201      	movgt	r2, #1
 8007534:	4413      	add	r3, r2
 8007536:	e7e0      	b.n	80074fa <_printf_float+0x192>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	055a      	lsls	r2, r3, #21
 800753c:	d407      	bmi.n	800754e <_printf_float+0x1e6>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	4642      	mov	r2, r8
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	d12b      	bne.n	80075a4 <_printf_float+0x23c>
 800754c:	e767      	b.n	800741e <_printf_float+0xb6>
 800754e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007552:	f240 80dd 	bls.w	8007710 <_printf_float+0x3a8>
 8007556:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	f7f9 fac3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007562:	2800      	cmp	r0, #0
 8007564:	d033      	beq.n	80075ce <_printf_float+0x266>
 8007566:	4a37      	ldr	r2, [pc, #220]	@ (8007644 <_printf_float+0x2dc>)
 8007568:	2301      	movs	r3, #1
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	f43f af54 	beq.w	800741e <_printf_float+0xb6>
 8007576:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800757a:	4543      	cmp	r3, r8
 800757c:	db02      	blt.n	8007584 <_printf_float+0x21c>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	07d8      	lsls	r0, r3, #31
 8007582:	d50f      	bpl.n	80075a4 <_printf_float+0x23c>
 8007584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	f43f af45 	beq.w	800741e <_printf_float+0xb6>
 8007594:	f04f 0900 	mov.w	r9, #0
 8007598:	f108 38ff 	add.w	r8, r8, #4294967295
 800759c:	f104 0a1a 	add.w	sl, r4, #26
 80075a0:	45c8      	cmp	r8, r9
 80075a2:	dc09      	bgt.n	80075b8 <_printf_float+0x250>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	079b      	lsls	r3, r3, #30
 80075a8:	f100 8103 	bmi.w	80077b2 <_printf_float+0x44a>
 80075ac:	68e0      	ldr	r0, [r4, #12]
 80075ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075b0:	4298      	cmp	r0, r3
 80075b2:	bfb8      	it	lt
 80075b4:	4618      	movlt	r0, r3
 80075b6:	e734      	b.n	8007422 <_printf_float+0xba>
 80075b8:	2301      	movs	r3, #1
 80075ba:	4652      	mov	r2, sl
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	f43f af2b 	beq.w	800741e <_printf_float+0xb6>
 80075c8:	f109 0901 	add.w	r9, r9, #1
 80075cc:	e7e8      	b.n	80075a0 <_printf_float+0x238>
 80075ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc39      	bgt.n	8007648 <_printf_float+0x2e0>
 80075d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007644 <_printf_float+0x2dc>)
 80075d6:	2301      	movs	r3, #1
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f af1d 	beq.w	800741e <_printf_float+0xb6>
 80075e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80075e8:	ea59 0303 	orrs.w	r3, r9, r3
 80075ec:	d102      	bne.n	80075f4 <_printf_float+0x28c>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	07d9      	lsls	r1, r3, #31
 80075f2:	d5d7      	bpl.n	80075a4 <_printf_float+0x23c>
 80075f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075f8:	4631      	mov	r1, r6
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b8      	blx	r7
 80075fe:	3001      	adds	r0, #1
 8007600:	f43f af0d 	beq.w	800741e <_printf_float+0xb6>
 8007604:	f04f 0a00 	mov.w	sl, #0
 8007608:	f104 0b1a 	add.w	fp, r4, #26
 800760c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760e:	425b      	negs	r3, r3
 8007610:	4553      	cmp	r3, sl
 8007612:	dc01      	bgt.n	8007618 <_printf_float+0x2b0>
 8007614:	464b      	mov	r3, r9
 8007616:	e793      	b.n	8007540 <_printf_float+0x1d8>
 8007618:	2301      	movs	r3, #1
 800761a:	465a      	mov	r2, fp
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f aefb 	beq.w	800741e <_printf_float+0xb6>
 8007628:	f10a 0a01 	add.w	sl, sl, #1
 800762c:	e7ee      	b.n	800760c <_printf_float+0x2a4>
 800762e:	bf00      	nop
 8007630:	7fefffff 	.word	0x7fefffff
 8007634:	0800b7ec 	.word	0x0800b7ec
 8007638:	0800b7f0 	.word	0x0800b7f0
 800763c:	0800b7f4 	.word	0x0800b7f4
 8007640:	0800b7f8 	.word	0x0800b7f8
 8007644:	0800b7fc 	.word	0x0800b7fc
 8007648:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800764a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800764e:	4553      	cmp	r3, sl
 8007650:	bfa8      	it	ge
 8007652:	4653      	movge	r3, sl
 8007654:	2b00      	cmp	r3, #0
 8007656:	4699      	mov	r9, r3
 8007658:	dc36      	bgt.n	80076c8 <_printf_float+0x360>
 800765a:	f04f 0b00 	mov.w	fp, #0
 800765e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007662:	f104 021a 	add.w	r2, r4, #26
 8007666:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007668:	9306      	str	r3, [sp, #24]
 800766a:	eba3 0309 	sub.w	r3, r3, r9
 800766e:	455b      	cmp	r3, fp
 8007670:	dc31      	bgt.n	80076d6 <_printf_float+0x36e>
 8007672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007674:	459a      	cmp	sl, r3
 8007676:	dc3a      	bgt.n	80076ee <_printf_float+0x386>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	07da      	lsls	r2, r3, #31
 800767c:	d437      	bmi.n	80076ee <_printf_float+0x386>
 800767e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007680:	ebaa 0903 	sub.w	r9, sl, r3
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	ebaa 0303 	sub.w	r3, sl, r3
 800768a:	4599      	cmp	r9, r3
 800768c:	bfa8      	it	ge
 800768e:	4699      	movge	r9, r3
 8007690:	f1b9 0f00 	cmp.w	r9, #0
 8007694:	dc33      	bgt.n	80076fe <_printf_float+0x396>
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800769e:	f104 0b1a 	add.w	fp, r4, #26
 80076a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a4:	ebaa 0303 	sub.w	r3, sl, r3
 80076a8:	eba3 0309 	sub.w	r3, r3, r9
 80076ac:	4543      	cmp	r3, r8
 80076ae:	f77f af79 	ble.w	80075a4 <_printf_float+0x23c>
 80076b2:	2301      	movs	r3, #1
 80076b4:	465a      	mov	r2, fp
 80076b6:	4631      	mov	r1, r6
 80076b8:	4628      	mov	r0, r5
 80076ba:	47b8      	blx	r7
 80076bc:	3001      	adds	r0, #1
 80076be:	f43f aeae 	beq.w	800741e <_printf_float+0xb6>
 80076c2:	f108 0801 	add.w	r8, r8, #1
 80076c6:	e7ec      	b.n	80076a2 <_printf_float+0x33a>
 80076c8:	4642      	mov	r2, r8
 80076ca:	4631      	mov	r1, r6
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b8      	blx	r7
 80076d0:	3001      	adds	r0, #1
 80076d2:	d1c2      	bne.n	800765a <_printf_float+0x2f2>
 80076d4:	e6a3      	b.n	800741e <_printf_float+0xb6>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	9206      	str	r2, [sp, #24]
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f ae9c 	beq.w	800741e <_printf_float+0xb6>
 80076e6:	9a06      	ldr	r2, [sp, #24]
 80076e8:	f10b 0b01 	add.w	fp, fp, #1
 80076ec:	e7bb      	b.n	8007666 <_printf_float+0x2fe>
 80076ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	d1c0      	bne.n	800767e <_printf_float+0x316>
 80076fc:	e68f      	b.n	800741e <_printf_float+0xb6>
 80076fe:	9a06      	ldr	r2, [sp, #24]
 8007700:	464b      	mov	r3, r9
 8007702:	4442      	add	r2, r8
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	d1c3      	bne.n	8007696 <_printf_float+0x32e>
 800770e:	e686      	b.n	800741e <_printf_float+0xb6>
 8007710:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007714:	f1ba 0f01 	cmp.w	sl, #1
 8007718:	dc01      	bgt.n	800771e <_printf_float+0x3b6>
 800771a:	07db      	lsls	r3, r3, #31
 800771c:	d536      	bpl.n	800778c <_printf_float+0x424>
 800771e:	2301      	movs	r3, #1
 8007720:	4642      	mov	r2, r8
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f ae78 	beq.w	800741e <_printf_float+0xb6>
 800772e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f ae70 	beq.w	800741e <_printf_float+0xb6>
 800773e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007742:	2200      	movs	r2, #0
 8007744:	2300      	movs	r3, #0
 8007746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800774a:	f7f9 f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800774e:	b9c0      	cbnz	r0, 8007782 <_printf_float+0x41a>
 8007750:	4653      	mov	r3, sl
 8007752:	f108 0201 	add.w	r2, r8, #1
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	d10c      	bne.n	800777a <_printf_float+0x412>
 8007760:	e65d      	b.n	800741e <_printf_float+0xb6>
 8007762:	2301      	movs	r3, #1
 8007764:	465a      	mov	r2, fp
 8007766:	4631      	mov	r1, r6
 8007768:	4628      	mov	r0, r5
 800776a:	47b8      	blx	r7
 800776c:	3001      	adds	r0, #1
 800776e:	f43f ae56 	beq.w	800741e <_printf_float+0xb6>
 8007772:	f108 0801 	add.w	r8, r8, #1
 8007776:	45d0      	cmp	r8, sl
 8007778:	dbf3      	blt.n	8007762 <_printf_float+0x3fa>
 800777a:	464b      	mov	r3, r9
 800777c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007780:	e6df      	b.n	8007542 <_printf_float+0x1da>
 8007782:	f04f 0800 	mov.w	r8, #0
 8007786:	f104 0b1a 	add.w	fp, r4, #26
 800778a:	e7f4      	b.n	8007776 <_printf_float+0x40e>
 800778c:	2301      	movs	r3, #1
 800778e:	4642      	mov	r2, r8
 8007790:	e7e1      	b.n	8007756 <_printf_float+0x3ee>
 8007792:	2301      	movs	r3, #1
 8007794:	464a      	mov	r2, r9
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	f43f ae3e 	beq.w	800741e <_printf_float+0xb6>
 80077a2:	f108 0801 	add.w	r8, r8, #1
 80077a6:	68e3      	ldr	r3, [r4, #12]
 80077a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077aa:	1a5b      	subs	r3, r3, r1
 80077ac:	4543      	cmp	r3, r8
 80077ae:	dcf0      	bgt.n	8007792 <_printf_float+0x42a>
 80077b0:	e6fc      	b.n	80075ac <_printf_float+0x244>
 80077b2:	f04f 0800 	mov.w	r8, #0
 80077b6:	f104 0919 	add.w	r9, r4, #25
 80077ba:	e7f4      	b.n	80077a6 <_printf_float+0x43e>

080077bc <_printf_common>:
 80077bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	4616      	mov	r6, r2
 80077c2:	4698      	mov	r8, r3
 80077c4:	688a      	ldr	r2, [r1, #8]
 80077c6:	690b      	ldr	r3, [r1, #16]
 80077c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	bfb8      	it	lt
 80077d0:	4613      	movlt	r3, r2
 80077d2:	6033      	str	r3, [r6, #0]
 80077d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077d8:	4607      	mov	r7, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	b10a      	cbz	r2, 80077e2 <_printf_common+0x26>
 80077de:	3301      	adds	r3, #1
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	0699      	lsls	r1, r3, #26
 80077e6:	bf42      	ittt	mi
 80077e8:	6833      	ldrmi	r3, [r6, #0]
 80077ea:	3302      	addmi	r3, #2
 80077ec:	6033      	strmi	r3, [r6, #0]
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	f015 0506 	ands.w	r5, r5, #6
 80077f4:	d106      	bne.n	8007804 <_printf_common+0x48>
 80077f6:	f104 0a19 	add.w	sl, r4, #25
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	6832      	ldr	r2, [r6, #0]
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	42ab      	cmp	r3, r5
 8007802:	dc26      	bgt.n	8007852 <_printf_common+0x96>
 8007804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	3b00      	subs	r3, #0
 800780c:	bf18      	it	ne
 800780e:	2301      	movne	r3, #1
 8007810:	0692      	lsls	r2, r2, #26
 8007812:	d42b      	bmi.n	800786c <_printf_common+0xb0>
 8007814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007818:	4641      	mov	r1, r8
 800781a:	4638      	mov	r0, r7
 800781c:	47c8      	blx	r9
 800781e:	3001      	adds	r0, #1
 8007820:	d01e      	beq.n	8007860 <_printf_common+0xa4>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	6922      	ldr	r2, [r4, #16]
 8007826:	f003 0306 	and.w	r3, r3, #6
 800782a:	2b04      	cmp	r3, #4
 800782c:	bf02      	ittt	eq
 800782e:	68e5      	ldreq	r5, [r4, #12]
 8007830:	6833      	ldreq	r3, [r6, #0]
 8007832:	1aed      	subeq	r5, r5, r3
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	bf0c      	ite	eq
 8007838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800783c:	2500      	movne	r5, #0
 800783e:	4293      	cmp	r3, r2
 8007840:	bfc4      	itt	gt
 8007842:	1a9b      	subgt	r3, r3, r2
 8007844:	18ed      	addgt	r5, r5, r3
 8007846:	2600      	movs	r6, #0
 8007848:	341a      	adds	r4, #26
 800784a:	42b5      	cmp	r5, r6
 800784c:	d11a      	bne.n	8007884 <_printf_common+0xc8>
 800784e:	2000      	movs	r0, #0
 8007850:	e008      	b.n	8007864 <_printf_common+0xa8>
 8007852:	2301      	movs	r3, #1
 8007854:	4652      	mov	r2, sl
 8007856:	4641      	mov	r1, r8
 8007858:	4638      	mov	r0, r7
 800785a:	47c8      	blx	r9
 800785c:	3001      	adds	r0, #1
 800785e:	d103      	bne.n	8007868 <_printf_common+0xac>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	3501      	adds	r5, #1
 800786a:	e7c6      	b.n	80077fa <_printf_common+0x3e>
 800786c:	18e1      	adds	r1, r4, r3
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	2030      	movs	r0, #48	@ 0x30
 8007872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007876:	4422      	add	r2, r4
 8007878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800787c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007880:	3302      	adds	r3, #2
 8007882:	e7c7      	b.n	8007814 <_printf_common+0x58>
 8007884:	2301      	movs	r3, #1
 8007886:	4622      	mov	r2, r4
 8007888:	4641      	mov	r1, r8
 800788a:	4638      	mov	r0, r7
 800788c:	47c8      	blx	r9
 800788e:	3001      	adds	r0, #1
 8007890:	d0e6      	beq.n	8007860 <_printf_common+0xa4>
 8007892:	3601      	adds	r6, #1
 8007894:	e7d9      	b.n	800784a <_printf_common+0x8e>
	...

08007898 <_printf_i>:
 8007898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	7e0f      	ldrb	r7, [r1, #24]
 800789e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078a0:	2f78      	cmp	r7, #120	@ 0x78
 80078a2:	4691      	mov	r9, r2
 80078a4:	4680      	mov	r8, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	469a      	mov	sl, r3
 80078aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078ae:	d807      	bhi.n	80078c0 <_printf_i+0x28>
 80078b0:	2f62      	cmp	r7, #98	@ 0x62
 80078b2:	d80a      	bhi.n	80078ca <_printf_i+0x32>
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	f000 80d2 	beq.w	8007a5e <_printf_i+0x1c6>
 80078ba:	2f58      	cmp	r7, #88	@ 0x58
 80078bc:	f000 80b9 	beq.w	8007a32 <_printf_i+0x19a>
 80078c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078c8:	e03a      	b.n	8007940 <_printf_i+0xa8>
 80078ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078ce:	2b15      	cmp	r3, #21
 80078d0:	d8f6      	bhi.n	80078c0 <_printf_i+0x28>
 80078d2:	a101      	add	r1, pc, #4	@ (adr r1, 80078d8 <_printf_i+0x40>)
 80078d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078d8:	08007931 	.word	0x08007931
 80078dc:	08007945 	.word	0x08007945
 80078e0:	080078c1 	.word	0x080078c1
 80078e4:	080078c1 	.word	0x080078c1
 80078e8:	080078c1 	.word	0x080078c1
 80078ec:	080078c1 	.word	0x080078c1
 80078f0:	08007945 	.word	0x08007945
 80078f4:	080078c1 	.word	0x080078c1
 80078f8:	080078c1 	.word	0x080078c1
 80078fc:	080078c1 	.word	0x080078c1
 8007900:	080078c1 	.word	0x080078c1
 8007904:	08007a45 	.word	0x08007a45
 8007908:	0800796f 	.word	0x0800796f
 800790c:	080079ff 	.word	0x080079ff
 8007910:	080078c1 	.word	0x080078c1
 8007914:	080078c1 	.word	0x080078c1
 8007918:	08007a67 	.word	0x08007a67
 800791c:	080078c1 	.word	0x080078c1
 8007920:	0800796f 	.word	0x0800796f
 8007924:	080078c1 	.word	0x080078c1
 8007928:	080078c1 	.word	0x080078c1
 800792c:	08007a07 	.word	0x08007a07
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	1d1a      	adds	r2, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6032      	str	r2, [r6, #0]
 8007938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800793c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007940:	2301      	movs	r3, #1
 8007942:	e09d      	b.n	8007a80 <_printf_i+0x1e8>
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	1d19      	adds	r1, r3, #4
 800794a:	6031      	str	r1, [r6, #0]
 800794c:	0606      	lsls	r6, r0, #24
 800794e:	d501      	bpl.n	8007954 <_printf_i+0xbc>
 8007950:	681d      	ldr	r5, [r3, #0]
 8007952:	e003      	b.n	800795c <_printf_i+0xc4>
 8007954:	0645      	lsls	r5, r0, #25
 8007956:	d5fb      	bpl.n	8007950 <_printf_i+0xb8>
 8007958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800795c:	2d00      	cmp	r5, #0
 800795e:	da03      	bge.n	8007968 <_printf_i+0xd0>
 8007960:	232d      	movs	r3, #45	@ 0x2d
 8007962:	426d      	negs	r5, r5
 8007964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007968:	4859      	ldr	r0, [pc, #356]	@ (8007ad0 <_printf_i+0x238>)
 800796a:	230a      	movs	r3, #10
 800796c:	e011      	b.n	8007992 <_printf_i+0xfa>
 800796e:	6821      	ldr	r1, [r4, #0]
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	0608      	lsls	r0, r1, #24
 8007974:	f853 5b04 	ldr.w	r5, [r3], #4
 8007978:	d402      	bmi.n	8007980 <_printf_i+0xe8>
 800797a:	0649      	lsls	r1, r1, #25
 800797c:	bf48      	it	mi
 800797e:	b2ad      	uxthmi	r5, r5
 8007980:	2f6f      	cmp	r7, #111	@ 0x6f
 8007982:	4853      	ldr	r0, [pc, #332]	@ (8007ad0 <_printf_i+0x238>)
 8007984:	6033      	str	r3, [r6, #0]
 8007986:	bf14      	ite	ne
 8007988:	230a      	movne	r3, #10
 800798a:	2308      	moveq	r3, #8
 800798c:	2100      	movs	r1, #0
 800798e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007992:	6866      	ldr	r6, [r4, #4]
 8007994:	60a6      	str	r6, [r4, #8]
 8007996:	2e00      	cmp	r6, #0
 8007998:	bfa2      	ittt	ge
 800799a:	6821      	ldrge	r1, [r4, #0]
 800799c:	f021 0104 	bicge.w	r1, r1, #4
 80079a0:	6021      	strge	r1, [r4, #0]
 80079a2:	b90d      	cbnz	r5, 80079a8 <_printf_i+0x110>
 80079a4:	2e00      	cmp	r6, #0
 80079a6:	d04b      	beq.n	8007a40 <_printf_i+0x1a8>
 80079a8:	4616      	mov	r6, r2
 80079aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ae:	fb03 5711 	mls	r7, r3, r1, r5
 80079b2:	5dc7      	ldrb	r7, [r0, r7]
 80079b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079b8:	462f      	mov	r7, r5
 80079ba:	42bb      	cmp	r3, r7
 80079bc:	460d      	mov	r5, r1
 80079be:	d9f4      	bls.n	80079aa <_printf_i+0x112>
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d10b      	bne.n	80079dc <_printf_i+0x144>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	07df      	lsls	r7, r3, #31
 80079c8:	d508      	bpl.n	80079dc <_printf_i+0x144>
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	6861      	ldr	r1, [r4, #4]
 80079ce:	4299      	cmp	r1, r3
 80079d0:	bfde      	ittt	le
 80079d2:	2330      	movle	r3, #48	@ 0x30
 80079d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079dc:	1b92      	subs	r2, r2, r6
 80079de:	6122      	str	r2, [r4, #16]
 80079e0:	f8cd a000 	str.w	sl, [sp]
 80079e4:	464b      	mov	r3, r9
 80079e6:	aa03      	add	r2, sp, #12
 80079e8:	4621      	mov	r1, r4
 80079ea:	4640      	mov	r0, r8
 80079ec:	f7ff fee6 	bl	80077bc <_printf_common>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d14a      	bne.n	8007a8a <_printf_i+0x1f2>
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	b004      	add	sp, #16
 80079fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	f043 0320 	orr.w	r3, r3, #32
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	4833      	ldr	r0, [pc, #204]	@ (8007ad4 <_printf_i+0x23c>)
 8007a08:	2778      	movs	r7, #120	@ 0x78
 8007a0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	6831      	ldr	r1, [r6, #0]
 8007a12:	061f      	lsls	r7, r3, #24
 8007a14:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a18:	d402      	bmi.n	8007a20 <_printf_i+0x188>
 8007a1a:	065f      	lsls	r7, r3, #25
 8007a1c:	bf48      	it	mi
 8007a1e:	b2ad      	uxthmi	r5, r5
 8007a20:	6031      	str	r1, [r6, #0]
 8007a22:	07d9      	lsls	r1, r3, #31
 8007a24:	bf44      	itt	mi
 8007a26:	f043 0320 	orrmi.w	r3, r3, #32
 8007a2a:	6023      	strmi	r3, [r4, #0]
 8007a2c:	b11d      	cbz	r5, 8007a36 <_printf_i+0x19e>
 8007a2e:	2310      	movs	r3, #16
 8007a30:	e7ac      	b.n	800798c <_printf_i+0xf4>
 8007a32:	4827      	ldr	r0, [pc, #156]	@ (8007ad0 <_printf_i+0x238>)
 8007a34:	e7e9      	b.n	8007a0a <_printf_i+0x172>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	f023 0320 	bic.w	r3, r3, #32
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	e7f6      	b.n	8007a2e <_printf_i+0x196>
 8007a40:	4616      	mov	r6, r2
 8007a42:	e7bd      	b.n	80079c0 <_printf_i+0x128>
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	6825      	ldr	r5, [r4, #0]
 8007a48:	6961      	ldr	r1, [r4, #20]
 8007a4a:	1d18      	adds	r0, r3, #4
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	062e      	lsls	r6, r5, #24
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	d501      	bpl.n	8007a58 <_printf_i+0x1c0>
 8007a54:	6019      	str	r1, [r3, #0]
 8007a56:	e002      	b.n	8007a5e <_printf_i+0x1c6>
 8007a58:	0668      	lsls	r0, r5, #25
 8007a5a:	d5fb      	bpl.n	8007a54 <_printf_i+0x1bc>
 8007a5c:	8019      	strh	r1, [r3, #0]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	6123      	str	r3, [r4, #16]
 8007a62:	4616      	mov	r6, r2
 8007a64:	e7bc      	b.n	80079e0 <_printf_i+0x148>
 8007a66:	6833      	ldr	r3, [r6, #0]
 8007a68:	1d1a      	adds	r2, r3, #4
 8007a6a:	6032      	str	r2, [r6, #0]
 8007a6c:	681e      	ldr	r6, [r3, #0]
 8007a6e:	6862      	ldr	r2, [r4, #4]
 8007a70:	2100      	movs	r1, #0
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7f8 fbbc 	bl	80001f0 <memchr>
 8007a78:	b108      	cbz	r0, 8007a7e <_printf_i+0x1e6>
 8007a7a:	1b80      	subs	r0, r0, r6
 8007a7c:	6060      	str	r0, [r4, #4]
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	6123      	str	r3, [r4, #16]
 8007a82:	2300      	movs	r3, #0
 8007a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a88:	e7aa      	b.n	80079e0 <_printf_i+0x148>
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	4649      	mov	r1, r9
 8007a90:	4640      	mov	r0, r8
 8007a92:	47d0      	blx	sl
 8007a94:	3001      	adds	r0, #1
 8007a96:	d0ad      	beq.n	80079f4 <_printf_i+0x15c>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	079b      	lsls	r3, r3, #30
 8007a9c:	d413      	bmi.n	8007ac6 <_printf_i+0x22e>
 8007a9e:	68e0      	ldr	r0, [r4, #12]
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	4298      	cmp	r0, r3
 8007aa4:	bfb8      	it	lt
 8007aa6:	4618      	movlt	r0, r3
 8007aa8:	e7a6      	b.n	80079f8 <_printf_i+0x160>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4632      	mov	r2, r6
 8007aae:	4649      	mov	r1, r9
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	47d0      	blx	sl
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d09d      	beq.n	80079f4 <_printf_i+0x15c>
 8007ab8:	3501      	adds	r5, #1
 8007aba:	68e3      	ldr	r3, [r4, #12]
 8007abc:	9903      	ldr	r1, [sp, #12]
 8007abe:	1a5b      	subs	r3, r3, r1
 8007ac0:	42ab      	cmp	r3, r5
 8007ac2:	dcf2      	bgt.n	8007aaa <_printf_i+0x212>
 8007ac4:	e7eb      	b.n	8007a9e <_printf_i+0x206>
 8007ac6:	2500      	movs	r5, #0
 8007ac8:	f104 0619 	add.w	r6, r4, #25
 8007acc:	e7f5      	b.n	8007aba <_printf_i+0x222>
 8007ace:	bf00      	nop
 8007ad0:	0800b7fe 	.word	0x0800b7fe
 8007ad4:	0800b80f 	.word	0x0800b80f

08007ad8 <_scanf_float>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	b087      	sub	sp, #28
 8007ade:	4617      	mov	r7, r2
 8007ae0:	9303      	str	r3, [sp, #12]
 8007ae2:	688b      	ldr	r3, [r1, #8]
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007aea:	bf81      	itttt	hi
 8007aec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007af0:	eb03 0b05 	addhi.w	fp, r3, r5
 8007af4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007af8:	608b      	strhi	r3, [r1, #8]
 8007afa:	680b      	ldr	r3, [r1, #0]
 8007afc:	460a      	mov	r2, r1
 8007afe:	f04f 0500 	mov.w	r5, #0
 8007b02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007b06:	f842 3b1c 	str.w	r3, [r2], #28
 8007b0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b0e:	4680      	mov	r8, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	bf98      	it	ls
 8007b14:	f04f 0b00 	movls.w	fp, #0
 8007b18:	9201      	str	r2, [sp, #4]
 8007b1a:	4616      	mov	r6, r2
 8007b1c:	46aa      	mov	sl, r5
 8007b1e:	46a9      	mov	r9, r5
 8007b20:	9502      	str	r5, [sp, #8]
 8007b22:	68a2      	ldr	r2, [r4, #8]
 8007b24:	b152      	cbz	r2, 8007b3c <_scanf_float+0x64>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8007b2c:	d864      	bhi.n	8007bf8 <_scanf_float+0x120>
 8007b2e:	2b40      	cmp	r3, #64	@ 0x40
 8007b30:	d83c      	bhi.n	8007bac <_scanf_float+0xd4>
 8007b32:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007b36:	b2c8      	uxtb	r0, r1
 8007b38:	280e      	cmp	r0, #14
 8007b3a:	d93a      	bls.n	8007bb2 <_scanf_float+0xda>
 8007b3c:	f1b9 0f00 	cmp.w	r9, #0
 8007b40:	d003      	beq.n	8007b4a <_scanf_float+0x72>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b4e:	f1ba 0f01 	cmp.w	sl, #1
 8007b52:	f200 8117 	bhi.w	8007d84 <_scanf_float+0x2ac>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	429e      	cmp	r6, r3
 8007b5a:	f200 8108 	bhi.w	8007d6e <_scanf_float+0x296>
 8007b5e:	2001      	movs	r0, #1
 8007b60:	b007      	add	sp, #28
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b66:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007b6a:	2a0d      	cmp	r2, #13
 8007b6c:	d8e6      	bhi.n	8007b3c <_scanf_float+0x64>
 8007b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b74 <_scanf_float+0x9c>)
 8007b70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b74:	08007cbb 	.word	0x08007cbb
 8007b78:	08007b3d 	.word	0x08007b3d
 8007b7c:	08007b3d 	.word	0x08007b3d
 8007b80:	08007b3d 	.word	0x08007b3d
 8007b84:	08007d1b 	.word	0x08007d1b
 8007b88:	08007cf3 	.word	0x08007cf3
 8007b8c:	08007b3d 	.word	0x08007b3d
 8007b90:	08007b3d 	.word	0x08007b3d
 8007b94:	08007cc9 	.word	0x08007cc9
 8007b98:	08007b3d 	.word	0x08007b3d
 8007b9c:	08007b3d 	.word	0x08007b3d
 8007ba0:	08007b3d 	.word	0x08007b3d
 8007ba4:	08007b3d 	.word	0x08007b3d
 8007ba8:	08007c81 	.word	0x08007c81
 8007bac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007bb0:	e7db      	b.n	8007b6a <_scanf_float+0x92>
 8007bb2:	290e      	cmp	r1, #14
 8007bb4:	d8c2      	bhi.n	8007b3c <_scanf_float+0x64>
 8007bb6:	a001      	add	r0, pc, #4	@ (adr r0, 8007bbc <_scanf_float+0xe4>)
 8007bb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007bbc:	08007c71 	.word	0x08007c71
 8007bc0:	08007b3d 	.word	0x08007b3d
 8007bc4:	08007c71 	.word	0x08007c71
 8007bc8:	08007d07 	.word	0x08007d07
 8007bcc:	08007b3d 	.word	0x08007b3d
 8007bd0:	08007c19 	.word	0x08007c19
 8007bd4:	08007c57 	.word	0x08007c57
 8007bd8:	08007c57 	.word	0x08007c57
 8007bdc:	08007c57 	.word	0x08007c57
 8007be0:	08007c57 	.word	0x08007c57
 8007be4:	08007c57 	.word	0x08007c57
 8007be8:	08007c57 	.word	0x08007c57
 8007bec:	08007c57 	.word	0x08007c57
 8007bf0:	08007c57 	.word	0x08007c57
 8007bf4:	08007c57 	.word	0x08007c57
 8007bf8:	2b6e      	cmp	r3, #110	@ 0x6e
 8007bfa:	d809      	bhi.n	8007c10 <_scanf_float+0x138>
 8007bfc:	2b60      	cmp	r3, #96	@ 0x60
 8007bfe:	d8b2      	bhi.n	8007b66 <_scanf_float+0x8e>
 8007c00:	2b54      	cmp	r3, #84	@ 0x54
 8007c02:	d07b      	beq.n	8007cfc <_scanf_float+0x224>
 8007c04:	2b59      	cmp	r3, #89	@ 0x59
 8007c06:	d199      	bne.n	8007b3c <_scanf_float+0x64>
 8007c08:	2d07      	cmp	r5, #7
 8007c0a:	d197      	bne.n	8007b3c <_scanf_float+0x64>
 8007c0c:	2508      	movs	r5, #8
 8007c0e:	e02c      	b.n	8007c6a <_scanf_float+0x192>
 8007c10:	2b74      	cmp	r3, #116	@ 0x74
 8007c12:	d073      	beq.n	8007cfc <_scanf_float+0x224>
 8007c14:	2b79      	cmp	r3, #121	@ 0x79
 8007c16:	e7f6      	b.n	8007c06 <_scanf_float+0x12e>
 8007c18:	6821      	ldr	r1, [r4, #0]
 8007c1a:	05c8      	lsls	r0, r1, #23
 8007c1c:	d51b      	bpl.n	8007c56 <_scanf_float+0x17e>
 8007c1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007c22:	6021      	str	r1, [r4, #0]
 8007c24:	f109 0901 	add.w	r9, r9, #1
 8007c28:	f1bb 0f00 	cmp.w	fp, #0
 8007c2c:	d003      	beq.n	8007c36 <_scanf_float+0x15e>
 8007c2e:	3201      	adds	r2, #1
 8007c30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c34:	60a2      	str	r2, [r4, #8]
 8007c36:	68a3      	ldr	r3, [r4, #8]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	60a3      	str	r3, [r4, #8]
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	f340 8087 	ble.w	8007d5c <_scanf_float+0x284>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	e765      	b.n	8007b22 <_scanf_float+0x4a>
 8007c56:	eb1a 0105 	adds.w	r1, sl, r5
 8007c5a:	f47f af6f 	bne.w	8007b3c <_scanf_float+0x64>
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007c64:	6022      	str	r2, [r4, #0]
 8007c66:	460d      	mov	r5, r1
 8007c68:	468a      	mov	sl, r1
 8007c6a:	f806 3b01 	strb.w	r3, [r6], #1
 8007c6e:	e7e2      	b.n	8007c36 <_scanf_float+0x15e>
 8007c70:	6822      	ldr	r2, [r4, #0]
 8007c72:	0610      	lsls	r0, r2, #24
 8007c74:	f57f af62 	bpl.w	8007b3c <_scanf_float+0x64>
 8007c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c7c:	6022      	str	r2, [r4, #0]
 8007c7e:	e7f4      	b.n	8007c6a <_scanf_float+0x192>
 8007c80:	f1ba 0f00 	cmp.w	sl, #0
 8007c84:	d10e      	bne.n	8007ca4 <_scanf_float+0x1cc>
 8007c86:	f1b9 0f00 	cmp.w	r9, #0
 8007c8a:	d10e      	bne.n	8007caa <_scanf_float+0x1d2>
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007c92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007c96:	d108      	bne.n	8007caa <_scanf_float+0x1d2>
 8007c98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	f04f 0a01 	mov.w	sl, #1
 8007ca2:	e7e2      	b.n	8007c6a <_scanf_float+0x192>
 8007ca4:	f1ba 0f02 	cmp.w	sl, #2
 8007ca8:	d055      	beq.n	8007d56 <_scanf_float+0x27e>
 8007caa:	2d01      	cmp	r5, #1
 8007cac:	d002      	beq.n	8007cb4 <_scanf_float+0x1dc>
 8007cae:	2d04      	cmp	r5, #4
 8007cb0:	f47f af44 	bne.w	8007b3c <_scanf_float+0x64>
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	b2ed      	uxtb	r5, r5
 8007cb8:	e7d7      	b.n	8007c6a <_scanf_float+0x192>
 8007cba:	f1ba 0f01 	cmp.w	sl, #1
 8007cbe:	f47f af3d 	bne.w	8007b3c <_scanf_float+0x64>
 8007cc2:	f04f 0a02 	mov.w	sl, #2
 8007cc6:	e7d0      	b.n	8007c6a <_scanf_float+0x192>
 8007cc8:	b97d      	cbnz	r5, 8007cea <_scanf_float+0x212>
 8007cca:	f1b9 0f00 	cmp.w	r9, #0
 8007cce:	f47f af38 	bne.w	8007b42 <_scanf_float+0x6a>
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007cd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007cdc:	f040 8108 	bne.w	8007ef0 <_scanf_float+0x418>
 8007ce0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ce4:	6022      	str	r2, [r4, #0]
 8007ce6:	2501      	movs	r5, #1
 8007ce8:	e7bf      	b.n	8007c6a <_scanf_float+0x192>
 8007cea:	2d03      	cmp	r5, #3
 8007cec:	d0e2      	beq.n	8007cb4 <_scanf_float+0x1dc>
 8007cee:	2d05      	cmp	r5, #5
 8007cf0:	e7de      	b.n	8007cb0 <_scanf_float+0x1d8>
 8007cf2:	2d02      	cmp	r5, #2
 8007cf4:	f47f af22 	bne.w	8007b3c <_scanf_float+0x64>
 8007cf8:	2503      	movs	r5, #3
 8007cfa:	e7b6      	b.n	8007c6a <_scanf_float+0x192>
 8007cfc:	2d06      	cmp	r5, #6
 8007cfe:	f47f af1d 	bne.w	8007b3c <_scanf_float+0x64>
 8007d02:	2507      	movs	r5, #7
 8007d04:	e7b1      	b.n	8007c6a <_scanf_float+0x192>
 8007d06:	6822      	ldr	r2, [r4, #0]
 8007d08:	0591      	lsls	r1, r2, #22
 8007d0a:	f57f af17 	bpl.w	8007b3c <_scanf_float+0x64>
 8007d0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d18:	e7a7      	b.n	8007c6a <_scanf_float+0x192>
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007d20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d24:	d006      	beq.n	8007d34 <_scanf_float+0x25c>
 8007d26:	0550      	lsls	r0, r2, #21
 8007d28:	f57f af08 	bpl.w	8007b3c <_scanf_float+0x64>
 8007d2c:	f1b9 0f00 	cmp.w	r9, #0
 8007d30:	f000 80de 	beq.w	8007ef0 <_scanf_float+0x418>
 8007d34:	0591      	lsls	r1, r2, #22
 8007d36:	bf58      	it	pl
 8007d38:	9902      	ldrpl	r1, [sp, #8]
 8007d3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d3e:	bf58      	it	pl
 8007d40:	eba9 0101 	subpl.w	r1, r9, r1
 8007d44:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007d48:	bf58      	it	pl
 8007d4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d4e:	6022      	str	r2, [r4, #0]
 8007d50:	f04f 0900 	mov.w	r9, #0
 8007d54:	e789      	b.n	8007c6a <_scanf_float+0x192>
 8007d56:	f04f 0a03 	mov.w	sl, #3
 8007d5a:	e786      	b.n	8007c6a <_scanf_float+0x192>
 8007d5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007d60:	4639      	mov	r1, r7
 8007d62:	4640      	mov	r0, r8
 8007d64:	4798      	blx	r3
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f43f aedb 	beq.w	8007b22 <_scanf_float+0x4a>
 8007d6c:	e6e6      	b.n	8007b3c <_scanf_float+0x64>
 8007d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d76:	463a      	mov	r2, r7
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4798      	blx	r3
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	6123      	str	r3, [r4, #16]
 8007d82:	e6e8      	b.n	8007b56 <_scanf_float+0x7e>
 8007d84:	1e6b      	subs	r3, r5, #1
 8007d86:	2b06      	cmp	r3, #6
 8007d88:	d824      	bhi.n	8007dd4 <_scanf_float+0x2fc>
 8007d8a:	2d02      	cmp	r5, #2
 8007d8c:	d836      	bhi.n	8007dfc <_scanf_float+0x324>
 8007d8e:	9b01      	ldr	r3, [sp, #4]
 8007d90:	429e      	cmp	r6, r3
 8007d92:	f67f aee4 	bls.w	8007b5e <_scanf_float+0x86>
 8007d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d9e:	463a      	mov	r2, r7
 8007da0:	4640      	mov	r0, r8
 8007da2:	4798      	blx	r3
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	6123      	str	r3, [r4, #16]
 8007daa:	e7f0      	b.n	8007d8e <_scanf_float+0x2b6>
 8007dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007db0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007db4:	463a      	mov	r2, r7
 8007db6:	4640      	mov	r0, r8
 8007db8:	4798      	blx	r3
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	6123      	str	r3, [r4, #16]
 8007dc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dc4:	fa5f fa8a 	uxtb.w	sl, sl
 8007dc8:	f1ba 0f02 	cmp.w	sl, #2
 8007dcc:	d1ee      	bne.n	8007dac <_scanf_float+0x2d4>
 8007dce:	3d03      	subs	r5, #3
 8007dd0:	b2ed      	uxtb	r5, r5
 8007dd2:	1b76      	subs	r6, r6, r5
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	05da      	lsls	r2, r3, #23
 8007dd8:	d530      	bpl.n	8007e3c <_scanf_float+0x364>
 8007dda:	055b      	lsls	r3, r3, #21
 8007ddc:	d511      	bpl.n	8007e02 <_scanf_float+0x32a>
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	429e      	cmp	r6, r3
 8007de2:	f67f aebc 	bls.w	8007b5e <_scanf_float+0x86>
 8007de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dee:	463a      	mov	r2, r7
 8007df0:	4640      	mov	r0, r8
 8007df2:	4798      	blx	r3
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	e7f0      	b.n	8007dde <_scanf_float+0x306>
 8007dfc:	46aa      	mov	sl, r5
 8007dfe:	46b3      	mov	fp, r6
 8007e00:	e7de      	b.n	8007dc0 <_scanf_float+0x2e8>
 8007e02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	2965      	cmp	r1, #101	@ 0x65
 8007e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	d00c      	beq.n	8007e30 <_scanf_float+0x358>
 8007e16:	2945      	cmp	r1, #69	@ 0x45
 8007e18:	d00a      	beq.n	8007e30 <_scanf_float+0x358>
 8007e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e1e:	463a      	mov	r2, r7
 8007e20:	4640      	mov	r0, r8
 8007e22:	4798      	blx	r3
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	1eb5      	subs	r5, r6, #2
 8007e2e:	6123      	str	r3, [r4, #16]
 8007e30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e34:	463a      	mov	r2, r7
 8007e36:	4640      	mov	r0, r8
 8007e38:	4798      	blx	r3
 8007e3a:	462e      	mov	r6, r5
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	f012 0210 	ands.w	r2, r2, #16
 8007e42:	d001      	beq.n	8007e48 <_scanf_float+0x370>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e68b      	b.n	8007b60 <_scanf_float+0x88>
 8007e48:	7032      	strb	r2, [r6, #0]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e54:	d11c      	bne.n	8007e90 <_scanf_float+0x3b8>
 8007e56:	9b02      	ldr	r3, [sp, #8]
 8007e58:	454b      	cmp	r3, r9
 8007e5a:	eba3 0209 	sub.w	r2, r3, r9
 8007e5e:	d123      	bne.n	8007ea8 <_scanf_float+0x3d0>
 8007e60:	9901      	ldr	r1, [sp, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	4640      	mov	r0, r8
 8007e66:	f002 fb53 	bl	800a510 <_strtod_r>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	6821      	ldr	r1, [r4, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f011 0f02 	tst.w	r1, #2
 8007e74:	ec57 6b10 	vmov	r6, r7, d0
 8007e78:	f103 0204 	add.w	r2, r3, #4
 8007e7c:	d01f      	beq.n	8007ebe <_scanf_float+0x3e6>
 8007e7e:	9903      	ldr	r1, [sp, #12]
 8007e80:	600a      	str	r2, [r1, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	e9c3 6700 	strd	r6, r7, [r3]
 8007e88:	68e3      	ldr	r3, [r4, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	60e3      	str	r3, [r4, #12]
 8007e8e:	e7d9      	b.n	8007e44 <_scanf_float+0x36c>
 8007e90:	9b04      	ldr	r3, [sp, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0e4      	beq.n	8007e60 <_scanf_float+0x388>
 8007e96:	9905      	ldr	r1, [sp, #20]
 8007e98:	230a      	movs	r3, #10
 8007e9a:	3101      	adds	r1, #1
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	f002 fbb7 	bl	800a610 <_strtol_r>
 8007ea2:	9b04      	ldr	r3, [sp, #16]
 8007ea4:	9e05      	ldr	r6, [sp, #20]
 8007ea6:	1ac2      	subs	r2, r0, r3
 8007ea8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007eac:	429e      	cmp	r6, r3
 8007eae:	bf28      	it	cs
 8007eb0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007eb4:	4910      	ldr	r1, [pc, #64]	@ (8007ef8 <_scanf_float+0x420>)
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 f8e4 	bl	8008084 <siprintf>
 8007ebc:	e7d0      	b.n	8007e60 <_scanf_float+0x388>
 8007ebe:	f011 0f04 	tst.w	r1, #4
 8007ec2:	9903      	ldr	r1, [sp, #12]
 8007ec4:	600a      	str	r2, [r1, #0]
 8007ec6:	d1dc      	bne.n	8007e82 <_scanf_float+0x3aa>
 8007ec8:	681d      	ldr	r5, [r3, #0]
 8007eca:	4632      	mov	r2, r6
 8007ecc:	463b      	mov	r3, r7
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	f7f8 fe3b 	bl	8000b4c <__aeabi_dcmpun>
 8007ed6:	b128      	cbz	r0, 8007ee4 <_scanf_float+0x40c>
 8007ed8:	4808      	ldr	r0, [pc, #32]	@ (8007efc <_scanf_float+0x424>)
 8007eda:	f000 f9c7 	bl	800826c <nanf>
 8007ede:	ed85 0a00 	vstr	s0, [r5]
 8007ee2:	e7d1      	b.n	8007e88 <_scanf_float+0x3b0>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 fe8e 	bl	8000c08 <__aeabi_d2f>
 8007eec:	6028      	str	r0, [r5, #0]
 8007eee:	e7cb      	b.n	8007e88 <_scanf_float+0x3b0>
 8007ef0:	f04f 0900 	mov.w	r9, #0
 8007ef4:	e629      	b.n	8007b4a <_scanf_float+0x72>
 8007ef6:	bf00      	nop
 8007ef8:	0800b820 	.word	0x0800b820
 8007efc:	0800bbb5 	.word	0x0800bbb5

08007f00 <std>:
 8007f00:	2300      	movs	r3, #0
 8007f02:	b510      	push	{r4, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f0e:	6083      	str	r3, [r0, #8]
 8007f10:	8181      	strh	r1, [r0, #12]
 8007f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f14:	81c2      	strh	r2, [r0, #14]
 8007f16:	6183      	str	r3, [r0, #24]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	305c      	adds	r0, #92	@ 0x5c
 8007f1e:	f000 f914 	bl	800814a <memset>
 8007f22:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <std+0x58>)
 8007f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <std+0x5c>)
 8007f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <std+0x60>)
 8007f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <std+0x64>)
 8007f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <std+0x68>)
 8007f34:	6224      	str	r4, [r4, #32]
 8007f36:	429c      	cmp	r4, r3
 8007f38:	d006      	beq.n	8007f48 <std+0x48>
 8007f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f3e:	4294      	cmp	r4, r2
 8007f40:	d002      	beq.n	8007f48 <std+0x48>
 8007f42:	33d0      	adds	r3, #208	@ 0xd0
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d105      	bne.n	8007f54 <std+0x54>
 8007f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f50:	f000 b988 	b.w	8008264 <__retarget_lock_init_recursive>
 8007f54:	bd10      	pop	{r4, pc}
 8007f56:	bf00      	nop
 8007f58:	080080c5 	.word	0x080080c5
 8007f5c:	080080e7 	.word	0x080080e7
 8007f60:	0800811f 	.word	0x0800811f
 8007f64:	08008143 	.word	0x08008143
 8007f68:	2000047c 	.word	0x2000047c

08007f6c <stdio_exit_handler>:
 8007f6c:	4a02      	ldr	r2, [pc, #8]	@ (8007f78 <stdio_exit_handler+0xc>)
 8007f6e:	4903      	ldr	r1, [pc, #12]	@ (8007f7c <stdio_exit_handler+0x10>)
 8007f70:	4803      	ldr	r0, [pc, #12]	@ (8007f80 <stdio_exit_handler+0x14>)
 8007f72:	f000 b869 	b.w	8008048 <_fwalk_sglue>
 8007f76:	bf00      	nop
 8007f78:	2000001c 	.word	0x2000001c
 8007f7c:	0800a9cd 	.word	0x0800a9cd
 8007f80:	2000002c 	.word	0x2000002c

08007f84 <cleanup_stdio>:
 8007f84:	6841      	ldr	r1, [r0, #4]
 8007f86:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb8 <cleanup_stdio+0x34>)
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	d001      	beq.n	8007f94 <cleanup_stdio+0x10>
 8007f90:	f002 fd1c 	bl	800a9cc <_fflush_r>
 8007f94:	68a1      	ldr	r1, [r4, #8]
 8007f96:	4b09      	ldr	r3, [pc, #36]	@ (8007fbc <cleanup_stdio+0x38>)
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d002      	beq.n	8007fa2 <cleanup_stdio+0x1e>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f002 fd15 	bl	800a9cc <_fflush_r>
 8007fa2:	68e1      	ldr	r1, [r4, #12]
 8007fa4:	4b06      	ldr	r3, [pc, #24]	@ (8007fc0 <cleanup_stdio+0x3c>)
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d004      	beq.n	8007fb4 <cleanup_stdio+0x30>
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb0:	f002 bd0c 	b.w	800a9cc <_fflush_r>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000047c 	.word	0x2000047c
 8007fbc:	200004e4 	.word	0x200004e4
 8007fc0:	2000054c 	.word	0x2000054c

08007fc4 <global_stdio_init.part.0>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff4 <global_stdio_init.part.0+0x30>)
 8007fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8007ff8 <global_stdio_init.part.0+0x34>)
 8007fca:	4a0c      	ldr	r2, [pc, #48]	@ (8007ffc <global_stdio_init.part.0+0x38>)
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	f7ff ff94 	bl	8007f00 <std>
 8007fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fdc:	2201      	movs	r2, #1
 8007fde:	2109      	movs	r1, #9
 8007fe0:	f7ff ff8e 	bl	8007f00 <std>
 8007fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fe8:	2202      	movs	r2, #2
 8007fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fee:	2112      	movs	r1, #18
 8007ff0:	f7ff bf86 	b.w	8007f00 <std>
 8007ff4:	200005b4 	.word	0x200005b4
 8007ff8:	2000047c 	.word	0x2000047c
 8007ffc:	08007f6d 	.word	0x08007f6d

08008000 <__sfp_lock_acquire>:
 8008000:	4801      	ldr	r0, [pc, #4]	@ (8008008 <__sfp_lock_acquire+0x8>)
 8008002:	f000 b930 	b.w	8008266 <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	200005bd 	.word	0x200005bd

0800800c <__sfp_lock_release>:
 800800c:	4801      	ldr	r0, [pc, #4]	@ (8008014 <__sfp_lock_release+0x8>)
 800800e:	f000 b92b 	b.w	8008268 <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	200005bd 	.word	0x200005bd

08008018 <__sinit>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	f7ff fff0 	bl	8008000 <__sfp_lock_acquire>
 8008020:	6a23      	ldr	r3, [r4, #32]
 8008022:	b11b      	cbz	r3, 800802c <__sinit+0x14>
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f7ff bff0 	b.w	800800c <__sfp_lock_release>
 800802c:	4b04      	ldr	r3, [pc, #16]	@ (8008040 <__sinit+0x28>)
 800802e:	6223      	str	r3, [r4, #32]
 8008030:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <__sinit+0x2c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1f5      	bne.n	8008024 <__sinit+0xc>
 8008038:	f7ff ffc4 	bl	8007fc4 <global_stdio_init.part.0>
 800803c:	e7f2      	b.n	8008024 <__sinit+0xc>
 800803e:	bf00      	nop
 8008040:	08007f85 	.word	0x08007f85
 8008044:	200005b4 	.word	0x200005b4

08008048 <_fwalk_sglue>:
 8008048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800804c:	4607      	mov	r7, r0
 800804e:	4688      	mov	r8, r1
 8008050:	4614      	mov	r4, r2
 8008052:	2600      	movs	r6, #0
 8008054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008058:	f1b9 0901 	subs.w	r9, r9, #1
 800805c:	d505      	bpl.n	800806a <_fwalk_sglue+0x22>
 800805e:	6824      	ldr	r4, [r4, #0]
 8008060:	2c00      	cmp	r4, #0
 8008062:	d1f7      	bne.n	8008054 <_fwalk_sglue+0xc>
 8008064:	4630      	mov	r0, r6
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d907      	bls.n	8008080 <_fwalk_sglue+0x38>
 8008070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008074:	3301      	adds	r3, #1
 8008076:	d003      	beq.n	8008080 <_fwalk_sglue+0x38>
 8008078:	4629      	mov	r1, r5
 800807a:	4638      	mov	r0, r7
 800807c:	47c0      	blx	r8
 800807e:	4306      	orrs	r6, r0
 8008080:	3568      	adds	r5, #104	@ 0x68
 8008082:	e7e9      	b.n	8008058 <_fwalk_sglue+0x10>

08008084 <siprintf>:
 8008084:	b40e      	push	{r1, r2, r3}
 8008086:	b500      	push	{lr}
 8008088:	b09c      	sub	sp, #112	@ 0x70
 800808a:	ab1d      	add	r3, sp, #116	@ 0x74
 800808c:	9002      	str	r0, [sp, #8]
 800808e:	9006      	str	r0, [sp, #24]
 8008090:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008094:	4809      	ldr	r0, [pc, #36]	@ (80080bc <siprintf+0x38>)
 8008096:	9107      	str	r1, [sp, #28]
 8008098:	9104      	str	r1, [sp, #16]
 800809a:	4909      	ldr	r1, [pc, #36]	@ (80080c0 <siprintf+0x3c>)
 800809c:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a0:	9105      	str	r1, [sp, #20]
 80080a2:	6800      	ldr	r0, [r0, #0]
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	a902      	add	r1, sp, #8
 80080a8:	f002 fb10 	bl	800a6cc <_svfiprintf_r>
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	b01c      	add	sp, #112	@ 0x70
 80080b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b8:	b003      	add	sp, #12
 80080ba:	4770      	bx	lr
 80080bc:	20000028 	.word	0x20000028
 80080c0:	ffff0208 	.word	0xffff0208

080080c4 <__sread>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	460c      	mov	r4, r1
 80080c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080cc:	f000 f86c 	bl	80081a8 <_read_r>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	bfab      	itete	ge
 80080d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080d6:	89a3      	ldrhlt	r3, [r4, #12]
 80080d8:	181b      	addge	r3, r3, r0
 80080da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080de:	bfac      	ite	ge
 80080e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080e2:	81a3      	strhlt	r3, [r4, #12]
 80080e4:	bd10      	pop	{r4, pc}

080080e6 <__swrite>:
 80080e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ea:	461f      	mov	r7, r3
 80080ec:	898b      	ldrh	r3, [r1, #12]
 80080ee:	05db      	lsls	r3, r3, #23
 80080f0:	4605      	mov	r5, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	4616      	mov	r6, r2
 80080f6:	d505      	bpl.n	8008104 <__swrite+0x1e>
 80080f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fc:	2302      	movs	r3, #2
 80080fe:	2200      	movs	r2, #0
 8008100:	f000 f840 	bl	8008184 <_lseek_r>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800810a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	4628      	mov	r0, r5
 8008116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	f000 b867 	b.w	80081ec <_write_r>

0800811e <__sseek>:
 800811e:	b510      	push	{r4, lr}
 8008120:	460c      	mov	r4, r1
 8008122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008126:	f000 f82d 	bl	8008184 <_lseek_r>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	bf15      	itete	ne
 8008130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800813a:	81a3      	strheq	r3, [r4, #12]
 800813c:	bf18      	it	ne
 800813e:	81a3      	strhne	r3, [r4, #12]
 8008140:	bd10      	pop	{r4, pc}

08008142 <__sclose>:
 8008142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008146:	f000 b80d 	b.w	8008164 <_close_r>

0800814a <memset>:
 800814a:	4402      	add	r2, r0
 800814c:	4603      	mov	r3, r0
 800814e:	4293      	cmp	r3, r2
 8008150:	d100      	bne.n	8008154 <memset+0xa>
 8008152:	4770      	bx	lr
 8008154:	f803 1b01 	strb.w	r1, [r3], #1
 8008158:	e7f9      	b.n	800814e <memset+0x4>
	...

0800815c <_localeconv_r>:
 800815c:	4800      	ldr	r0, [pc, #0]	@ (8008160 <_localeconv_r+0x4>)
 800815e:	4770      	bx	lr
 8008160:	20000168 	.word	0x20000168

08008164 <_close_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d06      	ldr	r5, [pc, #24]	@ (8008180 <_close_r+0x1c>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	f7f9 fef6 	bl	8001f60 <_close>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_close_r+0x1a>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_close_r+0x1a>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200005b8 	.word	0x200005b8

08008184 <_lseek_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	@ (80081a4 <_lseek_r+0x20>)
 8008188:	4604      	mov	r4, r0
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	2200      	movs	r2, #0
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7f9 ff0b 	bl	8001fae <_lseek>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_lseek_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_lseek_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200005b8 	.word	0x200005b8

080081a8 <_read_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	@ (80081c8 <_read_r+0x20>)
 80081ac:	4604      	mov	r4, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7f9 fe99 	bl	8001eee <_read>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_read_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_read_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	200005b8 	.word	0x200005b8

080081cc <_sbrk_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d06      	ldr	r5, [pc, #24]	@ (80081e8 <_sbrk_r+0x1c>)
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	f7f9 fef6 	bl	8001fc8 <_sbrk>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d102      	bne.n	80081e6 <_sbrk_r+0x1a>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	b103      	cbz	r3, 80081e6 <_sbrk_r+0x1a>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	200005b8 	.word	0x200005b8

080081ec <_write_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4d07      	ldr	r5, [pc, #28]	@ (800820c <_write_r+0x20>)
 80081f0:	4604      	mov	r4, r0
 80081f2:	4608      	mov	r0, r1
 80081f4:	4611      	mov	r1, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	602a      	str	r2, [r5, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f7f9 fe94 	bl	8001f28 <_write>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_write_r+0x1e>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_write_r+0x1e>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	200005b8 	.word	0x200005b8

08008210 <__errno>:
 8008210:	4b01      	ldr	r3, [pc, #4]	@ (8008218 <__errno+0x8>)
 8008212:	6818      	ldr	r0, [r3, #0]
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	20000028 	.word	0x20000028

0800821c <__libc_init_array>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	4d0d      	ldr	r5, [pc, #52]	@ (8008254 <__libc_init_array+0x38>)
 8008220:	4c0d      	ldr	r4, [pc, #52]	@ (8008258 <__libc_init_array+0x3c>)
 8008222:	1b64      	subs	r4, r4, r5
 8008224:	10a4      	asrs	r4, r4, #2
 8008226:	2600      	movs	r6, #0
 8008228:	42a6      	cmp	r6, r4
 800822a:	d109      	bne.n	8008240 <__libc_init_array+0x24>
 800822c:	4d0b      	ldr	r5, [pc, #44]	@ (800825c <__libc_init_array+0x40>)
 800822e:	4c0c      	ldr	r4, [pc, #48]	@ (8008260 <__libc_init_array+0x44>)
 8008230:	f003 fa98 	bl	800b764 <_init>
 8008234:	1b64      	subs	r4, r4, r5
 8008236:	10a4      	asrs	r4, r4, #2
 8008238:	2600      	movs	r6, #0
 800823a:	42a6      	cmp	r6, r4
 800823c:	d105      	bne.n	800824a <__libc_init_array+0x2e>
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	f855 3b04 	ldr.w	r3, [r5], #4
 8008244:	4798      	blx	r3
 8008246:	3601      	adds	r6, #1
 8008248:	e7ee      	b.n	8008228 <__libc_init_array+0xc>
 800824a:	f855 3b04 	ldr.w	r3, [r5], #4
 800824e:	4798      	blx	r3
 8008250:	3601      	adds	r6, #1
 8008252:	e7f2      	b.n	800823a <__libc_init_array+0x1e>
 8008254:	0800bc20 	.word	0x0800bc20
 8008258:	0800bc20 	.word	0x0800bc20
 800825c:	0800bc20 	.word	0x0800bc20
 8008260:	0800bc24 	.word	0x0800bc24

08008264 <__retarget_lock_init_recursive>:
 8008264:	4770      	bx	lr

08008266 <__retarget_lock_acquire_recursive>:
 8008266:	4770      	bx	lr

08008268 <__retarget_lock_release_recursive>:
 8008268:	4770      	bx	lr
	...

0800826c <nanf>:
 800826c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008274 <nanf+0x8>
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	7fc00000 	.word	0x7fc00000

08008278 <quorem>:
 8008278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	6903      	ldr	r3, [r0, #16]
 800827e:	690c      	ldr	r4, [r1, #16]
 8008280:	42a3      	cmp	r3, r4
 8008282:	4607      	mov	r7, r0
 8008284:	db7e      	blt.n	8008384 <quorem+0x10c>
 8008286:	3c01      	subs	r4, #1
 8008288:	f101 0814 	add.w	r8, r1, #20
 800828c:	00a3      	lsls	r3, r4, #2
 800828e:	f100 0514 	add.w	r5, r0, #20
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800829e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a2:	3301      	adds	r3, #1
 80082a4:	429a      	cmp	r2, r3
 80082a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80082ae:	d32e      	bcc.n	800830e <quorem+0x96>
 80082b0:	f04f 0a00 	mov.w	sl, #0
 80082b4:	46c4      	mov	ip, r8
 80082b6:	46ae      	mov	lr, r5
 80082b8:	46d3      	mov	fp, sl
 80082ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082be:	b298      	uxth	r0, r3
 80082c0:	fb06 a000 	mla	r0, r6, r0, sl
 80082c4:	0c02      	lsrs	r2, r0, #16
 80082c6:	0c1b      	lsrs	r3, r3, #16
 80082c8:	fb06 2303 	mla	r3, r6, r3, r2
 80082cc:	f8de 2000 	ldr.w	r2, [lr]
 80082d0:	b280      	uxth	r0, r0
 80082d2:	b292      	uxth	r2, r2
 80082d4:	1a12      	subs	r2, r2, r0
 80082d6:	445a      	add	r2, fp
 80082d8:	f8de 0000 	ldr.w	r0, [lr]
 80082dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082ea:	b292      	uxth	r2, r2
 80082ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082f0:	45e1      	cmp	r9, ip
 80082f2:	f84e 2b04 	str.w	r2, [lr], #4
 80082f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082fa:	d2de      	bcs.n	80082ba <quorem+0x42>
 80082fc:	9b00      	ldr	r3, [sp, #0]
 80082fe:	58eb      	ldr	r3, [r5, r3]
 8008300:	b92b      	cbnz	r3, 800830e <quorem+0x96>
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	3b04      	subs	r3, #4
 8008306:	429d      	cmp	r5, r3
 8008308:	461a      	mov	r2, r3
 800830a:	d32f      	bcc.n	800836c <quorem+0xf4>
 800830c:	613c      	str	r4, [r7, #16]
 800830e:	4638      	mov	r0, r7
 8008310:	f001 f90c 	bl	800952c <__mcmp>
 8008314:	2800      	cmp	r0, #0
 8008316:	db25      	blt.n	8008364 <quorem+0xec>
 8008318:	4629      	mov	r1, r5
 800831a:	2000      	movs	r0, #0
 800831c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008320:	f8d1 c000 	ldr.w	ip, [r1]
 8008324:	fa1f fe82 	uxth.w	lr, r2
 8008328:	fa1f f38c 	uxth.w	r3, ip
 800832c:	eba3 030e 	sub.w	r3, r3, lr
 8008330:	4403      	add	r3, r0
 8008332:	0c12      	lsrs	r2, r2, #16
 8008334:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008338:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800833c:	b29b      	uxth	r3, r3
 800833e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008342:	45c1      	cmp	r9, r8
 8008344:	f841 3b04 	str.w	r3, [r1], #4
 8008348:	ea4f 4022 	mov.w	r0, r2, asr #16
 800834c:	d2e6      	bcs.n	800831c <quorem+0xa4>
 800834e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008356:	b922      	cbnz	r2, 8008362 <quorem+0xea>
 8008358:	3b04      	subs	r3, #4
 800835a:	429d      	cmp	r5, r3
 800835c:	461a      	mov	r2, r3
 800835e:	d30b      	bcc.n	8008378 <quorem+0x100>
 8008360:	613c      	str	r4, [r7, #16]
 8008362:	3601      	adds	r6, #1
 8008364:	4630      	mov	r0, r6
 8008366:	b003      	add	sp, #12
 8008368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	3b04      	subs	r3, #4
 8008370:	2a00      	cmp	r2, #0
 8008372:	d1cb      	bne.n	800830c <quorem+0x94>
 8008374:	3c01      	subs	r4, #1
 8008376:	e7c6      	b.n	8008306 <quorem+0x8e>
 8008378:	6812      	ldr	r2, [r2, #0]
 800837a:	3b04      	subs	r3, #4
 800837c:	2a00      	cmp	r2, #0
 800837e:	d1ef      	bne.n	8008360 <quorem+0xe8>
 8008380:	3c01      	subs	r4, #1
 8008382:	e7ea      	b.n	800835a <quorem+0xe2>
 8008384:	2000      	movs	r0, #0
 8008386:	e7ee      	b.n	8008366 <quorem+0xee>

08008388 <_dtoa_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	69c7      	ldr	r7, [r0, #28]
 800838e:	b099      	sub	sp, #100	@ 0x64
 8008390:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008394:	ec55 4b10 	vmov	r4, r5, d0
 8008398:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800839a:	9109      	str	r1, [sp, #36]	@ 0x24
 800839c:	4683      	mov	fp, r0
 800839e:	920e      	str	r2, [sp, #56]	@ 0x38
 80083a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083a2:	b97f      	cbnz	r7, 80083c4 <_dtoa_r+0x3c>
 80083a4:	2010      	movs	r0, #16
 80083a6:	f7fe fe89 	bl	80070bc <malloc>
 80083aa:	4602      	mov	r2, r0
 80083ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80083b0:	b920      	cbnz	r0, 80083bc <_dtoa_r+0x34>
 80083b2:	4ba7      	ldr	r3, [pc, #668]	@ (8008650 <_dtoa_r+0x2c8>)
 80083b4:	21ef      	movs	r1, #239	@ 0xef
 80083b6:	48a7      	ldr	r0, [pc, #668]	@ (8008654 <_dtoa_r+0x2cc>)
 80083b8:	f002 fb72 	bl	800aaa0 <__assert_func>
 80083bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083c0:	6007      	str	r7, [r0, #0]
 80083c2:	60c7      	str	r7, [r0, #12]
 80083c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	b159      	cbz	r1, 80083e4 <_dtoa_r+0x5c>
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	604a      	str	r2, [r1, #4]
 80083d0:	2301      	movs	r3, #1
 80083d2:	4093      	lsls	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
 80083d6:	4658      	mov	r0, fp
 80083d8:	f000 fe24 	bl	8009024 <_Bfree>
 80083dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	1e2b      	subs	r3, r5, #0
 80083e6:	bfb9      	ittee	lt
 80083e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083ec:	9303      	strlt	r3, [sp, #12]
 80083ee:	2300      	movge	r3, #0
 80083f0:	6033      	strge	r3, [r6, #0]
 80083f2:	9f03      	ldr	r7, [sp, #12]
 80083f4:	4b98      	ldr	r3, [pc, #608]	@ (8008658 <_dtoa_r+0x2d0>)
 80083f6:	bfbc      	itt	lt
 80083f8:	2201      	movlt	r2, #1
 80083fa:	6032      	strlt	r2, [r6, #0]
 80083fc:	43bb      	bics	r3, r7
 80083fe:	d112      	bne.n	8008426 <_dtoa_r+0x9e>
 8008400:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008402:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800840c:	4323      	orrs	r3, r4
 800840e:	f000 854d 	beq.w	8008eac <_dtoa_r+0xb24>
 8008412:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008414:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800866c <_dtoa_r+0x2e4>
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 854f 	beq.w	8008ebc <_dtoa_r+0xb34>
 800841e:	f10a 0303 	add.w	r3, sl, #3
 8008422:	f000 bd49 	b.w	8008eb8 <_dtoa_r+0xb30>
 8008426:	ed9d 7b02 	vldr	d7, [sp, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	ec51 0b17 	vmov	r0, r1, d7
 8008430:	2300      	movs	r3, #0
 8008432:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008436:	f7f8 fb57 	bl	8000ae8 <__aeabi_dcmpeq>
 800843a:	4680      	mov	r8, r0
 800843c:	b158      	cbz	r0, 8008456 <_dtoa_r+0xce>
 800843e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008440:	2301      	movs	r3, #1
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008446:	b113      	cbz	r3, 800844e <_dtoa_r+0xc6>
 8008448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800844a:	4b84      	ldr	r3, [pc, #528]	@ (800865c <_dtoa_r+0x2d4>)
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008670 <_dtoa_r+0x2e8>
 8008452:	f000 bd33 	b.w	8008ebc <_dtoa_r+0xb34>
 8008456:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800845a:	aa16      	add	r2, sp, #88	@ 0x58
 800845c:	a917      	add	r1, sp, #92	@ 0x5c
 800845e:	4658      	mov	r0, fp
 8008460:	f001 f984 	bl	800976c <__d2b>
 8008464:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008468:	4681      	mov	r9, r0
 800846a:	2e00      	cmp	r6, #0
 800846c:	d077      	beq.n	800855e <_dtoa_r+0x1d6>
 800846e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008470:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008480:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008484:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008488:	4619      	mov	r1, r3
 800848a:	2200      	movs	r2, #0
 800848c:	4b74      	ldr	r3, [pc, #464]	@ (8008660 <_dtoa_r+0x2d8>)
 800848e:	f7f7 ff0b 	bl	80002a8 <__aeabi_dsub>
 8008492:	a369      	add	r3, pc, #420	@ (adr r3, 8008638 <_dtoa_r+0x2b0>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f7f8 f8be 	bl	8000618 <__aeabi_dmul>
 800849c:	a368      	add	r3, pc, #416	@ (adr r3, 8008640 <_dtoa_r+0x2b8>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 ff03 	bl	80002ac <__adddf3>
 80084a6:	4604      	mov	r4, r0
 80084a8:	4630      	mov	r0, r6
 80084aa:	460d      	mov	r5, r1
 80084ac:	f7f8 f84a 	bl	8000544 <__aeabi_i2d>
 80084b0:	a365      	add	r3, pc, #404	@ (adr r3, 8008648 <_dtoa_r+0x2c0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f8 f8af 	bl	8000618 <__aeabi_dmul>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f7 fef3 	bl	80002ac <__adddf3>
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	f7f8 fb55 	bl	8000b78 <__aeabi_d2iz>
 80084ce:	2200      	movs	r2, #0
 80084d0:	4607      	mov	r7, r0
 80084d2:	2300      	movs	r3, #0
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f8 fb10 	bl	8000afc <__aeabi_dcmplt>
 80084dc:	b140      	cbz	r0, 80084f0 <_dtoa_r+0x168>
 80084de:	4638      	mov	r0, r7
 80084e0:	f7f8 f830 	bl	8000544 <__aeabi_i2d>
 80084e4:	4622      	mov	r2, r4
 80084e6:	462b      	mov	r3, r5
 80084e8:	f7f8 fafe 	bl	8000ae8 <__aeabi_dcmpeq>
 80084ec:	b900      	cbnz	r0, 80084f0 <_dtoa_r+0x168>
 80084ee:	3f01      	subs	r7, #1
 80084f0:	2f16      	cmp	r7, #22
 80084f2:	d851      	bhi.n	8008598 <_dtoa_r+0x210>
 80084f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008664 <_dtoa_r+0x2dc>)
 80084f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008502:	f7f8 fafb 	bl	8000afc <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d048      	beq.n	800859c <_dtoa_r+0x214>
 800850a:	3f01      	subs	r7, #1
 800850c:	2300      	movs	r3, #0
 800850e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008510:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008512:	1b9b      	subs	r3, r3, r6
 8008514:	1e5a      	subs	r2, r3, #1
 8008516:	bf44      	itt	mi
 8008518:	f1c3 0801 	rsbmi	r8, r3, #1
 800851c:	2300      	movmi	r3, #0
 800851e:	9208      	str	r2, [sp, #32]
 8008520:	bf54      	ite	pl
 8008522:	f04f 0800 	movpl.w	r8, #0
 8008526:	9308      	strmi	r3, [sp, #32]
 8008528:	2f00      	cmp	r7, #0
 800852a:	db39      	blt.n	80085a0 <_dtoa_r+0x218>
 800852c:	9b08      	ldr	r3, [sp, #32]
 800852e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008530:	443b      	add	r3, r7
 8008532:	9308      	str	r3, [sp, #32]
 8008534:	2300      	movs	r3, #0
 8008536:	930a      	str	r3, [sp, #40]	@ 0x28
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	2b09      	cmp	r3, #9
 800853c:	d864      	bhi.n	8008608 <_dtoa_r+0x280>
 800853e:	2b05      	cmp	r3, #5
 8008540:	bfc4      	itt	gt
 8008542:	3b04      	subgt	r3, #4
 8008544:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008548:	f1a3 0302 	sub.w	r3, r3, #2
 800854c:	bfcc      	ite	gt
 800854e:	2400      	movgt	r4, #0
 8008550:	2401      	movle	r4, #1
 8008552:	2b03      	cmp	r3, #3
 8008554:	d863      	bhi.n	800861e <_dtoa_r+0x296>
 8008556:	e8df f003 	tbb	[pc, r3]
 800855a:	372a      	.short	0x372a
 800855c:	5535      	.short	0x5535
 800855e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008562:	441e      	add	r6, r3
 8008564:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008568:	2b20      	cmp	r3, #32
 800856a:	bfc1      	itttt	gt
 800856c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008570:	409f      	lslgt	r7, r3
 8008572:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008576:	fa24 f303 	lsrgt.w	r3, r4, r3
 800857a:	bfd6      	itet	le
 800857c:	f1c3 0320 	rsble	r3, r3, #32
 8008580:	ea47 0003 	orrgt.w	r0, r7, r3
 8008584:	fa04 f003 	lslle.w	r0, r4, r3
 8008588:	f7f7 ffcc 	bl	8000524 <__aeabi_ui2d>
 800858c:	2201      	movs	r2, #1
 800858e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008592:	3e01      	subs	r6, #1
 8008594:	9214      	str	r2, [sp, #80]	@ 0x50
 8008596:	e777      	b.n	8008488 <_dtoa_r+0x100>
 8008598:	2301      	movs	r3, #1
 800859a:	e7b8      	b.n	800850e <_dtoa_r+0x186>
 800859c:	9012      	str	r0, [sp, #72]	@ 0x48
 800859e:	e7b7      	b.n	8008510 <_dtoa_r+0x188>
 80085a0:	427b      	negs	r3, r7
 80085a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085a4:	2300      	movs	r3, #0
 80085a6:	eba8 0807 	sub.w	r8, r8, r7
 80085aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085ac:	e7c4      	b.n	8008538 <_dtoa_r+0x1b0>
 80085ae:	2300      	movs	r3, #0
 80085b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dc35      	bgt.n	8008624 <_dtoa_r+0x29c>
 80085b8:	2301      	movs	r3, #1
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	461a      	mov	r2, r3
 80085c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085c2:	e00b      	b.n	80085dc <_dtoa_r+0x254>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e7f3      	b.n	80085b0 <_dtoa_r+0x228>
 80085c8:	2300      	movs	r3, #0
 80085ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ce:	18fb      	adds	r3, r7, r3
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	9307      	str	r3, [sp, #28]
 80085d8:	bfb8      	it	lt
 80085da:	2301      	movlt	r3, #1
 80085dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80085e0:	2100      	movs	r1, #0
 80085e2:	2204      	movs	r2, #4
 80085e4:	f102 0514 	add.w	r5, r2, #20
 80085e8:	429d      	cmp	r5, r3
 80085ea:	d91f      	bls.n	800862c <_dtoa_r+0x2a4>
 80085ec:	6041      	str	r1, [r0, #4]
 80085ee:	4658      	mov	r0, fp
 80085f0:	f000 fcd8 	bl	8008fa4 <_Balloc>
 80085f4:	4682      	mov	sl, r0
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d13c      	bne.n	8008674 <_dtoa_r+0x2ec>
 80085fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008668 <_dtoa_r+0x2e0>)
 80085fc:	4602      	mov	r2, r0
 80085fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008602:	e6d8      	b.n	80083b6 <_dtoa_r+0x2e>
 8008604:	2301      	movs	r3, #1
 8008606:	e7e0      	b.n	80085ca <_dtoa_r+0x242>
 8008608:	2401      	movs	r4, #1
 800860a:	2300      	movs	r3, #0
 800860c:	9309      	str	r3, [sp, #36]	@ 0x24
 800860e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008610:	f04f 33ff 	mov.w	r3, #4294967295
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	2200      	movs	r2, #0
 800861a:	2312      	movs	r3, #18
 800861c:	e7d0      	b.n	80085c0 <_dtoa_r+0x238>
 800861e:	2301      	movs	r3, #1
 8008620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008622:	e7f5      	b.n	8008610 <_dtoa_r+0x288>
 8008624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	9307      	str	r3, [sp, #28]
 800862a:	e7d7      	b.n	80085dc <_dtoa_r+0x254>
 800862c:	3101      	adds	r1, #1
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	e7d8      	b.n	80085e4 <_dtoa_r+0x25c>
 8008632:	bf00      	nop
 8008634:	f3af 8000 	nop.w
 8008638:	636f4361 	.word	0x636f4361
 800863c:	3fd287a7 	.word	0x3fd287a7
 8008640:	8b60c8b3 	.word	0x8b60c8b3
 8008644:	3fc68a28 	.word	0x3fc68a28
 8008648:	509f79fb 	.word	0x509f79fb
 800864c:	3fd34413 	.word	0x3fd34413
 8008650:	0800b832 	.word	0x0800b832
 8008654:	0800b849 	.word	0x0800b849
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	0800b7fd 	.word	0x0800b7fd
 8008660:	3ff80000 	.word	0x3ff80000
 8008664:	0800b940 	.word	0x0800b940
 8008668:	0800b8a1 	.word	0x0800b8a1
 800866c:	0800b82e 	.word	0x0800b82e
 8008670:	0800b7fc 	.word	0x0800b7fc
 8008674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008678:	6018      	str	r0, [r3, #0]
 800867a:	9b07      	ldr	r3, [sp, #28]
 800867c:	2b0e      	cmp	r3, #14
 800867e:	f200 80a4 	bhi.w	80087ca <_dtoa_r+0x442>
 8008682:	2c00      	cmp	r4, #0
 8008684:	f000 80a1 	beq.w	80087ca <_dtoa_r+0x442>
 8008688:	2f00      	cmp	r7, #0
 800868a:	dd33      	ble.n	80086f4 <_dtoa_r+0x36c>
 800868c:	4bad      	ldr	r3, [pc, #692]	@ (8008944 <_dtoa_r+0x5bc>)
 800868e:	f007 020f 	and.w	r2, r7, #15
 8008692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008696:	ed93 7b00 	vldr	d7, [r3]
 800869a:	05f8      	lsls	r0, r7, #23
 800869c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80086a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086a4:	d516      	bpl.n	80086d4 <_dtoa_r+0x34c>
 80086a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008948 <_dtoa_r+0x5c0>)
 80086a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086b0:	f7f8 f8dc 	bl	800086c <__aeabi_ddiv>
 80086b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b8:	f004 040f 	and.w	r4, r4, #15
 80086bc:	2603      	movs	r6, #3
 80086be:	4da2      	ldr	r5, [pc, #648]	@ (8008948 <_dtoa_r+0x5c0>)
 80086c0:	b954      	cbnz	r4, 80086d8 <_dtoa_r+0x350>
 80086c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ca:	f7f8 f8cf 	bl	800086c <__aeabi_ddiv>
 80086ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d2:	e028      	b.n	8008726 <_dtoa_r+0x39e>
 80086d4:	2602      	movs	r6, #2
 80086d6:	e7f2      	b.n	80086be <_dtoa_r+0x336>
 80086d8:	07e1      	lsls	r1, r4, #31
 80086da:	d508      	bpl.n	80086ee <_dtoa_r+0x366>
 80086dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086e4:	f7f7 ff98 	bl	8000618 <__aeabi_dmul>
 80086e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ec:	3601      	adds	r6, #1
 80086ee:	1064      	asrs	r4, r4, #1
 80086f0:	3508      	adds	r5, #8
 80086f2:	e7e5      	b.n	80086c0 <_dtoa_r+0x338>
 80086f4:	f000 80d2 	beq.w	800889c <_dtoa_r+0x514>
 80086f8:	427c      	negs	r4, r7
 80086fa:	4b92      	ldr	r3, [pc, #584]	@ (8008944 <_dtoa_r+0x5bc>)
 80086fc:	4d92      	ldr	r5, [pc, #584]	@ (8008948 <_dtoa_r+0x5c0>)
 80086fe:	f004 020f 	and.w	r2, r4, #15
 8008702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800870e:	f7f7 ff83 	bl	8000618 <__aeabi_dmul>
 8008712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008716:	1124      	asrs	r4, r4, #4
 8008718:	2300      	movs	r3, #0
 800871a:	2602      	movs	r6, #2
 800871c:	2c00      	cmp	r4, #0
 800871e:	f040 80b2 	bne.w	8008886 <_dtoa_r+0x4fe>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1d3      	bne.n	80086ce <_dtoa_r+0x346>
 8008726:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008728:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80b7 	beq.w	80088a0 <_dtoa_r+0x518>
 8008732:	4b86      	ldr	r3, [pc, #536]	@ (800894c <_dtoa_r+0x5c4>)
 8008734:	2200      	movs	r2, #0
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f8 f9df 	bl	8000afc <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	f000 80ae 	beq.w	80088a0 <_dtoa_r+0x518>
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 80aa 	beq.w	80088a0 <_dtoa_r+0x518>
 800874c:	9b00      	ldr	r3, [sp, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd37      	ble.n	80087c2 <_dtoa_r+0x43a>
 8008752:	1e7b      	subs	r3, r7, #1
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	4620      	mov	r0, r4
 8008758:	4b7d      	ldr	r3, [pc, #500]	@ (8008950 <_dtoa_r+0x5c8>)
 800875a:	2200      	movs	r2, #0
 800875c:	4629      	mov	r1, r5
 800875e:	f7f7 ff5b 	bl	8000618 <__aeabi_dmul>
 8008762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008766:	9c00      	ldr	r4, [sp, #0]
 8008768:	3601      	adds	r6, #1
 800876a:	4630      	mov	r0, r6
 800876c:	f7f7 feea 	bl	8000544 <__aeabi_i2d>
 8008770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008774:	f7f7 ff50 	bl	8000618 <__aeabi_dmul>
 8008778:	4b76      	ldr	r3, [pc, #472]	@ (8008954 <_dtoa_r+0x5cc>)
 800877a:	2200      	movs	r2, #0
 800877c:	f7f7 fd96 	bl	80002ac <__adddf3>
 8008780:	4605      	mov	r5, r0
 8008782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008786:	2c00      	cmp	r4, #0
 8008788:	f040 808d 	bne.w	80088a6 <_dtoa_r+0x51e>
 800878c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008790:	4b71      	ldr	r3, [pc, #452]	@ (8008958 <_dtoa_r+0x5d0>)
 8008792:	2200      	movs	r2, #0
 8008794:	f7f7 fd88 	bl	80002a8 <__aeabi_dsub>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4633      	mov	r3, r6
 80087a4:	f7f8 f9c8 	bl	8000b38 <__aeabi_dcmpgt>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	f040 828b 	bne.w	8008cc4 <_dtoa_r+0x93c>
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	462a      	mov	r2, r5
 80087b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087b8:	f7f8 f9a0 	bl	8000afc <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	f040 8128 	bne.w	8008a12 <_dtoa_r+0x68a>
 80087c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80087c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80087ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f2c0 815a 	blt.w	8008a86 <_dtoa_r+0x6fe>
 80087d2:	2f0e      	cmp	r7, #14
 80087d4:	f300 8157 	bgt.w	8008a86 <_dtoa_r+0x6fe>
 80087d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008944 <_dtoa_r+0x5bc>)
 80087da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087de:	ed93 7b00 	vldr	d7, [r3]
 80087e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	ed8d 7b00 	vstr	d7, [sp]
 80087ea:	da03      	bge.n	80087f4 <_dtoa_r+0x46c>
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f340 8101 	ble.w	80089f6 <_dtoa_r+0x66e>
 80087f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087f8:	4656      	mov	r6, sl
 80087fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f833 	bl	800086c <__aeabi_ddiv>
 8008806:	f7f8 f9b7 	bl	8000b78 <__aeabi_d2iz>
 800880a:	4680      	mov	r8, r0
 800880c:	f7f7 fe9a 	bl	8000544 <__aeabi_i2d>
 8008810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008814:	f7f7 ff00 	bl	8000618 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008824:	f7f7 fd40 	bl	80002a8 <__aeabi_dsub>
 8008828:	f806 4b01 	strb.w	r4, [r6], #1
 800882c:	9d07      	ldr	r5, [sp, #28]
 800882e:	eba6 040a 	sub.w	r4, r6, sl
 8008832:	42a5      	cmp	r5, r4
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	f040 8117 	bne.w	8008a6a <_dtoa_r+0x6e2>
 800883c:	f7f7 fd36 	bl	80002ac <__adddf3>
 8008840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f7f8 f976 	bl	8000b38 <__aeabi_dcmpgt>
 800884c:	2800      	cmp	r0, #0
 800884e:	f040 80f9 	bne.w	8008a44 <_dtoa_r+0x6bc>
 8008852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f8 f945 	bl	8000ae8 <__aeabi_dcmpeq>
 800885e:	b118      	cbz	r0, 8008868 <_dtoa_r+0x4e0>
 8008860:	f018 0f01 	tst.w	r8, #1
 8008864:	f040 80ee 	bne.w	8008a44 <_dtoa_r+0x6bc>
 8008868:	4649      	mov	r1, r9
 800886a:	4658      	mov	r0, fp
 800886c:	f000 fbda 	bl	8009024 <_Bfree>
 8008870:	2300      	movs	r3, #0
 8008872:	7033      	strb	r3, [r6, #0]
 8008874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008876:	3701      	adds	r7, #1
 8008878:	601f      	str	r7, [r3, #0]
 800887a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 831d 	beq.w	8008ebc <_dtoa_r+0xb34>
 8008882:	601e      	str	r6, [r3, #0]
 8008884:	e31a      	b.n	8008ebc <_dtoa_r+0xb34>
 8008886:	07e2      	lsls	r2, r4, #31
 8008888:	d505      	bpl.n	8008896 <_dtoa_r+0x50e>
 800888a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800888e:	f7f7 fec3 	bl	8000618 <__aeabi_dmul>
 8008892:	3601      	adds	r6, #1
 8008894:	2301      	movs	r3, #1
 8008896:	1064      	asrs	r4, r4, #1
 8008898:	3508      	adds	r5, #8
 800889a:	e73f      	b.n	800871c <_dtoa_r+0x394>
 800889c:	2602      	movs	r6, #2
 800889e:	e742      	b.n	8008726 <_dtoa_r+0x39e>
 80088a0:	9c07      	ldr	r4, [sp, #28]
 80088a2:	9704      	str	r7, [sp, #16]
 80088a4:	e761      	b.n	800876a <_dtoa_r+0x3e2>
 80088a6:	4b27      	ldr	r3, [pc, #156]	@ (8008944 <_dtoa_r+0x5bc>)
 80088a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088b2:	4454      	add	r4, sl
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d053      	beq.n	8008960 <_dtoa_r+0x5d8>
 80088b8:	4928      	ldr	r1, [pc, #160]	@ (800895c <_dtoa_r+0x5d4>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 ffd6 	bl	800086c <__aeabi_ddiv>
 80088c0:	4633      	mov	r3, r6
 80088c2:	462a      	mov	r2, r5
 80088c4:	f7f7 fcf0 	bl	80002a8 <__aeabi_dsub>
 80088c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088cc:	4656      	mov	r6, sl
 80088ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d2:	f7f8 f951 	bl	8000b78 <__aeabi_d2iz>
 80088d6:	4605      	mov	r5, r0
 80088d8:	f7f7 fe34 	bl	8000544 <__aeabi_i2d>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e4:	f7f7 fce0 	bl	80002a8 <__aeabi_dsub>
 80088e8:	3530      	adds	r5, #48	@ 0x30
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088f2:	f806 5b01 	strb.w	r5, [r6], #1
 80088f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088fa:	f7f8 f8ff 	bl	8000afc <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d171      	bne.n	80089e6 <_dtoa_r+0x65e>
 8008902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008906:	4911      	ldr	r1, [pc, #68]	@ (800894c <_dtoa_r+0x5c4>)
 8008908:	2000      	movs	r0, #0
 800890a:	f7f7 fccd 	bl	80002a8 <__aeabi_dsub>
 800890e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008912:	f7f8 f8f3 	bl	8000afc <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	f040 8095 	bne.w	8008a46 <_dtoa_r+0x6be>
 800891c:	42a6      	cmp	r6, r4
 800891e:	f43f af50 	beq.w	80087c2 <_dtoa_r+0x43a>
 8008922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008926:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <_dtoa_r+0x5c8>)
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fe75 	bl	8000618 <__aeabi_dmul>
 800892e:	4b08      	ldr	r3, [pc, #32]	@ (8008950 <_dtoa_r+0x5c8>)
 8008930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008934:	2200      	movs	r2, #0
 8008936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893a:	f7f7 fe6d 	bl	8000618 <__aeabi_dmul>
 800893e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008942:	e7c4      	b.n	80088ce <_dtoa_r+0x546>
 8008944:	0800b940 	.word	0x0800b940
 8008948:	0800b918 	.word	0x0800b918
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	40240000 	.word	0x40240000
 8008954:	401c0000 	.word	0x401c0000
 8008958:	40140000 	.word	0x40140000
 800895c:	3fe00000 	.word	0x3fe00000
 8008960:	4631      	mov	r1, r6
 8008962:	4628      	mov	r0, r5
 8008964:	f7f7 fe58 	bl	8000618 <__aeabi_dmul>
 8008968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800896c:	9415      	str	r4, [sp, #84]	@ 0x54
 800896e:	4656      	mov	r6, sl
 8008970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008974:	f7f8 f900 	bl	8000b78 <__aeabi_d2iz>
 8008978:	4605      	mov	r5, r0
 800897a:	f7f7 fde3 	bl	8000544 <__aeabi_i2d>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008986:	f7f7 fc8f 	bl	80002a8 <__aeabi_dsub>
 800898a:	3530      	adds	r5, #48	@ 0x30
 800898c:	f806 5b01 	strb.w	r5, [r6], #1
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	42a6      	cmp	r6, r4
 8008996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800899a:	f04f 0200 	mov.w	r2, #0
 800899e:	d124      	bne.n	80089ea <_dtoa_r+0x662>
 80089a0:	4bac      	ldr	r3, [pc, #688]	@ (8008c54 <_dtoa_r+0x8cc>)
 80089a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089a6:	f7f7 fc81 	bl	80002ac <__adddf3>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b2:	f7f8 f8c1 	bl	8000b38 <__aeabi_dcmpgt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d145      	bne.n	8008a46 <_dtoa_r+0x6be>
 80089ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089be:	49a5      	ldr	r1, [pc, #660]	@ (8008c54 <_dtoa_r+0x8cc>)
 80089c0:	2000      	movs	r0, #0
 80089c2:	f7f7 fc71 	bl	80002a8 <__aeabi_dsub>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ce:	f7f8 f895 	bl	8000afc <__aeabi_dcmplt>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f43f aef5 	beq.w	80087c2 <_dtoa_r+0x43a>
 80089d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80089da:	1e73      	subs	r3, r6, #1
 80089dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80089de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089e2:	2b30      	cmp	r3, #48	@ 0x30
 80089e4:	d0f8      	beq.n	80089d8 <_dtoa_r+0x650>
 80089e6:	9f04      	ldr	r7, [sp, #16]
 80089e8:	e73e      	b.n	8008868 <_dtoa_r+0x4e0>
 80089ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008c58 <_dtoa_r+0x8d0>)
 80089ec:	f7f7 fe14 	bl	8000618 <__aeabi_dmul>
 80089f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f4:	e7bc      	b.n	8008970 <_dtoa_r+0x5e8>
 80089f6:	d10c      	bne.n	8008a12 <_dtoa_r+0x68a>
 80089f8:	4b98      	ldr	r3, [pc, #608]	@ (8008c5c <_dtoa_r+0x8d4>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f7 fe0a 	bl	8000618 <__aeabi_dmul>
 8008a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a08:	f7f8 f88c 	bl	8000b24 <__aeabi_dcmpge>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f000 8157 	beq.w	8008cc0 <_dtoa_r+0x938>
 8008a12:	2400      	movs	r4, #0
 8008a14:	4625      	mov	r5, r4
 8008a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	4656      	mov	r6, sl
 8008a1e:	2700      	movs	r7, #0
 8008a20:	4621      	mov	r1, r4
 8008a22:	4658      	mov	r0, fp
 8008a24:	f000 fafe 	bl	8009024 <_Bfree>
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	d0dc      	beq.n	80089e6 <_dtoa_r+0x65e>
 8008a2c:	b12f      	cbz	r7, 8008a3a <_dtoa_r+0x6b2>
 8008a2e:	42af      	cmp	r7, r5
 8008a30:	d003      	beq.n	8008a3a <_dtoa_r+0x6b2>
 8008a32:	4639      	mov	r1, r7
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 faf5 	bl	8009024 <_Bfree>
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f000 faf1 	bl	8009024 <_Bfree>
 8008a42:	e7d0      	b.n	80089e6 <_dtoa_r+0x65e>
 8008a44:	9704      	str	r7, [sp, #16]
 8008a46:	4633      	mov	r3, r6
 8008a48:	461e      	mov	r6, r3
 8008a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4e:	2a39      	cmp	r2, #57	@ 0x39
 8008a50:	d107      	bne.n	8008a62 <_dtoa_r+0x6da>
 8008a52:	459a      	cmp	sl, r3
 8008a54:	d1f8      	bne.n	8008a48 <_dtoa_r+0x6c0>
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	3201      	adds	r2, #1
 8008a5a:	9204      	str	r2, [sp, #16]
 8008a5c:	2230      	movs	r2, #48	@ 0x30
 8008a5e:	f88a 2000 	strb.w	r2, [sl]
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	3201      	adds	r2, #1
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	e7bd      	b.n	80089e6 <_dtoa_r+0x65e>
 8008a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8008c58 <_dtoa_r+0x8d0>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f7f7 fdd3 	bl	8000618 <__aeabi_dmul>
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	f7f8 f835 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f43f aebb 	beq.w	80087fa <_dtoa_r+0x472>
 8008a84:	e6f0      	b.n	8008868 <_dtoa_r+0x4e0>
 8008a86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a88:	2a00      	cmp	r2, #0
 8008a8a:	f000 80db 	beq.w	8008c44 <_dtoa_r+0x8bc>
 8008a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a90:	2a01      	cmp	r2, #1
 8008a92:	f300 80bf 	bgt.w	8008c14 <_dtoa_r+0x88c>
 8008a96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	f000 80b7 	beq.w	8008c0c <_dtoa_r+0x884>
 8008a9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008aa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008aa4:	4646      	mov	r6, r8
 8008aa6:	9a08      	ldr	r2, [sp, #32]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	441a      	add	r2, r3
 8008aac:	4658      	mov	r0, fp
 8008aae:	4498      	add	r8, r3
 8008ab0:	9208      	str	r2, [sp, #32]
 8008ab2:	f000 fbb5 	bl	8009220 <__i2b>
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	b15e      	cbz	r6, 8008ad2 <_dtoa_r+0x74a>
 8008aba:	9b08      	ldr	r3, [sp, #32]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd08      	ble.n	8008ad2 <_dtoa_r+0x74a>
 8008ac0:	42b3      	cmp	r3, r6
 8008ac2:	9a08      	ldr	r2, [sp, #32]
 8008ac4:	bfa8      	it	ge
 8008ac6:	4633      	movge	r3, r6
 8008ac8:	eba8 0803 	sub.w	r8, r8, r3
 8008acc:	1af6      	subs	r6, r6, r3
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad4:	b1f3      	cbz	r3, 8008b14 <_dtoa_r+0x78c>
 8008ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80b7 	beq.w	8008c4c <_dtoa_r+0x8c4>
 8008ade:	b18c      	cbz	r4, 8008b04 <_dtoa_r+0x77c>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f000 fc5b 	bl	80093a0 <__pow5mult>
 8008aea:	464a      	mov	r2, r9
 8008aec:	4601      	mov	r1, r0
 8008aee:	4605      	mov	r5, r0
 8008af0:	4658      	mov	r0, fp
 8008af2:	f000 fbab 	bl	800924c <__multiply>
 8008af6:	4649      	mov	r1, r9
 8008af8:	9004      	str	r0, [sp, #16]
 8008afa:	4658      	mov	r0, fp
 8008afc:	f000 fa92 	bl	8009024 <_Bfree>
 8008b00:	9b04      	ldr	r3, [sp, #16]
 8008b02:	4699      	mov	r9, r3
 8008b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b06:	1b1a      	subs	r2, r3, r4
 8008b08:	d004      	beq.n	8008b14 <_dtoa_r+0x78c>
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 fc47 	bl	80093a0 <__pow5mult>
 8008b12:	4681      	mov	r9, r0
 8008b14:	2101      	movs	r1, #1
 8008b16:	4658      	mov	r0, fp
 8008b18:	f000 fb82 	bl	8009220 <__i2b>
 8008b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b1e:	4604      	mov	r4, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 81cf 	beq.w	8008ec4 <_dtoa_r+0xb3c>
 8008b26:	461a      	mov	r2, r3
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f000 fc38 	bl	80093a0 <__pow5mult>
 8008b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	4604      	mov	r4, r0
 8008b36:	f300 8095 	bgt.w	8008c64 <_dtoa_r+0x8dc>
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 8087 	bne.w	8008c50 <_dtoa_r+0x8c8>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 8089 	bne.w	8008c60 <_dtoa_r+0x8d8>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b54:	0d1b      	lsrs	r3, r3, #20
 8008b56:	051b      	lsls	r3, r3, #20
 8008b58:	b12b      	cbz	r3, 8008b66 <_dtoa_r+0x7de>
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	9308      	str	r3, [sp, #32]
 8008b60:	f108 0801 	add.w	r8, r8, #1
 8008b64:	2301      	movs	r3, #1
 8008b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 81b0 	beq.w	8008ed0 <_dtoa_r+0xb48>
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b76:	6918      	ldr	r0, [r3, #16]
 8008b78:	f000 fb06 	bl	8009188 <__hi0bits>
 8008b7c:	f1c0 0020 	rsb	r0, r0, #32
 8008b80:	9b08      	ldr	r3, [sp, #32]
 8008b82:	4418      	add	r0, r3
 8008b84:	f010 001f 	ands.w	r0, r0, #31
 8008b88:	d077      	beq.n	8008c7a <_dtoa_r+0x8f2>
 8008b8a:	f1c0 0320 	rsb	r3, r0, #32
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	dd6b      	ble.n	8008c6a <_dtoa_r+0x8e2>
 8008b92:	9b08      	ldr	r3, [sp, #32]
 8008b94:	f1c0 001c 	rsb	r0, r0, #28
 8008b98:	4403      	add	r3, r0
 8008b9a:	4480      	add	r8, r0
 8008b9c:	4406      	add	r6, r0
 8008b9e:	9308      	str	r3, [sp, #32]
 8008ba0:	f1b8 0f00 	cmp.w	r8, #0
 8008ba4:	dd05      	ble.n	8008bb2 <_dtoa_r+0x82a>
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4642      	mov	r2, r8
 8008baa:	4658      	mov	r0, fp
 8008bac:	f000 fc52 	bl	8009454 <__lshift>
 8008bb0:	4681      	mov	r9, r0
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd05      	ble.n	8008bc4 <_dtoa_r+0x83c>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4658      	mov	r0, fp
 8008bbe:	f000 fc49 	bl	8009454 <__lshift>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d059      	beq.n	8008c7e <_dtoa_r+0x8f6>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4648      	mov	r0, r9
 8008bce:	f000 fcad 	bl	800952c <__mcmp>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	da53      	bge.n	8008c7e <_dtoa_r+0x8f6>
 8008bd6:	1e7b      	subs	r3, r7, #1
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	4649      	mov	r1, r9
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fa41 	bl	8009068 <__multadd>
 8008be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008be8:	4681      	mov	r9, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8172 	beq.w	8008ed4 <_dtoa_r+0xb4c>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f000 fa36 	bl	8009068 <__multadd>
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	4605      	mov	r5, r0
 8008c02:	dc67      	bgt.n	8008cd4 <_dtoa_r+0x94c>
 8008c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	dc41      	bgt.n	8008c8e <_dtoa_r+0x906>
 8008c0a:	e063      	b.n	8008cd4 <_dtoa_r+0x94c>
 8008c0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c12:	e746      	b.n	8008aa2 <_dtoa_r+0x71a>
 8008c14:	9b07      	ldr	r3, [sp, #28]
 8008c16:	1e5c      	subs	r4, r3, #1
 8008c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	bfbf      	itttt	lt
 8008c1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008c22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c24:	1ae3      	sublt	r3, r4, r3
 8008c26:	bfb4      	ite	lt
 8008c28:	18d2      	addlt	r2, r2, r3
 8008c2a:	1b1c      	subge	r4, r3, r4
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	bfbc      	itt	lt
 8008c30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c32:	2400      	movlt	r4, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfb5      	itete	lt
 8008c38:	eba8 0603 	sublt.w	r6, r8, r3
 8008c3c:	9b07      	ldrge	r3, [sp, #28]
 8008c3e:	2300      	movlt	r3, #0
 8008c40:	4646      	movge	r6, r8
 8008c42:	e730      	b.n	8008aa6 <_dtoa_r+0x71e>
 8008c44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c48:	4646      	mov	r6, r8
 8008c4a:	e735      	b.n	8008ab8 <_dtoa_r+0x730>
 8008c4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c4e:	e75c      	b.n	8008b0a <_dtoa_r+0x782>
 8008c50:	2300      	movs	r3, #0
 8008c52:	e788      	b.n	8008b66 <_dtoa_r+0x7de>
 8008c54:	3fe00000 	.word	0x3fe00000
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	40140000 	.word	0x40140000
 8008c60:	9b02      	ldr	r3, [sp, #8]
 8008c62:	e780      	b.n	8008b66 <_dtoa_r+0x7de>
 8008c64:	2300      	movs	r3, #0
 8008c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c68:	e782      	b.n	8008b70 <_dtoa_r+0x7e8>
 8008c6a:	d099      	beq.n	8008ba0 <_dtoa_r+0x818>
 8008c6c:	9a08      	ldr	r2, [sp, #32]
 8008c6e:	331c      	adds	r3, #28
 8008c70:	441a      	add	r2, r3
 8008c72:	4498      	add	r8, r3
 8008c74:	441e      	add	r6, r3
 8008c76:	9208      	str	r2, [sp, #32]
 8008c78:	e792      	b.n	8008ba0 <_dtoa_r+0x818>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	e7f6      	b.n	8008c6c <_dtoa_r+0x8e4>
 8008c7e:	9b07      	ldr	r3, [sp, #28]
 8008c80:	9704      	str	r7, [sp, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc20      	bgt.n	8008cc8 <_dtoa_r+0x940>
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	dd1e      	ble.n	8008ccc <_dtoa_r+0x944>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f aec0 	bne.w	8008a16 <_dtoa_r+0x68e>
 8008c96:	4621      	mov	r1, r4
 8008c98:	2205      	movs	r2, #5
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f000 f9e4 	bl	8009068 <__multadd>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4648      	mov	r0, r9
 8008ca6:	f000 fc41 	bl	800952c <__mcmp>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f77f aeb3 	ble.w	8008a16 <_dtoa_r+0x68e>
 8008cb0:	4656      	mov	r6, sl
 8008cb2:	2331      	movs	r3, #49	@ 0x31
 8008cb4:	f806 3b01 	strb.w	r3, [r6], #1
 8008cb8:	9b04      	ldr	r3, [sp, #16]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	e6ae      	b.n	8008a1e <_dtoa_r+0x696>
 8008cc0:	9c07      	ldr	r4, [sp, #28]
 8008cc2:	9704      	str	r7, [sp, #16]
 8008cc4:	4625      	mov	r5, r4
 8008cc6:	e7f3      	b.n	8008cb0 <_dtoa_r+0x928>
 8008cc8:	9b07      	ldr	r3, [sp, #28]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8104 	beq.w	8008edc <_dtoa_r+0xb54>
 8008cd4:	2e00      	cmp	r6, #0
 8008cd6:	dd05      	ble.n	8008ce4 <_dtoa_r+0x95c>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4658      	mov	r0, fp
 8008cde:	f000 fbb9 	bl	8009454 <__lshift>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d05a      	beq.n	8008da0 <_dtoa_r+0xa18>
 8008cea:	6869      	ldr	r1, [r5, #4]
 8008cec:	4658      	mov	r0, fp
 8008cee:	f000 f959 	bl	8008fa4 <_Balloc>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	b928      	cbnz	r0, 8008d02 <_dtoa_r+0x97a>
 8008cf6:	4b84      	ldr	r3, [pc, #528]	@ (8008f08 <_dtoa_r+0xb80>)
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cfe:	f7ff bb5a 	b.w	80083b6 <_dtoa_r+0x2e>
 8008d02:	692a      	ldr	r2, [r5, #16]
 8008d04:	3202      	adds	r2, #2
 8008d06:	0092      	lsls	r2, r2, #2
 8008d08:	f105 010c 	add.w	r1, r5, #12
 8008d0c:	300c      	adds	r0, #12
 8008d0e:	f001 feb1 	bl	800aa74 <memcpy>
 8008d12:	2201      	movs	r2, #1
 8008d14:	4631      	mov	r1, r6
 8008d16:	4658      	mov	r0, fp
 8008d18:	f000 fb9c 	bl	8009454 <__lshift>
 8008d1c:	f10a 0301 	add.w	r3, sl, #1
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	4453      	add	r3, sl
 8008d26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	462f      	mov	r7, r5
 8008d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d32:	4605      	mov	r5, r0
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	4621      	mov	r1, r4
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	4648      	mov	r0, r9
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	f7ff fa9b 	bl	8008278 <quorem>
 8008d42:	4639      	mov	r1, r7
 8008d44:	9002      	str	r0, [sp, #8]
 8008d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d4a:	4648      	mov	r0, r9
 8008d4c:	f000 fbee 	bl	800952c <__mcmp>
 8008d50:	462a      	mov	r2, r5
 8008d52:	9008      	str	r0, [sp, #32]
 8008d54:	4621      	mov	r1, r4
 8008d56:	4658      	mov	r0, fp
 8008d58:	f000 fc04 	bl	8009564 <__mdiff>
 8008d5c:	68c2      	ldr	r2, [r0, #12]
 8008d5e:	4606      	mov	r6, r0
 8008d60:	bb02      	cbnz	r2, 8008da4 <_dtoa_r+0xa1c>
 8008d62:	4601      	mov	r1, r0
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fbe1 	bl	800952c <__mcmp>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4658      	mov	r0, fp
 8008d70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d72:	f000 f957 	bl	8009024 <_Bfree>
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d7a:	9e07      	ldr	r6, [sp, #28]
 8008d7c:	ea43 0102 	orr.w	r1, r3, r2
 8008d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d82:	4319      	orrs	r1, r3
 8008d84:	d110      	bne.n	8008da8 <_dtoa_r+0xa20>
 8008d86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d8a:	d029      	beq.n	8008de0 <_dtoa_r+0xa58>
 8008d8c:	9b08      	ldr	r3, [sp, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dd02      	ble.n	8008d98 <_dtoa_r+0xa10>
 8008d92:	9b02      	ldr	r3, [sp, #8]
 8008d94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d98:	9b00      	ldr	r3, [sp, #0]
 8008d9a:	f883 8000 	strb.w	r8, [r3]
 8008d9e:	e63f      	b.n	8008a20 <_dtoa_r+0x698>
 8008da0:	4628      	mov	r0, r5
 8008da2:	e7bb      	b.n	8008d1c <_dtoa_r+0x994>
 8008da4:	2201      	movs	r2, #1
 8008da6:	e7e1      	b.n	8008d6c <_dtoa_r+0x9e4>
 8008da8:	9b08      	ldr	r3, [sp, #32]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db04      	blt.n	8008db8 <_dtoa_r+0xa30>
 8008dae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008db0:	430b      	orrs	r3, r1
 8008db2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008db4:	430b      	orrs	r3, r1
 8008db6:	d120      	bne.n	8008dfa <_dtoa_r+0xa72>
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	dded      	ble.n	8008d98 <_dtoa_r+0xa10>
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	4658      	mov	r0, fp
 8008dc2:	f000 fb47 	bl	8009454 <__lshift>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4681      	mov	r9, r0
 8008dca:	f000 fbaf 	bl	800952c <__mcmp>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	dc03      	bgt.n	8008dda <_dtoa_r+0xa52>
 8008dd2:	d1e1      	bne.n	8008d98 <_dtoa_r+0xa10>
 8008dd4:	f018 0f01 	tst.w	r8, #1
 8008dd8:	d0de      	beq.n	8008d98 <_dtoa_r+0xa10>
 8008dda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dde:	d1d8      	bne.n	8008d92 <_dtoa_r+0xa0a>
 8008de0:	9a00      	ldr	r2, [sp, #0]
 8008de2:	2339      	movs	r3, #57	@ 0x39
 8008de4:	7013      	strb	r3, [r2, #0]
 8008de6:	4633      	mov	r3, r6
 8008de8:	461e      	mov	r6, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008df0:	2a39      	cmp	r2, #57	@ 0x39
 8008df2:	d052      	beq.n	8008e9a <_dtoa_r+0xb12>
 8008df4:	3201      	adds	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e612      	b.n	8008a20 <_dtoa_r+0x698>
 8008dfa:	2a00      	cmp	r2, #0
 8008dfc:	dd07      	ble.n	8008e0e <_dtoa_r+0xa86>
 8008dfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e02:	d0ed      	beq.n	8008de0 <_dtoa_r+0xa58>
 8008e04:	9a00      	ldr	r2, [sp, #0]
 8008e06:	f108 0301 	add.w	r3, r8, #1
 8008e0a:	7013      	strb	r3, [r2, #0]
 8008e0c:	e608      	b.n	8008a20 <_dtoa_r+0x698>
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	9a07      	ldr	r2, [sp, #28]
 8008e12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d028      	beq.n	8008e6e <_dtoa_r+0xae6>
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	2300      	movs	r3, #0
 8008e20:	220a      	movs	r2, #10
 8008e22:	4658      	mov	r0, fp
 8008e24:	f000 f920 	bl	8009068 <__multadd>
 8008e28:	42af      	cmp	r7, r5
 8008e2a:	4681      	mov	r9, r0
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	f04f 020a 	mov.w	r2, #10
 8008e34:	4639      	mov	r1, r7
 8008e36:	4658      	mov	r0, fp
 8008e38:	d107      	bne.n	8008e4a <_dtoa_r+0xac2>
 8008e3a:	f000 f915 	bl	8009068 <__multadd>
 8008e3e:	4607      	mov	r7, r0
 8008e40:	4605      	mov	r5, r0
 8008e42:	9b07      	ldr	r3, [sp, #28]
 8008e44:	3301      	adds	r3, #1
 8008e46:	9307      	str	r3, [sp, #28]
 8008e48:	e774      	b.n	8008d34 <_dtoa_r+0x9ac>
 8008e4a:	f000 f90d 	bl	8009068 <__multadd>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4607      	mov	r7, r0
 8008e52:	2300      	movs	r3, #0
 8008e54:	220a      	movs	r2, #10
 8008e56:	4658      	mov	r0, fp
 8008e58:	f000 f906 	bl	8009068 <__multadd>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	e7f0      	b.n	8008e42 <_dtoa_r+0xaba>
 8008e60:	9b00      	ldr	r3, [sp, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bfcc      	ite	gt
 8008e66:	461e      	movgt	r6, r3
 8008e68:	2601      	movle	r6, #1
 8008e6a:	4456      	add	r6, sl
 8008e6c:	2700      	movs	r7, #0
 8008e6e:	4649      	mov	r1, r9
 8008e70:	2201      	movs	r2, #1
 8008e72:	4658      	mov	r0, fp
 8008e74:	f000 faee 	bl	8009454 <__lshift>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4681      	mov	r9, r0
 8008e7c:	f000 fb56 	bl	800952c <__mcmp>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	dcb0      	bgt.n	8008de6 <_dtoa_r+0xa5e>
 8008e84:	d102      	bne.n	8008e8c <_dtoa_r+0xb04>
 8008e86:	f018 0f01 	tst.w	r8, #1
 8008e8a:	d1ac      	bne.n	8008de6 <_dtoa_r+0xa5e>
 8008e8c:	4633      	mov	r3, r6
 8008e8e:	461e      	mov	r6, r3
 8008e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e94:	2a30      	cmp	r2, #48	@ 0x30
 8008e96:	d0fa      	beq.n	8008e8e <_dtoa_r+0xb06>
 8008e98:	e5c2      	b.n	8008a20 <_dtoa_r+0x698>
 8008e9a:	459a      	cmp	sl, r3
 8008e9c:	d1a4      	bne.n	8008de8 <_dtoa_r+0xa60>
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	9304      	str	r3, [sp, #16]
 8008ea4:	2331      	movs	r3, #49	@ 0x31
 8008ea6:	f88a 3000 	strb.w	r3, [sl]
 8008eaa:	e5b9      	b.n	8008a20 <_dtoa_r+0x698>
 8008eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f0c <_dtoa_r+0xb84>
 8008eb2:	b11b      	cbz	r3, 8008ebc <_dtoa_r+0xb34>
 8008eb4:	f10a 0308 	add.w	r3, sl, #8
 8008eb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	b019      	add	sp, #100	@ 0x64
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	f77f ae37 	ble.w	8008b3a <_dtoa_r+0x7b2>
 8008ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ece:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	e655      	b.n	8008b80 <_dtoa_r+0x7f8>
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f77f aed6 	ble.w	8008c88 <_dtoa_r+0x900>
 8008edc:	4656      	mov	r6, sl
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4648      	mov	r0, r9
 8008ee2:	f7ff f9c9 	bl	8008278 <quorem>
 8008ee6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008eea:	f806 8b01 	strb.w	r8, [r6], #1
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	eba6 020a 	sub.w	r2, r6, sl
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	ddb3      	ble.n	8008e60 <_dtoa_r+0xad8>
 8008ef8:	4649      	mov	r1, r9
 8008efa:	2300      	movs	r3, #0
 8008efc:	220a      	movs	r2, #10
 8008efe:	4658      	mov	r0, fp
 8008f00:	f000 f8b2 	bl	8009068 <__multadd>
 8008f04:	4681      	mov	r9, r0
 8008f06:	e7ea      	b.n	8008ede <_dtoa_r+0xb56>
 8008f08:	0800b8a1 	.word	0x0800b8a1
 8008f0c:	0800b825 	.word	0x0800b825

08008f10 <_free_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4605      	mov	r5, r0
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d041      	beq.n	8008f9c <_free_r+0x8c>
 8008f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1c:	1f0c      	subs	r4, r1, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bfb8      	it	lt
 8008f22:	18e4      	addlt	r4, r4, r3
 8008f24:	f7fe f974 	bl	8007210 <__malloc_lock>
 8008f28:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa0 <_free_r+0x90>)
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x2c>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	4628      	mov	r0, r5
 8008f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f38:	f7fe b970 	b.w	800721c <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x42>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	1821      	adds	r1, r4, r0
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x1e>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x4c>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x42>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1850      	adds	r0, r2, r1
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x6c>
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	4401      	add	r1, r0
 8008f68:	1850      	adds	r0, r2, r1
 8008f6a:	4283      	cmp	r3, r0
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x22>
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4408      	add	r0, r1
 8008f78:	6010      	str	r0, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x22>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x74>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x22>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	1821      	adds	r1, r4, r0
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1809      	addeq	r1, r1, r0
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x22>
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000478 	.word	0x20000478

08008fa4 <_Balloc>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	69c6      	ldr	r6, [r0, #28]
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	b976      	cbnz	r6, 8008fcc <_Balloc+0x28>
 8008fae:	2010      	movs	r0, #16
 8008fb0:	f7fe f884 	bl	80070bc <malloc>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	61e0      	str	r0, [r4, #28]
 8008fb8:	b920      	cbnz	r0, 8008fc4 <_Balloc+0x20>
 8008fba:	4b18      	ldr	r3, [pc, #96]	@ (800901c <_Balloc+0x78>)
 8008fbc:	4818      	ldr	r0, [pc, #96]	@ (8009020 <_Balloc+0x7c>)
 8008fbe:	216b      	movs	r1, #107	@ 0x6b
 8008fc0:	f001 fd6e 	bl	800aaa0 <__assert_func>
 8008fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc8:	6006      	str	r6, [r0, #0]
 8008fca:	60c6      	str	r6, [r0, #12]
 8008fcc:	69e6      	ldr	r6, [r4, #28]
 8008fce:	68f3      	ldr	r3, [r6, #12]
 8008fd0:	b183      	cbz	r3, 8008ff4 <_Balloc+0x50>
 8008fd2:	69e3      	ldr	r3, [r4, #28]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fda:	b9b8      	cbnz	r0, 800900c <_Balloc+0x68>
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe2:	1d72      	adds	r2, r6, #5
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7fe f853 	bl	8007092 <_calloc_r>
 8008fec:	b160      	cbz	r0, 8009008 <_Balloc+0x64>
 8008fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff2:	e00e      	b.n	8009012 <_Balloc+0x6e>
 8008ff4:	2221      	movs	r2, #33	@ 0x21
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7fe f84a 	bl	8007092 <_calloc_r>
 8008ffe:	69e3      	ldr	r3, [r4, #28]
 8009000:	60f0      	str	r0, [r6, #12]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e4      	bne.n	8008fd2 <_Balloc+0x2e>
 8009008:	2000      	movs	r0, #0
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	6802      	ldr	r2, [r0, #0]
 800900e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009012:	2300      	movs	r3, #0
 8009014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009018:	e7f7      	b.n	800900a <_Balloc+0x66>
 800901a:	bf00      	nop
 800901c:	0800b832 	.word	0x0800b832
 8009020:	0800b8b2 	.word	0x0800b8b2

08009024 <_Bfree>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	69c6      	ldr	r6, [r0, #28]
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	b976      	cbnz	r6, 800904c <_Bfree+0x28>
 800902e:	2010      	movs	r0, #16
 8009030:	f7fe f844 	bl	80070bc <malloc>
 8009034:	4602      	mov	r2, r0
 8009036:	61e8      	str	r0, [r5, #28]
 8009038:	b920      	cbnz	r0, 8009044 <_Bfree+0x20>
 800903a:	4b09      	ldr	r3, [pc, #36]	@ (8009060 <_Bfree+0x3c>)
 800903c:	4809      	ldr	r0, [pc, #36]	@ (8009064 <_Bfree+0x40>)
 800903e:	218f      	movs	r1, #143	@ 0x8f
 8009040:	f001 fd2e 	bl	800aaa0 <__assert_func>
 8009044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009048:	6006      	str	r6, [r0, #0]
 800904a:	60c6      	str	r6, [r0, #12]
 800904c:	b13c      	cbz	r4, 800905e <_Bfree+0x3a>
 800904e:	69eb      	ldr	r3, [r5, #28]
 8009050:	6862      	ldr	r2, [r4, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009058:	6021      	str	r1, [r4, #0]
 800905a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	0800b832 	.word	0x0800b832
 8009064:	0800b8b2 	.word	0x0800b8b2

08009068 <__multadd>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	690d      	ldr	r5, [r1, #16]
 800906e:	4607      	mov	r7, r0
 8009070:	460c      	mov	r4, r1
 8009072:	461e      	mov	r6, r3
 8009074:	f101 0c14 	add.w	ip, r1, #20
 8009078:	2000      	movs	r0, #0
 800907a:	f8dc 3000 	ldr.w	r3, [ip]
 800907e:	b299      	uxth	r1, r3
 8009080:	fb02 6101 	mla	r1, r2, r1, r6
 8009084:	0c1e      	lsrs	r6, r3, #16
 8009086:	0c0b      	lsrs	r3, r1, #16
 8009088:	fb02 3306 	mla	r3, r2, r6, r3
 800908c:	b289      	uxth	r1, r1
 800908e:	3001      	adds	r0, #1
 8009090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009094:	4285      	cmp	r5, r0
 8009096:	f84c 1b04 	str.w	r1, [ip], #4
 800909a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800909e:	dcec      	bgt.n	800907a <__multadd+0x12>
 80090a0:	b30e      	cbz	r6, 80090e6 <__multadd+0x7e>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	dc19      	bgt.n	80090dc <__multadd+0x74>
 80090a8:	6861      	ldr	r1, [r4, #4]
 80090aa:	4638      	mov	r0, r7
 80090ac:	3101      	adds	r1, #1
 80090ae:	f7ff ff79 	bl	8008fa4 <_Balloc>
 80090b2:	4680      	mov	r8, r0
 80090b4:	b928      	cbnz	r0, 80090c2 <__multadd+0x5a>
 80090b6:	4602      	mov	r2, r0
 80090b8:	4b0c      	ldr	r3, [pc, #48]	@ (80090ec <__multadd+0x84>)
 80090ba:	480d      	ldr	r0, [pc, #52]	@ (80090f0 <__multadd+0x88>)
 80090bc:	21ba      	movs	r1, #186	@ 0xba
 80090be:	f001 fcef 	bl	800aaa0 <__assert_func>
 80090c2:	6922      	ldr	r2, [r4, #16]
 80090c4:	3202      	adds	r2, #2
 80090c6:	f104 010c 	add.w	r1, r4, #12
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	300c      	adds	r0, #12
 80090ce:	f001 fcd1 	bl	800aa74 <memcpy>
 80090d2:	4621      	mov	r1, r4
 80090d4:	4638      	mov	r0, r7
 80090d6:	f7ff ffa5 	bl	8009024 <_Bfree>
 80090da:	4644      	mov	r4, r8
 80090dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090e0:	3501      	adds	r5, #1
 80090e2:	615e      	str	r6, [r3, #20]
 80090e4:	6125      	str	r5, [r4, #16]
 80090e6:	4620      	mov	r0, r4
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	0800b8a1 	.word	0x0800b8a1
 80090f0:	0800b8b2 	.word	0x0800b8b2

080090f4 <__s2b>:
 80090f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f8:	460c      	mov	r4, r1
 80090fa:	4615      	mov	r5, r2
 80090fc:	461f      	mov	r7, r3
 80090fe:	2209      	movs	r2, #9
 8009100:	3308      	adds	r3, #8
 8009102:	4606      	mov	r6, r0
 8009104:	fb93 f3f2 	sdiv	r3, r3, r2
 8009108:	2100      	movs	r1, #0
 800910a:	2201      	movs	r2, #1
 800910c:	429a      	cmp	r2, r3
 800910e:	db09      	blt.n	8009124 <__s2b+0x30>
 8009110:	4630      	mov	r0, r6
 8009112:	f7ff ff47 	bl	8008fa4 <_Balloc>
 8009116:	b940      	cbnz	r0, 800912a <__s2b+0x36>
 8009118:	4602      	mov	r2, r0
 800911a:	4b19      	ldr	r3, [pc, #100]	@ (8009180 <__s2b+0x8c>)
 800911c:	4819      	ldr	r0, [pc, #100]	@ (8009184 <__s2b+0x90>)
 800911e:	21d3      	movs	r1, #211	@ 0xd3
 8009120:	f001 fcbe 	bl	800aaa0 <__assert_func>
 8009124:	0052      	lsls	r2, r2, #1
 8009126:	3101      	adds	r1, #1
 8009128:	e7f0      	b.n	800910c <__s2b+0x18>
 800912a:	9b08      	ldr	r3, [sp, #32]
 800912c:	6143      	str	r3, [r0, #20]
 800912e:	2d09      	cmp	r5, #9
 8009130:	f04f 0301 	mov.w	r3, #1
 8009134:	6103      	str	r3, [r0, #16]
 8009136:	dd16      	ble.n	8009166 <__s2b+0x72>
 8009138:	f104 0909 	add.w	r9, r4, #9
 800913c:	46c8      	mov	r8, r9
 800913e:	442c      	add	r4, r5
 8009140:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009144:	4601      	mov	r1, r0
 8009146:	3b30      	subs	r3, #48	@ 0x30
 8009148:	220a      	movs	r2, #10
 800914a:	4630      	mov	r0, r6
 800914c:	f7ff ff8c 	bl	8009068 <__multadd>
 8009150:	45a0      	cmp	r8, r4
 8009152:	d1f5      	bne.n	8009140 <__s2b+0x4c>
 8009154:	f1a5 0408 	sub.w	r4, r5, #8
 8009158:	444c      	add	r4, r9
 800915a:	1b2d      	subs	r5, r5, r4
 800915c:	1963      	adds	r3, r4, r5
 800915e:	42bb      	cmp	r3, r7
 8009160:	db04      	blt.n	800916c <__s2b+0x78>
 8009162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009166:	340a      	adds	r4, #10
 8009168:	2509      	movs	r5, #9
 800916a:	e7f6      	b.n	800915a <__s2b+0x66>
 800916c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009170:	4601      	mov	r1, r0
 8009172:	3b30      	subs	r3, #48	@ 0x30
 8009174:	220a      	movs	r2, #10
 8009176:	4630      	mov	r0, r6
 8009178:	f7ff ff76 	bl	8009068 <__multadd>
 800917c:	e7ee      	b.n	800915c <__s2b+0x68>
 800917e:	bf00      	nop
 8009180:	0800b8a1 	.word	0x0800b8a1
 8009184:	0800b8b2 	.word	0x0800b8b2

08009188 <__hi0bits>:
 8009188:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800918c:	4603      	mov	r3, r0
 800918e:	bf36      	itet	cc
 8009190:	0403      	lslcc	r3, r0, #16
 8009192:	2000      	movcs	r0, #0
 8009194:	2010      	movcc	r0, #16
 8009196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800919a:	bf3c      	itt	cc
 800919c:	021b      	lslcc	r3, r3, #8
 800919e:	3008      	addcc	r0, #8
 80091a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091a4:	bf3c      	itt	cc
 80091a6:	011b      	lslcc	r3, r3, #4
 80091a8:	3004      	addcc	r0, #4
 80091aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ae:	bf3c      	itt	cc
 80091b0:	009b      	lslcc	r3, r3, #2
 80091b2:	3002      	addcc	r0, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	db05      	blt.n	80091c4 <__hi0bits+0x3c>
 80091b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091bc:	f100 0001 	add.w	r0, r0, #1
 80091c0:	bf08      	it	eq
 80091c2:	2020      	moveq	r0, #32
 80091c4:	4770      	bx	lr

080091c6 <__lo0bits>:
 80091c6:	6803      	ldr	r3, [r0, #0]
 80091c8:	4602      	mov	r2, r0
 80091ca:	f013 0007 	ands.w	r0, r3, #7
 80091ce:	d00b      	beq.n	80091e8 <__lo0bits+0x22>
 80091d0:	07d9      	lsls	r1, r3, #31
 80091d2:	d421      	bmi.n	8009218 <__lo0bits+0x52>
 80091d4:	0798      	lsls	r0, r3, #30
 80091d6:	bf49      	itett	mi
 80091d8:	085b      	lsrmi	r3, r3, #1
 80091da:	089b      	lsrpl	r3, r3, #2
 80091dc:	2001      	movmi	r0, #1
 80091de:	6013      	strmi	r3, [r2, #0]
 80091e0:	bf5c      	itt	pl
 80091e2:	6013      	strpl	r3, [r2, #0]
 80091e4:	2002      	movpl	r0, #2
 80091e6:	4770      	bx	lr
 80091e8:	b299      	uxth	r1, r3
 80091ea:	b909      	cbnz	r1, 80091f0 <__lo0bits+0x2a>
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	2010      	movs	r0, #16
 80091f0:	b2d9      	uxtb	r1, r3
 80091f2:	b909      	cbnz	r1, 80091f8 <__lo0bits+0x32>
 80091f4:	3008      	adds	r0, #8
 80091f6:	0a1b      	lsrs	r3, r3, #8
 80091f8:	0719      	lsls	r1, r3, #28
 80091fa:	bf04      	itt	eq
 80091fc:	091b      	lsreq	r3, r3, #4
 80091fe:	3004      	addeq	r0, #4
 8009200:	0799      	lsls	r1, r3, #30
 8009202:	bf04      	itt	eq
 8009204:	089b      	lsreq	r3, r3, #2
 8009206:	3002      	addeq	r0, #2
 8009208:	07d9      	lsls	r1, r3, #31
 800920a:	d403      	bmi.n	8009214 <__lo0bits+0x4e>
 800920c:	085b      	lsrs	r3, r3, #1
 800920e:	f100 0001 	add.w	r0, r0, #1
 8009212:	d003      	beq.n	800921c <__lo0bits+0x56>
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	4770      	bx	lr
 8009218:	2000      	movs	r0, #0
 800921a:	4770      	bx	lr
 800921c:	2020      	movs	r0, #32
 800921e:	4770      	bx	lr

08009220 <__i2b>:
 8009220:	b510      	push	{r4, lr}
 8009222:	460c      	mov	r4, r1
 8009224:	2101      	movs	r1, #1
 8009226:	f7ff febd 	bl	8008fa4 <_Balloc>
 800922a:	4602      	mov	r2, r0
 800922c:	b928      	cbnz	r0, 800923a <__i2b+0x1a>
 800922e:	4b05      	ldr	r3, [pc, #20]	@ (8009244 <__i2b+0x24>)
 8009230:	4805      	ldr	r0, [pc, #20]	@ (8009248 <__i2b+0x28>)
 8009232:	f240 1145 	movw	r1, #325	@ 0x145
 8009236:	f001 fc33 	bl	800aaa0 <__assert_func>
 800923a:	2301      	movs	r3, #1
 800923c:	6144      	str	r4, [r0, #20]
 800923e:	6103      	str	r3, [r0, #16]
 8009240:	bd10      	pop	{r4, pc}
 8009242:	bf00      	nop
 8009244:	0800b8a1 	.word	0x0800b8a1
 8009248:	0800b8b2 	.word	0x0800b8b2

0800924c <__multiply>:
 800924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009250:	4614      	mov	r4, r2
 8009252:	690a      	ldr	r2, [r1, #16]
 8009254:	6923      	ldr	r3, [r4, #16]
 8009256:	429a      	cmp	r2, r3
 8009258:	bfa8      	it	ge
 800925a:	4623      	movge	r3, r4
 800925c:	460f      	mov	r7, r1
 800925e:	bfa4      	itt	ge
 8009260:	460c      	movge	r4, r1
 8009262:	461f      	movge	r7, r3
 8009264:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009268:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800926c:	68a3      	ldr	r3, [r4, #8]
 800926e:	6861      	ldr	r1, [r4, #4]
 8009270:	eb0a 0609 	add.w	r6, sl, r9
 8009274:	42b3      	cmp	r3, r6
 8009276:	b085      	sub	sp, #20
 8009278:	bfb8      	it	lt
 800927a:	3101      	addlt	r1, #1
 800927c:	f7ff fe92 	bl	8008fa4 <_Balloc>
 8009280:	b930      	cbnz	r0, 8009290 <__multiply+0x44>
 8009282:	4602      	mov	r2, r0
 8009284:	4b44      	ldr	r3, [pc, #272]	@ (8009398 <__multiply+0x14c>)
 8009286:	4845      	ldr	r0, [pc, #276]	@ (800939c <__multiply+0x150>)
 8009288:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800928c:	f001 fc08 	bl	800aaa0 <__assert_func>
 8009290:	f100 0514 	add.w	r5, r0, #20
 8009294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009298:	462b      	mov	r3, r5
 800929a:	2200      	movs	r2, #0
 800929c:	4543      	cmp	r3, r8
 800929e:	d321      	bcc.n	80092e4 <__multiply+0x98>
 80092a0:	f107 0114 	add.w	r1, r7, #20
 80092a4:	f104 0214 	add.w	r2, r4, #20
 80092a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80092ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	1b13      	subs	r3, r2, r4
 80092b4:	3b15      	subs	r3, #21
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	3304      	adds	r3, #4
 80092bc:	f104 0715 	add.w	r7, r4, #21
 80092c0:	42ba      	cmp	r2, r7
 80092c2:	bf38      	it	cc
 80092c4:	2304      	movcc	r3, #4
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	9103      	str	r1, [sp, #12]
 80092cc:	428b      	cmp	r3, r1
 80092ce:	d80c      	bhi.n	80092ea <__multiply+0x9e>
 80092d0:	2e00      	cmp	r6, #0
 80092d2:	dd03      	ble.n	80092dc <__multiply+0x90>
 80092d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d05b      	beq.n	8009394 <__multiply+0x148>
 80092dc:	6106      	str	r6, [r0, #16]
 80092de:	b005      	add	sp, #20
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	f843 2b04 	str.w	r2, [r3], #4
 80092e8:	e7d8      	b.n	800929c <__multiply+0x50>
 80092ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80092ee:	f1ba 0f00 	cmp.w	sl, #0
 80092f2:	d024      	beq.n	800933e <__multiply+0xf2>
 80092f4:	f104 0e14 	add.w	lr, r4, #20
 80092f8:	46a9      	mov	r9, r5
 80092fa:	f04f 0c00 	mov.w	ip, #0
 80092fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009302:	f8d9 3000 	ldr.w	r3, [r9]
 8009306:	fa1f fb87 	uxth.w	fp, r7
 800930a:	b29b      	uxth	r3, r3
 800930c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009310:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009314:	f8d9 7000 	ldr.w	r7, [r9]
 8009318:	4463      	add	r3, ip
 800931a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800931e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009322:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009326:	b29b      	uxth	r3, r3
 8009328:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800932c:	4572      	cmp	r2, lr
 800932e:	f849 3b04 	str.w	r3, [r9], #4
 8009332:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009336:	d8e2      	bhi.n	80092fe <__multiply+0xb2>
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	f845 c003 	str.w	ip, [r5, r3]
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009344:	3104      	adds	r1, #4
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	d021      	beq.n	8009390 <__multiply+0x144>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	f104 0c14 	add.w	ip, r4, #20
 8009352:	46ae      	mov	lr, r5
 8009354:	f04f 0a00 	mov.w	sl, #0
 8009358:	f8bc b000 	ldrh.w	fp, [ip]
 800935c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009360:	fb09 770b 	mla	r7, r9, fp, r7
 8009364:	4457      	add	r7, sl
 8009366:	b29b      	uxth	r3, r3
 8009368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800936c:	f84e 3b04 	str.w	r3, [lr], #4
 8009370:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009378:	f8be 3000 	ldrh.w	r3, [lr]
 800937c:	fb09 330a 	mla	r3, r9, sl, r3
 8009380:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009384:	4562      	cmp	r2, ip
 8009386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800938a:	d8e5      	bhi.n	8009358 <__multiply+0x10c>
 800938c:	9f01      	ldr	r7, [sp, #4]
 800938e:	51eb      	str	r3, [r5, r7]
 8009390:	3504      	adds	r5, #4
 8009392:	e799      	b.n	80092c8 <__multiply+0x7c>
 8009394:	3e01      	subs	r6, #1
 8009396:	e79b      	b.n	80092d0 <__multiply+0x84>
 8009398:	0800b8a1 	.word	0x0800b8a1
 800939c:	0800b8b2 	.word	0x0800b8b2

080093a0 <__pow5mult>:
 80093a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a4:	4615      	mov	r5, r2
 80093a6:	f012 0203 	ands.w	r2, r2, #3
 80093aa:	4607      	mov	r7, r0
 80093ac:	460e      	mov	r6, r1
 80093ae:	d007      	beq.n	80093c0 <__pow5mult+0x20>
 80093b0:	4c25      	ldr	r4, [pc, #148]	@ (8009448 <__pow5mult+0xa8>)
 80093b2:	3a01      	subs	r2, #1
 80093b4:	2300      	movs	r3, #0
 80093b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093ba:	f7ff fe55 	bl	8009068 <__multadd>
 80093be:	4606      	mov	r6, r0
 80093c0:	10ad      	asrs	r5, r5, #2
 80093c2:	d03d      	beq.n	8009440 <__pow5mult+0xa0>
 80093c4:	69fc      	ldr	r4, [r7, #28]
 80093c6:	b97c      	cbnz	r4, 80093e8 <__pow5mult+0x48>
 80093c8:	2010      	movs	r0, #16
 80093ca:	f7fd fe77 	bl	80070bc <malloc>
 80093ce:	4602      	mov	r2, r0
 80093d0:	61f8      	str	r0, [r7, #28]
 80093d2:	b928      	cbnz	r0, 80093e0 <__pow5mult+0x40>
 80093d4:	4b1d      	ldr	r3, [pc, #116]	@ (800944c <__pow5mult+0xac>)
 80093d6:	481e      	ldr	r0, [pc, #120]	@ (8009450 <__pow5mult+0xb0>)
 80093d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093dc:	f001 fb60 	bl	800aaa0 <__assert_func>
 80093e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093e4:	6004      	str	r4, [r0, #0]
 80093e6:	60c4      	str	r4, [r0, #12]
 80093e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093f0:	b94c      	cbnz	r4, 8009406 <__pow5mult+0x66>
 80093f2:	f240 2171 	movw	r1, #625	@ 0x271
 80093f6:	4638      	mov	r0, r7
 80093f8:	f7ff ff12 	bl	8009220 <__i2b>
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009402:	4604      	mov	r4, r0
 8009404:	6003      	str	r3, [r0, #0]
 8009406:	f04f 0900 	mov.w	r9, #0
 800940a:	07eb      	lsls	r3, r5, #31
 800940c:	d50a      	bpl.n	8009424 <__pow5mult+0x84>
 800940e:	4631      	mov	r1, r6
 8009410:	4622      	mov	r2, r4
 8009412:	4638      	mov	r0, r7
 8009414:	f7ff ff1a 	bl	800924c <__multiply>
 8009418:	4631      	mov	r1, r6
 800941a:	4680      	mov	r8, r0
 800941c:	4638      	mov	r0, r7
 800941e:	f7ff fe01 	bl	8009024 <_Bfree>
 8009422:	4646      	mov	r6, r8
 8009424:	106d      	asrs	r5, r5, #1
 8009426:	d00b      	beq.n	8009440 <__pow5mult+0xa0>
 8009428:	6820      	ldr	r0, [r4, #0]
 800942a:	b938      	cbnz	r0, 800943c <__pow5mult+0x9c>
 800942c:	4622      	mov	r2, r4
 800942e:	4621      	mov	r1, r4
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff ff0b 	bl	800924c <__multiply>
 8009436:	6020      	str	r0, [r4, #0]
 8009438:	f8c0 9000 	str.w	r9, [r0]
 800943c:	4604      	mov	r4, r0
 800943e:	e7e4      	b.n	800940a <__pow5mult+0x6a>
 8009440:	4630      	mov	r0, r6
 8009442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009446:	bf00      	nop
 8009448:	0800b90c 	.word	0x0800b90c
 800944c:	0800b832 	.word	0x0800b832
 8009450:	0800b8b2 	.word	0x0800b8b2

08009454 <__lshift>:
 8009454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009458:	460c      	mov	r4, r1
 800945a:	6849      	ldr	r1, [r1, #4]
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	4607      	mov	r7, r0
 8009466:	4691      	mov	r9, r2
 8009468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800946c:	f108 0601 	add.w	r6, r8, #1
 8009470:	42b3      	cmp	r3, r6
 8009472:	db0b      	blt.n	800948c <__lshift+0x38>
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff fd95 	bl	8008fa4 <_Balloc>
 800947a:	4605      	mov	r5, r0
 800947c:	b948      	cbnz	r0, 8009492 <__lshift+0x3e>
 800947e:	4602      	mov	r2, r0
 8009480:	4b28      	ldr	r3, [pc, #160]	@ (8009524 <__lshift+0xd0>)
 8009482:	4829      	ldr	r0, [pc, #164]	@ (8009528 <__lshift+0xd4>)
 8009484:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009488:	f001 fb0a 	bl	800aaa0 <__assert_func>
 800948c:	3101      	adds	r1, #1
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	e7ee      	b.n	8009470 <__lshift+0x1c>
 8009492:	2300      	movs	r3, #0
 8009494:	f100 0114 	add.w	r1, r0, #20
 8009498:	f100 0210 	add.w	r2, r0, #16
 800949c:	4618      	mov	r0, r3
 800949e:	4553      	cmp	r3, sl
 80094a0:	db33      	blt.n	800950a <__lshift+0xb6>
 80094a2:	6920      	ldr	r0, [r4, #16]
 80094a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094a8:	f104 0314 	add.w	r3, r4, #20
 80094ac:	f019 091f 	ands.w	r9, r9, #31
 80094b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094b8:	d02b      	beq.n	8009512 <__lshift+0xbe>
 80094ba:	f1c9 0e20 	rsb	lr, r9, #32
 80094be:	468a      	mov	sl, r1
 80094c0:	2200      	movs	r2, #0
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	fa00 f009 	lsl.w	r0, r0, r9
 80094c8:	4310      	orrs	r0, r2
 80094ca:	f84a 0b04 	str.w	r0, [sl], #4
 80094ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d2:	459c      	cmp	ip, r3
 80094d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80094d8:	d8f3      	bhi.n	80094c2 <__lshift+0x6e>
 80094da:	ebac 0304 	sub.w	r3, ip, r4
 80094de:	3b15      	subs	r3, #21
 80094e0:	f023 0303 	bic.w	r3, r3, #3
 80094e4:	3304      	adds	r3, #4
 80094e6:	f104 0015 	add.w	r0, r4, #21
 80094ea:	4584      	cmp	ip, r0
 80094ec:	bf38      	it	cc
 80094ee:	2304      	movcc	r3, #4
 80094f0:	50ca      	str	r2, [r1, r3]
 80094f2:	b10a      	cbz	r2, 80094f8 <__lshift+0xa4>
 80094f4:	f108 0602 	add.w	r6, r8, #2
 80094f8:	3e01      	subs	r6, #1
 80094fa:	4638      	mov	r0, r7
 80094fc:	612e      	str	r6, [r5, #16]
 80094fe:	4621      	mov	r1, r4
 8009500:	f7ff fd90 	bl	8009024 <_Bfree>
 8009504:	4628      	mov	r0, r5
 8009506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950a:	f842 0f04 	str.w	r0, [r2, #4]!
 800950e:	3301      	adds	r3, #1
 8009510:	e7c5      	b.n	800949e <__lshift+0x4a>
 8009512:	3904      	subs	r1, #4
 8009514:	f853 2b04 	ldr.w	r2, [r3], #4
 8009518:	f841 2f04 	str.w	r2, [r1, #4]!
 800951c:	459c      	cmp	ip, r3
 800951e:	d8f9      	bhi.n	8009514 <__lshift+0xc0>
 8009520:	e7ea      	b.n	80094f8 <__lshift+0xa4>
 8009522:	bf00      	nop
 8009524:	0800b8a1 	.word	0x0800b8a1
 8009528:	0800b8b2 	.word	0x0800b8b2

0800952c <__mcmp>:
 800952c:	690a      	ldr	r2, [r1, #16]
 800952e:	4603      	mov	r3, r0
 8009530:	6900      	ldr	r0, [r0, #16]
 8009532:	1a80      	subs	r0, r0, r2
 8009534:	b530      	push	{r4, r5, lr}
 8009536:	d10e      	bne.n	8009556 <__mcmp+0x2a>
 8009538:	3314      	adds	r3, #20
 800953a:	3114      	adds	r1, #20
 800953c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009540:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800954c:	4295      	cmp	r5, r2
 800954e:	d003      	beq.n	8009558 <__mcmp+0x2c>
 8009550:	d205      	bcs.n	800955e <__mcmp+0x32>
 8009552:	f04f 30ff 	mov.w	r0, #4294967295
 8009556:	bd30      	pop	{r4, r5, pc}
 8009558:	42a3      	cmp	r3, r4
 800955a:	d3f3      	bcc.n	8009544 <__mcmp+0x18>
 800955c:	e7fb      	b.n	8009556 <__mcmp+0x2a>
 800955e:	2001      	movs	r0, #1
 8009560:	e7f9      	b.n	8009556 <__mcmp+0x2a>
	...

08009564 <__mdiff>:
 8009564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	4689      	mov	r9, r1
 800956a:	4606      	mov	r6, r0
 800956c:	4611      	mov	r1, r2
 800956e:	4648      	mov	r0, r9
 8009570:	4614      	mov	r4, r2
 8009572:	f7ff ffdb 	bl	800952c <__mcmp>
 8009576:	1e05      	subs	r5, r0, #0
 8009578:	d112      	bne.n	80095a0 <__mdiff+0x3c>
 800957a:	4629      	mov	r1, r5
 800957c:	4630      	mov	r0, r6
 800957e:	f7ff fd11 	bl	8008fa4 <_Balloc>
 8009582:	4602      	mov	r2, r0
 8009584:	b928      	cbnz	r0, 8009592 <__mdiff+0x2e>
 8009586:	4b3f      	ldr	r3, [pc, #252]	@ (8009684 <__mdiff+0x120>)
 8009588:	f240 2137 	movw	r1, #567	@ 0x237
 800958c:	483e      	ldr	r0, [pc, #248]	@ (8009688 <__mdiff+0x124>)
 800958e:	f001 fa87 	bl	800aaa0 <__assert_func>
 8009592:	2301      	movs	r3, #1
 8009594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009598:	4610      	mov	r0, r2
 800959a:	b003      	add	sp, #12
 800959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	bfbc      	itt	lt
 80095a2:	464b      	movlt	r3, r9
 80095a4:	46a1      	movlt	r9, r4
 80095a6:	4630      	mov	r0, r6
 80095a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095ac:	bfba      	itte	lt
 80095ae:	461c      	movlt	r4, r3
 80095b0:	2501      	movlt	r5, #1
 80095b2:	2500      	movge	r5, #0
 80095b4:	f7ff fcf6 	bl	8008fa4 <_Balloc>
 80095b8:	4602      	mov	r2, r0
 80095ba:	b918      	cbnz	r0, 80095c4 <__mdiff+0x60>
 80095bc:	4b31      	ldr	r3, [pc, #196]	@ (8009684 <__mdiff+0x120>)
 80095be:	f240 2145 	movw	r1, #581	@ 0x245
 80095c2:	e7e3      	b.n	800958c <__mdiff+0x28>
 80095c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095c8:	6926      	ldr	r6, [r4, #16]
 80095ca:	60c5      	str	r5, [r0, #12]
 80095cc:	f109 0310 	add.w	r3, r9, #16
 80095d0:	f109 0514 	add.w	r5, r9, #20
 80095d4:	f104 0e14 	add.w	lr, r4, #20
 80095d8:	f100 0b14 	add.w	fp, r0, #20
 80095dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	46d9      	mov	r9, fp
 80095e8:	f04f 0c00 	mov.w	ip, #0
 80095ec:	9b01      	ldr	r3, [sp, #4]
 80095ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	fa1f f38a 	uxth.w	r3, sl
 80095fc:	4619      	mov	r1, r3
 80095fe:	b283      	uxth	r3, r0
 8009600:	1acb      	subs	r3, r1, r3
 8009602:	0c00      	lsrs	r0, r0, #16
 8009604:	4463      	add	r3, ip
 8009606:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800960a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800960e:	b29b      	uxth	r3, r3
 8009610:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009614:	4576      	cmp	r6, lr
 8009616:	f849 3b04 	str.w	r3, [r9], #4
 800961a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800961e:	d8e5      	bhi.n	80095ec <__mdiff+0x88>
 8009620:	1b33      	subs	r3, r6, r4
 8009622:	3b15      	subs	r3, #21
 8009624:	f023 0303 	bic.w	r3, r3, #3
 8009628:	3415      	adds	r4, #21
 800962a:	3304      	adds	r3, #4
 800962c:	42a6      	cmp	r6, r4
 800962e:	bf38      	it	cc
 8009630:	2304      	movcc	r3, #4
 8009632:	441d      	add	r5, r3
 8009634:	445b      	add	r3, fp
 8009636:	461e      	mov	r6, r3
 8009638:	462c      	mov	r4, r5
 800963a:	4544      	cmp	r4, r8
 800963c:	d30e      	bcc.n	800965c <__mdiff+0xf8>
 800963e:	f108 0103 	add.w	r1, r8, #3
 8009642:	1b49      	subs	r1, r1, r5
 8009644:	f021 0103 	bic.w	r1, r1, #3
 8009648:	3d03      	subs	r5, #3
 800964a:	45a8      	cmp	r8, r5
 800964c:	bf38      	it	cc
 800964e:	2100      	movcc	r1, #0
 8009650:	440b      	add	r3, r1
 8009652:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009656:	b191      	cbz	r1, 800967e <__mdiff+0x11a>
 8009658:	6117      	str	r7, [r2, #16]
 800965a:	e79d      	b.n	8009598 <__mdiff+0x34>
 800965c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009660:	46e6      	mov	lr, ip
 8009662:	0c08      	lsrs	r0, r1, #16
 8009664:	fa1c fc81 	uxtah	ip, ip, r1
 8009668:	4471      	add	r1, lr
 800966a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800966e:	b289      	uxth	r1, r1
 8009670:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009674:	f846 1b04 	str.w	r1, [r6], #4
 8009678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800967c:	e7dd      	b.n	800963a <__mdiff+0xd6>
 800967e:	3f01      	subs	r7, #1
 8009680:	e7e7      	b.n	8009652 <__mdiff+0xee>
 8009682:	bf00      	nop
 8009684:	0800b8a1 	.word	0x0800b8a1
 8009688:	0800b8b2 	.word	0x0800b8b2

0800968c <__ulp>:
 800968c:	b082      	sub	sp, #8
 800968e:	ed8d 0b00 	vstr	d0, [sp]
 8009692:	9a01      	ldr	r2, [sp, #4]
 8009694:	4b0f      	ldr	r3, [pc, #60]	@ (80096d4 <__ulp+0x48>)
 8009696:	4013      	ands	r3, r2
 8009698:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800969c:	2b00      	cmp	r3, #0
 800969e:	dc08      	bgt.n	80096b2 <__ulp+0x26>
 80096a0:	425b      	negs	r3, r3
 80096a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80096a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096aa:	da04      	bge.n	80096b6 <__ulp+0x2a>
 80096ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80096b0:	4113      	asrs	r3, r2
 80096b2:	2200      	movs	r2, #0
 80096b4:	e008      	b.n	80096c8 <__ulp+0x3c>
 80096b6:	f1a2 0314 	sub.w	r3, r2, #20
 80096ba:	2b1e      	cmp	r3, #30
 80096bc:	bfda      	itte	le
 80096be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80096c2:	40da      	lsrle	r2, r3
 80096c4:	2201      	movgt	r2, #1
 80096c6:	2300      	movs	r3, #0
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	ec41 0b10 	vmov	d0, r0, r1
 80096d0:	b002      	add	sp, #8
 80096d2:	4770      	bx	lr
 80096d4:	7ff00000 	.word	0x7ff00000

080096d8 <__b2d>:
 80096d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096dc:	6906      	ldr	r6, [r0, #16]
 80096de:	f100 0814 	add.w	r8, r0, #20
 80096e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80096e6:	1f37      	subs	r7, r6, #4
 80096e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7ff fd4b 	bl	8009188 <__hi0bits>
 80096f2:	f1c0 0320 	rsb	r3, r0, #32
 80096f6:	280a      	cmp	r0, #10
 80096f8:	600b      	str	r3, [r1, #0]
 80096fa:	491b      	ldr	r1, [pc, #108]	@ (8009768 <__b2d+0x90>)
 80096fc:	dc15      	bgt.n	800972a <__b2d+0x52>
 80096fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8009702:	fa22 f30c 	lsr.w	r3, r2, ip
 8009706:	45b8      	cmp	r8, r7
 8009708:	ea43 0501 	orr.w	r5, r3, r1
 800970c:	bf34      	ite	cc
 800970e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009712:	2300      	movcs	r3, #0
 8009714:	3015      	adds	r0, #21
 8009716:	fa02 f000 	lsl.w	r0, r2, r0
 800971a:	fa23 f30c 	lsr.w	r3, r3, ip
 800971e:	4303      	orrs	r3, r0
 8009720:	461c      	mov	r4, r3
 8009722:	ec45 4b10 	vmov	d0, r4, r5
 8009726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972a:	45b8      	cmp	r8, r7
 800972c:	bf3a      	itte	cc
 800972e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009732:	f1a6 0708 	subcc.w	r7, r6, #8
 8009736:	2300      	movcs	r3, #0
 8009738:	380b      	subs	r0, #11
 800973a:	d012      	beq.n	8009762 <__b2d+0x8a>
 800973c:	f1c0 0120 	rsb	r1, r0, #32
 8009740:	fa23 f401 	lsr.w	r4, r3, r1
 8009744:	4082      	lsls	r2, r0
 8009746:	4322      	orrs	r2, r4
 8009748:	4547      	cmp	r7, r8
 800974a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800974e:	bf8c      	ite	hi
 8009750:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009754:	2200      	movls	r2, #0
 8009756:	4083      	lsls	r3, r0
 8009758:	40ca      	lsrs	r2, r1
 800975a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800975e:	4313      	orrs	r3, r2
 8009760:	e7de      	b.n	8009720 <__b2d+0x48>
 8009762:	ea42 0501 	orr.w	r5, r2, r1
 8009766:	e7db      	b.n	8009720 <__b2d+0x48>
 8009768:	3ff00000 	.word	0x3ff00000

0800976c <__d2b>:
 800976c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009770:	460f      	mov	r7, r1
 8009772:	2101      	movs	r1, #1
 8009774:	ec59 8b10 	vmov	r8, r9, d0
 8009778:	4616      	mov	r6, r2
 800977a:	f7ff fc13 	bl	8008fa4 <_Balloc>
 800977e:	4604      	mov	r4, r0
 8009780:	b930      	cbnz	r0, 8009790 <__d2b+0x24>
 8009782:	4602      	mov	r2, r0
 8009784:	4b23      	ldr	r3, [pc, #140]	@ (8009814 <__d2b+0xa8>)
 8009786:	4824      	ldr	r0, [pc, #144]	@ (8009818 <__d2b+0xac>)
 8009788:	f240 310f 	movw	r1, #783	@ 0x30f
 800978c:	f001 f988 	bl	800aaa0 <__assert_func>
 8009790:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009798:	b10d      	cbz	r5, 800979e <__d2b+0x32>
 800979a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	f1b8 0300 	subs.w	r3, r8, #0
 80097a4:	d023      	beq.n	80097ee <__d2b+0x82>
 80097a6:	4668      	mov	r0, sp
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	f7ff fd0c 	bl	80091c6 <__lo0bits>
 80097ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097b2:	b1d0      	cbz	r0, 80097ea <__d2b+0x7e>
 80097b4:	f1c0 0320 	rsb	r3, r0, #32
 80097b8:	fa02 f303 	lsl.w	r3, r2, r3
 80097bc:	430b      	orrs	r3, r1
 80097be:	40c2      	lsrs	r2, r0
 80097c0:	6163      	str	r3, [r4, #20]
 80097c2:	9201      	str	r2, [sp, #4]
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	61a3      	str	r3, [r4, #24]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bf0c      	ite	eq
 80097cc:	2201      	moveq	r2, #1
 80097ce:	2202      	movne	r2, #2
 80097d0:	6122      	str	r2, [r4, #16]
 80097d2:	b1a5      	cbz	r5, 80097fe <__d2b+0x92>
 80097d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097d8:	4405      	add	r5, r0
 80097da:	603d      	str	r5, [r7, #0]
 80097dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097e0:	6030      	str	r0, [r6, #0]
 80097e2:	4620      	mov	r0, r4
 80097e4:	b003      	add	sp, #12
 80097e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ea:	6161      	str	r1, [r4, #20]
 80097ec:	e7ea      	b.n	80097c4 <__d2b+0x58>
 80097ee:	a801      	add	r0, sp, #4
 80097f0:	f7ff fce9 	bl	80091c6 <__lo0bits>
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	6163      	str	r3, [r4, #20]
 80097f8:	3020      	adds	r0, #32
 80097fa:	2201      	movs	r2, #1
 80097fc:	e7e8      	b.n	80097d0 <__d2b+0x64>
 80097fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009802:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009806:	6038      	str	r0, [r7, #0]
 8009808:	6918      	ldr	r0, [r3, #16]
 800980a:	f7ff fcbd 	bl	8009188 <__hi0bits>
 800980e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009812:	e7e5      	b.n	80097e0 <__d2b+0x74>
 8009814:	0800b8a1 	.word	0x0800b8a1
 8009818:	0800b8b2 	.word	0x0800b8b2

0800981c <__ratio>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	b085      	sub	sp, #20
 8009822:	e9cd 1000 	strd	r1, r0, [sp]
 8009826:	a902      	add	r1, sp, #8
 8009828:	f7ff ff56 	bl	80096d8 <__b2d>
 800982c:	9800      	ldr	r0, [sp, #0]
 800982e:	a903      	add	r1, sp, #12
 8009830:	ec55 4b10 	vmov	r4, r5, d0
 8009834:	f7ff ff50 	bl	80096d8 <__b2d>
 8009838:	9b01      	ldr	r3, [sp, #4]
 800983a:	6919      	ldr	r1, [r3, #16]
 800983c:	9b00      	ldr	r3, [sp, #0]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	1ac9      	subs	r1, r1, r3
 8009842:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009846:	1a9b      	subs	r3, r3, r2
 8009848:	ec5b ab10 	vmov	sl, fp, d0
 800984c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009850:	2b00      	cmp	r3, #0
 8009852:	bfce      	itee	gt
 8009854:	462a      	movgt	r2, r5
 8009856:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800985a:	465a      	movle	r2, fp
 800985c:	462f      	mov	r7, r5
 800985e:	46d9      	mov	r9, fp
 8009860:	bfcc      	ite	gt
 8009862:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009866:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800986a:	464b      	mov	r3, r9
 800986c:	4652      	mov	r2, sl
 800986e:	4620      	mov	r0, r4
 8009870:	4639      	mov	r1, r7
 8009872:	f7f6 fffb 	bl	800086c <__aeabi_ddiv>
 8009876:	ec41 0b10 	vmov	d0, r0, r1
 800987a:	b005      	add	sp, #20
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009880 <__copybits>:
 8009880:	3901      	subs	r1, #1
 8009882:	b570      	push	{r4, r5, r6, lr}
 8009884:	1149      	asrs	r1, r1, #5
 8009886:	6914      	ldr	r4, [r2, #16]
 8009888:	3101      	adds	r1, #1
 800988a:	f102 0314 	add.w	r3, r2, #20
 800988e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009892:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009896:	1f05      	subs	r5, r0, #4
 8009898:	42a3      	cmp	r3, r4
 800989a:	d30c      	bcc.n	80098b6 <__copybits+0x36>
 800989c:	1aa3      	subs	r3, r4, r2
 800989e:	3b11      	subs	r3, #17
 80098a0:	f023 0303 	bic.w	r3, r3, #3
 80098a4:	3211      	adds	r2, #17
 80098a6:	42a2      	cmp	r2, r4
 80098a8:	bf88      	it	hi
 80098aa:	2300      	movhi	r3, #0
 80098ac:	4418      	add	r0, r3
 80098ae:	2300      	movs	r3, #0
 80098b0:	4288      	cmp	r0, r1
 80098b2:	d305      	bcc.n	80098c0 <__copybits+0x40>
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80098ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80098be:	e7eb      	b.n	8009898 <__copybits+0x18>
 80098c0:	f840 3b04 	str.w	r3, [r0], #4
 80098c4:	e7f4      	b.n	80098b0 <__copybits+0x30>

080098c6 <__any_on>:
 80098c6:	f100 0214 	add.w	r2, r0, #20
 80098ca:	6900      	ldr	r0, [r0, #16]
 80098cc:	114b      	asrs	r3, r1, #5
 80098ce:	4298      	cmp	r0, r3
 80098d0:	b510      	push	{r4, lr}
 80098d2:	db11      	blt.n	80098f8 <__any_on+0x32>
 80098d4:	dd0a      	ble.n	80098ec <__any_on+0x26>
 80098d6:	f011 011f 	ands.w	r1, r1, #31
 80098da:	d007      	beq.n	80098ec <__any_on+0x26>
 80098dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098e0:	fa24 f001 	lsr.w	r0, r4, r1
 80098e4:	fa00 f101 	lsl.w	r1, r0, r1
 80098e8:	428c      	cmp	r4, r1
 80098ea:	d10b      	bne.n	8009904 <__any_on+0x3e>
 80098ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d803      	bhi.n	80098fc <__any_on+0x36>
 80098f4:	2000      	movs	r0, #0
 80098f6:	bd10      	pop	{r4, pc}
 80098f8:	4603      	mov	r3, r0
 80098fa:	e7f7      	b.n	80098ec <__any_on+0x26>
 80098fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009900:	2900      	cmp	r1, #0
 8009902:	d0f5      	beq.n	80098f0 <__any_on+0x2a>
 8009904:	2001      	movs	r0, #1
 8009906:	e7f6      	b.n	80098f6 <__any_on+0x30>

08009908 <sulp>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	4604      	mov	r4, r0
 800990c:	460d      	mov	r5, r1
 800990e:	ec45 4b10 	vmov	d0, r4, r5
 8009912:	4616      	mov	r6, r2
 8009914:	f7ff feba 	bl	800968c <__ulp>
 8009918:	ec51 0b10 	vmov	r0, r1, d0
 800991c:	b17e      	cbz	r6, 800993e <sulp+0x36>
 800991e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009922:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009926:	2b00      	cmp	r3, #0
 8009928:	dd09      	ble.n	800993e <sulp+0x36>
 800992a:	051b      	lsls	r3, r3, #20
 800992c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009930:	2400      	movs	r4, #0
 8009932:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009936:	4622      	mov	r2, r4
 8009938:	462b      	mov	r3, r5
 800993a:	f7f6 fe6d 	bl	8000618 <__aeabi_dmul>
 800993e:	ec41 0b10 	vmov	d0, r0, r1
 8009942:	bd70      	pop	{r4, r5, r6, pc}
 8009944:	0000      	movs	r0, r0
	...

08009948 <_strtod_l>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	b09f      	sub	sp, #124	@ 0x7c
 800994e:	460c      	mov	r4, r1
 8009950:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009952:	2200      	movs	r2, #0
 8009954:	921a      	str	r2, [sp, #104]	@ 0x68
 8009956:	9005      	str	r0, [sp, #20]
 8009958:	f04f 0a00 	mov.w	sl, #0
 800995c:	f04f 0b00 	mov.w	fp, #0
 8009960:	460a      	mov	r2, r1
 8009962:	9219      	str	r2, [sp, #100]	@ 0x64
 8009964:	7811      	ldrb	r1, [r2, #0]
 8009966:	292b      	cmp	r1, #43	@ 0x2b
 8009968:	d04a      	beq.n	8009a00 <_strtod_l+0xb8>
 800996a:	d838      	bhi.n	80099de <_strtod_l+0x96>
 800996c:	290d      	cmp	r1, #13
 800996e:	d832      	bhi.n	80099d6 <_strtod_l+0x8e>
 8009970:	2908      	cmp	r1, #8
 8009972:	d832      	bhi.n	80099da <_strtod_l+0x92>
 8009974:	2900      	cmp	r1, #0
 8009976:	d03b      	beq.n	80099f0 <_strtod_l+0xa8>
 8009978:	2200      	movs	r2, #0
 800997a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800997c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800997e:	782a      	ldrb	r2, [r5, #0]
 8009980:	2a30      	cmp	r2, #48	@ 0x30
 8009982:	f040 80b3 	bne.w	8009aec <_strtod_l+0x1a4>
 8009986:	786a      	ldrb	r2, [r5, #1]
 8009988:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800998c:	2a58      	cmp	r2, #88	@ 0x58
 800998e:	d16e      	bne.n	8009a6e <_strtod_l+0x126>
 8009990:	9302      	str	r3, [sp, #8]
 8009992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	ab1a      	add	r3, sp, #104	@ 0x68
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	4a8e      	ldr	r2, [pc, #568]	@ (8009bd4 <_strtod_l+0x28c>)
 800999c:	9805      	ldr	r0, [sp, #20]
 800999e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80099a0:	a919      	add	r1, sp, #100	@ 0x64
 80099a2:	f001 f903 	bl	800abac <__gethex>
 80099a6:	f010 060f 	ands.w	r6, r0, #15
 80099aa:	4604      	mov	r4, r0
 80099ac:	d005      	beq.n	80099ba <_strtod_l+0x72>
 80099ae:	2e06      	cmp	r6, #6
 80099b0:	d128      	bne.n	8009a04 <_strtod_l+0xbc>
 80099b2:	3501      	adds	r5, #1
 80099b4:	2300      	movs	r3, #0
 80099b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80099b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 858e 	bne.w	800a4de <_strtod_l+0xb96>
 80099c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099c4:	b1cb      	cbz	r3, 80099fa <_strtod_l+0xb2>
 80099c6:	4652      	mov	r2, sl
 80099c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80099cc:	ec43 2b10 	vmov	d0, r2, r3
 80099d0:	b01f      	add	sp, #124	@ 0x7c
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	2920      	cmp	r1, #32
 80099d8:	d1ce      	bne.n	8009978 <_strtod_l+0x30>
 80099da:	3201      	adds	r2, #1
 80099dc:	e7c1      	b.n	8009962 <_strtod_l+0x1a>
 80099de:	292d      	cmp	r1, #45	@ 0x2d
 80099e0:	d1ca      	bne.n	8009978 <_strtod_l+0x30>
 80099e2:	2101      	movs	r1, #1
 80099e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80099e6:	1c51      	adds	r1, r2, #1
 80099e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80099ea:	7852      	ldrb	r2, [r2, #1]
 80099ec:	2a00      	cmp	r2, #0
 80099ee:	d1c5      	bne.n	800997c <_strtod_l+0x34>
 80099f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f040 8570 	bne.w	800a4da <_strtod_l+0xb92>
 80099fa:	4652      	mov	r2, sl
 80099fc:	465b      	mov	r3, fp
 80099fe:	e7e5      	b.n	80099cc <_strtod_l+0x84>
 8009a00:	2100      	movs	r1, #0
 8009a02:	e7ef      	b.n	80099e4 <_strtod_l+0x9c>
 8009a04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a06:	b13a      	cbz	r2, 8009a18 <_strtod_l+0xd0>
 8009a08:	2135      	movs	r1, #53	@ 0x35
 8009a0a:	a81c      	add	r0, sp, #112	@ 0x70
 8009a0c:	f7ff ff38 	bl	8009880 <__copybits>
 8009a10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a12:	9805      	ldr	r0, [sp, #20]
 8009a14:	f7ff fb06 	bl	8009024 <_Bfree>
 8009a18:	3e01      	subs	r6, #1
 8009a1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009a1c:	2e04      	cmp	r6, #4
 8009a1e:	d806      	bhi.n	8009a2e <_strtod_l+0xe6>
 8009a20:	e8df f006 	tbb	[pc, r6]
 8009a24:	201d0314 	.word	0x201d0314
 8009a28:	14          	.byte	0x14
 8009a29:	00          	.byte	0x00
 8009a2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009a2e:	05e1      	lsls	r1, r4, #23
 8009a30:	bf48      	it	mi
 8009a32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a3a:	0d1b      	lsrs	r3, r3, #20
 8009a3c:	051b      	lsls	r3, r3, #20
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1bb      	bne.n	80099ba <_strtod_l+0x72>
 8009a42:	f7fe fbe5 	bl	8008210 <__errno>
 8009a46:	2322      	movs	r3, #34	@ 0x22
 8009a48:	6003      	str	r3, [r0, #0]
 8009a4a:	e7b6      	b.n	80099ba <_strtod_l+0x72>
 8009a4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009a50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a5c:	e7e7      	b.n	8009a2e <_strtod_l+0xe6>
 8009a5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009bdc <_strtod_l+0x294>
 8009a62:	e7e4      	b.n	8009a2e <_strtod_l+0xe6>
 8009a64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a68:	f04f 3aff 	mov.w	sl, #4294967295
 8009a6c:	e7df      	b.n	8009a2e <_strtod_l+0xe6>
 8009a6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b30      	cmp	r3, #48	@ 0x30
 8009a78:	d0f9      	beq.n	8009a6e <_strtod_l+0x126>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d09d      	beq.n	80099ba <_strtod_l+0x72>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a84:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a86:	2300      	movs	r3, #0
 8009a88:	9308      	str	r3, [sp, #32]
 8009a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a8c:	461f      	mov	r7, r3
 8009a8e:	220a      	movs	r2, #10
 8009a90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009a92:	7805      	ldrb	r5, [r0, #0]
 8009a94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009a98:	b2d9      	uxtb	r1, r3
 8009a9a:	2909      	cmp	r1, #9
 8009a9c:	d928      	bls.n	8009af0 <_strtod_l+0x1a8>
 8009a9e:	494e      	ldr	r1, [pc, #312]	@ (8009bd8 <_strtod_l+0x290>)
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f000 ffd5 	bl	800aa50 <strncmp>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d032      	beq.n	8009b10 <_strtod_l+0x1c8>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	462a      	mov	r2, r5
 8009aae:	4681      	mov	r9, r0
 8009ab0:	463d      	mov	r5, r7
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2a65      	cmp	r2, #101	@ 0x65
 8009ab6:	d001      	beq.n	8009abc <_strtod_l+0x174>
 8009ab8:	2a45      	cmp	r2, #69	@ 0x45
 8009aba:	d114      	bne.n	8009ae6 <_strtod_l+0x19e>
 8009abc:	b91d      	cbnz	r5, 8009ac6 <_strtod_l+0x17e>
 8009abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac0:	4302      	orrs	r2, r0
 8009ac2:	d095      	beq.n	80099f0 <_strtod_l+0xa8>
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009ac8:	1c62      	adds	r2, r4, #1
 8009aca:	9219      	str	r2, [sp, #100]	@ 0x64
 8009acc:	7862      	ldrb	r2, [r4, #1]
 8009ace:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ad0:	d077      	beq.n	8009bc2 <_strtod_l+0x27a>
 8009ad2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009ad4:	d07b      	beq.n	8009bce <_strtod_l+0x286>
 8009ad6:	f04f 0c00 	mov.w	ip, #0
 8009ada:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009ade:	2909      	cmp	r1, #9
 8009ae0:	f240 8082 	bls.w	8009be8 <_strtod_l+0x2a0>
 8009ae4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ae6:	f04f 0800 	mov.w	r8, #0
 8009aea:	e0a2      	b.n	8009c32 <_strtod_l+0x2ea>
 8009aec:	2300      	movs	r3, #0
 8009aee:	e7c7      	b.n	8009a80 <_strtod_l+0x138>
 8009af0:	2f08      	cmp	r7, #8
 8009af2:	bfd5      	itete	le
 8009af4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009af6:	9908      	ldrgt	r1, [sp, #32]
 8009af8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009afc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009b00:	f100 0001 	add.w	r0, r0, #1
 8009b04:	bfd4      	ite	le
 8009b06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009b08:	9308      	strgt	r3, [sp, #32]
 8009b0a:	3701      	adds	r7, #1
 8009b0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b0e:	e7bf      	b.n	8009a90 <_strtod_l+0x148>
 8009b10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b16:	785a      	ldrb	r2, [r3, #1]
 8009b18:	b37f      	cbz	r7, 8009b7a <_strtod_l+0x232>
 8009b1a:	4681      	mov	r9, r0
 8009b1c:	463d      	mov	r5, r7
 8009b1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	d912      	bls.n	8009b4c <_strtod_l+0x204>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e7c4      	b.n	8009ab4 <_strtod_l+0x16c>
 8009b2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b30:	785a      	ldrb	r2, [r3, #1]
 8009b32:	3001      	adds	r0, #1
 8009b34:	2a30      	cmp	r2, #48	@ 0x30
 8009b36:	d0f8      	beq.n	8009b2a <_strtod_l+0x1e2>
 8009b38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	f200 84d3 	bhi.w	800a4e8 <_strtod_l+0xba0>
 8009b42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b44:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b46:	4681      	mov	r9, r0
 8009b48:	2000      	movs	r0, #0
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	3a30      	subs	r2, #48	@ 0x30
 8009b4e:	f100 0301 	add.w	r3, r0, #1
 8009b52:	d02a      	beq.n	8009baa <_strtod_l+0x262>
 8009b54:	4499      	add	r9, r3
 8009b56:	eb00 0c05 	add.w	ip, r0, r5
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	210a      	movs	r1, #10
 8009b5e:	4563      	cmp	r3, ip
 8009b60:	d10d      	bne.n	8009b7e <_strtod_l+0x236>
 8009b62:	1c69      	adds	r1, r5, #1
 8009b64:	4401      	add	r1, r0
 8009b66:	4428      	add	r0, r5
 8009b68:	2808      	cmp	r0, #8
 8009b6a:	dc16      	bgt.n	8009b9a <_strtod_l+0x252>
 8009b6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b6e:	230a      	movs	r3, #10
 8009b70:	fb03 2300 	mla	r3, r3, r0, r2
 8009b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b76:	2300      	movs	r3, #0
 8009b78:	e018      	b.n	8009bac <_strtod_l+0x264>
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	e7da      	b.n	8009b34 <_strtod_l+0x1ec>
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	f103 0301 	add.w	r3, r3, #1
 8009b84:	dc03      	bgt.n	8009b8e <_strtod_l+0x246>
 8009b86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009b88:	434e      	muls	r6, r1
 8009b8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009b8c:	e7e7      	b.n	8009b5e <_strtod_l+0x216>
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	bfde      	ittt	le
 8009b92:	9e08      	ldrle	r6, [sp, #32]
 8009b94:	434e      	mulle	r6, r1
 8009b96:	9608      	strle	r6, [sp, #32]
 8009b98:	e7e1      	b.n	8009b5e <_strtod_l+0x216>
 8009b9a:	280f      	cmp	r0, #15
 8009b9c:	dceb      	bgt.n	8009b76 <_strtod_l+0x22e>
 8009b9e:	9808      	ldr	r0, [sp, #32]
 8009ba0:	230a      	movs	r3, #10
 8009ba2:	fb03 2300 	mla	r3, r3, r0, r2
 8009ba6:	9308      	str	r3, [sp, #32]
 8009ba8:	e7e5      	b.n	8009b76 <_strtod_l+0x22e>
 8009baa:	4629      	mov	r1, r5
 8009bac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bae:	1c50      	adds	r0, r2, #1
 8009bb0:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bb2:	7852      	ldrb	r2, [r2, #1]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	460d      	mov	r5, r1
 8009bb8:	e7b1      	b.n	8009b1e <_strtod_l+0x1d6>
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e77d      	b.n	8009abe <_strtod_l+0x176>
 8009bc2:	f04f 0c00 	mov.w	ip, #0
 8009bc6:	1ca2      	adds	r2, r4, #2
 8009bc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bca:	78a2      	ldrb	r2, [r4, #2]
 8009bcc:	e785      	b.n	8009ada <_strtod_l+0x192>
 8009bce:	f04f 0c01 	mov.w	ip, #1
 8009bd2:	e7f8      	b.n	8009bc6 <_strtod_l+0x27e>
 8009bd4:	0800ba20 	.word	0x0800ba20
 8009bd8:	0800ba08 	.word	0x0800ba08
 8009bdc:	7ff00000 	.word	0x7ff00000
 8009be0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009be2:	1c51      	adds	r1, r2, #1
 8009be4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009be6:	7852      	ldrb	r2, [r2, #1]
 8009be8:	2a30      	cmp	r2, #48	@ 0x30
 8009bea:	d0f9      	beq.n	8009be0 <_strtod_l+0x298>
 8009bec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009bf0:	2908      	cmp	r1, #8
 8009bf2:	f63f af78 	bhi.w	8009ae6 <_strtod_l+0x19e>
 8009bf6:	3a30      	subs	r2, #48	@ 0x30
 8009bf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009bfe:	f04f 080a 	mov.w	r8, #10
 8009c02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c04:	1c56      	adds	r6, r2, #1
 8009c06:	9619      	str	r6, [sp, #100]	@ 0x64
 8009c08:	7852      	ldrb	r2, [r2, #1]
 8009c0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009c0e:	f1be 0f09 	cmp.w	lr, #9
 8009c12:	d939      	bls.n	8009c88 <_strtod_l+0x340>
 8009c14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009c16:	1a76      	subs	r6, r6, r1
 8009c18:	2e08      	cmp	r6, #8
 8009c1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009c1e:	dc03      	bgt.n	8009c28 <_strtod_l+0x2e0>
 8009c20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c22:	4588      	cmp	r8, r1
 8009c24:	bfa8      	it	ge
 8009c26:	4688      	movge	r8, r1
 8009c28:	f1bc 0f00 	cmp.w	ip, #0
 8009c2c:	d001      	beq.n	8009c32 <_strtod_l+0x2ea>
 8009c2e:	f1c8 0800 	rsb	r8, r8, #0
 8009c32:	2d00      	cmp	r5, #0
 8009c34:	d14e      	bne.n	8009cd4 <_strtod_l+0x38c>
 8009c36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c38:	4308      	orrs	r0, r1
 8009c3a:	f47f aebe 	bne.w	80099ba <_strtod_l+0x72>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f47f aed6 	bne.w	80099f0 <_strtod_l+0xa8>
 8009c44:	2a69      	cmp	r2, #105	@ 0x69
 8009c46:	d028      	beq.n	8009c9a <_strtod_l+0x352>
 8009c48:	dc25      	bgt.n	8009c96 <_strtod_l+0x34e>
 8009c4a:	2a49      	cmp	r2, #73	@ 0x49
 8009c4c:	d025      	beq.n	8009c9a <_strtod_l+0x352>
 8009c4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009c50:	f47f aece 	bne.w	80099f0 <_strtod_l+0xa8>
 8009c54:	499b      	ldr	r1, [pc, #620]	@ (8009ec4 <_strtod_l+0x57c>)
 8009c56:	a819      	add	r0, sp, #100	@ 0x64
 8009c58:	f001 f9ca 	bl	800aff0 <__match>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	f43f aec7 	beq.w	80099f0 <_strtod_l+0xa8>
 8009c62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b28      	cmp	r3, #40	@ 0x28
 8009c68:	d12e      	bne.n	8009cc8 <_strtod_l+0x380>
 8009c6a:	4997      	ldr	r1, [pc, #604]	@ (8009ec8 <_strtod_l+0x580>)
 8009c6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c6e:	a819      	add	r0, sp, #100	@ 0x64
 8009c70:	f001 f9d2 	bl	800b018 <__hexnan>
 8009c74:	2805      	cmp	r0, #5
 8009c76:	d127      	bne.n	8009cc8 <_strtod_l+0x380>
 8009c78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009c7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009c82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009c86:	e698      	b.n	80099ba <_strtod_l+0x72>
 8009c88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c8a:	fb08 2101 	mla	r1, r8, r1, r2
 8009c8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009c92:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c94:	e7b5      	b.n	8009c02 <_strtod_l+0x2ba>
 8009c96:	2a6e      	cmp	r2, #110	@ 0x6e
 8009c98:	e7da      	b.n	8009c50 <_strtod_l+0x308>
 8009c9a:	498c      	ldr	r1, [pc, #560]	@ (8009ecc <_strtod_l+0x584>)
 8009c9c:	a819      	add	r0, sp, #100	@ 0x64
 8009c9e:	f001 f9a7 	bl	800aff0 <__match>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f43f aea4 	beq.w	80099f0 <_strtod_l+0xa8>
 8009ca8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009caa:	4989      	ldr	r1, [pc, #548]	@ (8009ed0 <_strtod_l+0x588>)
 8009cac:	3b01      	subs	r3, #1
 8009cae:	a819      	add	r0, sp, #100	@ 0x64
 8009cb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009cb2:	f001 f99d 	bl	800aff0 <__match>
 8009cb6:	b910      	cbnz	r0, 8009cbe <_strtod_l+0x376>
 8009cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cba:	3301      	adds	r3, #1
 8009cbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8009cbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009ee0 <_strtod_l+0x598>
 8009cc2:	f04f 0a00 	mov.w	sl, #0
 8009cc6:	e678      	b.n	80099ba <_strtod_l+0x72>
 8009cc8:	4882      	ldr	r0, [pc, #520]	@ (8009ed4 <_strtod_l+0x58c>)
 8009cca:	f000 fee1 	bl	800aa90 <nan>
 8009cce:	ec5b ab10 	vmov	sl, fp, d0
 8009cd2:	e672      	b.n	80099ba <_strtod_l+0x72>
 8009cd4:	eba8 0309 	sub.w	r3, r8, r9
 8009cd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cdc:	2f00      	cmp	r7, #0
 8009cde:	bf08      	it	eq
 8009ce0:	462f      	moveq	r7, r5
 8009ce2:	2d10      	cmp	r5, #16
 8009ce4:	462c      	mov	r4, r5
 8009ce6:	bfa8      	it	ge
 8009ce8:	2410      	movge	r4, #16
 8009cea:	f7f6 fc1b 	bl	8000524 <__aeabi_ui2d>
 8009cee:	2d09      	cmp	r5, #9
 8009cf0:	4682      	mov	sl, r0
 8009cf2:	468b      	mov	fp, r1
 8009cf4:	dc13      	bgt.n	8009d1e <_strtod_l+0x3d6>
 8009cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f43f ae5e 	beq.w	80099ba <_strtod_l+0x72>
 8009cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d00:	dd78      	ble.n	8009df4 <_strtod_l+0x4ac>
 8009d02:	2b16      	cmp	r3, #22
 8009d04:	dc5f      	bgt.n	8009dc6 <_strtod_l+0x47e>
 8009d06:	4974      	ldr	r1, [pc, #464]	@ (8009ed8 <_strtod_l+0x590>)
 8009d08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d10:	4652      	mov	r2, sl
 8009d12:	465b      	mov	r3, fp
 8009d14:	f7f6 fc80 	bl	8000618 <__aeabi_dmul>
 8009d18:	4682      	mov	sl, r0
 8009d1a:	468b      	mov	fp, r1
 8009d1c:	e64d      	b.n	80099ba <_strtod_l+0x72>
 8009d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8009ed8 <_strtod_l+0x590>)
 8009d20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009d28:	f7f6 fc76 	bl	8000618 <__aeabi_dmul>
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	9808      	ldr	r0, [sp, #32]
 8009d30:	468b      	mov	fp, r1
 8009d32:	f7f6 fbf7 	bl	8000524 <__aeabi_ui2d>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4650      	mov	r0, sl
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	f7f6 fab5 	bl	80002ac <__adddf3>
 8009d42:	2d0f      	cmp	r5, #15
 8009d44:	4682      	mov	sl, r0
 8009d46:	468b      	mov	fp, r1
 8009d48:	ddd5      	ble.n	8009cf6 <_strtod_l+0x3ae>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4c:	1b2c      	subs	r4, r5, r4
 8009d4e:	441c      	add	r4, r3
 8009d50:	2c00      	cmp	r4, #0
 8009d52:	f340 8096 	ble.w	8009e82 <_strtod_l+0x53a>
 8009d56:	f014 030f 	ands.w	r3, r4, #15
 8009d5a:	d00a      	beq.n	8009d72 <_strtod_l+0x42a>
 8009d5c:	495e      	ldr	r1, [pc, #376]	@ (8009ed8 <_strtod_l+0x590>)
 8009d5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d62:	4652      	mov	r2, sl
 8009d64:	465b      	mov	r3, fp
 8009d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d6a:	f7f6 fc55 	bl	8000618 <__aeabi_dmul>
 8009d6e:	4682      	mov	sl, r0
 8009d70:	468b      	mov	fp, r1
 8009d72:	f034 040f 	bics.w	r4, r4, #15
 8009d76:	d073      	beq.n	8009e60 <_strtod_l+0x518>
 8009d78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009d7c:	dd48      	ble.n	8009e10 <_strtod_l+0x4c8>
 8009d7e:	2400      	movs	r4, #0
 8009d80:	46a0      	mov	r8, r4
 8009d82:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d84:	46a1      	mov	r9, r4
 8009d86:	9a05      	ldr	r2, [sp, #20]
 8009d88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ee0 <_strtod_l+0x598>
 8009d8c:	2322      	movs	r3, #34	@ 0x22
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	f04f 0a00 	mov.w	sl, #0
 8009d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f43f ae0f 	beq.w	80099ba <_strtod_l+0x72>
 8009d9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d9e:	9805      	ldr	r0, [sp, #20]
 8009da0:	f7ff f940 	bl	8009024 <_Bfree>
 8009da4:	9805      	ldr	r0, [sp, #20]
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7ff f93c 	bl	8009024 <_Bfree>
 8009dac:	9805      	ldr	r0, [sp, #20]
 8009dae:	4641      	mov	r1, r8
 8009db0:	f7ff f938 	bl	8009024 <_Bfree>
 8009db4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009db6:	9805      	ldr	r0, [sp, #20]
 8009db8:	f7ff f934 	bl	8009024 <_Bfree>
 8009dbc:	9805      	ldr	r0, [sp, #20]
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	f7ff f930 	bl	8009024 <_Bfree>
 8009dc4:	e5f9      	b.n	80099ba <_strtod_l+0x72>
 8009dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	dbbc      	blt.n	8009d4a <_strtod_l+0x402>
 8009dd0:	4c41      	ldr	r4, [pc, #260]	@ (8009ed8 <_strtod_l+0x590>)
 8009dd2:	f1c5 050f 	rsb	r5, r5, #15
 8009dd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009dda:	4652      	mov	r2, sl
 8009ddc:	465b      	mov	r3, fp
 8009dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de2:	f7f6 fc19 	bl	8000618 <__aeabi_dmul>
 8009de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de8:	1b5d      	subs	r5, r3, r5
 8009dea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009dee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009df2:	e78f      	b.n	8009d14 <_strtod_l+0x3cc>
 8009df4:	3316      	adds	r3, #22
 8009df6:	dba8      	blt.n	8009d4a <_strtod_l+0x402>
 8009df8:	4b37      	ldr	r3, [pc, #220]	@ (8009ed8 <_strtod_l+0x590>)
 8009dfa:	eba9 0808 	sub.w	r8, r9, r8
 8009dfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009e02:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009e06:	4650      	mov	r0, sl
 8009e08:	4659      	mov	r1, fp
 8009e0a:	f7f6 fd2f 	bl	800086c <__aeabi_ddiv>
 8009e0e:	e783      	b.n	8009d18 <_strtod_l+0x3d0>
 8009e10:	4b32      	ldr	r3, [pc, #200]	@ (8009edc <_strtod_l+0x594>)
 8009e12:	9308      	str	r3, [sp, #32]
 8009e14:	2300      	movs	r3, #0
 8009e16:	1124      	asrs	r4, r4, #4
 8009e18:	4650      	mov	r0, sl
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	461e      	mov	r6, r3
 8009e1e:	2c01      	cmp	r4, #1
 8009e20:	dc21      	bgt.n	8009e66 <_strtod_l+0x51e>
 8009e22:	b10b      	cbz	r3, 8009e28 <_strtod_l+0x4e0>
 8009e24:	4682      	mov	sl, r0
 8009e26:	468b      	mov	fp, r1
 8009e28:	492c      	ldr	r1, [pc, #176]	@ (8009edc <_strtod_l+0x594>)
 8009e2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009e2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009e32:	4652      	mov	r2, sl
 8009e34:	465b      	mov	r3, fp
 8009e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e3a:	f7f6 fbed 	bl	8000618 <__aeabi_dmul>
 8009e3e:	4b28      	ldr	r3, [pc, #160]	@ (8009ee0 <_strtod_l+0x598>)
 8009e40:	460a      	mov	r2, r1
 8009e42:	400b      	ands	r3, r1
 8009e44:	4927      	ldr	r1, [pc, #156]	@ (8009ee4 <_strtod_l+0x59c>)
 8009e46:	428b      	cmp	r3, r1
 8009e48:	4682      	mov	sl, r0
 8009e4a:	d898      	bhi.n	8009d7e <_strtod_l+0x436>
 8009e4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009e50:	428b      	cmp	r3, r1
 8009e52:	bf86      	itte	hi
 8009e54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009ee8 <_strtod_l+0x5a0>
 8009e58:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e60:	2300      	movs	r3, #0
 8009e62:	9308      	str	r3, [sp, #32]
 8009e64:	e07a      	b.n	8009f5c <_strtod_l+0x614>
 8009e66:	07e2      	lsls	r2, r4, #31
 8009e68:	d505      	bpl.n	8009e76 <_strtod_l+0x52e>
 8009e6a:	9b08      	ldr	r3, [sp, #32]
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 fbd2 	bl	8000618 <__aeabi_dmul>
 8009e74:	2301      	movs	r3, #1
 8009e76:	9a08      	ldr	r2, [sp, #32]
 8009e78:	3208      	adds	r2, #8
 8009e7a:	3601      	adds	r6, #1
 8009e7c:	1064      	asrs	r4, r4, #1
 8009e7e:	9208      	str	r2, [sp, #32]
 8009e80:	e7cd      	b.n	8009e1e <_strtod_l+0x4d6>
 8009e82:	d0ed      	beq.n	8009e60 <_strtod_l+0x518>
 8009e84:	4264      	negs	r4, r4
 8009e86:	f014 020f 	ands.w	r2, r4, #15
 8009e8a:	d00a      	beq.n	8009ea2 <_strtod_l+0x55a>
 8009e8c:	4b12      	ldr	r3, [pc, #72]	@ (8009ed8 <_strtod_l+0x590>)
 8009e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e92:	4650      	mov	r0, sl
 8009e94:	4659      	mov	r1, fp
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f7f6 fce7 	bl	800086c <__aeabi_ddiv>
 8009e9e:	4682      	mov	sl, r0
 8009ea0:	468b      	mov	fp, r1
 8009ea2:	1124      	asrs	r4, r4, #4
 8009ea4:	d0dc      	beq.n	8009e60 <_strtod_l+0x518>
 8009ea6:	2c1f      	cmp	r4, #31
 8009ea8:	dd20      	ble.n	8009eec <_strtod_l+0x5a4>
 8009eaa:	2400      	movs	r4, #0
 8009eac:	46a0      	mov	r8, r4
 8009eae:	940a      	str	r4, [sp, #40]	@ 0x28
 8009eb0:	46a1      	mov	r9, r4
 8009eb2:	9a05      	ldr	r2, [sp, #20]
 8009eb4:	2322      	movs	r3, #34	@ 0x22
 8009eb6:	f04f 0a00 	mov.w	sl, #0
 8009eba:	f04f 0b00 	mov.w	fp, #0
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	e768      	b.n	8009d94 <_strtod_l+0x44c>
 8009ec2:	bf00      	nop
 8009ec4:	0800b7f9 	.word	0x0800b7f9
 8009ec8:	0800ba0c 	.word	0x0800ba0c
 8009ecc:	0800b7f1 	.word	0x0800b7f1
 8009ed0:	0800b828 	.word	0x0800b828
 8009ed4:	0800bbb5 	.word	0x0800bbb5
 8009ed8:	0800b940 	.word	0x0800b940
 8009edc:	0800b918 	.word	0x0800b918
 8009ee0:	7ff00000 	.word	0x7ff00000
 8009ee4:	7ca00000 	.word	0x7ca00000
 8009ee8:	7fefffff 	.word	0x7fefffff
 8009eec:	f014 0310 	ands.w	r3, r4, #16
 8009ef0:	bf18      	it	ne
 8009ef2:	236a      	movne	r3, #106	@ 0x6a
 8009ef4:	4ea9      	ldr	r6, [pc, #676]	@ (800a19c <_strtod_l+0x854>)
 8009ef6:	9308      	str	r3, [sp, #32]
 8009ef8:	4650      	mov	r0, sl
 8009efa:	4659      	mov	r1, fp
 8009efc:	2300      	movs	r3, #0
 8009efe:	07e2      	lsls	r2, r4, #31
 8009f00:	d504      	bpl.n	8009f0c <_strtod_l+0x5c4>
 8009f02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f06:	f7f6 fb87 	bl	8000618 <__aeabi_dmul>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	1064      	asrs	r4, r4, #1
 8009f0e:	f106 0608 	add.w	r6, r6, #8
 8009f12:	d1f4      	bne.n	8009efe <_strtod_l+0x5b6>
 8009f14:	b10b      	cbz	r3, 8009f1a <_strtod_l+0x5d2>
 8009f16:	4682      	mov	sl, r0
 8009f18:	468b      	mov	fp, r1
 8009f1a:	9b08      	ldr	r3, [sp, #32]
 8009f1c:	b1b3      	cbz	r3, 8009f4c <_strtod_l+0x604>
 8009f1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	4659      	mov	r1, fp
 8009f2a:	dd0f      	ble.n	8009f4c <_strtod_l+0x604>
 8009f2c:	2b1f      	cmp	r3, #31
 8009f2e:	dd55      	ble.n	8009fdc <_strtod_l+0x694>
 8009f30:	2b34      	cmp	r3, #52	@ 0x34
 8009f32:	bfde      	ittt	le
 8009f34:	f04f 33ff 	movle.w	r3, #4294967295
 8009f38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f3c:	4093      	lslle	r3, r2
 8009f3e:	f04f 0a00 	mov.w	sl, #0
 8009f42:	bfcc      	ite	gt
 8009f44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f48:	ea03 0b01 	andle.w	fp, r3, r1
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4650      	mov	r0, sl
 8009f52:	4659      	mov	r1, fp
 8009f54:	f7f6 fdc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d1a6      	bne.n	8009eaa <_strtod_l+0x562>
 8009f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f62:	9805      	ldr	r0, [sp, #20]
 8009f64:	462b      	mov	r3, r5
 8009f66:	463a      	mov	r2, r7
 8009f68:	f7ff f8c4 	bl	80090f4 <__s2b>
 8009f6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f43f af05 	beq.w	8009d7e <_strtod_l+0x436>
 8009f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	eba9 0308 	sub.w	r3, r9, r8
 8009f7c:	bfa8      	it	ge
 8009f7e:	2300      	movge	r3, #0
 8009f80:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f82:	2400      	movs	r4, #0
 8009f84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f88:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f8a:	46a0      	mov	r8, r4
 8009f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f8e:	9805      	ldr	r0, [sp, #20]
 8009f90:	6859      	ldr	r1, [r3, #4]
 8009f92:	f7ff f807 	bl	8008fa4 <_Balloc>
 8009f96:	4681      	mov	r9, r0
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f43f aef4 	beq.w	8009d86 <_strtod_l+0x43e>
 8009f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fa0:	691a      	ldr	r2, [r3, #16]
 8009fa2:	3202      	adds	r2, #2
 8009fa4:	f103 010c 	add.w	r1, r3, #12
 8009fa8:	0092      	lsls	r2, r2, #2
 8009faa:	300c      	adds	r0, #12
 8009fac:	f000 fd62 	bl	800aa74 <memcpy>
 8009fb0:	ec4b ab10 	vmov	d0, sl, fp
 8009fb4:	9805      	ldr	r0, [sp, #20]
 8009fb6:	aa1c      	add	r2, sp, #112	@ 0x70
 8009fb8:	a91b      	add	r1, sp, #108	@ 0x6c
 8009fba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009fbe:	f7ff fbd5 	bl	800976c <__d2b>
 8009fc2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f43f aede 	beq.w	8009d86 <_strtod_l+0x43e>
 8009fca:	9805      	ldr	r0, [sp, #20]
 8009fcc:	2101      	movs	r1, #1
 8009fce:	f7ff f927 	bl	8009220 <__i2b>
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	b948      	cbnz	r0, 8009fea <_strtod_l+0x6a2>
 8009fd6:	f04f 0800 	mov.w	r8, #0
 8009fda:	e6d4      	b.n	8009d86 <_strtod_l+0x43e>
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe4:	ea03 0a0a 	and.w	sl, r3, sl
 8009fe8:	e7b0      	b.n	8009f4c <_strtod_l+0x604>
 8009fea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009fec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009fee:	2d00      	cmp	r5, #0
 8009ff0:	bfab      	itete	ge
 8009ff2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009ff4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009ff6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009ff8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009ffa:	bfac      	ite	ge
 8009ffc:	18ef      	addge	r7, r5, r3
 8009ffe:	1b5e      	sublt	r6, r3, r5
 800a000:	9b08      	ldr	r3, [sp, #32]
 800a002:	1aed      	subs	r5, r5, r3
 800a004:	4415      	add	r5, r2
 800a006:	4b66      	ldr	r3, [pc, #408]	@ (800a1a0 <_strtod_l+0x858>)
 800a008:	3d01      	subs	r5, #1
 800a00a:	429d      	cmp	r5, r3
 800a00c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a010:	da50      	bge.n	800a0b4 <_strtod_l+0x76c>
 800a012:	1b5b      	subs	r3, r3, r5
 800a014:	2b1f      	cmp	r3, #31
 800a016:	eba2 0203 	sub.w	r2, r2, r3
 800a01a:	f04f 0101 	mov.w	r1, #1
 800a01e:	dc3d      	bgt.n	800a09c <_strtod_l+0x754>
 800a020:	fa01 f303 	lsl.w	r3, r1, r3
 800a024:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a026:	2300      	movs	r3, #0
 800a028:	9310      	str	r3, [sp, #64]	@ 0x40
 800a02a:	18bd      	adds	r5, r7, r2
 800a02c:	9b08      	ldr	r3, [sp, #32]
 800a02e:	42af      	cmp	r7, r5
 800a030:	4416      	add	r6, r2
 800a032:	441e      	add	r6, r3
 800a034:	463b      	mov	r3, r7
 800a036:	bfa8      	it	ge
 800a038:	462b      	movge	r3, r5
 800a03a:	42b3      	cmp	r3, r6
 800a03c:	bfa8      	it	ge
 800a03e:	4633      	movge	r3, r6
 800a040:	2b00      	cmp	r3, #0
 800a042:	bfc2      	ittt	gt
 800a044:	1aed      	subgt	r5, r5, r3
 800a046:	1af6      	subgt	r6, r6, r3
 800a048:	1aff      	subgt	r7, r7, r3
 800a04a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd16      	ble.n	800a07e <_strtod_l+0x736>
 800a050:	4641      	mov	r1, r8
 800a052:	9805      	ldr	r0, [sp, #20]
 800a054:	461a      	mov	r2, r3
 800a056:	f7ff f9a3 	bl	80093a0 <__pow5mult>
 800a05a:	4680      	mov	r8, r0
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d0ba      	beq.n	8009fd6 <_strtod_l+0x68e>
 800a060:	4601      	mov	r1, r0
 800a062:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a064:	9805      	ldr	r0, [sp, #20]
 800a066:	f7ff f8f1 	bl	800924c <__multiply>
 800a06a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f43f ae8a 	beq.w	8009d86 <_strtod_l+0x43e>
 800a072:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a074:	9805      	ldr	r0, [sp, #20]
 800a076:	f7fe ffd5 	bl	8009024 <_Bfree>
 800a07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a07c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a07e:	2d00      	cmp	r5, #0
 800a080:	dc1d      	bgt.n	800a0be <_strtod_l+0x776>
 800a082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a084:	2b00      	cmp	r3, #0
 800a086:	dd23      	ble.n	800a0d0 <_strtod_l+0x788>
 800a088:	4649      	mov	r1, r9
 800a08a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a08c:	9805      	ldr	r0, [sp, #20]
 800a08e:	f7ff f987 	bl	80093a0 <__pow5mult>
 800a092:	4681      	mov	r9, r0
 800a094:	b9e0      	cbnz	r0, 800a0d0 <_strtod_l+0x788>
 800a096:	f04f 0900 	mov.w	r9, #0
 800a09a:	e674      	b.n	8009d86 <_strtod_l+0x43e>
 800a09c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a0a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a0a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a0a8:	35e2      	adds	r5, #226	@ 0xe2
 800a0aa:	fa01 f305 	lsl.w	r3, r1, r5
 800a0ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a0b2:	e7ba      	b.n	800a02a <_strtod_l+0x6e2>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0bc:	e7b5      	b.n	800a02a <_strtod_l+0x6e2>
 800a0be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0c0:	9805      	ldr	r0, [sp, #20]
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	f7ff f9c6 	bl	8009454 <__lshift>
 800a0c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d1d9      	bne.n	800a082 <_strtod_l+0x73a>
 800a0ce:	e65a      	b.n	8009d86 <_strtod_l+0x43e>
 800a0d0:	2e00      	cmp	r6, #0
 800a0d2:	dd07      	ble.n	800a0e4 <_strtod_l+0x79c>
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	9805      	ldr	r0, [sp, #20]
 800a0d8:	4632      	mov	r2, r6
 800a0da:	f7ff f9bb 	bl	8009454 <__lshift>
 800a0de:	4681      	mov	r9, r0
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d0d8      	beq.n	800a096 <_strtod_l+0x74e>
 800a0e4:	2f00      	cmp	r7, #0
 800a0e6:	dd08      	ble.n	800a0fa <_strtod_l+0x7b2>
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	9805      	ldr	r0, [sp, #20]
 800a0ec:	463a      	mov	r2, r7
 800a0ee:	f7ff f9b1 	bl	8009454 <__lshift>
 800a0f2:	4680      	mov	r8, r0
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f43f ae46 	beq.w	8009d86 <_strtod_l+0x43e>
 800a0fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0fc:	9805      	ldr	r0, [sp, #20]
 800a0fe:	464a      	mov	r2, r9
 800a100:	f7ff fa30 	bl	8009564 <__mdiff>
 800a104:	4604      	mov	r4, r0
 800a106:	2800      	cmp	r0, #0
 800a108:	f43f ae3d 	beq.w	8009d86 <_strtod_l+0x43e>
 800a10c:	68c3      	ldr	r3, [r0, #12]
 800a10e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a110:	2300      	movs	r3, #0
 800a112:	60c3      	str	r3, [r0, #12]
 800a114:	4641      	mov	r1, r8
 800a116:	f7ff fa09 	bl	800952c <__mcmp>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	da46      	bge.n	800a1ac <_strtod_l+0x864>
 800a11e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a120:	ea53 030a 	orrs.w	r3, r3, sl
 800a124:	d16c      	bne.n	800a200 <_strtod_l+0x8b8>
 800a126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d168      	bne.n	800a200 <_strtod_l+0x8b8>
 800a12e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a132:	0d1b      	lsrs	r3, r3, #20
 800a134:	051b      	lsls	r3, r3, #20
 800a136:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a13a:	d961      	bls.n	800a200 <_strtod_l+0x8b8>
 800a13c:	6963      	ldr	r3, [r4, #20]
 800a13e:	b913      	cbnz	r3, 800a146 <_strtod_l+0x7fe>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	2b01      	cmp	r3, #1
 800a144:	dd5c      	ble.n	800a200 <_strtod_l+0x8b8>
 800a146:	4621      	mov	r1, r4
 800a148:	2201      	movs	r2, #1
 800a14a:	9805      	ldr	r0, [sp, #20]
 800a14c:	f7ff f982 	bl	8009454 <__lshift>
 800a150:	4641      	mov	r1, r8
 800a152:	4604      	mov	r4, r0
 800a154:	f7ff f9ea 	bl	800952c <__mcmp>
 800a158:	2800      	cmp	r0, #0
 800a15a:	dd51      	ble.n	800a200 <_strtod_l+0x8b8>
 800a15c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a160:	9a08      	ldr	r2, [sp, #32]
 800a162:	0d1b      	lsrs	r3, r3, #20
 800a164:	051b      	lsls	r3, r3, #20
 800a166:	2a00      	cmp	r2, #0
 800a168:	d06b      	beq.n	800a242 <_strtod_l+0x8fa>
 800a16a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a16e:	d868      	bhi.n	800a242 <_strtod_l+0x8fa>
 800a170:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a174:	f67f ae9d 	bls.w	8009eb2 <_strtod_l+0x56a>
 800a178:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a4 <_strtod_l+0x85c>)
 800a17a:	4650      	mov	r0, sl
 800a17c:	4659      	mov	r1, fp
 800a17e:	2200      	movs	r2, #0
 800a180:	f7f6 fa4a 	bl	8000618 <__aeabi_dmul>
 800a184:	4b08      	ldr	r3, [pc, #32]	@ (800a1a8 <_strtod_l+0x860>)
 800a186:	400b      	ands	r3, r1
 800a188:	4682      	mov	sl, r0
 800a18a:	468b      	mov	fp, r1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f47f ae05 	bne.w	8009d9c <_strtod_l+0x454>
 800a192:	9a05      	ldr	r2, [sp, #20]
 800a194:	2322      	movs	r3, #34	@ 0x22
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	e600      	b.n	8009d9c <_strtod_l+0x454>
 800a19a:	bf00      	nop
 800a19c:	0800ba38 	.word	0x0800ba38
 800a1a0:	fffffc02 	.word	0xfffffc02
 800a1a4:	39500000 	.word	0x39500000
 800a1a8:	7ff00000 	.word	0x7ff00000
 800a1ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1b0:	d165      	bne.n	800a27e <_strtod_l+0x936>
 800a1b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a1b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1b8:	b35a      	cbz	r2, 800a212 <_strtod_l+0x8ca>
 800a1ba:	4a9f      	ldr	r2, [pc, #636]	@ (800a438 <_strtod_l+0xaf0>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d12b      	bne.n	800a218 <_strtod_l+0x8d0>
 800a1c0:	9b08      	ldr	r3, [sp, #32]
 800a1c2:	4651      	mov	r1, sl
 800a1c4:	b303      	cbz	r3, 800a208 <_strtod_l+0x8c0>
 800a1c6:	4b9d      	ldr	r3, [pc, #628]	@ (800a43c <_strtod_l+0xaf4>)
 800a1c8:	465a      	mov	r2, fp
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d4:	d81b      	bhi.n	800a20e <_strtod_l+0x8c6>
 800a1d6:	0d1b      	lsrs	r3, r3, #20
 800a1d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e0:	4299      	cmp	r1, r3
 800a1e2:	d119      	bne.n	800a218 <_strtod_l+0x8d0>
 800a1e4:	4b96      	ldr	r3, [pc, #600]	@ (800a440 <_strtod_l+0xaf8>)
 800a1e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d102      	bne.n	800a1f2 <_strtod_l+0x8aa>
 800a1ec:	3101      	adds	r1, #1
 800a1ee:	f43f adca 	beq.w	8009d86 <_strtod_l+0x43e>
 800a1f2:	4b92      	ldr	r3, [pc, #584]	@ (800a43c <_strtod_l+0xaf4>)
 800a1f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1f6:	401a      	ands	r2, r3
 800a1f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a1fc:	f04f 0a00 	mov.w	sl, #0
 800a200:	9b08      	ldr	r3, [sp, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1b8      	bne.n	800a178 <_strtod_l+0x830>
 800a206:	e5c9      	b.n	8009d9c <_strtod_l+0x454>
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	e7e8      	b.n	800a1e0 <_strtod_l+0x898>
 800a20e:	4613      	mov	r3, r2
 800a210:	e7e6      	b.n	800a1e0 <_strtod_l+0x898>
 800a212:	ea53 030a 	orrs.w	r3, r3, sl
 800a216:	d0a1      	beq.n	800a15c <_strtod_l+0x814>
 800a218:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a21a:	b1db      	cbz	r3, 800a254 <_strtod_l+0x90c>
 800a21c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a21e:	4213      	tst	r3, r2
 800a220:	d0ee      	beq.n	800a200 <_strtod_l+0x8b8>
 800a222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a224:	9a08      	ldr	r2, [sp, #32]
 800a226:	4650      	mov	r0, sl
 800a228:	4659      	mov	r1, fp
 800a22a:	b1bb      	cbz	r3, 800a25c <_strtod_l+0x914>
 800a22c:	f7ff fb6c 	bl	8009908 <sulp>
 800a230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a234:	ec53 2b10 	vmov	r2, r3, d0
 800a238:	f7f6 f838 	bl	80002ac <__adddf3>
 800a23c:	4682      	mov	sl, r0
 800a23e:	468b      	mov	fp, r1
 800a240:	e7de      	b.n	800a200 <_strtod_l+0x8b8>
 800a242:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a246:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a24a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a24e:	f04f 3aff 	mov.w	sl, #4294967295
 800a252:	e7d5      	b.n	800a200 <_strtod_l+0x8b8>
 800a254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a256:	ea13 0f0a 	tst.w	r3, sl
 800a25a:	e7e1      	b.n	800a220 <_strtod_l+0x8d8>
 800a25c:	f7ff fb54 	bl	8009908 <sulp>
 800a260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a264:	ec53 2b10 	vmov	r2, r3, d0
 800a268:	f7f6 f81e 	bl	80002a8 <__aeabi_dsub>
 800a26c:	2200      	movs	r2, #0
 800a26e:	2300      	movs	r3, #0
 800a270:	4682      	mov	sl, r0
 800a272:	468b      	mov	fp, r1
 800a274:	f7f6 fc38 	bl	8000ae8 <__aeabi_dcmpeq>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d0c1      	beq.n	800a200 <_strtod_l+0x8b8>
 800a27c:	e619      	b.n	8009eb2 <_strtod_l+0x56a>
 800a27e:	4641      	mov	r1, r8
 800a280:	4620      	mov	r0, r4
 800a282:	f7ff facb 	bl	800981c <__ratio>
 800a286:	ec57 6b10 	vmov	r6, r7, d0
 800a28a:	2200      	movs	r2, #0
 800a28c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a290:	4630      	mov	r0, r6
 800a292:	4639      	mov	r1, r7
 800a294:	f7f6 fc3c 	bl	8000b10 <__aeabi_dcmple>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d06f      	beq.n	800a37c <_strtod_l+0xa34>
 800a29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d17a      	bne.n	800a398 <_strtod_l+0xa50>
 800a2a2:	f1ba 0f00 	cmp.w	sl, #0
 800a2a6:	d158      	bne.n	800a35a <_strtod_l+0xa12>
 800a2a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d15a      	bne.n	800a368 <_strtod_l+0xa20>
 800a2b2:	4b64      	ldr	r3, [pc, #400]	@ (800a444 <_strtod_l+0xafc>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	f7f6 fc1f 	bl	8000afc <__aeabi_dcmplt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d159      	bne.n	800a376 <_strtod_l+0xa2e>
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4b60      	ldr	r3, [pc, #384]	@ (800a448 <_strtod_l+0xb00>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f7f6 f9a5 	bl	8000618 <__aeabi_dmul>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a2d6:	9606      	str	r6, [sp, #24]
 800a2d8:	9307      	str	r3, [sp, #28]
 800a2da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2de:	4d57      	ldr	r5, [pc, #348]	@ (800a43c <_strtod_l+0xaf4>)
 800a2e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2e6:	401d      	ands	r5, r3
 800a2e8:	4b58      	ldr	r3, [pc, #352]	@ (800a44c <_strtod_l+0xb04>)
 800a2ea:	429d      	cmp	r5, r3
 800a2ec:	f040 80b2 	bne.w	800a454 <_strtod_l+0xb0c>
 800a2f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a2f6:	ec4b ab10 	vmov	d0, sl, fp
 800a2fa:	f7ff f9c7 	bl	800968c <__ulp>
 800a2fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a302:	ec51 0b10 	vmov	r0, r1, d0
 800a306:	f7f6 f987 	bl	8000618 <__aeabi_dmul>
 800a30a:	4652      	mov	r2, sl
 800a30c:	465b      	mov	r3, fp
 800a30e:	f7f5 ffcd 	bl	80002ac <__adddf3>
 800a312:	460b      	mov	r3, r1
 800a314:	4949      	ldr	r1, [pc, #292]	@ (800a43c <_strtod_l+0xaf4>)
 800a316:	4a4e      	ldr	r2, [pc, #312]	@ (800a450 <_strtod_l+0xb08>)
 800a318:	4019      	ands	r1, r3
 800a31a:	4291      	cmp	r1, r2
 800a31c:	4682      	mov	sl, r0
 800a31e:	d942      	bls.n	800a3a6 <_strtod_l+0xa5e>
 800a320:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a322:	4b47      	ldr	r3, [pc, #284]	@ (800a440 <_strtod_l+0xaf8>)
 800a324:	429a      	cmp	r2, r3
 800a326:	d103      	bne.n	800a330 <_strtod_l+0x9e8>
 800a328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a32a:	3301      	adds	r3, #1
 800a32c:	f43f ad2b 	beq.w	8009d86 <_strtod_l+0x43e>
 800a330:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a440 <_strtod_l+0xaf8>
 800a334:	f04f 3aff 	mov.w	sl, #4294967295
 800a338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a33a:	9805      	ldr	r0, [sp, #20]
 800a33c:	f7fe fe72 	bl	8009024 <_Bfree>
 800a340:	9805      	ldr	r0, [sp, #20]
 800a342:	4649      	mov	r1, r9
 800a344:	f7fe fe6e 	bl	8009024 <_Bfree>
 800a348:	9805      	ldr	r0, [sp, #20]
 800a34a:	4641      	mov	r1, r8
 800a34c:	f7fe fe6a 	bl	8009024 <_Bfree>
 800a350:	9805      	ldr	r0, [sp, #20]
 800a352:	4621      	mov	r1, r4
 800a354:	f7fe fe66 	bl	8009024 <_Bfree>
 800a358:	e618      	b.n	8009f8c <_strtod_l+0x644>
 800a35a:	f1ba 0f01 	cmp.w	sl, #1
 800a35e:	d103      	bne.n	800a368 <_strtod_l+0xa20>
 800a360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a362:	2b00      	cmp	r3, #0
 800a364:	f43f ada5 	beq.w	8009eb2 <_strtod_l+0x56a>
 800a368:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a418 <_strtod_l+0xad0>
 800a36c:	4f35      	ldr	r7, [pc, #212]	@ (800a444 <_strtod_l+0xafc>)
 800a36e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a372:	2600      	movs	r6, #0
 800a374:	e7b1      	b.n	800a2da <_strtod_l+0x992>
 800a376:	4f34      	ldr	r7, [pc, #208]	@ (800a448 <_strtod_l+0xb00>)
 800a378:	2600      	movs	r6, #0
 800a37a:	e7aa      	b.n	800a2d2 <_strtod_l+0x98a>
 800a37c:	4b32      	ldr	r3, [pc, #200]	@ (800a448 <_strtod_l+0xb00>)
 800a37e:	4630      	mov	r0, r6
 800a380:	4639      	mov	r1, r7
 800a382:	2200      	movs	r2, #0
 800a384:	f7f6 f948 	bl	8000618 <__aeabi_dmul>
 800a388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a38a:	4606      	mov	r6, r0
 800a38c:	460f      	mov	r7, r1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d09f      	beq.n	800a2d2 <_strtod_l+0x98a>
 800a392:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a396:	e7a0      	b.n	800a2da <_strtod_l+0x992>
 800a398:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a420 <_strtod_l+0xad8>
 800a39c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a3a0:	ec57 6b17 	vmov	r6, r7, d7
 800a3a4:	e799      	b.n	800a2da <_strtod_l+0x992>
 800a3a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a3aa:	9b08      	ldr	r3, [sp, #32]
 800a3ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1c1      	bne.n	800a338 <_strtod_l+0x9f0>
 800a3b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3b8:	0d1b      	lsrs	r3, r3, #20
 800a3ba:	051b      	lsls	r3, r3, #20
 800a3bc:	429d      	cmp	r5, r3
 800a3be:	d1bb      	bne.n	800a338 <_strtod_l+0x9f0>
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	f7f6 fc70 	bl	8000ca8 <__aeabi_d2lz>
 800a3c8:	f7f6 f8f8 	bl	80005bc <__aeabi_l2d>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	f7f5 ff68 	bl	80002a8 <__aeabi_dsub>
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4602      	mov	r2, r0
 800a3dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a3e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3e6:	ea46 060a 	orr.w	r6, r6, sl
 800a3ea:	431e      	orrs	r6, r3
 800a3ec:	d06f      	beq.n	800a4ce <_strtod_l+0xb86>
 800a3ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800a428 <_strtod_l+0xae0>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f6 fb82 	bl	8000afc <__aeabi_dcmplt>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	f47f accf 	bne.w	8009d9c <_strtod_l+0x454>
 800a3fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800a430 <_strtod_l+0xae8>)
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a408:	f7f6 fb96 	bl	8000b38 <__aeabi_dcmpgt>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d093      	beq.n	800a338 <_strtod_l+0x9f0>
 800a410:	e4c4      	b.n	8009d9c <_strtod_l+0x454>
 800a412:	bf00      	nop
 800a414:	f3af 8000 	nop.w
 800a418:	00000000 	.word	0x00000000
 800a41c:	bff00000 	.word	0xbff00000
 800a420:	00000000 	.word	0x00000000
 800a424:	3ff00000 	.word	0x3ff00000
 800a428:	94a03595 	.word	0x94a03595
 800a42c:	3fdfffff 	.word	0x3fdfffff
 800a430:	35afe535 	.word	0x35afe535
 800a434:	3fe00000 	.word	0x3fe00000
 800a438:	000fffff 	.word	0x000fffff
 800a43c:	7ff00000 	.word	0x7ff00000
 800a440:	7fefffff 	.word	0x7fefffff
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	3fe00000 	.word	0x3fe00000
 800a44c:	7fe00000 	.word	0x7fe00000
 800a450:	7c9fffff 	.word	0x7c9fffff
 800a454:	9b08      	ldr	r3, [sp, #32]
 800a456:	b323      	cbz	r3, 800a4a2 <_strtod_l+0xb5a>
 800a458:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a45c:	d821      	bhi.n	800a4a2 <_strtod_l+0xb5a>
 800a45e:	a328      	add	r3, pc, #160	@ (adr r3, 800a500 <_strtod_l+0xbb8>)
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f7f6 fb52 	bl	8000b10 <__aeabi_dcmple>
 800a46c:	b1a0      	cbz	r0, 800a498 <_strtod_l+0xb50>
 800a46e:	4639      	mov	r1, r7
 800a470:	4630      	mov	r0, r6
 800a472:	f7f6 fba9 	bl	8000bc8 <__aeabi_d2uiz>
 800a476:	2801      	cmp	r0, #1
 800a478:	bf38      	it	cc
 800a47a:	2001      	movcc	r0, #1
 800a47c:	f7f6 f852 	bl	8000524 <__aeabi_ui2d>
 800a480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	b9fb      	cbnz	r3, 800a4c8 <_strtod_l+0xb80>
 800a488:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a48c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a48e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a490:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a494:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a498:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a49a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a49e:	1b5b      	subs	r3, r3, r5
 800a4a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a4a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a4aa:	f7ff f8ef 	bl	800968c <__ulp>
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	ec53 2b10 	vmov	r2, r3, d0
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	f7f6 f8af 	bl	8000618 <__aeabi_dmul>
 800a4ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a4be:	f7f5 fef5 	bl	80002ac <__adddf3>
 800a4c2:	4682      	mov	sl, r0
 800a4c4:	468b      	mov	fp, r1
 800a4c6:	e770      	b.n	800a3aa <_strtod_l+0xa62>
 800a4c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a4cc:	e7e0      	b.n	800a490 <_strtod_l+0xb48>
 800a4ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a508 <_strtod_l+0xbc0>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7f6 fb12 	bl	8000afc <__aeabi_dcmplt>
 800a4d8:	e798      	b.n	800a40c <_strtod_l+0xac4>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a4e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	f7ff ba6d 	b.w	80099c2 <_strtod_l+0x7a>
 800a4e8:	2a65      	cmp	r2, #101	@ 0x65
 800a4ea:	f43f ab66 	beq.w	8009bba <_strtod_l+0x272>
 800a4ee:	2a45      	cmp	r2, #69	@ 0x45
 800a4f0:	f43f ab63 	beq.w	8009bba <_strtod_l+0x272>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f7ff bb9e 	b.w	8009c36 <_strtod_l+0x2ee>
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	ffc00000 	.word	0xffc00000
 800a504:	41dfffff 	.word	0x41dfffff
 800a508:	94a03595 	.word	0x94a03595
 800a50c:	3fcfffff 	.word	0x3fcfffff

0800a510 <_strtod_r>:
 800a510:	4b01      	ldr	r3, [pc, #4]	@ (800a518 <_strtod_r+0x8>)
 800a512:	f7ff ba19 	b.w	8009948 <_strtod_l>
 800a516:	bf00      	nop
 800a518:	20000078 	.word	0x20000078

0800a51c <_strtol_l.constprop.0>:
 800a51c:	2b24      	cmp	r3, #36	@ 0x24
 800a51e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a522:	4686      	mov	lr, r0
 800a524:	4690      	mov	r8, r2
 800a526:	d801      	bhi.n	800a52c <_strtol_l.constprop.0+0x10>
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d106      	bne.n	800a53a <_strtol_l.constprop.0+0x1e>
 800a52c:	f7fd fe70 	bl	8008210 <__errno>
 800a530:	2316      	movs	r3, #22
 800a532:	6003      	str	r3, [r0, #0]
 800a534:	2000      	movs	r0, #0
 800a536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53a:	4834      	ldr	r0, [pc, #208]	@ (800a60c <_strtol_l.constprop.0+0xf0>)
 800a53c:	460d      	mov	r5, r1
 800a53e:	462a      	mov	r2, r5
 800a540:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a544:	5d06      	ldrb	r6, [r0, r4]
 800a546:	f016 0608 	ands.w	r6, r6, #8
 800a54a:	d1f8      	bne.n	800a53e <_strtol_l.constprop.0+0x22>
 800a54c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a54e:	d12d      	bne.n	800a5ac <_strtol_l.constprop.0+0x90>
 800a550:	782c      	ldrb	r4, [r5, #0]
 800a552:	2601      	movs	r6, #1
 800a554:	1c95      	adds	r5, r2, #2
 800a556:	f033 0210 	bics.w	r2, r3, #16
 800a55a:	d109      	bne.n	800a570 <_strtol_l.constprop.0+0x54>
 800a55c:	2c30      	cmp	r4, #48	@ 0x30
 800a55e:	d12a      	bne.n	800a5b6 <_strtol_l.constprop.0+0x9a>
 800a560:	782a      	ldrb	r2, [r5, #0]
 800a562:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a566:	2a58      	cmp	r2, #88	@ 0x58
 800a568:	d125      	bne.n	800a5b6 <_strtol_l.constprop.0+0x9a>
 800a56a:	786c      	ldrb	r4, [r5, #1]
 800a56c:	2310      	movs	r3, #16
 800a56e:	3502      	adds	r5, #2
 800a570:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a574:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a578:	2200      	movs	r2, #0
 800a57a:	fbbc f9f3 	udiv	r9, ip, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	fb03 ca19 	mls	sl, r3, r9, ip
 800a584:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a588:	2f09      	cmp	r7, #9
 800a58a:	d81b      	bhi.n	800a5c4 <_strtol_l.constprop.0+0xa8>
 800a58c:	463c      	mov	r4, r7
 800a58e:	42a3      	cmp	r3, r4
 800a590:	dd27      	ble.n	800a5e2 <_strtol_l.constprop.0+0xc6>
 800a592:	1c57      	adds	r7, r2, #1
 800a594:	d007      	beq.n	800a5a6 <_strtol_l.constprop.0+0x8a>
 800a596:	4581      	cmp	r9, r0
 800a598:	d320      	bcc.n	800a5dc <_strtol_l.constprop.0+0xc0>
 800a59a:	d101      	bne.n	800a5a0 <_strtol_l.constprop.0+0x84>
 800a59c:	45a2      	cmp	sl, r4
 800a59e:	db1d      	blt.n	800a5dc <_strtol_l.constprop.0+0xc0>
 800a5a0:	fb00 4003 	mla	r0, r0, r3, r4
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5aa:	e7eb      	b.n	800a584 <_strtol_l.constprop.0+0x68>
 800a5ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800a5ae:	bf04      	itt	eq
 800a5b0:	782c      	ldrbeq	r4, [r5, #0]
 800a5b2:	1c95      	addeq	r5, r2, #2
 800a5b4:	e7cf      	b.n	800a556 <_strtol_l.constprop.0+0x3a>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1da      	bne.n	800a570 <_strtol_l.constprop.0+0x54>
 800a5ba:	2c30      	cmp	r4, #48	@ 0x30
 800a5bc:	bf0c      	ite	eq
 800a5be:	2308      	moveq	r3, #8
 800a5c0:	230a      	movne	r3, #10
 800a5c2:	e7d5      	b.n	800a570 <_strtol_l.constprop.0+0x54>
 800a5c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a5c8:	2f19      	cmp	r7, #25
 800a5ca:	d801      	bhi.n	800a5d0 <_strtol_l.constprop.0+0xb4>
 800a5cc:	3c37      	subs	r4, #55	@ 0x37
 800a5ce:	e7de      	b.n	800a58e <_strtol_l.constprop.0+0x72>
 800a5d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a5d4:	2f19      	cmp	r7, #25
 800a5d6:	d804      	bhi.n	800a5e2 <_strtol_l.constprop.0+0xc6>
 800a5d8:	3c57      	subs	r4, #87	@ 0x57
 800a5da:	e7d8      	b.n	800a58e <_strtol_l.constprop.0+0x72>
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	e7e1      	b.n	800a5a6 <_strtol_l.constprop.0+0x8a>
 800a5e2:	1c53      	adds	r3, r2, #1
 800a5e4:	d108      	bne.n	800a5f8 <_strtol_l.constprop.0+0xdc>
 800a5e6:	2322      	movs	r3, #34	@ 0x22
 800a5e8:	f8ce 3000 	str.w	r3, [lr]
 800a5ec:	4660      	mov	r0, ip
 800a5ee:	f1b8 0f00 	cmp.w	r8, #0
 800a5f2:	d0a0      	beq.n	800a536 <_strtol_l.constprop.0+0x1a>
 800a5f4:	1e69      	subs	r1, r5, #1
 800a5f6:	e006      	b.n	800a606 <_strtol_l.constprop.0+0xea>
 800a5f8:	b106      	cbz	r6, 800a5fc <_strtol_l.constprop.0+0xe0>
 800a5fa:	4240      	negs	r0, r0
 800a5fc:	f1b8 0f00 	cmp.w	r8, #0
 800a600:	d099      	beq.n	800a536 <_strtol_l.constprop.0+0x1a>
 800a602:	2a00      	cmp	r2, #0
 800a604:	d1f6      	bne.n	800a5f4 <_strtol_l.constprop.0+0xd8>
 800a606:	f8c8 1000 	str.w	r1, [r8]
 800a60a:	e794      	b.n	800a536 <_strtol_l.constprop.0+0x1a>
 800a60c:	0800ba61 	.word	0x0800ba61

0800a610 <_strtol_r>:
 800a610:	f7ff bf84 	b.w	800a51c <_strtol_l.constprop.0>

0800a614 <__ssputs_r>:
 800a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	688e      	ldr	r6, [r1, #8]
 800a61a:	461f      	mov	r7, r3
 800a61c:	42be      	cmp	r6, r7
 800a61e:	680b      	ldr	r3, [r1, #0]
 800a620:	4682      	mov	sl, r0
 800a622:	460c      	mov	r4, r1
 800a624:	4690      	mov	r8, r2
 800a626:	d82d      	bhi.n	800a684 <__ssputs_r+0x70>
 800a628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a62c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a630:	d026      	beq.n	800a680 <__ssputs_r+0x6c>
 800a632:	6965      	ldr	r5, [r4, #20]
 800a634:	6909      	ldr	r1, [r1, #16]
 800a636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a63a:	eba3 0901 	sub.w	r9, r3, r1
 800a63e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a642:	1c7b      	adds	r3, r7, #1
 800a644:	444b      	add	r3, r9
 800a646:	106d      	asrs	r5, r5, #1
 800a648:	429d      	cmp	r5, r3
 800a64a:	bf38      	it	cc
 800a64c:	461d      	movcc	r5, r3
 800a64e:	0553      	lsls	r3, r2, #21
 800a650:	d527      	bpl.n	800a6a2 <__ssputs_r+0x8e>
 800a652:	4629      	mov	r1, r5
 800a654:	f7fc fd5c 	bl	8007110 <_malloc_r>
 800a658:	4606      	mov	r6, r0
 800a65a:	b360      	cbz	r0, 800a6b6 <__ssputs_r+0xa2>
 800a65c:	6921      	ldr	r1, [r4, #16]
 800a65e:	464a      	mov	r2, r9
 800a660:	f000 fa08 	bl	800aa74 <memcpy>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a66a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	6126      	str	r6, [r4, #16]
 800a672:	6165      	str	r5, [r4, #20]
 800a674:	444e      	add	r6, r9
 800a676:	eba5 0509 	sub.w	r5, r5, r9
 800a67a:	6026      	str	r6, [r4, #0]
 800a67c:	60a5      	str	r5, [r4, #8]
 800a67e:	463e      	mov	r6, r7
 800a680:	42be      	cmp	r6, r7
 800a682:	d900      	bls.n	800a686 <__ssputs_r+0x72>
 800a684:	463e      	mov	r6, r7
 800a686:	6820      	ldr	r0, [r4, #0]
 800a688:	4632      	mov	r2, r6
 800a68a:	4641      	mov	r1, r8
 800a68c:	f000 f9c6 	bl	800aa1c <memmove>
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	1b9b      	subs	r3, r3, r6
 800a694:	60a3      	str	r3, [r4, #8]
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	4433      	add	r3, r6
 800a69a:	6023      	str	r3, [r4, #0]
 800a69c:	2000      	movs	r0, #0
 800a69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	f000 fd65 	bl	800b172 <_realloc_r>
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d1e0      	bne.n	800a670 <__ssputs_r+0x5c>
 800a6ae:	6921      	ldr	r1, [r4, #16]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	f7fe fc2d 	bl	8008f10 <_free_r>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	f8ca 3000 	str.w	r3, [sl]
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	e7e9      	b.n	800a69e <__ssputs_r+0x8a>
	...

0800a6cc <_svfiprintf_r>:
 800a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	4698      	mov	r8, r3
 800a6d2:	898b      	ldrh	r3, [r1, #12]
 800a6d4:	061b      	lsls	r3, r3, #24
 800a6d6:	b09d      	sub	sp, #116	@ 0x74
 800a6d8:	4607      	mov	r7, r0
 800a6da:	460d      	mov	r5, r1
 800a6dc:	4614      	mov	r4, r2
 800a6de:	d510      	bpl.n	800a702 <_svfiprintf_r+0x36>
 800a6e0:	690b      	ldr	r3, [r1, #16]
 800a6e2:	b973      	cbnz	r3, 800a702 <_svfiprintf_r+0x36>
 800a6e4:	2140      	movs	r1, #64	@ 0x40
 800a6e6:	f7fc fd13 	bl	8007110 <_malloc_r>
 800a6ea:	6028      	str	r0, [r5, #0]
 800a6ec:	6128      	str	r0, [r5, #16]
 800a6ee:	b930      	cbnz	r0, 800a6fe <_svfiprintf_r+0x32>
 800a6f0:	230c      	movs	r3, #12
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f8:	b01d      	add	sp, #116	@ 0x74
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	2340      	movs	r3, #64	@ 0x40
 800a700:	616b      	str	r3, [r5, #20]
 800a702:	2300      	movs	r3, #0
 800a704:	9309      	str	r3, [sp, #36]	@ 0x24
 800a706:	2320      	movs	r3, #32
 800a708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a70c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a710:	2330      	movs	r3, #48	@ 0x30
 800a712:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a8b0 <_svfiprintf_r+0x1e4>
 800a716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a71a:	f04f 0901 	mov.w	r9, #1
 800a71e:	4623      	mov	r3, r4
 800a720:	469a      	mov	sl, r3
 800a722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a726:	b10a      	cbz	r2, 800a72c <_svfiprintf_r+0x60>
 800a728:	2a25      	cmp	r2, #37	@ 0x25
 800a72a:	d1f9      	bne.n	800a720 <_svfiprintf_r+0x54>
 800a72c:	ebba 0b04 	subs.w	fp, sl, r4
 800a730:	d00b      	beq.n	800a74a <_svfiprintf_r+0x7e>
 800a732:	465b      	mov	r3, fp
 800a734:	4622      	mov	r2, r4
 800a736:	4629      	mov	r1, r5
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff ff6b 	bl	800a614 <__ssputs_r>
 800a73e:	3001      	adds	r0, #1
 800a740:	f000 80a7 	beq.w	800a892 <_svfiprintf_r+0x1c6>
 800a744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a746:	445a      	add	r2, fp
 800a748:	9209      	str	r2, [sp, #36]	@ 0x24
 800a74a:	f89a 3000 	ldrb.w	r3, [sl]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 809f 	beq.w	800a892 <_svfiprintf_r+0x1c6>
 800a754:	2300      	movs	r3, #0
 800a756:	f04f 32ff 	mov.w	r2, #4294967295
 800a75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75e:	f10a 0a01 	add.w	sl, sl, #1
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a76a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a76c:	4654      	mov	r4, sl
 800a76e:	2205      	movs	r2, #5
 800a770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a774:	484e      	ldr	r0, [pc, #312]	@ (800a8b0 <_svfiprintf_r+0x1e4>)
 800a776:	f7f5 fd3b 	bl	80001f0 <memchr>
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	b9d8      	cbnz	r0, 800a7b6 <_svfiprintf_r+0xea>
 800a77e:	06d0      	lsls	r0, r2, #27
 800a780:	bf44      	itt	mi
 800a782:	2320      	movmi	r3, #32
 800a784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a788:	0711      	lsls	r1, r2, #28
 800a78a:	bf44      	itt	mi
 800a78c:	232b      	movmi	r3, #43	@ 0x2b
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a792:	f89a 3000 	ldrb.w	r3, [sl]
 800a796:	2b2a      	cmp	r3, #42	@ 0x2a
 800a798:	d015      	beq.n	800a7c6 <_svfiprintf_r+0xfa>
 800a79a:	9a07      	ldr	r2, [sp, #28]
 800a79c:	4654      	mov	r4, sl
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f04f 0c0a 	mov.w	ip, #10
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7aa:	3b30      	subs	r3, #48	@ 0x30
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d94b      	bls.n	800a848 <_svfiprintf_r+0x17c>
 800a7b0:	b1b0      	cbz	r0, 800a7e0 <_svfiprintf_r+0x114>
 800a7b2:	9207      	str	r2, [sp, #28]
 800a7b4:	e014      	b.n	800a7e0 <_svfiprintf_r+0x114>
 800a7b6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	46a2      	mov	sl, r4
 800a7c4:	e7d2      	b.n	800a76c <_svfiprintf_r+0xa0>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9103      	str	r1, [sp, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfbb      	ittet	lt
 800a7d2:	425b      	neglt	r3, r3
 800a7d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d8:	9307      	strge	r3, [sp, #28]
 800a7da:	9307      	strlt	r3, [sp, #28]
 800a7dc:	bfb8      	it	lt
 800a7de:	9204      	strlt	r2, [sp, #16]
 800a7e0:	7823      	ldrb	r3, [r4, #0]
 800a7e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7e4:	d10a      	bne.n	800a7fc <_svfiprintf_r+0x130>
 800a7e6:	7863      	ldrb	r3, [r4, #1]
 800a7e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ea:	d132      	bne.n	800a852 <_svfiprintf_r+0x186>
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	9203      	str	r2, [sp, #12]
 800a7f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7f8:	3402      	adds	r4, #2
 800a7fa:	9305      	str	r3, [sp, #20]
 800a7fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8c0 <_svfiprintf_r+0x1f4>
 800a800:	7821      	ldrb	r1, [r4, #0]
 800a802:	2203      	movs	r2, #3
 800a804:	4650      	mov	r0, sl
 800a806:	f7f5 fcf3 	bl	80001f0 <memchr>
 800a80a:	b138      	cbz	r0, 800a81c <_svfiprintf_r+0x150>
 800a80c:	9b04      	ldr	r3, [sp, #16]
 800a80e:	eba0 000a 	sub.w	r0, r0, sl
 800a812:	2240      	movs	r2, #64	@ 0x40
 800a814:	4082      	lsls	r2, r0
 800a816:	4313      	orrs	r3, r2
 800a818:	3401      	adds	r4, #1
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a820:	4824      	ldr	r0, [pc, #144]	@ (800a8b4 <_svfiprintf_r+0x1e8>)
 800a822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a826:	2206      	movs	r2, #6
 800a828:	f7f5 fce2 	bl	80001f0 <memchr>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d036      	beq.n	800a89e <_svfiprintf_r+0x1d2>
 800a830:	4b21      	ldr	r3, [pc, #132]	@ (800a8b8 <_svfiprintf_r+0x1ec>)
 800a832:	bb1b      	cbnz	r3, 800a87c <_svfiprintf_r+0x1b0>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	3307      	adds	r3, #7
 800a838:	f023 0307 	bic.w	r3, r3, #7
 800a83c:	3308      	adds	r3, #8
 800a83e:	9303      	str	r3, [sp, #12]
 800a840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a842:	4433      	add	r3, r6
 800a844:	9309      	str	r3, [sp, #36]	@ 0x24
 800a846:	e76a      	b.n	800a71e <_svfiprintf_r+0x52>
 800a848:	fb0c 3202 	mla	r2, ip, r2, r3
 800a84c:	460c      	mov	r4, r1
 800a84e:	2001      	movs	r0, #1
 800a850:	e7a8      	b.n	800a7a4 <_svfiprintf_r+0xd8>
 800a852:	2300      	movs	r3, #0
 800a854:	3401      	adds	r4, #1
 800a856:	9305      	str	r3, [sp, #20]
 800a858:	4619      	mov	r1, r3
 800a85a:	f04f 0c0a 	mov.w	ip, #10
 800a85e:	4620      	mov	r0, r4
 800a860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a864:	3a30      	subs	r2, #48	@ 0x30
 800a866:	2a09      	cmp	r2, #9
 800a868:	d903      	bls.n	800a872 <_svfiprintf_r+0x1a6>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d0c6      	beq.n	800a7fc <_svfiprintf_r+0x130>
 800a86e:	9105      	str	r1, [sp, #20]
 800a870:	e7c4      	b.n	800a7fc <_svfiprintf_r+0x130>
 800a872:	fb0c 2101 	mla	r1, ip, r1, r2
 800a876:	4604      	mov	r4, r0
 800a878:	2301      	movs	r3, #1
 800a87a:	e7f0      	b.n	800a85e <_svfiprintf_r+0x192>
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	462a      	mov	r2, r5
 800a882:	4b0e      	ldr	r3, [pc, #56]	@ (800a8bc <_svfiprintf_r+0x1f0>)
 800a884:	a904      	add	r1, sp, #16
 800a886:	4638      	mov	r0, r7
 800a888:	f7fc fd6e 	bl	8007368 <_printf_float>
 800a88c:	1c42      	adds	r2, r0, #1
 800a88e:	4606      	mov	r6, r0
 800a890:	d1d6      	bne.n	800a840 <_svfiprintf_r+0x174>
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	065b      	lsls	r3, r3, #25
 800a896:	f53f af2d 	bmi.w	800a6f4 <_svfiprintf_r+0x28>
 800a89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a89c:	e72c      	b.n	800a6f8 <_svfiprintf_r+0x2c>
 800a89e:	ab03      	add	r3, sp, #12
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4b05      	ldr	r3, [pc, #20]	@ (800a8bc <_svfiprintf_r+0x1f0>)
 800a8a6:	a904      	add	r1, sp, #16
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7fc fff5 	bl	8007898 <_printf_i>
 800a8ae:	e7ed      	b.n	800a88c <_svfiprintf_r+0x1c0>
 800a8b0:	0800bb61 	.word	0x0800bb61
 800a8b4:	0800bb6b 	.word	0x0800bb6b
 800a8b8:	08007369 	.word	0x08007369
 800a8bc:	0800a615 	.word	0x0800a615
 800a8c0:	0800bb67 	.word	0x0800bb67

0800a8c4 <__sflush_r>:
 800a8c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	0716      	lsls	r6, r2, #28
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	d454      	bmi.n	800a97e <__sflush_r+0xba>
 800a8d4:	684b      	ldr	r3, [r1, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	dc02      	bgt.n	800a8e0 <__sflush_r+0x1c>
 800a8da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dd48      	ble.n	800a972 <__sflush_r+0xae>
 800a8e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e2:	2e00      	cmp	r6, #0
 800a8e4:	d045      	beq.n	800a972 <__sflush_r+0xae>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8ec:	682f      	ldr	r7, [r5, #0]
 800a8ee:	6a21      	ldr	r1, [r4, #32]
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	d030      	beq.n	800a956 <__sflush_r+0x92>
 800a8f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	0759      	lsls	r1, r3, #29
 800a8fa:	d505      	bpl.n	800a908 <__sflush_r+0x44>
 800a8fc:	6863      	ldr	r3, [r4, #4]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a902:	b10b      	cbz	r3, 800a908 <__sflush_r+0x44>
 800a904:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a906:	1ad2      	subs	r2, r2, r3
 800a908:	2300      	movs	r3, #0
 800a90a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a90c:	6a21      	ldr	r1, [r4, #32]
 800a90e:	4628      	mov	r0, r5
 800a910:	47b0      	blx	r6
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	d106      	bne.n	800a926 <__sflush_r+0x62>
 800a918:	6829      	ldr	r1, [r5, #0]
 800a91a:	291d      	cmp	r1, #29
 800a91c:	d82b      	bhi.n	800a976 <__sflush_r+0xb2>
 800a91e:	4a2a      	ldr	r2, [pc, #168]	@ (800a9c8 <__sflush_r+0x104>)
 800a920:	410a      	asrs	r2, r1
 800a922:	07d6      	lsls	r6, r2, #31
 800a924:	d427      	bmi.n	800a976 <__sflush_r+0xb2>
 800a926:	2200      	movs	r2, #0
 800a928:	6062      	str	r2, [r4, #4]
 800a92a:	04d9      	lsls	r1, r3, #19
 800a92c:	6922      	ldr	r2, [r4, #16]
 800a92e:	6022      	str	r2, [r4, #0]
 800a930:	d504      	bpl.n	800a93c <__sflush_r+0x78>
 800a932:	1c42      	adds	r2, r0, #1
 800a934:	d101      	bne.n	800a93a <__sflush_r+0x76>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	b903      	cbnz	r3, 800a93c <__sflush_r+0x78>
 800a93a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a93e:	602f      	str	r7, [r5, #0]
 800a940:	b1b9      	cbz	r1, 800a972 <__sflush_r+0xae>
 800a942:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a946:	4299      	cmp	r1, r3
 800a948:	d002      	beq.n	800a950 <__sflush_r+0x8c>
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7fe fae0 	bl	8008f10 <_free_r>
 800a950:	2300      	movs	r3, #0
 800a952:	6363      	str	r3, [r4, #52]	@ 0x34
 800a954:	e00d      	b.n	800a972 <__sflush_r+0xae>
 800a956:	2301      	movs	r3, #1
 800a958:	4628      	mov	r0, r5
 800a95a:	47b0      	blx	r6
 800a95c:	4602      	mov	r2, r0
 800a95e:	1c50      	adds	r0, r2, #1
 800a960:	d1c9      	bne.n	800a8f6 <__sflush_r+0x32>
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0c6      	beq.n	800a8f6 <__sflush_r+0x32>
 800a968:	2b1d      	cmp	r3, #29
 800a96a:	d001      	beq.n	800a970 <__sflush_r+0xac>
 800a96c:	2b16      	cmp	r3, #22
 800a96e:	d11e      	bne.n	800a9ae <__sflush_r+0xea>
 800a970:	602f      	str	r7, [r5, #0]
 800a972:	2000      	movs	r0, #0
 800a974:	e022      	b.n	800a9bc <__sflush_r+0xf8>
 800a976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97a:	b21b      	sxth	r3, r3
 800a97c:	e01b      	b.n	800a9b6 <__sflush_r+0xf2>
 800a97e:	690f      	ldr	r7, [r1, #16]
 800a980:	2f00      	cmp	r7, #0
 800a982:	d0f6      	beq.n	800a972 <__sflush_r+0xae>
 800a984:	0793      	lsls	r3, r2, #30
 800a986:	680e      	ldr	r6, [r1, #0]
 800a988:	bf08      	it	eq
 800a98a:	694b      	ldreq	r3, [r1, #20]
 800a98c:	600f      	str	r7, [r1, #0]
 800a98e:	bf18      	it	ne
 800a990:	2300      	movne	r3, #0
 800a992:	eba6 0807 	sub.w	r8, r6, r7
 800a996:	608b      	str	r3, [r1, #8]
 800a998:	f1b8 0f00 	cmp.w	r8, #0
 800a99c:	dde9      	ble.n	800a972 <__sflush_r+0xae>
 800a99e:	6a21      	ldr	r1, [r4, #32]
 800a9a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9a2:	4643      	mov	r3, r8
 800a9a4:	463a      	mov	r2, r7
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	47b0      	blx	r6
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	dc08      	bgt.n	800a9c0 <__sflush_r+0xfc>
 800a9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9b6:	81a3      	strh	r3, [r4, #12]
 800a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	4407      	add	r7, r0
 800a9c2:	eba8 0800 	sub.w	r8, r8, r0
 800a9c6:	e7e7      	b.n	800a998 <__sflush_r+0xd4>
 800a9c8:	dfbffffe 	.word	0xdfbffffe

0800a9cc <_fflush_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	690b      	ldr	r3, [r1, #16]
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	b913      	cbnz	r3, 800a9dc <_fflush_r+0x10>
 800a9d6:	2500      	movs	r5, #0
 800a9d8:	4628      	mov	r0, r5
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	b118      	cbz	r0, 800a9e6 <_fflush_r+0x1a>
 800a9de:	6a03      	ldr	r3, [r0, #32]
 800a9e0:	b90b      	cbnz	r3, 800a9e6 <_fflush_r+0x1a>
 800a9e2:	f7fd fb19 	bl	8008018 <__sinit>
 800a9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0f3      	beq.n	800a9d6 <_fflush_r+0xa>
 800a9ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9f0:	07d0      	lsls	r0, r2, #31
 800a9f2:	d404      	bmi.n	800a9fe <_fflush_r+0x32>
 800a9f4:	0599      	lsls	r1, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_fflush_r+0x32>
 800a9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fa:	f7fd fc34 	bl	8008266 <__retarget_lock_acquire_recursive>
 800a9fe:	4628      	mov	r0, r5
 800aa00:	4621      	mov	r1, r4
 800aa02:	f7ff ff5f 	bl	800a8c4 <__sflush_r>
 800aa06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa08:	07da      	lsls	r2, r3, #31
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	d4e4      	bmi.n	800a9d8 <_fflush_r+0xc>
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	059b      	lsls	r3, r3, #22
 800aa12:	d4e1      	bmi.n	800a9d8 <_fflush_r+0xc>
 800aa14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa16:	f7fd fc27 	bl	8008268 <__retarget_lock_release_recursive>
 800aa1a:	e7dd      	b.n	800a9d8 <_fflush_r+0xc>

0800aa1c <memmove>:
 800aa1c:	4288      	cmp	r0, r1
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	eb01 0402 	add.w	r4, r1, r2
 800aa24:	d902      	bls.n	800aa2c <memmove+0x10>
 800aa26:	4284      	cmp	r4, r0
 800aa28:	4623      	mov	r3, r4
 800aa2a:	d807      	bhi.n	800aa3c <memmove+0x20>
 800aa2c:	1e43      	subs	r3, r0, #1
 800aa2e:	42a1      	cmp	r1, r4
 800aa30:	d008      	beq.n	800aa44 <memmove+0x28>
 800aa32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa3a:	e7f8      	b.n	800aa2e <memmove+0x12>
 800aa3c:	4402      	add	r2, r0
 800aa3e:	4601      	mov	r1, r0
 800aa40:	428a      	cmp	r2, r1
 800aa42:	d100      	bne.n	800aa46 <memmove+0x2a>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa4e:	e7f7      	b.n	800aa40 <memmove+0x24>

0800aa50 <strncmp>:
 800aa50:	b510      	push	{r4, lr}
 800aa52:	b16a      	cbz	r2, 800aa70 <strncmp+0x20>
 800aa54:	3901      	subs	r1, #1
 800aa56:	1884      	adds	r4, r0, r2
 800aa58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d103      	bne.n	800aa6c <strncmp+0x1c>
 800aa64:	42a0      	cmp	r0, r4
 800aa66:	d001      	beq.n	800aa6c <strncmp+0x1c>
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	d1f5      	bne.n	800aa58 <strncmp+0x8>
 800aa6c:	1ad0      	subs	r0, r2, r3
 800aa6e:	bd10      	pop	{r4, pc}
 800aa70:	4610      	mov	r0, r2
 800aa72:	e7fc      	b.n	800aa6e <strncmp+0x1e>

0800aa74 <memcpy>:
 800aa74:	440a      	add	r2, r1
 800aa76:	4291      	cmp	r1, r2
 800aa78:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa7c:	d100      	bne.n	800aa80 <memcpy+0xc>
 800aa7e:	4770      	bx	lr
 800aa80:	b510      	push	{r4, lr}
 800aa82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa8a:	4291      	cmp	r1, r2
 800aa8c:	d1f9      	bne.n	800aa82 <memcpy+0xe>
 800aa8e:	bd10      	pop	{r4, pc}

0800aa90 <nan>:
 800aa90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa98 <nan+0x8>
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	00000000 	.word	0x00000000
 800aa9c:	7ff80000 	.word	0x7ff80000

0800aaa0 <__assert_func>:
 800aaa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaa2:	4614      	mov	r4, r2
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	4b09      	ldr	r3, [pc, #36]	@ (800aacc <__assert_func+0x2c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4605      	mov	r5, r0
 800aaac:	68d8      	ldr	r0, [r3, #12]
 800aaae:	b954      	cbnz	r4, 800aac6 <__assert_func+0x26>
 800aab0:	4b07      	ldr	r3, [pc, #28]	@ (800aad0 <__assert_func+0x30>)
 800aab2:	461c      	mov	r4, r3
 800aab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aab8:	9100      	str	r1, [sp, #0]
 800aaba:	462b      	mov	r3, r5
 800aabc:	4905      	ldr	r1, [pc, #20]	@ (800aad4 <__assert_func+0x34>)
 800aabe:	f000 fb93 	bl	800b1e8 <fiprintf>
 800aac2:	f000 fba3 	bl	800b20c <abort>
 800aac6:	4b04      	ldr	r3, [pc, #16]	@ (800aad8 <__assert_func+0x38>)
 800aac8:	e7f4      	b.n	800aab4 <__assert_func+0x14>
 800aaca:	bf00      	nop
 800aacc:	20000028 	.word	0x20000028
 800aad0:	0800bbb5 	.word	0x0800bbb5
 800aad4:	0800bb87 	.word	0x0800bb87
 800aad8:	0800bb7a 	.word	0x0800bb7a

0800aadc <rshift>:
 800aadc:	6903      	ldr	r3, [r0, #16]
 800aade:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aae6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaea:	f100 0414 	add.w	r4, r0, #20
 800aaee:	dd45      	ble.n	800ab7c <rshift+0xa0>
 800aaf0:	f011 011f 	ands.w	r1, r1, #31
 800aaf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aaf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aafc:	d10c      	bne.n	800ab18 <rshift+0x3c>
 800aafe:	f100 0710 	add.w	r7, r0, #16
 800ab02:	4629      	mov	r1, r5
 800ab04:	42b1      	cmp	r1, r6
 800ab06:	d334      	bcc.n	800ab72 <rshift+0x96>
 800ab08:	1a9b      	subs	r3, r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	1eea      	subs	r2, r5, #3
 800ab0e:	4296      	cmp	r6, r2
 800ab10:	bf38      	it	cc
 800ab12:	2300      	movcc	r3, #0
 800ab14:	4423      	add	r3, r4
 800ab16:	e015      	b.n	800ab44 <rshift+0x68>
 800ab18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab1c:	f1c1 0820 	rsb	r8, r1, #32
 800ab20:	40cf      	lsrs	r7, r1
 800ab22:	f105 0e04 	add.w	lr, r5, #4
 800ab26:	46a1      	mov	r9, r4
 800ab28:	4576      	cmp	r6, lr
 800ab2a:	46f4      	mov	ip, lr
 800ab2c:	d815      	bhi.n	800ab5a <rshift+0x7e>
 800ab2e:	1a9a      	subs	r2, r3, r2
 800ab30:	0092      	lsls	r2, r2, #2
 800ab32:	3a04      	subs	r2, #4
 800ab34:	3501      	adds	r5, #1
 800ab36:	42ae      	cmp	r6, r5
 800ab38:	bf38      	it	cc
 800ab3a:	2200      	movcc	r2, #0
 800ab3c:	18a3      	adds	r3, r4, r2
 800ab3e:	50a7      	str	r7, [r4, r2]
 800ab40:	b107      	cbz	r7, 800ab44 <rshift+0x68>
 800ab42:	3304      	adds	r3, #4
 800ab44:	1b1a      	subs	r2, r3, r4
 800ab46:	42a3      	cmp	r3, r4
 800ab48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab4c:	bf08      	it	eq
 800ab4e:	2300      	moveq	r3, #0
 800ab50:	6102      	str	r2, [r0, #16]
 800ab52:	bf08      	it	eq
 800ab54:	6143      	streq	r3, [r0, #20]
 800ab56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab5a:	f8dc c000 	ldr.w	ip, [ip]
 800ab5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab62:	ea4c 0707 	orr.w	r7, ip, r7
 800ab66:	f849 7b04 	str.w	r7, [r9], #4
 800ab6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab6e:	40cf      	lsrs	r7, r1
 800ab70:	e7da      	b.n	800ab28 <rshift+0x4c>
 800ab72:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab76:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab7a:	e7c3      	b.n	800ab04 <rshift+0x28>
 800ab7c:	4623      	mov	r3, r4
 800ab7e:	e7e1      	b.n	800ab44 <rshift+0x68>

0800ab80 <__hexdig_fun>:
 800ab80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ab84:	2b09      	cmp	r3, #9
 800ab86:	d802      	bhi.n	800ab8e <__hexdig_fun+0xe>
 800ab88:	3820      	subs	r0, #32
 800ab8a:	b2c0      	uxtb	r0, r0
 800ab8c:	4770      	bx	lr
 800ab8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d801      	bhi.n	800ab9a <__hexdig_fun+0x1a>
 800ab96:	3847      	subs	r0, #71	@ 0x47
 800ab98:	e7f7      	b.n	800ab8a <__hexdig_fun+0xa>
 800ab9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ab9e:	2b05      	cmp	r3, #5
 800aba0:	d801      	bhi.n	800aba6 <__hexdig_fun+0x26>
 800aba2:	3827      	subs	r0, #39	@ 0x27
 800aba4:	e7f1      	b.n	800ab8a <__hexdig_fun+0xa>
 800aba6:	2000      	movs	r0, #0
 800aba8:	4770      	bx	lr
	...

0800abac <__gethex>:
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	b085      	sub	sp, #20
 800abb2:	468a      	mov	sl, r1
 800abb4:	9302      	str	r3, [sp, #8]
 800abb6:	680b      	ldr	r3, [r1, #0]
 800abb8:	9001      	str	r0, [sp, #4]
 800abba:	4690      	mov	r8, r2
 800abbc:	1c9c      	adds	r4, r3, #2
 800abbe:	46a1      	mov	r9, r4
 800abc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800abc4:	2830      	cmp	r0, #48	@ 0x30
 800abc6:	d0fa      	beq.n	800abbe <__gethex+0x12>
 800abc8:	eba9 0303 	sub.w	r3, r9, r3
 800abcc:	f1a3 0b02 	sub.w	fp, r3, #2
 800abd0:	f7ff ffd6 	bl	800ab80 <__hexdig_fun>
 800abd4:	4605      	mov	r5, r0
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d168      	bne.n	800acac <__gethex+0x100>
 800abda:	49a0      	ldr	r1, [pc, #640]	@ (800ae5c <__gethex+0x2b0>)
 800abdc:	2201      	movs	r2, #1
 800abde:	4648      	mov	r0, r9
 800abe0:	f7ff ff36 	bl	800aa50 <strncmp>
 800abe4:	4607      	mov	r7, r0
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d167      	bne.n	800acba <__gethex+0x10e>
 800abea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800abee:	4626      	mov	r6, r4
 800abf0:	f7ff ffc6 	bl	800ab80 <__hexdig_fun>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d062      	beq.n	800acbe <__gethex+0x112>
 800abf8:	4623      	mov	r3, r4
 800abfa:	7818      	ldrb	r0, [r3, #0]
 800abfc:	2830      	cmp	r0, #48	@ 0x30
 800abfe:	4699      	mov	r9, r3
 800ac00:	f103 0301 	add.w	r3, r3, #1
 800ac04:	d0f9      	beq.n	800abfa <__gethex+0x4e>
 800ac06:	f7ff ffbb 	bl	800ab80 <__hexdig_fun>
 800ac0a:	fab0 f580 	clz	r5, r0
 800ac0e:	096d      	lsrs	r5, r5, #5
 800ac10:	f04f 0b01 	mov.w	fp, #1
 800ac14:	464a      	mov	r2, r9
 800ac16:	4616      	mov	r6, r2
 800ac18:	3201      	adds	r2, #1
 800ac1a:	7830      	ldrb	r0, [r6, #0]
 800ac1c:	f7ff ffb0 	bl	800ab80 <__hexdig_fun>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d1f8      	bne.n	800ac16 <__gethex+0x6a>
 800ac24:	498d      	ldr	r1, [pc, #564]	@ (800ae5c <__gethex+0x2b0>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7ff ff11 	bl	800aa50 <strncmp>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d13f      	bne.n	800acb2 <__gethex+0x106>
 800ac32:	b944      	cbnz	r4, 800ac46 <__gethex+0x9a>
 800ac34:	1c74      	adds	r4, r6, #1
 800ac36:	4622      	mov	r2, r4
 800ac38:	4616      	mov	r6, r2
 800ac3a:	3201      	adds	r2, #1
 800ac3c:	7830      	ldrb	r0, [r6, #0]
 800ac3e:	f7ff ff9f 	bl	800ab80 <__hexdig_fun>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d1f8      	bne.n	800ac38 <__gethex+0x8c>
 800ac46:	1ba4      	subs	r4, r4, r6
 800ac48:	00a7      	lsls	r7, r4, #2
 800ac4a:	7833      	ldrb	r3, [r6, #0]
 800ac4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ac50:	2b50      	cmp	r3, #80	@ 0x50
 800ac52:	d13e      	bne.n	800acd2 <__gethex+0x126>
 800ac54:	7873      	ldrb	r3, [r6, #1]
 800ac56:	2b2b      	cmp	r3, #43	@ 0x2b
 800ac58:	d033      	beq.n	800acc2 <__gethex+0x116>
 800ac5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ac5c:	d034      	beq.n	800acc8 <__gethex+0x11c>
 800ac5e:	1c71      	adds	r1, r6, #1
 800ac60:	2400      	movs	r4, #0
 800ac62:	7808      	ldrb	r0, [r1, #0]
 800ac64:	f7ff ff8c 	bl	800ab80 <__hexdig_fun>
 800ac68:	1e43      	subs	r3, r0, #1
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b18      	cmp	r3, #24
 800ac6e:	d830      	bhi.n	800acd2 <__gethex+0x126>
 800ac70:	f1a0 0210 	sub.w	r2, r0, #16
 800ac74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac78:	f7ff ff82 	bl	800ab80 <__hexdig_fun>
 800ac7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac80:	fa5f fc8c 	uxtb.w	ip, ip
 800ac84:	f1bc 0f18 	cmp.w	ip, #24
 800ac88:	f04f 030a 	mov.w	r3, #10
 800ac8c:	d91e      	bls.n	800accc <__gethex+0x120>
 800ac8e:	b104      	cbz	r4, 800ac92 <__gethex+0xe6>
 800ac90:	4252      	negs	r2, r2
 800ac92:	4417      	add	r7, r2
 800ac94:	f8ca 1000 	str.w	r1, [sl]
 800ac98:	b1ed      	cbz	r5, 800acd6 <__gethex+0x12a>
 800ac9a:	f1bb 0f00 	cmp.w	fp, #0
 800ac9e:	bf0c      	ite	eq
 800aca0:	2506      	moveq	r5, #6
 800aca2:	2500      	movne	r5, #0
 800aca4:	4628      	mov	r0, r5
 800aca6:	b005      	add	sp, #20
 800aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acac:	2500      	movs	r5, #0
 800acae:	462c      	mov	r4, r5
 800acb0:	e7b0      	b.n	800ac14 <__gethex+0x68>
 800acb2:	2c00      	cmp	r4, #0
 800acb4:	d1c7      	bne.n	800ac46 <__gethex+0x9a>
 800acb6:	4627      	mov	r7, r4
 800acb8:	e7c7      	b.n	800ac4a <__gethex+0x9e>
 800acba:	464e      	mov	r6, r9
 800acbc:	462f      	mov	r7, r5
 800acbe:	2501      	movs	r5, #1
 800acc0:	e7c3      	b.n	800ac4a <__gethex+0x9e>
 800acc2:	2400      	movs	r4, #0
 800acc4:	1cb1      	adds	r1, r6, #2
 800acc6:	e7cc      	b.n	800ac62 <__gethex+0xb6>
 800acc8:	2401      	movs	r4, #1
 800acca:	e7fb      	b.n	800acc4 <__gethex+0x118>
 800accc:	fb03 0002 	mla	r0, r3, r2, r0
 800acd0:	e7ce      	b.n	800ac70 <__gethex+0xc4>
 800acd2:	4631      	mov	r1, r6
 800acd4:	e7de      	b.n	800ac94 <__gethex+0xe8>
 800acd6:	eba6 0309 	sub.w	r3, r6, r9
 800acda:	3b01      	subs	r3, #1
 800acdc:	4629      	mov	r1, r5
 800acde:	2b07      	cmp	r3, #7
 800ace0:	dc0a      	bgt.n	800acf8 <__gethex+0x14c>
 800ace2:	9801      	ldr	r0, [sp, #4]
 800ace4:	f7fe f95e 	bl	8008fa4 <_Balloc>
 800ace8:	4604      	mov	r4, r0
 800acea:	b940      	cbnz	r0, 800acfe <__gethex+0x152>
 800acec:	4b5c      	ldr	r3, [pc, #368]	@ (800ae60 <__gethex+0x2b4>)
 800acee:	4602      	mov	r2, r0
 800acf0:	21e4      	movs	r1, #228	@ 0xe4
 800acf2:	485c      	ldr	r0, [pc, #368]	@ (800ae64 <__gethex+0x2b8>)
 800acf4:	f7ff fed4 	bl	800aaa0 <__assert_func>
 800acf8:	3101      	adds	r1, #1
 800acfa:	105b      	asrs	r3, r3, #1
 800acfc:	e7ef      	b.n	800acde <__gethex+0x132>
 800acfe:	f100 0a14 	add.w	sl, r0, #20
 800ad02:	2300      	movs	r3, #0
 800ad04:	4655      	mov	r5, sl
 800ad06:	469b      	mov	fp, r3
 800ad08:	45b1      	cmp	r9, r6
 800ad0a:	d337      	bcc.n	800ad7c <__gethex+0x1d0>
 800ad0c:	f845 bb04 	str.w	fp, [r5], #4
 800ad10:	eba5 050a 	sub.w	r5, r5, sl
 800ad14:	10ad      	asrs	r5, r5, #2
 800ad16:	6125      	str	r5, [r4, #16]
 800ad18:	4658      	mov	r0, fp
 800ad1a:	f7fe fa35 	bl	8009188 <__hi0bits>
 800ad1e:	016d      	lsls	r5, r5, #5
 800ad20:	f8d8 6000 	ldr.w	r6, [r8]
 800ad24:	1a2d      	subs	r5, r5, r0
 800ad26:	42b5      	cmp	r5, r6
 800ad28:	dd54      	ble.n	800add4 <__gethex+0x228>
 800ad2a:	1bad      	subs	r5, r5, r6
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7fe fdc9 	bl	80098c6 <__any_on>
 800ad34:	4681      	mov	r9, r0
 800ad36:	b178      	cbz	r0, 800ad58 <__gethex+0x1ac>
 800ad38:	1e6b      	subs	r3, r5, #1
 800ad3a:	1159      	asrs	r1, r3, #5
 800ad3c:	f003 021f 	and.w	r2, r3, #31
 800ad40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad44:	f04f 0901 	mov.w	r9, #1
 800ad48:	fa09 f202 	lsl.w	r2, r9, r2
 800ad4c:	420a      	tst	r2, r1
 800ad4e:	d003      	beq.n	800ad58 <__gethex+0x1ac>
 800ad50:	454b      	cmp	r3, r9
 800ad52:	dc36      	bgt.n	800adc2 <__gethex+0x216>
 800ad54:	f04f 0902 	mov.w	r9, #2
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7ff febe 	bl	800aadc <rshift>
 800ad60:	442f      	add	r7, r5
 800ad62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad66:	42bb      	cmp	r3, r7
 800ad68:	da42      	bge.n	800adf0 <__gethex+0x244>
 800ad6a:	9801      	ldr	r0, [sp, #4]
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	f7fe f959 	bl	8009024 <_Bfree>
 800ad72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad74:	2300      	movs	r3, #0
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	25a3      	movs	r5, #163	@ 0xa3
 800ad7a:	e793      	b.n	800aca4 <__gethex+0xf8>
 800ad7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ad80:	2a2e      	cmp	r2, #46	@ 0x2e
 800ad82:	d012      	beq.n	800adaa <__gethex+0x1fe>
 800ad84:	2b20      	cmp	r3, #32
 800ad86:	d104      	bne.n	800ad92 <__gethex+0x1e6>
 800ad88:	f845 bb04 	str.w	fp, [r5], #4
 800ad8c:	f04f 0b00 	mov.w	fp, #0
 800ad90:	465b      	mov	r3, fp
 800ad92:	7830      	ldrb	r0, [r6, #0]
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	f7ff fef3 	bl	800ab80 <__hexdig_fun>
 800ad9a:	9b03      	ldr	r3, [sp, #12]
 800ad9c:	f000 000f 	and.w	r0, r0, #15
 800ada0:	4098      	lsls	r0, r3
 800ada2:	ea4b 0b00 	orr.w	fp, fp, r0
 800ada6:	3304      	adds	r3, #4
 800ada8:	e7ae      	b.n	800ad08 <__gethex+0x15c>
 800adaa:	45b1      	cmp	r9, r6
 800adac:	d8ea      	bhi.n	800ad84 <__gethex+0x1d8>
 800adae:	492b      	ldr	r1, [pc, #172]	@ (800ae5c <__gethex+0x2b0>)
 800adb0:	9303      	str	r3, [sp, #12]
 800adb2:	2201      	movs	r2, #1
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff fe4b 	bl	800aa50 <strncmp>
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d1e1      	bne.n	800ad84 <__gethex+0x1d8>
 800adc0:	e7a2      	b.n	800ad08 <__gethex+0x15c>
 800adc2:	1ea9      	subs	r1, r5, #2
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7fe fd7e 	bl	80098c6 <__any_on>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d0c2      	beq.n	800ad54 <__gethex+0x1a8>
 800adce:	f04f 0903 	mov.w	r9, #3
 800add2:	e7c1      	b.n	800ad58 <__gethex+0x1ac>
 800add4:	da09      	bge.n	800adea <__gethex+0x23e>
 800add6:	1b75      	subs	r5, r6, r5
 800add8:	4621      	mov	r1, r4
 800adda:	9801      	ldr	r0, [sp, #4]
 800addc:	462a      	mov	r2, r5
 800adde:	f7fe fb39 	bl	8009454 <__lshift>
 800ade2:	1b7f      	subs	r7, r7, r5
 800ade4:	4604      	mov	r4, r0
 800ade6:	f100 0a14 	add.w	sl, r0, #20
 800adea:	f04f 0900 	mov.w	r9, #0
 800adee:	e7b8      	b.n	800ad62 <__gethex+0x1b6>
 800adf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800adf4:	42bd      	cmp	r5, r7
 800adf6:	dd6f      	ble.n	800aed8 <__gethex+0x32c>
 800adf8:	1bed      	subs	r5, r5, r7
 800adfa:	42ae      	cmp	r6, r5
 800adfc:	dc34      	bgt.n	800ae68 <__gethex+0x2bc>
 800adfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d022      	beq.n	800ae4c <__gethex+0x2a0>
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d024      	beq.n	800ae54 <__gethex+0x2a8>
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d115      	bne.n	800ae3a <__gethex+0x28e>
 800ae0e:	42ae      	cmp	r6, r5
 800ae10:	d113      	bne.n	800ae3a <__gethex+0x28e>
 800ae12:	2e01      	cmp	r6, #1
 800ae14:	d10b      	bne.n	800ae2e <__gethex+0x282>
 800ae16:	9a02      	ldr	r2, [sp, #8]
 800ae18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	2301      	movs	r3, #1
 800ae20:	6123      	str	r3, [r4, #16]
 800ae22:	f8ca 3000 	str.w	r3, [sl]
 800ae26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae28:	2562      	movs	r5, #98	@ 0x62
 800ae2a:	601c      	str	r4, [r3, #0]
 800ae2c:	e73a      	b.n	800aca4 <__gethex+0xf8>
 800ae2e:	1e71      	subs	r1, r6, #1
 800ae30:	4620      	mov	r0, r4
 800ae32:	f7fe fd48 	bl	80098c6 <__any_on>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d1ed      	bne.n	800ae16 <__gethex+0x26a>
 800ae3a:	9801      	ldr	r0, [sp, #4]
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	f7fe f8f1 	bl	8009024 <_Bfree>
 800ae42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae44:	2300      	movs	r3, #0
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	2550      	movs	r5, #80	@ 0x50
 800ae4a:	e72b      	b.n	800aca4 <__gethex+0xf8>
 800ae4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f3      	bne.n	800ae3a <__gethex+0x28e>
 800ae52:	e7e0      	b.n	800ae16 <__gethex+0x26a>
 800ae54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1dd      	bne.n	800ae16 <__gethex+0x26a>
 800ae5a:	e7ee      	b.n	800ae3a <__gethex+0x28e>
 800ae5c:	0800ba08 	.word	0x0800ba08
 800ae60:	0800b8a1 	.word	0x0800b8a1
 800ae64:	0800bbb6 	.word	0x0800bbb6
 800ae68:	1e6f      	subs	r7, r5, #1
 800ae6a:	f1b9 0f00 	cmp.w	r9, #0
 800ae6e:	d130      	bne.n	800aed2 <__gethex+0x326>
 800ae70:	b127      	cbz	r7, 800ae7c <__gethex+0x2d0>
 800ae72:	4639      	mov	r1, r7
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7fe fd26 	bl	80098c6 <__any_on>
 800ae7a:	4681      	mov	r9, r0
 800ae7c:	117a      	asrs	r2, r7, #5
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ae84:	f007 071f 	and.w	r7, r7, #31
 800ae88:	40bb      	lsls	r3, r7
 800ae8a:	4213      	tst	r3, r2
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	4620      	mov	r0, r4
 800ae90:	bf18      	it	ne
 800ae92:	f049 0902 	orrne.w	r9, r9, #2
 800ae96:	f7ff fe21 	bl	800aadc <rshift>
 800ae9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ae9e:	1b76      	subs	r6, r6, r5
 800aea0:	2502      	movs	r5, #2
 800aea2:	f1b9 0f00 	cmp.w	r9, #0
 800aea6:	d047      	beq.n	800af38 <__gethex+0x38c>
 800aea8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d015      	beq.n	800aedc <__gethex+0x330>
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d017      	beq.n	800aee4 <__gethex+0x338>
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d109      	bne.n	800aecc <__gethex+0x320>
 800aeb8:	f019 0f02 	tst.w	r9, #2
 800aebc:	d006      	beq.n	800aecc <__gethex+0x320>
 800aebe:	f8da 3000 	ldr.w	r3, [sl]
 800aec2:	ea49 0903 	orr.w	r9, r9, r3
 800aec6:	f019 0f01 	tst.w	r9, #1
 800aeca:	d10e      	bne.n	800aeea <__gethex+0x33e>
 800aecc:	f045 0510 	orr.w	r5, r5, #16
 800aed0:	e032      	b.n	800af38 <__gethex+0x38c>
 800aed2:	f04f 0901 	mov.w	r9, #1
 800aed6:	e7d1      	b.n	800ae7c <__gethex+0x2d0>
 800aed8:	2501      	movs	r5, #1
 800aeda:	e7e2      	b.n	800aea2 <__gethex+0x2f6>
 800aedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aede:	f1c3 0301 	rsb	r3, r3, #1
 800aee2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0f0      	beq.n	800aecc <__gethex+0x320>
 800aeea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aeee:	f104 0314 	add.w	r3, r4, #20
 800aef2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aef6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aefa:	f04f 0c00 	mov.w	ip, #0
 800aefe:	4618      	mov	r0, r3
 800af00:	f853 2b04 	ldr.w	r2, [r3], #4
 800af04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af08:	d01b      	beq.n	800af42 <__gethex+0x396>
 800af0a:	3201      	adds	r2, #1
 800af0c:	6002      	str	r2, [r0, #0]
 800af0e:	2d02      	cmp	r5, #2
 800af10:	f104 0314 	add.w	r3, r4, #20
 800af14:	d13c      	bne.n	800af90 <__gethex+0x3e4>
 800af16:	f8d8 2000 	ldr.w	r2, [r8]
 800af1a:	3a01      	subs	r2, #1
 800af1c:	42b2      	cmp	r2, r6
 800af1e:	d109      	bne.n	800af34 <__gethex+0x388>
 800af20:	1171      	asrs	r1, r6, #5
 800af22:	2201      	movs	r2, #1
 800af24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af28:	f006 061f 	and.w	r6, r6, #31
 800af2c:	fa02 f606 	lsl.w	r6, r2, r6
 800af30:	421e      	tst	r6, r3
 800af32:	d13a      	bne.n	800afaa <__gethex+0x3fe>
 800af34:	f045 0520 	orr.w	r5, r5, #32
 800af38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af3a:	601c      	str	r4, [r3, #0]
 800af3c:	9b02      	ldr	r3, [sp, #8]
 800af3e:	601f      	str	r7, [r3, #0]
 800af40:	e6b0      	b.n	800aca4 <__gethex+0xf8>
 800af42:	4299      	cmp	r1, r3
 800af44:	f843 cc04 	str.w	ip, [r3, #-4]
 800af48:	d8d9      	bhi.n	800aefe <__gethex+0x352>
 800af4a:	68a3      	ldr	r3, [r4, #8]
 800af4c:	459b      	cmp	fp, r3
 800af4e:	db17      	blt.n	800af80 <__gethex+0x3d4>
 800af50:	6861      	ldr	r1, [r4, #4]
 800af52:	9801      	ldr	r0, [sp, #4]
 800af54:	3101      	adds	r1, #1
 800af56:	f7fe f825 	bl	8008fa4 <_Balloc>
 800af5a:	4681      	mov	r9, r0
 800af5c:	b918      	cbnz	r0, 800af66 <__gethex+0x3ba>
 800af5e:	4b1a      	ldr	r3, [pc, #104]	@ (800afc8 <__gethex+0x41c>)
 800af60:	4602      	mov	r2, r0
 800af62:	2184      	movs	r1, #132	@ 0x84
 800af64:	e6c5      	b.n	800acf2 <__gethex+0x146>
 800af66:	6922      	ldr	r2, [r4, #16]
 800af68:	3202      	adds	r2, #2
 800af6a:	f104 010c 	add.w	r1, r4, #12
 800af6e:	0092      	lsls	r2, r2, #2
 800af70:	300c      	adds	r0, #12
 800af72:	f7ff fd7f 	bl	800aa74 <memcpy>
 800af76:	4621      	mov	r1, r4
 800af78:	9801      	ldr	r0, [sp, #4]
 800af7a:	f7fe f853 	bl	8009024 <_Bfree>
 800af7e:	464c      	mov	r4, r9
 800af80:	6923      	ldr	r3, [r4, #16]
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af88:	6122      	str	r2, [r4, #16]
 800af8a:	2201      	movs	r2, #1
 800af8c:	615a      	str	r2, [r3, #20]
 800af8e:	e7be      	b.n	800af0e <__gethex+0x362>
 800af90:	6922      	ldr	r2, [r4, #16]
 800af92:	455a      	cmp	r2, fp
 800af94:	dd0b      	ble.n	800afae <__gethex+0x402>
 800af96:	2101      	movs	r1, #1
 800af98:	4620      	mov	r0, r4
 800af9a:	f7ff fd9f 	bl	800aadc <rshift>
 800af9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afa2:	3701      	adds	r7, #1
 800afa4:	42bb      	cmp	r3, r7
 800afa6:	f6ff aee0 	blt.w	800ad6a <__gethex+0x1be>
 800afaa:	2501      	movs	r5, #1
 800afac:	e7c2      	b.n	800af34 <__gethex+0x388>
 800afae:	f016 061f 	ands.w	r6, r6, #31
 800afb2:	d0fa      	beq.n	800afaa <__gethex+0x3fe>
 800afb4:	4453      	add	r3, sl
 800afb6:	f1c6 0620 	rsb	r6, r6, #32
 800afba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800afbe:	f7fe f8e3 	bl	8009188 <__hi0bits>
 800afc2:	42b0      	cmp	r0, r6
 800afc4:	dbe7      	blt.n	800af96 <__gethex+0x3ea>
 800afc6:	e7f0      	b.n	800afaa <__gethex+0x3fe>
 800afc8:	0800b8a1 	.word	0x0800b8a1

0800afcc <L_shift>:
 800afcc:	f1c2 0208 	rsb	r2, r2, #8
 800afd0:	0092      	lsls	r2, r2, #2
 800afd2:	b570      	push	{r4, r5, r6, lr}
 800afd4:	f1c2 0620 	rsb	r6, r2, #32
 800afd8:	6843      	ldr	r3, [r0, #4]
 800afda:	6804      	ldr	r4, [r0, #0]
 800afdc:	fa03 f506 	lsl.w	r5, r3, r6
 800afe0:	432c      	orrs	r4, r5
 800afe2:	40d3      	lsrs	r3, r2
 800afe4:	6004      	str	r4, [r0, #0]
 800afe6:	f840 3f04 	str.w	r3, [r0, #4]!
 800afea:	4288      	cmp	r0, r1
 800afec:	d3f4      	bcc.n	800afd8 <L_shift+0xc>
 800afee:	bd70      	pop	{r4, r5, r6, pc}

0800aff0 <__match>:
 800aff0:	b530      	push	{r4, r5, lr}
 800aff2:	6803      	ldr	r3, [r0, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800affa:	b914      	cbnz	r4, 800b002 <__match+0x12>
 800affc:	6003      	str	r3, [r0, #0]
 800affe:	2001      	movs	r0, #1
 800b000:	bd30      	pop	{r4, r5, pc}
 800b002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b006:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b00a:	2d19      	cmp	r5, #25
 800b00c:	bf98      	it	ls
 800b00e:	3220      	addls	r2, #32
 800b010:	42a2      	cmp	r2, r4
 800b012:	d0f0      	beq.n	800aff6 <__match+0x6>
 800b014:	2000      	movs	r0, #0
 800b016:	e7f3      	b.n	800b000 <__match+0x10>

0800b018 <__hexnan>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	680b      	ldr	r3, [r1, #0]
 800b01e:	6801      	ldr	r1, [r0, #0]
 800b020:	115e      	asrs	r6, r3, #5
 800b022:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b026:	f013 031f 	ands.w	r3, r3, #31
 800b02a:	b087      	sub	sp, #28
 800b02c:	bf18      	it	ne
 800b02e:	3604      	addne	r6, #4
 800b030:	2500      	movs	r5, #0
 800b032:	1f37      	subs	r7, r6, #4
 800b034:	4682      	mov	sl, r0
 800b036:	4690      	mov	r8, r2
 800b038:	9301      	str	r3, [sp, #4]
 800b03a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b03e:	46b9      	mov	r9, r7
 800b040:	463c      	mov	r4, r7
 800b042:	9502      	str	r5, [sp, #8]
 800b044:	46ab      	mov	fp, r5
 800b046:	784a      	ldrb	r2, [r1, #1]
 800b048:	1c4b      	adds	r3, r1, #1
 800b04a:	9303      	str	r3, [sp, #12]
 800b04c:	b342      	cbz	r2, 800b0a0 <__hexnan+0x88>
 800b04e:	4610      	mov	r0, r2
 800b050:	9105      	str	r1, [sp, #20]
 800b052:	9204      	str	r2, [sp, #16]
 800b054:	f7ff fd94 	bl	800ab80 <__hexdig_fun>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d151      	bne.n	800b100 <__hexnan+0xe8>
 800b05c:	9a04      	ldr	r2, [sp, #16]
 800b05e:	9905      	ldr	r1, [sp, #20]
 800b060:	2a20      	cmp	r2, #32
 800b062:	d818      	bhi.n	800b096 <__hexnan+0x7e>
 800b064:	9b02      	ldr	r3, [sp, #8]
 800b066:	459b      	cmp	fp, r3
 800b068:	dd13      	ble.n	800b092 <__hexnan+0x7a>
 800b06a:	454c      	cmp	r4, r9
 800b06c:	d206      	bcs.n	800b07c <__hexnan+0x64>
 800b06e:	2d07      	cmp	r5, #7
 800b070:	dc04      	bgt.n	800b07c <__hexnan+0x64>
 800b072:	462a      	mov	r2, r5
 800b074:	4649      	mov	r1, r9
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff ffa8 	bl	800afcc <L_shift>
 800b07c:	4544      	cmp	r4, r8
 800b07e:	d952      	bls.n	800b126 <__hexnan+0x10e>
 800b080:	2300      	movs	r3, #0
 800b082:	f1a4 0904 	sub.w	r9, r4, #4
 800b086:	f844 3c04 	str.w	r3, [r4, #-4]
 800b08a:	f8cd b008 	str.w	fp, [sp, #8]
 800b08e:	464c      	mov	r4, r9
 800b090:	461d      	mov	r5, r3
 800b092:	9903      	ldr	r1, [sp, #12]
 800b094:	e7d7      	b.n	800b046 <__hexnan+0x2e>
 800b096:	2a29      	cmp	r2, #41	@ 0x29
 800b098:	d157      	bne.n	800b14a <__hexnan+0x132>
 800b09a:	3102      	adds	r1, #2
 800b09c:	f8ca 1000 	str.w	r1, [sl]
 800b0a0:	f1bb 0f00 	cmp.w	fp, #0
 800b0a4:	d051      	beq.n	800b14a <__hexnan+0x132>
 800b0a6:	454c      	cmp	r4, r9
 800b0a8:	d206      	bcs.n	800b0b8 <__hexnan+0xa0>
 800b0aa:	2d07      	cmp	r5, #7
 800b0ac:	dc04      	bgt.n	800b0b8 <__hexnan+0xa0>
 800b0ae:	462a      	mov	r2, r5
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f7ff ff8a 	bl	800afcc <L_shift>
 800b0b8:	4544      	cmp	r4, r8
 800b0ba:	d936      	bls.n	800b12a <__hexnan+0x112>
 800b0bc:	f1a8 0204 	sub.w	r2, r8, #4
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b0ca:	429f      	cmp	r7, r3
 800b0cc:	d2f9      	bcs.n	800b0c2 <__hexnan+0xaa>
 800b0ce:	1b3b      	subs	r3, r7, r4
 800b0d0:	f023 0303 	bic.w	r3, r3, #3
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	3401      	adds	r4, #1
 800b0d8:	3e03      	subs	r6, #3
 800b0da:	42b4      	cmp	r4, r6
 800b0dc:	bf88      	it	hi
 800b0de:	2304      	movhi	r3, #4
 800b0e0:	4443      	add	r3, r8
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f843 2b04 	str.w	r2, [r3], #4
 800b0e8:	429f      	cmp	r7, r3
 800b0ea:	d2fb      	bcs.n	800b0e4 <__hexnan+0xcc>
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	b91b      	cbnz	r3, 800b0f8 <__hexnan+0xe0>
 800b0f0:	4547      	cmp	r7, r8
 800b0f2:	d128      	bne.n	800b146 <__hexnan+0x12e>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	2005      	movs	r0, #5
 800b0fa:	b007      	add	sp, #28
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b100:	3501      	adds	r5, #1
 800b102:	2d08      	cmp	r5, #8
 800b104:	f10b 0b01 	add.w	fp, fp, #1
 800b108:	dd06      	ble.n	800b118 <__hexnan+0x100>
 800b10a:	4544      	cmp	r4, r8
 800b10c:	d9c1      	bls.n	800b092 <__hexnan+0x7a>
 800b10e:	2300      	movs	r3, #0
 800b110:	f844 3c04 	str.w	r3, [r4, #-4]
 800b114:	2501      	movs	r5, #1
 800b116:	3c04      	subs	r4, #4
 800b118:	6822      	ldr	r2, [r4, #0]
 800b11a:	f000 000f 	and.w	r0, r0, #15
 800b11e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b122:	6020      	str	r0, [r4, #0]
 800b124:	e7b5      	b.n	800b092 <__hexnan+0x7a>
 800b126:	2508      	movs	r5, #8
 800b128:	e7b3      	b.n	800b092 <__hexnan+0x7a>
 800b12a:	9b01      	ldr	r3, [sp, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d0dd      	beq.n	800b0ec <__hexnan+0xd4>
 800b130:	f1c3 0320 	rsb	r3, r3, #32
 800b134:	f04f 32ff 	mov.w	r2, #4294967295
 800b138:	40da      	lsrs	r2, r3
 800b13a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b13e:	4013      	ands	r3, r2
 800b140:	f846 3c04 	str.w	r3, [r6, #-4]
 800b144:	e7d2      	b.n	800b0ec <__hexnan+0xd4>
 800b146:	3f04      	subs	r7, #4
 800b148:	e7d0      	b.n	800b0ec <__hexnan+0xd4>
 800b14a:	2004      	movs	r0, #4
 800b14c:	e7d5      	b.n	800b0fa <__hexnan+0xe2>

0800b14e <__ascii_mbtowc>:
 800b14e:	b082      	sub	sp, #8
 800b150:	b901      	cbnz	r1, 800b154 <__ascii_mbtowc+0x6>
 800b152:	a901      	add	r1, sp, #4
 800b154:	b142      	cbz	r2, 800b168 <__ascii_mbtowc+0x1a>
 800b156:	b14b      	cbz	r3, 800b16c <__ascii_mbtowc+0x1e>
 800b158:	7813      	ldrb	r3, [r2, #0]
 800b15a:	600b      	str	r3, [r1, #0]
 800b15c:	7812      	ldrb	r2, [r2, #0]
 800b15e:	1e10      	subs	r0, r2, #0
 800b160:	bf18      	it	ne
 800b162:	2001      	movne	r0, #1
 800b164:	b002      	add	sp, #8
 800b166:	4770      	bx	lr
 800b168:	4610      	mov	r0, r2
 800b16a:	e7fb      	b.n	800b164 <__ascii_mbtowc+0x16>
 800b16c:	f06f 0001 	mvn.w	r0, #1
 800b170:	e7f8      	b.n	800b164 <__ascii_mbtowc+0x16>

0800b172 <_realloc_r>:
 800b172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	4680      	mov	r8, r0
 800b178:	4615      	mov	r5, r2
 800b17a:	460c      	mov	r4, r1
 800b17c:	b921      	cbnz	r1, 800b188 <_realloc_r+0x16>
 800b17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b182:	4611      	mov	r1, r2
 800b184:	f7fb bfc4 	b.w	8007110 <_malloc_r>
 800b188:	b92a      	cbnz	r2, 800b196 <_realloc_r+0x24>
 800b18a:	f7fd fec1 	bl	8008f10 <_free_r>
 800b18e:	2400      	movs	r4, #0
 800b190:	4620      	mov	r0, r4
 800b192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b196:	f000 f840 	bl	800b21a <_malloc_usable_size_r>
 800b19a:	4285      	cmp	r5, r0
 800b19c:	4606      	mov	r6, r0
 800b19e:	d802      	bhi.n	800b1a6 <_realloc_r+0x34>
 800b1a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b1a4:	d8f4      	bhi.n	800b190 <_realloc_r+0x1e>
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	f7fb ffb1 	bl	8007110 <_malloc_r>
 800b1ae:	4607      	mov	r7, r0
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d0ec      	beq.n	800b18e <_realloc_r+0x1c>
 800b1b4:	42b5      	cmp	r5, r6
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	bf28      	it	cs
 800b1bc:	4632      	movcs	r2, r6
 800b1be:	f7ff fc59 	bl	800aa74 <memcpy>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	f7fd fea3 	bl	8008f10 <_free_r>
 800b1ca:	463c      	mov	r4, r7
 800b1cc:	e7e0      	b.n	800b190 <_realloc_r+0x1e>

0800b1ce <__ascii_wctomb>:
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	b141      	cbz	r1, 800b1e6 <__ascii_wctomb+0x18>
 800b1d4:	2aff      	cmp	r2, #255	@ 0xff
 800b1d6:	d904      	bls.n	800b1e2 <__ascii_wctomb+0x14>
 800b1d8:	228a      	movs	r2, #138	@ 0x8a
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	4770      	bx	lr
 800b1e2:	700a      	strb	r2, [r1, #0]
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	4770      	bx	lr

0800b1e8 <fiprintf>:
 800b1e8:	b40e      	push	{r1, r2, r3}
 800b1ea:	b503      	push	{r0, r1, lr}
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	4805      	ldr	r0, [pc, #20]	@ (800b208 <fiprintf+0x20>)
 800b1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f6:	6800      	ldr	r0, [r0, #0]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	f000 f83f 	bl	800b27c <_vfiprintf_r>
 800b1fe:	b002      	add	sp, #8
 800b200:	f85d eb04 	ldr.w	lr, [sp], #4
 800b204:	b003      	add	sp, #12
 800b206:	4770      	bx	lr
 800b208:	20000028 	.word	0x20000028

0800b20c <abort>:
 800b20c:	b508      	push	{r3, lr}
 800b20e:	2006      	movs	r0, #6
 800b210:	f000 fa08 	bl	800b624 <raise>
 800b214:	2001      	movs	r0, #1
 800b216:	f7f6 fe5f 	bl	8001ed8 <_exit>

0800b21a <_malloc_usable_size_r>:
 800b21a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21e:	1f18      	subs	r0, r3, #4
 800b220:	2b00      	cmp	r3, #0
 800b222:	bfbc      	itt	lt
 800b224:	580b      	ldrlt	r3, [r1, r0]
 800b226:	18c0      	addlt	r0, r0, r3
 800b228:	4770      	bx	lr

0800b22a <__sfputc_r>:
 800b22a:	6893      	ldr	r3, [r2, #8]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	b410      	push	{r4}
 800b232:	6093      	str	r3, [r2, #8]
 800b234:	da08      	bge.n	800b248 <__sfputc_r+0x1e>
 800b236:	6994      	ldr	r4, [r2, #24]
 800b238:	42a3      	cmp	r3, r4
 800b23a:	db01      	blt.n	800b240 <__sfputc_r+0x16>
 800b23c:	290a      	cmp	r1, #10
 800b23e:	d103      	bne.n	800b248 <__sfputc_r+0x1e>
 800b240:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b244:	f000 b932 	b.w	800b4ac <__swbuf_r>
 800b248:	6813      	ldr	r3, [r2, #0]
 800b24a:	1c58      	adds	r0, r3, #1
 800b24c:	6010      	str	r0, [r2, #0]
 800b24e:	7019      	strb	r1, [r3, #0]
 800b250:	4608      	mov	r0, r1
 800b252:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <__sfputs_r>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	4614      	mov	r4, r2
 800b260:	18d5      	adds	r5, r2, r3
 800b262:	42ac      	cmp	r4, r5
 800b264:	d101      	bne.n	800b26a <__sfputs_r+0x12>
 800b266:	2000      	movs	r0, #0
 800b268:	e007      	b.n	800b27a <__sfputs_r+0x22>
 800b26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26e:	463a      	mov	r2, r7
 800b270:	4630      	mov	r0, r6
 800b272:	f7ff ffda 	bl	800b22a <__sfputc_r>
 800b276:	1c43      	adds	r3, r0, #1
 800b278:	d1f3      	bne.n	800b262 <__sfputs_r+0xa>
 800b27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b27c <_vfiprintf_r>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	460d      	mov	r5, r1
 800b282:	b09d      	sub	sp, #116	@ 0x74
 800b284:	4614      	mov	r4, r2
 800b286:	4698      	mov	r8, r3
 800b288:	4606      	mov	r6, r0
 800b28a:	b118      	cbz	r0, 800b294 <_vfiprintf_r+0x18>
 800b28c:	6a03      	ldr	r3, [r0, #32]
 800b28e:	b90b      	cbnz	r3, 800b294 <_vfiprintf_r+0x18>
 800b290:	f7fc fec2 	bl	8008018 <__sinit>
 800b294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b296:	07d9      	lsls	r1, r3, #31
 800b298:	d405      	bmi.n	800b2a6 <_vfiprintf_r+0x2a>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	059a      	lsls	r2, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_vfiprintf_r+0x2a>
 800b2a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2a2:	f7fc ffe0 	bl	8008266 <__retarget_lock_acquire_recursive>
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	071b      	lsls	r3, r3, #28
 800b2aa:	d501      	bpl.n	800b2b0 <_vfiprintf_r+0x34>
 800b2ac:	692b      	ldr	r3, [r5, #16]
 800b2ae:	b99b      	cbnz	r3, 800b2d8 <_vfiprintf_r+0x5c>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f000 f938 	bl	800b528 <__swsetup_r>
 800b2b8:	b170      	cbz	r0, 800b2d8 <_vfiprintf_r+0x5c>
 800b2ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2bc:	07dc      	lsls	r4, r3, #31
 800b2be:	d504      	bpl.n	800b2ca <_vfiprintf_r+0x4e>
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	b01d      	add	sp, #116	@ 0x74
 800b2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ca:	89ab      	ldrh	r3, [r5, #12]
 800b2cc:	0598      	lsls	r0, r3, #22
 800b2ce:	d4f7      	bmi.n	800b2c0 <_vfiprintf_r+0x44>
 800b2d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2d2:	f7fc ffc9 	bl	8008268 <__retarget_lock_release_recursive>
 800b2d6:	e7f3      	b.n	800b2c0 <_vfiprintf_r+0x44>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2dc:	2320      	movs	r3, #32
 800b2de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2e6:	2330      	movs	r3, #48	@ 0x30
 800b2e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b498 <_vfiprintf_r+0x21c>
 800b2ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2f0:	f04f 0901 	mov.w	r9, #1
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	469a      	mov	sl, r3
 800b2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2fc:	b10a      	cbz	r2, 800b302 <_vfiprintf_r+0x86>
 800b2fe:	2a25      	cmp	r2, #37	@ 0x25
 800b300:	d1f9      	bne.n	800b2f6 <_vfiprintf_r+0x7a>
 800b302:	ebba 0b04 	subs.w	fp, sl, r4
 800b306:	d00b      	beq.n	800b320 <_vfiprintf_r+0xa4>
 800b308:	465b      	mov	r3, fp
 800b30a:	4622      	mov	r2, r4
 800b30c:	4629      	mov	r1, r5
 800b30e:	4630      	mov	r0, r6
 800b310:	f7ff ffa2 	bl	800b258 <__sfputs_r>
 800b314:	3001      	adds	r0, #1
 800b316:	f000 80a7 	beq.w	800b468 <_vfiprintf_r+0x1ec>
 800b31a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b31c:	445a      	add	r2, fp
 800b31e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b320:	f89a 3000 	ldrb.w	r3, [sl]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 809f 	beq.w	800b468 <_vfiprintf_r+0x1ec>
 800b32a:	2300      	movs	r3, #0
 800b32c:	f04f 32ff 	mov.w	r2, #4294967295
 800b330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b334:	f10a 0a01 	add.w	sl, sl, #1
 800b338:	9304      	str	r3, [sp, #16]
 800b33a:	9307      	str	r3, [sp, #28]
 800b33c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b340:	931a      	str	r3, [sp, #104]	@ 0x68
 800b342:	4654      	mov	r4, sl
 800b344:	2205      	movs	r2, #5
 800b346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b34a:	4853      	ldr	r0, [pc, #332]	@ (800b498 <_vfiprintf_r+0x21c>)
 800b34c:	f7f4 ff50 	bl	80001f0 <memchr>
 800b350:	9a04      	ldr	r2, [sp, #16]
 800b352:	b9d8      	cbnz	r0, 800b38c <_vfiprintf_r+0x110>
 800b354:	06d1      	lsls	r1, r2, #27
 800b356:	bf44      	itt	mi
 800b358:	2320      	movmi	r3, #32
 800b35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b35e:	0713      	lsls	r3, r2, #28
 800b360:	bf44      	itt	mi
 800b362:	232b      	movmi	r3, #43	@ 0x2b
 800b364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b368:	f89a 3000 	ldrb.w	r3, [sl]
 800b36c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b36e:	d015      	beq.n	800b39c <_vfiprintf_r+0x120>
 800b370:	9a07      	ldr	r2, [sp, #28]
 800b372:	4654      	mov	r4, sl
 800b374:	2000      	movs	r0, #0
 800b376:	f04f 0c0a 	mov.w	ip, #10
 800b37a:	4621      	mov	r1, r4
 800b37c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b380:	3b30      	subs	r3, #48	@ 0x30
 800b382:	2b09      	cmp	r3, #9
 800b384:	d94b      	bls.n	800b41e <_vfiprintf_r+0x1a2>
 800b386:	b1b0      	cbz	r0, 800b3b6 <_vfiprintf_r+0x13a>
 800b388:	9207      	str	r2, [sp, #28]
 800b38a:	e014      	b.n	800b3b6 <_vfiprintf_r+0x13a>
 800b38c:	eba0 0308 	sub.w	r3, r0, r8
 800b390:	fa09 f303 	lsl.w	r3, r9, r3
 800b394:	4313      	orrs	r3, r2
 800b396:	9304      	str	r3, [sp, #16]
 800b398:	46a2      	mov	sl, r4
 800b39a:	e7d2      	b.n	800b342 <_vfiprintf_r+0xc6>
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	1d19      	adds	r1, r3, #4
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	9103      	str	r1, [sp, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bfbb      	ittet	lt
 800b3a8:	425b      	neglt	r3, r3
 800b3aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b3ae:	9307      	strge	r3, [sp, #28]
 800b3b0:	9307      	strlt	r3, [sp, #28]
 800b3b2:	bfb8      	it	lt
 800b3b4:	9204      	strlt	r2, [sp, #16]
 800b3b6:	7823      	ldrb	r3, [r4, #0]
 800b3b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3ba:	d10a      	bne.n	800b3d2 <_vfiprintf_r+0x156>
 800b3bc:	7863      	ldrb	r3, [r4, #1]
 800b3be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3c0:	d132      	bne.n	800b428 <_vfiprintf_r+0x1ac>
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	1d1a      	adds	r2, r3, #4
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	9203      	str	r2, [sp, #12]
 800b3ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3ce:	3402      	adds	r4, #2
 800b3d0:	9305      	str	r3, [sp, #20]
 800b3d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b4a8 <_vfiprintf_r+0x22c>
 800b3d6:	7821      	ldrb	r1, [r4, #0]
 800b3d8:	2203      	movs	r2, #3
 800b3da:	4650      	mov	r0, sl
 800b3dc:	f7f4 ff08 	bl	80001f0 <memchr>
 800b3e0:	b138      	cbz	r0, 800b3f2 <_vfiprintf_r+0x176>
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	eba0 000a 	sub.w	r0, r0, sl
 800b3e8:	2240      	movs	r2, #64	@ 0x40
 800b3ea:	4082      	lsls	r2, r0
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	3401      	adds	r4, #1
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f6:	4829      	ldr	r0, [pc, #164]	@ (800b49c <_vfiprintf_r+0x220>)
 800b3f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3fc:	2206      	movs	r2, #6
 800b3fe:	f7f4 fef7 	bl	80001f0 <memchr>
 800b402:	2800      	cmp	r0, #0
 800b404:	d03f      	beq.n	800b486 <_vfiprintf_r+0x20a>
 800b406:	4b26      	ldr	r3, [pc, #152]	@ (800b4a0 <_vfiprintf_r+0x224>)
 800b408:	bb1b      	cbnz	r3, 800b452 <_vfiprintf_r+0x1d6>
 800b40a:	9b03      	ldr	r3, [sp, #12]
 800b40c:	3307      	adds	r3, #7
 800b40e:	f023 0307 	bic.w	r3, r3, #7
 800b412:	3308      	adds	r3, #8
 800b414:	9303      	str	r3, [sp, #12]
 800b416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b418:	443b      	add	r3, r7
 800b41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b41c:	e76a      	b.n	800b2f4 <_vfiprintf_r+0x78>
 800b41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b422:	460c      	mov	r4, r1
 800b424:	2001      	movs	r0, #1
 800b426:	e7a8      	b.n	800b37a <_vfiprintf_r+0xfe>
 800b428:	2300      	movs	r3, #0
 800b42a:	3401      	adds	r4, #1
 800b42c:	9305      	str	r3, [sp, #20]
 800b42e:	4619      	mov	r1, r3
 800b430:	f04f 0c0a 	mov.w	ip, #10
 800b434:	4620      	mov	r0, r4
 800b436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b43a:	3a30      	subs	r2, #48	@ 0x30
 800b43c:	2a09      	cmp	r2, #9
 800b43e:	d903      	bls.n	800b448 <_vfiprintf_r+0x1cc>
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0c6      	beq.n	800b3d2 <_vfiprintf_r+0x156>
 800b444:	9105      	str	r1, [sp, #20]
 800b446:	e7c4      	b.n	800b3d2 <_vfiprintf_r+0x156>
 800b448:	fb0c 2101 	mla	r1, ip, r1, r2
 800b44c:	4604      	mov	r4, r0
 800b44e:	2301      	movs	r3, #1
 800b450:	e7f0      	b.n	800b434 <_vfiprintf_r+0x1b8>
 800b452:	ab03      	add	r3, sp, #12
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	462a      	mov	r2, r5
 800b458:	4b12      	ldr	r3, [pc, #72]	@ (800b4a4 <_vfiprintf_r+0x228>)
 800b45a:	a904      	add	r1, sp, #16
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7fb ff83 	bl	8007368 <_printf_float>
 800b462:	4607      	mov	r7, r0
 800b464:	1c78      	adds	r0, r7, #1
 800b466:	d1d6      	bne.n	800b416 <_vfiprintf_r+0x19a>
 800b468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b46a:	07d9      	lsls	r1, r3, #31
 800b46c:	d405      	bmi.n	800b47a <_vfiprintf_r+0x1fe>
 800b46e:	89ab      	ldrh	r3, [r5, #12]
 800b470:	059a      	lsls	r2, r3, #22
 800b472:	d402      	bmi.n	800b47a <_vfiprintf_r+0x1fe>
 800b474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b476:	f7fc fef7 	bl	8008268 <__retarget_lock_release_recursive>
 800b47a:	89ab      	ldrh	r3, [r5, #12]
 800b47c:	065b      	lsls	r3, r3, #25
 800b47e:	f53f af1f 	bmi.w	800b2c0 <_vfiprintf_r+0x44>
 800b482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b484:	e71e      	b.n	800b2c4 <_vfiprintf_r+0x48>
 800b486:	ab03      	add	r3, sp, #12
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	462a      	mov	r2, r5
 800b48c:	4b05      	ldr	r3, [pc, #20]	@ (800b4a4 <_vfiprintf_r+0x228>)
 800b48e:	a904      	add	r1, sp, #16
 800b490:	4630      	mov	r0, r6
 800b492:	f7fc fa01 	bl	8007898 <_printf_i>
 800b496:	e7e4      	b.n	800b462 <_vfiprintf_r+0x1e6>
 800b498:	0800bb61 	.word	0x0800bb61
 800b49c:	0800bb6b 	.word	0x0800bb6b
 800b4a0:	08007369 	.word	0x08007369
 800b4a4:	0800b259 	.word	0x0800b259
 800b4a8:	0800bb67 	.word	0x0800bb67

0800b4ac <__swbuf_r>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	460e      	mov	r6, r1
 800b4b0:	4614      	mov	r4, r2
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	b118      	cbz	r0, 800b4be <__swbuf_r+0x12>
 800b4b6:	6a03      	ldr	r3, [r0, #32]
 800b4b8:	b90b      	cbnz	r3, 800b4be <__swbuf_r+0x12>
 800b4ba:	f7fc fdad 	bl	8008018 <__sinit>
 800b4be:	69a3      	ldr	r3, [r4, #24]
 800b4c0:	60a3      	str	r3, [r4, #8]
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	071a      	lsls	r2, r3, #28
 800b4c6:	d501      	bpl.n	800b4cc <__swbuf_r+0x20>
 800b4c8:	6923      	ldr	r3, [r4, #16]
 800b4ca:	b943      	cbnz	r3, 800b4de <__swbuf_r+0x32>
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	f000 f82a 	bl	800b528 <__swsetup_r>
 800b4d4:	b118      	cbz	r0, 800b4de <__swbuf_r+0x32>
 800b4d6:	f04f 37ff 	mov.w	r7, #4294967295
 800b4da:	4638      	mov	r0, r7
 800b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	6922      	ldr	r2, [r4, #16]
 800b4e2:	1a98      	subs	r0, r3, r2
 800b4e4:	6963      	ldr	r3, [r4, #20]
 800b4e6:	b2f6      	uxtb	r6, r6
 800b4e8:	4283      	cmp	r3, r0
 800b4ea:	4637      	mov	r7, r6
 800b4ec:	dc05      	bgt.n	800b4fa <__swbuf_r+0x4e>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f7ff fa6b 	bl	800a9cc <_fflush_r>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d1ed      	bne.n	800b4d6 <__swbuf_r+0x2a>
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	60a3      	str	r3, [r4, #8]
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	6022      	str	r2, [r4, #0]
 800b506:	701e      	strb	r6, [r3, #0]
 800b508:	6962      	ldr	r2, [r4, #20]
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d004      	beq.n	800b51a <__swbuf_r+0x6e>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	07db      	lsls	r3, r3, #31
 800b514:	d5e1      	bpl.n	800b4da <__swbuf_r+0x2e>
 800b516:	2e0a      	cmp	r6, #10
 800b518:	d1df      	bne.n	800b4da <__swbuf_r+0x2e>
 800b51a:	4621      	mov	r1, r4
 800b51c:	4628      	mov	r0, r5
 800b51e:	f7ff fa55 	bl	800a9cc <_fflush_r>
 800b522:	2800      	cmp	r0, #0
 800b524:	d0d9      	beq.n	800b4da <__swbuf_r+0x2e>
 800b526:	e7d6      	b.n	800b4d6 <__swbuf_r+0x2a>

0800b528 <__swsetup_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4b29      	ldr	r3, [pc, #164]	@ (800b5d0 <__swsetup_r+0xa8>)
 800b52c:	4605      	mov	r5, r0
 800b52e:	6818      	ldr	r0, [r3, #0]
 800b530:	460c      	mov	r4, r1
 800b532:	b118      	cbz	r0, 800b53c <__swsetup_r+0x14>
 800b534:	6a03      	ldr	r3, [r0, #32]
 800b536:	b90b      	cbnz	r3, 800b53c <__swsetup_r+0x14>
 800b538:	f7fc fd6e 	bl	8008018 <__sinit>
 800b53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b540:	0719      	lsls	r1, r3, #28
 800b542:	d422      	bmi.n	800b58a <__swsetup_r+0x62>
 800b544:	06da      	lsls	r2, r3, #27
 800b546:	d407      	bmi.n	800b558 <__swsetup_r+0x30>
 800b548:	2209      	movs	r2, #9
 800b54a:	602a      	str	r2, [r5, #0]
 800b54c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	f04f 30ff 	mov.w	r0, #4294967295
 800b556:	e033      	b.n	800b5c0 <__swsetup_r+0x98>
 800b558:	0758      	lsls	r0, r3, #29
 800b55a:	d512      	bpl.n	800b582 <__swsetup_r+0x5a>
 800b55c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b55e:	b141      	cbz	r1, 800b572 <__swsetup_r+0x4a>
 800b560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b564:	4299      	cmp	r1, r3
 800b566:	d002      	beq.n	800b56e <__swsetup_r+0x46>
 800b568:	4628      	mov	r0, r5
 800b56a:	f7fd fcd1 	bl	8008f10 <_free_r>
 800b56e:	2300      	movs	r3, #0
 800b570:	6363      	str	r3, [r4, #52]	@ 0x34
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b578:	81a3      	strh	r3, [r4, #12]
 800b57a:	2300      	movs	r3, #0
 800b57c:	6063      	str	r3, [r4, #4]
 800b57e:	6923      	ldr	r3, [r4, #16]
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	f043 0308 	orr.w	r3, r3, #8
 800b588:	81a3      	strh	r3, [r4, #12]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	b94b      	cbnz	r3, 800b5a2 <__swsetup_r+0x7a>
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b598:	d003      	beq.n	800b5a2 <__swsetup_r+0x7a>
 800b59a:	4621      	mov	r1, r4
 800b59c:	4628      	mov	r0, r5
 800b59e:	f000 f883 	bl	800b6a8 <__smakebuf_r>
 800b5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5a6:	f013 0201 	ands.w	r2, r3, #1
 800b5aa:	d00a      	beq.n	800b5c2 <__swsetup_r+0x9a>
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	60a2      	str	r2, [r4, #8]
 800b5b0:	6962      	ldr	r2, [r4, #20]
 800b5b2:	4252      	negs	r2, r2
 800b5b4:	61a2      	str	r2, [r4, #24]
 800b5b6:	6922      	ldr	r2, [r4, #16]
 800b5b8:	b942      	cbnz	r2, 800b5cc <__swsetup_r+0xa4>
 800b5ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b5be:	d1c5      	bne.n	800b54c <__swsetup_r+0x24>
 800b5c0:	bd38      	pop	{r3, r4, r5, pc}
 800b5c2:	0799      	lsls	r1, r3, #30
 800b5c4:	bf58      	it	pl
 800b5c6:	6962      	ldrpl	r2, [r4, #20]
 800b5c8:	60a2      	str	r2, [r4, #8]
 800b5ca:	e7f4      	b.n	800b5b6 <__swsetup_r+0x8e>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e7f7      	b.n	800b5c0 <__swsetup_r+0x98>
 800b5d0:	20000028 	.word	0x20000028

0800b5d4 <_raise_r>:
 800b5d4:	291f      	cmp	r1, #31
 800b5d6:	b538      	push	{r3, r4, r5, lr}
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	d904      	bls.n	800b5e8 <_raise_r+0x14>
 800b5de:	2316      	movs	r3, #22
 800b5e0:	6003      	str	r3, [r0, #0]
 800b5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b5ea:	b112      	cbz	r2, 800b5f2 <_raise_r+0x1e>
 800b5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5f0:	b94b      	cbnz	r3, 800b606 <_raise_r+0x32>
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f000 f830 	bl	800b658 <_getpid_r>
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b602:	f000 b817 	b.w	800b634 <_kill_r>
 800b606:	2b01      	cmp	r3, #1
 800b608:	d00a      	beq.n	800b620 <_raise_r+0x4c>
 800b60a:	1c59      	adds	r1, r3, #1
 800b60c:	d103      	bne.n	800b616 <_raise_r+0x42>
 800b60e:	2316      	movs	r3, #22
 800b610:	6003      	str	r3, [r0, #0]
 800b612:	2001      	movs	r0, #1
 800b614:	e7e7      	b.n	800b5e6 <_raise_r+0x12>
 800b616:	2100      	movs	r1, #0
 800b618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b61c:	4620      	mov	r0, r4
 800b61e:	4798      	blx	r3
 800b620:	2000      	movs	r0, #0
 800b622:	e7e0      	b.n	800b5e6 <_raise_r+0x12>

0800b624 <raise>:
 800b624:	4b02      	ldr	r3, [pc, #8]	@ (800b630 <raise+0xc>)
 800b626:	4601      	mov	r1, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f7ff bfd3 	b.w	800b5d4 <_raise_r>
 800b62e:	bf00      	nop
 800b630:	20000028 	.word	0x20000028

0800b634 <_kill_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	@ (800b654 <_kill_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f6 fc39 	bl	8001eb8 <_kill>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_kill_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_kill_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	200005b8 	.word	0x200005b8

0800b658 <_getpid_r>:
 800b658:	f7f6 bc26 	b.w	8001ea8 <_getpid>

0800b65c <__swhatbuf_r>:
 800b65c:	b570      	push	{r4, r5, r6, lr}
 800b65e:	460c      	mov	r4, r1
 800b660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b664:	2900      	cmp	r1, #0
 800b666:	b096      	sub	sp, #88	@ 0x58
 800b668:	4615      	mov	r5, r2
 800b66a:	461e      	mov	r6, r3
 800b66c:	da0d      	bge.n	800b68a <__swhatbuf_r+0x2e>
 800b66e:	89a3      	ldrh	r3, [r4, #12]
 800b670:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b674:	f04f 0100 	mov.w	r1, #0
 800b678:	bf14      	ite	ne
 800b67a:	2340      	movne	r3, #64	@ 0x40
 800b67c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b680:	2000      	movs	r0, #0
 800b682:	6031      	str	r1, [r6, #0]
 800b684:	602b      	str	r3, [r5, #0]
 800b686:	b016      	add	sp, #88	@ 0x58
 800b688:	bd70      	pop	{r4, r5, r6, pc}
 800b68a:	466a      	mov	r2, sp
 800b68c:	f000 f848 	bl	800b720 <_fstat_r>
 800b690:	2800      	cmp	r0, #0
 800b692:	dbec      	blt.n	800b66e <__swhatbuf_r+0x12>
 800b694:	9901      	ldr	r1, [sp, #4]
 800b696:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b69a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b69e:	4259      	negs	r1, r3
 800b6a0:	4159      	adcs	r1, r3
 800b6a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6a6:	e7eb      	b.n	800b680 <__swhatbuf_r+0x24>

0800b6a8 <__smakebuf_r>:
 800b6a8:	898b      	ldrh	r3, [r1, #12]
 800b6aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ac:	079d      	lsls	r5, r3, #30
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	d507      	bpl.n	800b6c4 <__smakebuf_r+0x1c>
 800b6b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	6123      	str	r3, [r4, #16]
 800b6bc:	2301      	movs	r3, #1
 800b6be:	6163      	str	r3, [r4, #20]
 800b6c0:	b003      	add	sp, #12
 800b6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6c4:	ab01      	add	r3, sp, #4
 800b6c6:	466a      	mov	r2, sp
 800b6c8:	f7ff ffc8 	bl	800b65c <__swhatbuf_r>
 800b6cc:	9f00      	ldr	r7, [sp, #0]
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f7fb fd1c 	bl	8007110 <_malloc_r>
 800b6d8:	b948      	cbnz	r0, 800b6ee <__smakebuf_r+0x46>
 800b6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6de:	059a      	lsls	r2, r3, #22
 800b6e0:	d4ee      	bmi.n	800b6c0 <__smakebuf_r+0x18>
 800b6e2:	f023 0303 	bic.w	r3, r3, #3
 800b6e6:	f043 0302 	orr.w	r3, r3, #2
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	e7e2      	b.n	800b6b4 <__smakebuf_r+0xc>
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	6020      	str	r0, [r4, #0]
 800b6f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	9b01      	ldr	r3, [sp, #4]
 800b6fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b6fe:	b15b      	cbz	r3, 800b718 <__smakebuf_r+0x70>
 800b700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b704:	4630      	mov	r0, r6
 800b706:	f000 f81d 	bl	800b744 <_isatty_r>
 800b70a:	b128      	cbz	r0, 800b718 <__smakebuf_r+0x70>
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	f023 0303 	bic.w	r3, r3, #3
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	81a3      	strh	r3, [r4, #12]
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	431d      	orrs	r5, r3
 800b71c:	81a5      	strh	r5, [r4, #12]
 800b71e:	e7cf      	b.n	800b6c0 <__smakebuf_r+0x18>

0800b720 <_fstat_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d07      	ldr	r5, [pc, #28]	@ (800b740 <_fstat_r+0x20>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	4611      	mov	r1, r2
 800b72c:	602b      	str	r3, [r5, #0]
 800b72e:	f7f6 fc23 	bl	8001f78 <_fstat>
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	d102      	bne.n	800b73c <_fstat_r+0x1c>
 800b736:	682b      	ldr	r3, [r5, #0]
 800b738:	b103      	cbz	r3, 800b73c <_fstat_r+0x1c>
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	bd38      	pop	{r3, r4, r5, pc}
 800b73e:	bf00      	nop
 800b740:	200005b8 	.word	0x200005b8

0800b744 <_isatty_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d06      	ldr	r5, [pc, #24]	@ (800b760 <_isatty_r+0x1c>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f6 fc22 	bl	8001f98 <_isatty>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_isatty_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_isatty_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	200005b8 	.word	0x200005b8

0800b764 <_init>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	bf00      	nop
 800b768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76a:	bc08      	pop	{r3}
 800b76c:	469e      	mov	lr, r3
 800b76e:	4770      	bx	lr

0800b770 <_fini>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	bf00      	nop
 800b774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b776:	bc08      	pop	{r3}
 800b778:	469e      	mov	lr, r3
 800b77a:	4770      	bx	lr
