
Home Alarm System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b924  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800bab8  0800bab8  0000cab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf38  0800bf38  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf38  0800bf38  0000cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf40  0800bf40  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf40  0800bf40  0000cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf44  0800bf44  0000cf44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800bf48  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001e8  0800c130  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  0800c130  0000d598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001469b  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae4  00000000  00000000  000218b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00024398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9b  00000000  00000000  00025630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e14a  00000000  00000000  000264cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178d4  00000000  00000000  00044615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afcd7  00000000  00000000  0005bee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bbc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006398  00000000  00000000  0010bc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00111f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba9c 	.word	0x0800ba9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ba9c 	.word	0x0800ba9c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <System_Init>:

char* user_input;
// char buffer[5];
system_state* alarm_system;

void System_Init(void) {
 8000d14:	b598      	push	{r3, r4, r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	alarm_system = (system_state*) calloc(1, sizeof(system_state));
 8000d18:	2108      	movs	r1, #8
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f006 fb4e 	bl	80073bc <calloc>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <System_Init+0x4c>)
 8000d26:	601a      	str	r2, [r3, #0]
	alarm_system->password = malloc(sizeof(char) * 5);
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <System_Init+0x4c>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	2005      	movs	r0, #5
 8000d2e:	f006 fb61 	bl	80073f4 <malloc>
 8000d32:	4603      	mov	r3, r0
 8000d34:	6023      	str	r3, [r4, #0]
	user_input = malloc(sizeof(char) * 5);
 8000d36:	2005      	movs	r0, #5
 8000d38:	f006 fb5c 	bl	80073f4 <malloc>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <System_Init+0x50>)
 8000d42:	601a      	str	r2, [r3, #0]

	alarm_system->state = ready;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <System_Init+0x4c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	711a      	strb	r2, [r3, #4]
	alarm_system->password= "1001";
 8000d4c:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <System_Init+0x4c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <System_Init+0x54>)
 8000d52:	601a      	str	r2, [r3, #0]

	user_input = "\0";
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <System_Init+0x50>)
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <System_Init+0x58>)
 8000d58:	601a      	str	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	bd98      	pop	{r3, r4, r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000208 	.word	0x20000208
 8000d64:	20000204 	.word	0x20000204
 8000d68:	0800bab8 	.word	0x0800bab8
 8000d6c:	0800bac0 	.word	0x0800bac0

08000d70 <Check_Password>:

bool Check_Password(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if (!strcmp(alarm_system->password, user_input))		return true;
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <Check_Password+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <Check_Password+0x2c>)
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fa25 	bl	80001d0 <strcmp>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <Check_Password+0x20>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <Check_Password+0x22>
	return false;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000208 	.word	0x20000208
 8000d9c:	20000204 	.word	0x20000204

08000da0 <Lock_System>:

bool Lock_System(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == ready) {
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <Lock_System+0x28>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d105      	bne.n	8000dba <Lock_System+0x1a>
		alarm_system->state = set;
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <Lock_System+0x28>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	711a      	strb	r2, [r3, #4]
		return true;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <Lock_System+0x1c>
	}
	return false;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000208 	.word	0x20000208

08000dcc <Unlock_System>:

bool Unlock_System(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == set && Check_Password()) {
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <Unlock_System+0x2c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	791b      	ldrb	r3, [r3, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10a      	bne.n	8000df0 <Unlock_System+0x24>
 8000dda:	f7ff ffc9 	bl	8000d70 <Check_Password>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <Unlock_System+0x24>
		alarm_system->state = ready;
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <Unlock_System+0x2c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	711a      	strb	r2, [r3, #4]
		return true;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <Unlock_System+0x26>
	}
	return false;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000208 	.word	0x20000208

08000dfc <HD44780_Init>:
	0b01010,
	0b00100
};

void HD44780_Init(uint8_t rows)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000e06:	4a38      	ldr	r2, [pc, #224]	@ (8000ee8 <HD44780_Init+0xec>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000e0c:	4b37      	ldr	r3, [pc, #220]	@ (8000eec <HD44780_Init+0xf0>)
 8000e0e:	2208      	movs	r2, #8
 8000e10:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000e12:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HD44780_Init+0xec>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d907      	bls.n	8000e30 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000e20:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e006      	b.n	8000e3e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e3c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000e3e:	f000 f985 	bl	800114c <DelayInit>
  HAL_Delay(50);
 8000e42:	2032      	movs	r0, #50	@ 0x32
 8000e44:	f001 fbb6 	bl	80025b4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <HD44780_Init+0xf0>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f943 	bl	80010d8 <ExpanderWrite>
  HAL_Delay(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e56:	f001 fbad 	bl	80025b4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000e5a:	2030      	movs	r0, #48	@ 0x30
 8000e5c:	f000 f92b 	bl	80010b6 <Write4Bits>
  DelayUS(4500);
 8000e60:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e64:	f000 f99c 	bl	80011a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e68:	2030      	movs	r0, #48	@ 0x30
 8000e6a:	f000 f924 	bl	80010b6 <Write4Bits>
  DelayUS(4500);
 8000e6e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e72:	f000 f995 	bl	80011a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e76:	2030      	movs	r0, #48	@ 0x30
 8000e78:	f000 f91d 	bl	80010b6 <Write4Bits>
  DelayUS(4500);
 8000e7c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e80:	f000 f98e 	bl	80011a0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000e84:	2020      	movs	r0, #32
 8000e86:	f000 f916 	bl	80010b6 <Write4Bits>
  DelayUS(100);
 8000e8a:	2064      	movs	r0, #100	@ 0x64
 8000e8c:	f000 f988 	bl	80011a0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f8ce 	bl	800103c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <HD44780_Init+0xf8>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000ea6:	f000 f875 	bl	8000f94 <HD44780_Display>
  HD44780_Clear();
 8000eaa:	f000 f82b 	bl	8000f04 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HD44780_Init+0xfc>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HD44780_Init+0xfc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8bc 	bl	800103c <SendCommand>
  DelayUS(4500);
 8000ec4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ec8:	f000 f96a 	bl	80011a0 <DelayUS>

  HD44780_CreateSpecialChar(0, up_arrow);
 8000ecc:	490b      	ldr	r1, [pc, #44]	@ (8000efc <HD44780_Init+0x100>)
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f876 	bl	8000fc0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, down_arrow);
 8000ed4:	490a      	ldr	r1, [pc, #40]	@ (8000f00 <HD44780_Init+0x104>)
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 f872 	bl	8000fc0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000edc:	f000 f81d 	bl	8000f1a <HD44780_Home>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000020f 	.word	0x2000020f
 8000eec:	20000210 	.word	0x20000210
 8000ef0:	2000020c 	.word	0x2000020c
 8000ef4:	2000020d 	.word	0x2000020d
 8000ef8:	2000020e 	.word	0x2000020e
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008

08000f04 <HD44780_Clear>:

void HD44780_Clear()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f000 f897 	bl	800103c <SendCommand>
  DelayUS(2000);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f12:	f000 f945 	bl	80011a0 <DelayUS>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HD44780_Home>:

void HD44780_Home()
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f000 f88c 	bl	800103c <SendCommand>
  DelayUS(2000);
 8000f24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f28:	f000 f93a 	bl	80011a0 <DelayUS>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HD44780_SetCursor+0x5c>)
 8000f42:	f107 0408 	add.w	r4, r7, #8
 8000f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HD44780_SetCursor+0x60>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d303      	bcc.n	8000f5e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HD44780_SetCursor+0x60>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	3318      	adds	r3, #24
 8000f64:	443b      	add	r3, r7
 8000f66:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f85d 	bl	800103c <SendCommand>
}
 8000f82:	bf00      	nop
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	0800bac4 	.word	0x0800bac4
 8000f90:	2000020f 	.word	0x2000020f

08000f94 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HD44780_Display+0x28>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HD44780_Display+0x28>)
 8000fa4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HD44780_Display+0x28>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f843 	bl	800103c <SendCommand>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000020d 	.word	0x2000020d

08000fc0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f82a 	bl	800103c <SendCommand>
  for (int i=0; i<8; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e009      	b.n	8001002 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82e 	bl	8001058 <SendChar>
  for (int i=0; i<8; i++)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2b07      	cmp	r3, #7
 8001006:	ddf2      	ble.n	8000fee <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800101a:	e006      	b.n	800102a <HD44780_PrintStr+0x18>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f817 	bl	8001058 <SendChar>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f4      	bne.n	800101c <HD44780_PrintStr+0xa>
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f812 	bl	8001074 <Send>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f804 	bl	8001074 <Send>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f023 030f 	bic.w	r3, r3, #15
 800108a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	4313      	orrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f80b 	bl	80010b6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80010a0:	7bba      	ldrb	r2, [r7, #14]
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f804 	bl	80010b6 <Write4Bits>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f808 	bl	80010d8 <ExpanderWrite>
  PulseEnable(value);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f820 	bl	8001110 <PulseEnable>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <ExpanderWrite+0x30>)
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80010ee:	f107 020f 	add.w	r2, r7, #15
 80010f2:	230a      	movs	r3, #10
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	214e      	movs	r1, #78	@ 0x4e
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <ExpanderWrite+0x34>)
 80010fc:	f002 fc2c 	bl	8003958 <HAL_I2C_Master_Transmit>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000210 	.word	0x20000210
 800110c:	20000264 	.word	0x20000264

08001110 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffd8 	bl	80010d8 <ExpanderWrite>
  DelayUS(20);
 8001128:	2014      	movs	r0, #20
 800112a:	f000 f839 	bl	80011a0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffce 	bl	80010d8 <ExpanderWrite>
  DelayUS(20);
 800113c:	2014      	movs	r0, #20
 800113e:	f000 f82f 	bl	80011a0 <DelayUS>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <DelayInit>:

static void DelayInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <DelayInit+0x4c>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <DelayInit+0x4c>)
 8001156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800115a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <DelayInit+0x4c>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <DelayInit+0x4c>)
 8001162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001166:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <DelayInit+0x50>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <DelayInit+0x50>)
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <DelayInit+0x50>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a08      	ldr	r2, [pc, #32]	@ (800119c <DelayInit+0x50>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <DelayInit+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001186:	bf00      	nop
  __ASM volatile ("NOP");
 8001188:	bf00      	nop
  __ASM volatile ("NOP");
 800118a:	bf00      	nop
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000edf0 	.word	0xe000edf0
 800119c:	e0001000 	.word	0xe0001000

080011a0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <DelayUS+0x44>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <DelayUS+0x48>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0c9a      	lsrs	r2, r3, #18
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <DelayUS+0x4c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <DelayUS+0x4c>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f6      	bhi.n	80011c2 <DelayUS+0x22>
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000014 	.word	0x20000014
 80011e8:	431bde83 	.word	0x431bde83
 80011ec:	e0001000 	.word	0xe0001000

080011f0 <AlarmPeripheral_Init>:
void AlarmIO_Test(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AlarmPeripheral_Init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	// Set up timer 1 PWM and timer 2 and 6 interrupts
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <AlarmPeripheral_Init+0x54>)
 80011f8:	f004 fc6c 	bl	8005ad4 <HAL_TIM_PWM_Start>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2036      	movs	r0, #54	@ 0x36
 8001202:	f002 f912 	bl	800342a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001206:	2036      	movs	r0, #54	@ 0x36
 8001208:	f002 f92b 	bl	8003462 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <AlarmPeripheral_Init+0x58>)
 800120e:	f004 fbb5 	bl	800597c <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	201c      	movs	r0, #28
 8001218:	f002 f907 	bl	800342a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800121c:	201c      	movs	r0, #28
 800121e:	f002 f920 	bl	8003462 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 8001222:	480a      	ldr	r0, [pc, #40]	@ (800124c <AlarmPeripheral_Init+0x5c>)
 8001224:	f004 fbaa 	bl	800597c <HAL_TIM_Base_Start_IT>

	// Set up LCD screen
	HD44780_Init(2);
 8001228:	2002      	movs	r0, #2
 800122a:	f7ff fde7 	bl	8000dfc <HD44780_Init>
	HD44780_Clear();
 800122e:	f7ff fe69 	bl	8000f04 <HD44780_Clear>

	// Set Ready Mode LED
	HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2120      	movs	r1, #32
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f002 fab7 	bl	80037ac <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200002b8 	.word	0x200002b8
 8001248:	20000350 	.word	0x20000350
 800124c:	20000304 	.word	0x20000304

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f001 f948 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f814 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 fa56 	bl	800170c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001260:	f000 f872 	bl	8001348 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001264:	f000 f8cc 	bl	8001400 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001268:	f000 f90a 	bl	8001480 <MX_TIM1_Init>
  MX_TIM2_Init();
 800126c:	f000 f998 	bl	80015a0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001270:	f000 fa1c 	bl	80016ac <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001274:	f000 f9e2 	bl	800163c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 8001278:	f7ff fd4c 	bl	8000d14 <System_Init>
  AlarmPeripheral_Init();
 800127c:	f7ff ffb8 	bl	80011f0 <AlarmPeripheral_Init>
//  AlarmIO_Test();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <main+0x30>

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b09c      	sub	sp, #112	@ 0x70
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800128e:	2228      	movs	r2, #40	@ 0x28
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f007 f8f5 	bl	8008482 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2234      	movs	r2, #52	@ 0x34
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 f8e7 	bl	8008482 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012b4:	2303      	movs	r3, #3
 80012b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c2:	2301      	movs	r3, #1
 80012c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c6:	2310      	movs	r3, #16
 80012c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ff04 	bl	80040ec <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012ea:	f000 faa1 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001304:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f003 ff2c 	bl	8005168 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001316:	f000 fa8b 	bl	8001830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 800131a:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 800131e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800132c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4618      	mov	r0, r3
 8001332:	f004 f939 	bl	80055a8 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800133c:	f000 fa78 	bl	8001830 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3770      	adds	r7, #112	@ 0x70
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001360:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001364:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001366:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136c:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001372:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001378:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800137a:	2200      	movs	r2, #0
 800137c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800138e:	2201      	movs	r2, #1
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800139a:	2201      	movs	r2, #1
 800139c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013a8:	2204      	movs	r2, #4
 80013aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b8:	4810      	ldr	r0, [pc, #64]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013ba:	f001 f91f 	bl	80025fc <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80013c4:	f000 fa34 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013e6:	f001 fbc9 	bl	8002b7c <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013f0:	f000 fa1e 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000214 	.word	0x20000214

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <MX_I2C1_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <MX_I2C1_Init+0x74>)
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <MX_I2C1_Init+0x7c>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001418:	2201      	movs	r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143a:	480e      	ldr	r0, [pc, #56]	@ (8001474 <MX_I2C1_Init+0x74>)
 800143c:	f002 f9f1 	bl	8003822 <HAL_I2C_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001446:	f000 f9f3 	bl	8001830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4809      	ldr	r0, [pc, #36]	@ (8001474 <MX_I2C1_Init+0x74>)
 800144e:	f002 fdb5 	bl	8003fbc <HAL_I2CEx_ConfigAnalogFilter>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001458:	f000 f9ea 	bl	8001830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001460:	f002 fdf7 	bl	8004052 <HAL_I2CEx_ConfigDigitalFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f9e1 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000264 	.word	0x20000264
 8001478:	40005400 	.word	0x40005400
 800147c:	00201d2b 	.word	0x00201d2b

08001480 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b096      	sub	sp, #88	@ 0x58
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001486:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	222c      	movs	r2, #44	@ 0x2c
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f006 ffe8 	bl	8008482 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b2:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014b4:	4a39      	ldr	r2, [pc, #228]	@ (800159c <MX_TIM1_Init+0x11c>)
 80014b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014ba:	221e      	movs	r2, #30
 80014bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3522;
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014c6:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 80014ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014de:	482e      	ldr	r0, [pc, #184]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014e0:	f004 faa0 	bl	8005a24 <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 f9a1 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014fe:	4619      	mov	r1, r3
 8001500:	4825      	ldr	r0, [pc, #148]	@ (8001598 <MX_TIM1_Init+0x118>)
 8001502:	f005 fabf 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800150c:	f000 f990 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001510:	2360      	movs	r3, #96	@ 0x60
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	@ (8001598 <MX_TIM1_Init+0x118>)
 8001536:	f004 fcb5 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001540:	f000 f976 	bl	8001830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001566:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4807      	ldr	r0, [pc, #28]	@ (8001598 <MX_TIM1_Init+0x118>)
 800157a:	f005 fae9 	bl	8006b50 <HAL_TIMEx_ConfigBreakDeadTime>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001584:	f000 f954 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001588:	4803      	ldr	r0, [pc, #12]	@ (8001598 <MX_TIM1_Init+0x118>)
 800158a:	f000 fa5b 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 800158e:	bf00      	nop
 8001590:	3758      	adds	r7, #88	@ 0x58
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200002b8 	.word	0x200002b8
 800159c:	40012c00 	.word	0x40012c00

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015c8:	221e      	movs	r2, #30
 80015ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3522;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015d4:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 80015d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e6:	4814      	ldr	r0, [pc, #80]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015e8:	f004 f970 	bl	80058cc <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015f2:	f000 f91d 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <MX_TIM2_Init+0x98>)
 8001604:	f004 fd62 	bl	80060cc <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800160e:	f000 f90f 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <MX_TIM2_Init+0x98>)
 8001620:	f005 fa30 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 f901 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000304 	.word	0x20000304

0800163c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800164e:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <MX_TIM6_Init+0x6c>)
 8001650:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_TIM6_Init+0x68>)
 8001654:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001658:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1799;
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MX_TIM6_Init+0x68>)
 8001662:	f240 7207 	movw	r2, #1799	@ 0x707
 8001666:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <MX_TIM6_Init+0x68>)
 8001670:	f004 f92c 	bl	80058cc <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800167a:	f000 f8d9 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800168c:	f005 f9fa 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001696:	f000 f8cb 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000350 	.word	0x20000350
 80016a8:	40001000 	.word	0x40001000

080016ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <MX_USART2_UART_Init+0x5c>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016b8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80016bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016f0:	f005 fac4 	bl	8006c7c <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016fa:	f000 f899 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000039c 	.word	0x2000039c
 8001708:	40004400 	.word	0x40004400

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001722:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a3f      	ldr	r2, [pc, #252]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001728:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800172c:	6153      	str	r3, [r2, #20]
 800172e:	4b3d      	ldr	r3, [pc, #244]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <MX_GPIO_Init+0x118>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a39      	ldr	r2, [pc, #228]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001744:	6153      	str	r3, [r2, #20]
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a33      	ldr	r2, [pc, #204]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <MX_GPIO_Init+0x118>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a2d      	ldr	r2, [pc, #180]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RM_Pin|SM_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2160      	movs	r1, #96	@ 0x60
 8001786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178a:	f002 f80f 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NP1_Pin NP2_Pin NP3_Pin NP4_Pin
                           NP5_Pin NP6_Pin NP7_Pin NP8_Pin
                           NP9_Pin NP0_Pin */
  GPIO_InitStruct.Pin = NP1_Pin|NP2_Pin|NP3_Pin|NP4_Pin
 800178e:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8001792:	617b      	str	r3, [r7, #20]
                          |NP5_Pin|NP6_Pin|NP7_Pin|NP8_Pin
                          |NP9_Pin|NP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4821      	ldr	r0, [pc, #132]	@ (8001828 <MX_GPIO_Init+0x11c>)
 80017a4:	f001 fe78 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : RM_Pin SM_Pin */
  GPIO_InitStruct.Pin = RM_Pin|SM_Pin;
 80017a8:	2360      	movs	r3, #96	@ 0x60
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c2:	f001 fe69 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LUB_Pin */
  GPIO_InitStruct.Pin = LUB_Pin;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LUB_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4814      	ldr	r0, [pc, #80]	@ (800182c <MX_GPIO_Init+0x120>)
 80017dc:	f001 fe5c 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPB_Pin */
  GPIO_InitStruct.Pin = RPB_Pin;
 80017e0:	2302      	movs	r3, #2
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPB_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	@ (800182c <MX_GPIO_Init+0x120>)
 80017f6:	f001 fe4f 	bl	8003498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2006      	movs	r0, #6
 8001800:	f001 fe13 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001804:	2006      	movs	r0, #6
 8001806:	f001 fe2c 	bl	8003462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2007      	movs	r0, #7
 8001810:	f001 fe0b 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001814:	2007      	movs	r0, #7
 8001816:	f001 fe24 	bl	8003462 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	48000800 	.word	0x48000800
 800182c:	48000400 	.word	0x48000400

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <Error_Handler+0x8>

0800183c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_MspInit+0x44>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_MspInit+0x44>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_MspInit+0x44>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_MspInit+0x44>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_MspInit+0x44>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_MspInit+0x44>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018a4:	d124      	bne.n	80018f0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d6:	2301      	movs	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f001 fdd4 	bl	8003498 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <HAL_I2C_MspInit+0x7c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d127      	bne.n	800196e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a16      	ldr	r2, [pc, #88]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <HAL_I2C_MspInit+0x80>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001936:	23c0      	movs	r3, #192	@ 0xc0
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193a:	2312      	movs	r3, #18
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001946:	2304      	movs	r3, #4
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	480b      	ldr	r0, [pc, #44]	@ (8001980 <HAL_I2C_MspInit+0x84>)
 8001952:	f001 fda1 	bl	8003498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <HAL_I2C_MspInit+0x80>)
 800195c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40005400 	.word	0x40005400
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400

08001984 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_TIM_PWM_MspInit+0x38>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800199c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d4:	d114      	bne.n	8001a00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a18      	ldr	r2, [pc, #96]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	201c      	movs	r0, #28
 80019f4:	f001 fd19 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f8:	201c      	movs	r0, #28
 80019fa:	f001 fd32 	bl	8003462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019fe:	e018      	b.n	8001a32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0e      	ldr	r2, [pc, #56]	@ (8001a40 <HAL_TIM_Base_MspInit+0x7c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d113      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2036      	movs	r0, #54	@ 0x36
 8001a28:	f001 fcff 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a2c:	2036      	movs	r0, #54	@ 0x36
 8001a2e:	f001 fd18 	bl	8003462 <HAL_NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40001000 	.word	0x40001000

08001a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_TIM_MspPostInit+0x64>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d11b      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <HAL_TIM_MspPostInit+0x6c>)
 8001a9a:	f001 fcfd 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000800 	.word	0x48000800

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a17      	ldr	r2, [pc, #92]	@ (8001b30 <HAL_UART_MspInit+0x7c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d128      	bne.n	8001b28 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a16      	ldr	r2, [pc, #88]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af8:	6153      	str	r3, [r2, #20]
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b06:	230c      	movs	r3, #12
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b16:	2307      	movs	r3, #7
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b24:	f001 fcb8 	bl	8003498 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	@ 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40004400 	.word	0x40004400
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8e:	f000 fcf1 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	e002      	b.n	8001baa <EXTI0_IRQHandler+0x12>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	ddf7      	ble.n	8001ba4 <EXTI0_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(LUB_GPIO_Port, LUB_Pin)) {
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4836      	ldr	r0, [pc, #216]	@ (8001c90 <EXTI0_IRQHandler+0xf8>)
 8001bb8:	f001 fde0 	bl	800377c <HAL_GPIO_ReadPin>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d05f      	beq.n	8001c82 <EXTI0_IRQHandler+0xea>
		// If the system cannot be locked, try to unlock the system
		Check_IR_Signal();
 8001bc2:	f000 fb73 	bl	80022ac <Check_IR_Signal>

		user_input = buffer;
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <EXTI0_IRQHandler+0xfc>)
 8001bc8:	4a33      	ldr	r2, [pc, #204]	@ (8001c98 <EXTI0_IRQHandler+0x100>)
 8001bca:	601a      	str	r2, [r3, #0]
		// The door has to be closed for the system to be able to lock
		if (raw <= 1000.0 || !Lock_System())	{
 8001bcc:	4b33      	ldr	r3, [pc, #204]	@ (8001c9c <EXTI0_IRQHandler+0x104>)
 8001bce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <EXTI0_IRQHandler+0x108>)
 8001bd8:	f7fe ff9a 	bl	8000b10 <__aeabi_dcmple>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <EXTI0_IRQHandler+0x5a>
 8001be2:	f7ff f8dd 	bl	8000da0 <Lock_System>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d029      	beq.n	8001c46 <EXTI0_IRQHandler+0xae>
			if (Unlock_System()) {
 8001bf2:	f7ff f8eb 	bl	8000dcc <Unlock_System>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01c      	beq.n	8001c36 <EXTI0_IRQHandler+0x9e>
				HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2140      	movs	r1, #64	@ 0x40
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c04:	f001 fdd2 	bl	80037ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c10:	f001 fdcc 	bl	80037ac <HAL_GPIO_WritePin>

				setting = false;
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <EXTI0_IRQHandler+0x10c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
				triggered = false;
 8001c1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <EXTI0_IRQHandler+0x110>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
				alarm_rhythm_counter = 0;
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <EXTI0_IRQHandler+0x114>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
				user_input = NULL;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <EXTI0_IRQHandler+0xfc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
				Generate_Tone(true, OPEN_ON_READY_BEEP_LENGTH);
 8001c2c:	21f7      	movs	r1, #247	@ 0xf7
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f000 fb0a 	bl	8002248 <Generate_Tone>
			if (Unlock_System()) {
 8001c34:	e01d      	b.n	8001c72 <EXTI0_IRQHandler+0xda>
			} else {
				alarm_rhythm_counter = 2;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <EXTI0_IRQHandler+0x114>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
				Generate_Tone(false, OPEN_ON_SET_SILENT_LENGTH);
 8001c3c:	21e3      	movs	r1, #227	@ 0xe3
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fb02 	bl	8002248 <Generate_Tone>
			if (Unlock_System()) {
 8001c44:	e015      	b.n	8001c72 <EXTI0_IRQHandler+0xda>
			}
		} else {
			HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	2140      	movs	r1, #64	@ 0x40
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4e:	f001 fdad 	bl	80037ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2120      	movs	r1, #32
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c5a:	f001 fda7 	bl	80037ac <HAL_GPIO_WritePin>

			setting = true;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <EXTI0_IRQHandler+0x10c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
			alarm_rhythm_counter = LOCK_COUNTDOWN_COUNT;
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <EXTI0_IRQHandler+0x114>)
 8001c66:	2214      	movs	r2, #20
 8001c68:	701a      	strb	r2, [r3, #0]
			Generate_Tone(true, LOCK_COUNTDOWN_BEEP_LEGNTH);
 8001c6a:	21f8      	movs	r1, #248	@ 0xf8
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f000 faeb 	bl	8002248 <Generate_Tone>
		}


		// Reset input from number pad
		buffer[0] = '\0';
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <EXTI0_IRQHandler+0x100>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
		idx = 0;
 8001c78:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <EXTI0_IRQHandler+0x118>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]

		// Clear I2C screen
		HD44780_Clear();
 8001c7e:	f7ff f941 	bl	8000f04 <HD44780_Clear>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LUB_Pin);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f001 fdaa 	bl	80037dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	48000400 	.word	0x48000400
 8001c94:	20000204 	.word	0x20000204
 8001c98:	20000430 	.word	0x20000430
 8001c9c:	20000428 	.word	0x20000428
 8001ca0:	408f4000 	.word	0x408f4000
 8001ca4:	20000440 	.word	0x20000440
 8001ca8:	2000043f 	.word	0x2000043f
 8001cac:	2000043e 	.word	0x2000043e
 8001cb0:	2000043a 	.word	0x2000043a

08001cb4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	e002      	b.n	8001cc6 <EXTI1_IRQHandler+0x12>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	ddf7      	ble.n	8001cc0 <EXTI1_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(RPB_GPIO_Port, RPB_Pin)) {
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <EXTI1_IRQHandler+0x34>)
 8001cd4:	f001 fd52 	bl	800377c <HAL_GPIO_ReadPin>
//		buffer[0] = '\0';
//		idx = 0;
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPB_Pin);
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f001 fd7f 	bl	80037dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	48000400 	.word	0x48000400

08001cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!buzzer_length_counter--) {
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <TIM2_IRQHandler+0xfc>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	b291      	uxth	r1, r2
 8001cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8001de8 <TIM2_IRQHandler+0xfc>)
 8001cfa:	8011      	strh	r1, [r2, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d16e      	bne.n	8001dde <TIM2_IRQHandler+0xf2>
		if (setting) {
 8001d00:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <TIM2_IRQHandler+0x100>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <TIM2_IRQHandler+0x54>
			alarm_rhythm_counter--;
 8001d08:	4b39      	ldr	r3, [pc, #228]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b37      	ldr	r3, [pc, #220]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d12:	701a      	strb	r2, [r3, #0]

			Generate_Tone(alarm_rhythm_counter % 2 == 0 ? true : false, LOCK_COUNTDOWN_BEEP_LEGNTH);
 8001d14:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	21f8      	movs	r1, #248	@ 0xf8
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fa8c 	bl	8002248 <Generate_Tone>
			if (alarm_rhythm_counter == 0)		setting = false;
 8001d30:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d152      	bne.n	8001dde <TIM2_IRQHandler+0xf2>
 8001d38:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <TIM2_IRQHandler+0x100>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e04e      	b.n	8001dde <TIM2_IRQHandler+0xf2>
		} else if (triggered && !overwritten) {
 8001d40:	4b2c      	ldr	r3, [pc, #176]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d030      	beq.n	8001daa <TIM2_IRQHandler+0xbe>
 8001d48:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <TIM2_IRQHandler+0x10c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d029      	beq.n	8001daa <TIM2_IRQHandler+0xbe>
			alarm_rhythm_counter++;
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d60:	701a      	strb	r2, [r3, #0]
			alarm_rhythm_counter %= 6;
 8001d62:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <TIM2_IRQHandler+0x110>)
 8001d68:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6c:	0899      	lsrs	r1, r3, #2
 8001d6e:	460b      	mov	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d7c:	701a      	strb	r2, [r3, #0]

			Generate_Tone(alarm_rhythm_counter % 2 == 0 ? false : true, alarm_rhythm_counter == 2 ? OPEN_ON_SET_SILENT_LENGTH : OPEN_ON_SET_BEEP_LENGTH);
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d101      	bne.n	8001d9e <TIM2_IRQHandler+0xb2>
 8001d9a:	23e3      	movs	r3, #227	@ 0xe3
 8001d9c:	e000      	b.n	8001da0 <TIM2_IRQHandler+0xb4>
 8001d9e:	231c      	movs	r3, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 fa50 	bl	8002248 <Generate_Tone>
 8001da8:	e019      	b.n	8001dde <TIM2_IRQHandler+0xf2>
		} else {
			buzzer_length_counter = 0;
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <TIM2_IRQHandler+0xfc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	801a      	strh	r2, [r3, #0]

			if (overwritten) {
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <TIM2_IRQHandler+0x10c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <TIM2_IRQHandler+0xea>
				overwritten = false;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <TIM2_IRQHandler+0x10c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
				if (triggered) {
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <TIM2_IRQHandler+0xf2>
					alarm_rhythm_counter = 2;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001dc8:	2202      	movs	r2, #2
 8001dca:	701a      	strb	r2, [r3, #0]
					Generate_Tone(false, OPEN_ON_SET_SILENT_LENGTH);
 8001dcc:	21e3      	movs	r1, #227	@ 0xe3
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 fa3a 	bl	8002248 <Generate_Tone>
 8001dd4:	e003      	b.n	8001dde <TIM2_IRQHandler+0xf2>
				}
			} else {
				Generate_Tone(false, 0);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 fa35 	bl	8002248 <Generate_Tone>
			}
		}
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dde:	4808      	ldr	r0, [pc, #32]	@ (8001e00 <TIM2_IRQHandler+0x114>)
 8001de0:	f003 ff5e 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000043c 	.word	0x2000043c
 8001dec:	20000440 	.word	0x20000440
 8001df0:	2000043e 	.word	0x2000043e
 8001df4:	2000043f 	.word	0x2000043f
 8001df8:	20000442 	.word	0x20000442
 8001dfc:	aaaaaaab 	.word	0xaaaaaaab
 8001e00:	20000304 	.word	0x20000304

08001e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	// Poll for the value of the IR sensor
	Check_IR_Signal();
 8001e08:	f000 fa50 	bl	80022ac <Check_IR_Signal>

//	sprintf(m, "%f\r\n", raw);
//	HAL_UART_Transmit(&huart2, (uint8_t*) m, 50, 100);

	// At raw < 1000.0, the door has been opened enough to trigger the alarm
	if (raw < 800.0) {
 8001e0c:	4bad      	ldr	r3, [pc, #692]	@ (80020c4 <TIM6_DAC_IRQHandler+0x2c0>)
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	4bac      	ldr	r3, [pc, #688]	@ (80020c8 <TIM6_DAC_IRQHandler+0x2c4>)
 8001e18:	f7fe fe70 	bl	8000afc <__aeabi_dcmplt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d02c      	beq.n	8001e7c <TIM6_DAC_IRQHandler+0x78>
		// BEGIN TO SOUND THE ALARM
		if (__GET_SYSTEM_STATE == ready || setting) {
 8001e22:	4baa      	ldr	r3, [pc, #680]	@ (80020cc <TIM6_DAC_IRQHandler+0x2c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	791b      	ldrb	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <TIM6_DAC_IRQHandler+0x30>
 8001e2c:	4ba8      	ldr	r3, [pc, #672]	@ (80020d0 <TIM6_DAC_IRQHandler+0x2cc>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <TIM6_DAC_IRQHandler+0x4e>
			if (!door_opened) {
 8001e34:	4ba7      	ldr	r3, [pc, #668]	@ (80020d4 <TIM6_DAC_IRQHandler+0x2d0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01f      	beq.n	8001e82 <TIM6_DAC_IRQHandler+0x7e>
				Generate_Tone(true, OPEN_ON_READY_BEEP_LENGTH);
 8001e42:	21f7      	movs	r1, #247	@ 0xf7
 8001e44:	2001      	movs	r0, #1
 8001e46:	f000 f9ff 	bl	8002248 <Generate_Tone>

				door_opened = true;
 8001e4a:	4ba2      	ldr	r3, [pc, #648]	@ (80020d4 <TIM6_DAC_IRQHandler+0x2d0>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
			if (!door_opened) {
 8001e50:	e017      	b.n	8001e82 <TIM6_DAC_IRQHandler+0x7e>
			}
		} else {
			if (!door_opened) {
 8001e52:	4ba0      	ldr	r3, [pc, #640]	@ (80020d4 <TIM6_DAC_IRQHandler+0x2d0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d010      	beq.n	8001e82 <TIM6_DAC_IRQHandler+0x7e>
				triggered = true;
 8001e60:	4b9d      	ldr	r3, [pc, #628]	@ (80020d8 <TIM6_DAC_IRQHandler+0x2d4>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
				alarm_rhythm_counter = 1;
 8001e66:	4b9d      	ldr	r3, [pc, #628]	@ (80020dc <TIM6_DAC_IRQHandler+0x2d8>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
				Generate_Tone(true, OPEN_ON_SET_BEEP_LENGTH);
 8001e6c:	211c      	movs	r1, #28
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 f9ea 	bl	8002248 <Generate_Tone>

				door_opened = true;
 8001e74:	4b97      	ldr	r3, [pc, #604]	@ (80020d4 <TIM6_DAC_IRQHandler+0x2d0>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e002      	b.n	8001e82 <TIM6_DAC_IRQHandler+0x7e>
			}
		}
	} else {
		door_opened = false;
 8001e7c:	4b95      	ldr	r3, [pc, #596]	@ (80020d4 <TIM6_DAC_IRQHandler+0x2d0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
	}

	// Poll for the number pad
	if        (!HAL_GPIO_ReadPin(NP0_GPIO_Port, NP0_Pin)) {
 8001e82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e86:	4896      	ldr	r0, [pc, #600]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001e88:	f001 fc78 	bl	800377c <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <TIM6_DAC_IRQHandler+0xb4>
		if (button_pressed != 0) {
 8001e92:	4b94      	ldr	r3, [pc, #592]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80f4 	beq.w	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 0;
 8001e9c:	4b91      	ldr	r3, [pc, #580]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001ea2:	4b91      	ldr	r3, [pc, #580]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001ea8:	2153      	movs	r1, #83	@ 0x53
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 f9cc 	bl	8002248 <Generate_Tone>
			Update_Buffer('0');
 8001eb0:	2030      	movs	r0, #48	@ 0x30
 8001eb2:	f000 f99f 	bl	80021f4 <Update_Buffer>
 8001eb6:	e0e5      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP1_GPIO_Port, NP1_Pin)) {
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4889      	ldr	r0, [pc, #548]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001ebc:	f001 fc5e 	bl	800377c <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d112      	bne.n	8001eec <TIM6_DAC_IRQHandler+0xe8>
		if (button_pressed != 1) {
 8001ec6:	4b87      	ldr	r3, [pc, #540]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	f000 80da 	beq.w	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 1;
 8001ed0:	4b84      	ldr	r3, [pc, #528]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001ed6:	4b84      	ldr	r3, [pc, #528]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001edc:	2153      	movs	r1, #83	@ 0x53
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 f9b2 	bl	8002248 <Generate_Tone>
			Update_Buffer('1');
 8001ee4:	2031      	movs	r0, #49	@ 0x31
 8001ee6:	f000 f985 	bl	80021f4 <Update_Buffer>
 8001eea:	e0cb      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP2_GPIO_Port, NP2_Pin)) {
 8001eec:	2104      	movs	r1, #4
 8001eee:	487c      	ldr	r0, [pc, #496]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001ef0:	f001 fc44 	bl	800377c <HAL_GPIO_ReadPin>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d112      	bne.n	8001f20 <TIM6_DAC_IRQHandler+0x11c>
		if (button_pressed != 2) {
 8001efa:	4b7a      	ldr	r3, [pc, #488]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	f000 80c0 	beq.w	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 2;
 8001f04:	4b77      	ldr	r3, [pc, #476]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001f06:	2202      	movs	r2, #2
 8001f08:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001f0a:	4b77      	ldr	r3, [pc, #476]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f10:	2153      	movs	r1, #83	@ 0x53
 8001f12:	2001      	movs	r0, #1
 8001f14:	f000 f998 	bl	8002248 <Generate_Tone>
			Update_Buffer('2');
 8001f18:	2032      	movs	r0, #50	@ 0x32
 8001f1a:	f000 f96b 	bl	80021f4 <Update_Buffer>
 8001f1e:	e0b1      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP3_GPIO_Port, NP3_Pin)) {
 8001f20:	2108      	movs	r1, #8
 8001f22:	486f      	ldr	r0, [pc, #444]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001f24:	f001 fc2a 	bl	800377c <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d112      	bne.n	8001f54 <TIM6_DAC_IRQHandler+0x150>
		if (button_pressed != 3) {
 8001f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	f000 80a6 	beq.w	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 3;
 8001f38:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f44:	2153      	movs	r1, #83	@ 0x53
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 f97e 	bl	8002248 <Generate_Tone>
			Update_Buffer('3');
 8001f4c:	2033      	movs	r0, #51	@ 0x33
 8001f4e:	f000 f951 	bl	80021f4 <Update_Buffer>
 8001f52:	e097      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP4_GPIO_Port, NP4_Pin)) {
 8001f54:	2110      	movs	r1, #16
 8001f56:	4862      	ldr	r0, [pc, #392]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001f58:	f001 fc10 	bl	800377c <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d112      	bne.n	8001f88 <TIM6_DAC_IRQHandler+0x184>
		if (button_pressed != 4) {
 8001f62:	4b60      	ldr	r3, [pc, #384]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	f000 808c 	beq.w	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 4;
 8001f6c:	4b5d      	ldr	r3, [pc, #372]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001f6e:	2204      	movs	r2, #4
 8001f70:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001f72:	4b5d      	ldr	r3, [pc, #372]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f78:	2153      	movs	r1, #83	@ 0x53
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f000 f964 	bl	8002248 <Generate_Tone>
			Update_Buffer('4');
 8001f80:	2034      	movs	r0, #52	@ 0x34
 8001f82:	f000 f937 	bl	80021f4 <Update_Buffer>
 8001f86:	e07d      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP5_GPIO_Port, NP5_Pin)) {
 8001f88:	2120      	movs	r1, #32
 8001f8a:	4855      	ldr	r0, [pc, #340]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001f8c:	f001 fbf6 	bl	800377c <HAL_GPIO_ReadPin>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d111      	bne.n	8001fba <TIM6_DAC_IRQHandler+0x1b6>
		if (button_pressed != 5) {
 8001f96:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d072      	beq.n	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 5;
 8001f9e:	4b51      	ldr	r3, [pc, #324]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001fa4:	4b50      	ldr	r3, [pc, #320]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001faa:	2153      	movs	r1, #83	@ 0x53
 8001fac:	2001      	movs	r0, #1
 8001fae:	f000 f94b 	bl	8002248 <Generate_Tone>
			Update_Buffer('5');
 8001fb2:	2035      	movs	r0, #53	@ 0x35
 8001fb4:	f000 f91e 	bl	80021f4 <Update_Buffer>
 8001fb8:	e064      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP6_GPIO_Port, NP6_Pin)) {
 8001fba:	2140      	movs	r1, #64	@ 0x40
 8001fbc:	4848      	ldr	r0, [pc, #288]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001fbe:	f001 fbdd 	bl	800377c <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d111      	bne.n	8001fec <TIM6_DAC_IRQHandler+0x1e8>
		if (button_pressed != 6) {
 8001fc8:	4b46      	ldr	r3, [pc, #280]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b06      	cmp	r3, #6
 8001fce:	d059      	beq.n	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 6;
 8001fd0:	4b44      	ldr	r3, [pc, #272]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001fd6:	4b44      	ldr	r3, [pc, #272]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001fdc:	2153      	movs	r1, #83	@ 0x53
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 f932 	bl	8002248 <Generate_Tone>
			Update_Buffer('6');
 8001fe4:	2036      	movs	r0, #54	@ 0x36
 8001fe6:	f000 f905 	bl	80021f4 <Update_Buffer>
 8001fea:	e04b      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP7_GPIO_Port, NP7_Pin)) {
 8001fec:	2180      	movs	r1, #128	@ 0x80
 8001fee:	483c      	ldr	r0, [pc, #240]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8001ff0:	f001 fbc4 	bl	800377c <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d111      	bne.n	800201e <TIM6_DAC_IRQHandler+0x21a>
		if (button_pressed != 7) {
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b07      	cmp	r3, #7
 8002000:	d040      	beq.n	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 7;
 8002002:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8002004:	2207      	movs	r2, #7
 8002006:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8002008:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 800200e:	2153      	movs	r1, #83	@ 0x53
 8002010:	2001      	movs	r0, #1
 8002012:	f000 f919 	bl	8002248 <Generate_Tone>
			Update_Buffer('7');
 8002016:	2037      	movs	r0, #55	@ 0x37
 8002018:	f000 f8ec 	bl	80021f4 <Update_Buffer>
 800201c:	e032      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP8_GPIO_Port, NP8_Pin)) {
 800201e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002022:	482f      	ldr	r0, [pc, #188]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8002024:	f001 fbaa 	bl	800377c <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d111      	bne.n	8002052 <TIM6_DAC_IRQHandler+0x24e>
		if (button_pressed != 8) {
 800202e:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d026      	beq.n	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 8;
 8002036:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8002038:	2208      	movs	r2, #8
 800203a:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 800203c:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8002042:	2153      	movs	r1, #83	@ 0x53
 8002044:	2001      	movs	r0, #1
 8002046:	f000 f8ff 	bl	8002248 <Generate_Tone>
			Update_Buffer('8');
 800204a:	2038      	movs	r0, #56	@ 0x38
 800204c:	f000 f8d2 	bl	80021f4 <Update_Buffer>
 8002050:	e018      	b.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		}
	} else if (!HAL_GPIO_ReadPin(NP9_GPIO_Port, NP9_Pin)) {
 8002052:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002056:	4822      	ldr	r0, [pc, #136]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 8002058:	f001 fb90 	bl	800377c <HAL_GPIO_ReadPin>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d110      	bne.n	8002084 <TIM6_DAC_IRQHandler+0x280>
		if (button_pressed != 9) {
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b09      	cmp	r3, #9
 8002068:	d00c      	beq.n	8002084 <TIM6_DAC_IRQHandler+0x280>
			button_pressed = 9;
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 800206c:	2209      	movs	r2, #9
 800206e:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e4>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8002076:	2153      	movs	r1, #83	@ 0x53
 8002078:	2001      	movs	r0, #1
 800207a:	f000 f8e5 	bl	8002248 <Generate_Tone>
			Update_Buffer('9');
 800207e:	2039      	movs	r0, #57	@ 0x39
 8002080:	f000 f8b8 	bl	80021f4 <Update_Buffer>





		if      (HAL_GPIO_ReadPin(NP0_GPIO_Port, NP0_Pin) && button_pressed == 0)		button_pressed = 10;
 8002084:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002088:	4815      	ldr	r0, [pc, #84]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 800208a:	f001 fb77 	bl	800377c <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <TIM6_DAC_IRQHandler+0x2a0>
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <TIM6_DAC_IRQHandler+0x2a0>
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 800209e:	220a      	movs	r2, #10
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e09c      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP1_GPIO_Port, NP1_Pin) && button_pressed == 1) 		button_pressed = 10;
 80020a4:	2102      	movs	r1, #2
 80020a6:	480e      	ldr	r0, [pc, #56]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2dc>)
 80020a8:	f001 fb68 	bl	800377c <HAL_GPIO_ReadPin>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01c      	beq.n	80020ec <TIM6_DAC_IRQHandler+0x2e8>
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d118      	bne.n	80020ec <TIM6_DAC_IRQHandler+0x2e8>
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2e0>)
 80020bc:	220a      	movs	r2, #10
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e08d      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
 80020c2:	bf00      	nop
 80020c4:	20000428 	.word	0x20000428
 80020c8:	40890000 	.word	0x40890000
 80020cc:	20000208 	.word	0x20000208
 80020d0:	20000440 	.word	0x20000440
 80020d4:	20000441 	.word	0x20000441
 80020d8:	2000043f 	.word	0x2000043f
 80020dc:	2000043e 	.word	0x2000043e
 80020e0:	48000800 	.word	0x48000800
 80020e4:	20000010 	.word	0x20000010
 80020e8:	20000442 	.word	0x20000442
		else if (HAL_GPIO_ReadPin(NP2_GPIO_Port, NP2_Pin) && button_pressed == 2) 		button_pressed = 10;
 80020ec:	2104      	movs	r1, #4
 80020ee:	483e      	ldr	r0, [pc, #248]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 80020f0:	f001 fb44 	bl	800377c <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <TIM6_DAC_IRQHandler+0x306>
 80020fa:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d103      	bne.n	800210a <TIM6_DAC_IRQHandler+0x306>
 8002102:	4b3a      	ldr	r3, [pc, #232]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 8002104:	220a      	movs	r2, #10
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e069      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP3_GPIO_Port, NP3_Pin) && button_pressed == 3) 		button_pressed = 10;
 800210a:	2108      	movs	r1, #8
 800210c:	4836      	ldr	r0, [pc, #216]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 800210e:	f001 fb35 	bl	800377c <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <TIM6_DAC_IRQHandler+0x324>
 8002118:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d103      	bne.n	8002128 <TIM6_DAC_IRQHandler+0x324>
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 8002122:	220a      	movs	r2, #10
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e05a      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP4_GPIO_Port, NP4_Pin) && button_pressed == 4) 		button_pressed = 10;
 8002128:	2110      	movs	r1, #16
 800212a:	482f      	ldr	r0, [pc, #188]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 800212c:	f001 fb26 	bl	800377c <HAL_GPIO_ReadPin>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <TIM6_DAC_IRQHandler+0x342>
 8002136:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d103      	bne.n	8002146 <TIM6_DAC_IRQHandler+0x342>
 800213e:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 8002140:	220a      	movs	r2, #10
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e04b      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP5_GPIO_Port, NP5_Pin) && button_pressed == 5) 		button_pressed = 10;
 8002146:	2120      	movs	r1, #32
 8002148:	4827      	ldr	r0, [pc, #156]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 800214a:	f001 fb17 	bl	800377c <HAL_GPIO_ReadPin>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <TIM6_DAC_IRQHandler+0x360>
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d103      	bne.n	8002164 <TIM6_DAC_IRQHandler+0x360>
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 800215e:	220a      	movs	r2, #10
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	e03c      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP6_GPIO_Port, NP6_Pin) && button_pressed == 6) 		button_pressed = 10;
 8002164:	2140      	movs	r1, #64	@ 0x40
 8002166:	4820      	ldr	r0, [pc, #128]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 8002168:	f001 fb08 	bl	800377c <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <TIM6_DAC_IRQHandler+0x37e>
 8002172:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b06      	cmp	r3, #6
 8002178:	d103      	bne.n	8002182 <TIM6_DAC_IRQHandler+0x37e>
 800217a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 800217c:	220a      	movs	r2, #10
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e02d      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP7_GPIO_Port, NP7_Pin) && button_pressed == 7) 		button_pressed = 10;
 8002182:	2180      	movs	r1, #128	@ 0x80
 8002184:	4818      	ldr	r0, [pc, #96]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 8002186:	f001 faf9 	bl	800377c <HAL_GPIO_ReadPin>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <TIM6_DAC_IRQHandler+0x39c>
 8002190:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b07      	cmp	r3, #7
 8002196:	d103      	bne.n	80021a0 <TIM6_DAC_IRQHandler+0x39c>
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 800219a:	220a      	movs	r2, #10
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e01e      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP8_GPIO_Port, NP8_Pin) && button_pressed == 8)		button_pressed = 10;
 80021a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021a4:	4810      	ldr	r0, [pc, #64]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 80021a6:	f001 fae9 	bl	800377c <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <TIM6_DAC_IRQHandler+0x3bc>
 80021b0:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d103      	bne.n	80021c0 <TIM6_DAC_IRQHandler+0x3bc>
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 80021ba:	220a      	movs	r2, #10
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e00e      	b.n	80021de <TIM6_DAC_IRQHandler+0x3da>
		else if (HAL_GPIO_ReadPin(NP9_GPIO_Port, NP9_Pin) && button_pressed == 9)		button_pressed = 10;
 80021c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021c4:	4808      	ldr	r0, [pc, #32]	@ (80021e8 <TIM6_DAC_IRQHandler+0x3e4>)
 80021c6:	f001 fad9 	bl	800377c <HAL_GPIO_ReadPin>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <TIM6_DAC_IRQHandler+0x3da>
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d102      	bne.n	80021de <TIM6_DAC_IRQHandler+0x3da>
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <TIM6_DAC_IRQHandler+0x3e8>)
 80021da:	220a      	movs	r2, #10
 80021dc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021de:	4804      	ldr	r0, [pc, #16]	@ (80021f0 <TIM6_DAC_IRQHandler+0x3ec>)
 80021e0:	f003 fd5e 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	48000800 	.word	0x48000800
 80021ec:	20000010 	.word	0x20000010
 80021f0:	20000350 	.word	0x20000350

080021f4 <Update_Buffer>:

/* USER CODE BEGIN 1 */
void Update_Buffer(char val) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
	HD44780_SetCursor(idx, 0);
 80021fe:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <Update_Buffer+0x48>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fe93 	bl	8000f30 <HD44780_SetCursor>
	current_input[0] = val;
 800220a:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <Update_Buffer+0x4c>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	7013      	strb	r3, [r2, #0]
	HD44780_PrintStr(current_input);
 8002210:	480b      	ldr	r0, [pc, #44]	@ (8002240 <Update_Buffer+0x4c>)
 8002212:	f7fe fefe 	bl	8001012 <HD44780_PrintStr>

	if (idx < 4)
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <Update_Buffer+0x48>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d809      	bhi.n	8002232 <Update_Buffer+0x3e>
		buffer[idx++] = val;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <Update_Buffer+0x48>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	b2d1      	uxtb	r1, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <Update_Buffer+0x48>)
 8002228:	7011      	strb	r1, [r2, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <Update_Buffer+0x50>)
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	5453      	strb	r3, [r2, r1]
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000043a 	.word	0x2000043a
 8002240:	20000438 	.word	0x20000438
 8002244:	20000430 	.word	0x20000430

08002248 <Generate_Tone>:

void Generate_Tone(bool enable, uint16_t tone_length) {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	80bb      	strh	r3, [r7, #4]
	if (enable) {
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00e      	beq.n	800227c <Generate_Tone+0x34>
		__HAL_TIM_SET_AUTORELOAD(&htim1, ENABLE_BEEP * 2);
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <Generate_Tone+0x5c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8002266:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <Generate_Tone+0x5c>)
 800226a:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 800226e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ENABLE_BEEP);
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <Generate_Tone+0x5c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34
 800227a:	e00a      	b.n	8002292 <Generate_Tone+0x4a>
	} else {
		__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <Generate_Tone+0x5c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <Generate_Tone+0x5c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <Generate_Tone+0x5c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	buzzer_length_counter = tone_length;
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <Generate_Tone+0x60>)
 8002294:	88bb      	ldrh	r3, [r7, #4]
 8002296:	8013      	strh	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	200002b8 	.word	0x200002b8
 80022a8:	2000043c 	.word	0x2000043c

080022ac <Check_IR_Signal>:

void Generate_Silenece(int length) {
	buzzer_length_counter = (uint16_t) length;
}

static inline void Check_IR_Signal(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80022b0:	480a      	ldr	r0, [pc, #40]	@ (80022dc <Check_IR_Signal+0x30>)
 80022b2:	f000 fb29 	bl	8002908 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80022b6:	2164      	movs	r1, #100	@ 0x64
 80022b8:	4808      	ldr	r0, [pc, #32]	@ (80022dc <Check_IR_Signal+0x30>)
 80022ba:	f000 fb93 	bl	80029e4 <HAL_ADC_PollForConversion>
	raw = (double) HAL_ADC_GetValue(&hadc1);
 80022be:	4807      	ldr	r0, [pc, #28]	@ (80022dc <Check_IR_Signal+0x30>)
 80022c0:	f000 fc4e 	bl	8002b60 <HAL_ADC_GetValue>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f92c 	bl	8000524 <__aeabi_ui2d>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4903      	ldr	r1, [pc, #12]	@ (80022e0 <Check_IR_Signal+0x34>)
 80022d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000214 	.word	0x20000214
 80022e0:	20000428 	.word	0x20000428

080022e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return 1;
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_kill>:

int _kill(int pid, int sig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022fe:	f006 f923 	bl	8008548 <__errno>
 8002302:	4603      	mov	r3, r0
 8002304:	2216      	movs	r2, #22
 8002306:	601a      	str	r2, [r3, #0]
  return -1;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_exit>:

void _exit (int status)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ffe7 	bl	80022f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002326:	bf00      	nop
 8002328:	e7fd      	b.n	8002326 <_exit+0x12>

0800232a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e00a      	b.n	8002352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800233c:	f3af 8000 	nop.w
 8002340:	4601      	mov	r1, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	60ba      	str	r2, [r7, #8]
 8002348:	b2ca      	uxtb	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	dbf0      	blt.n	800233c <_read+0x12>
  }

  return len;
 800235a:	687b      	ldr	r3, [r7, #4]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e009      	b.n	800238a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	60ba      	str	r2, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	dbf1      	blt.n	8002376 <_write+0x12>
  }
  return len;
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_close>:

int _close(int file)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c4:	605a      	str	r2, [r3, #4]
  return 0;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_isatty>:

int _isatty(int file)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800240c:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <_sbrk+0x5c>)
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <_sbrk+0x60>)
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <_sbrk+0x64>)
 8002422:	4a12      	ldr	r2, [pc, #72]	@ (800246c <_sbrk+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002434:	f006 f888 	bl	8008548 <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e009      	b.n	8002458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244a:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <_sbrk+0x64>)
 8002454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20004000 	.word	0x20004000
 8002464:	00000400 	.word	0x00000400
 8002468:	20000444 	.word	0x20000444
 800246c:	20000598 	.word	0x20000598

08002470 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <SystemInit+0x20>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <SystemInit+0x20>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002498:	f7ff ffea 	bl	8002470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800249e:	490d      	ldr	r1, [pc, #52]	@ (80024d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <LoopForever+0xe>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b4:	4c0a      	ldr	r4, [pc, #40]	@ (80024e0 <LoopForever+0x16>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c2:	f006 f847 	bl	8008554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c6:	f7fe fec3 	bl	8001250 <main>

080024ca <LoopForever>:

LoopForever:
    b LoopForever
 80024ca:	e7fe      	b.n	80024ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024cc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80024d8:	0800bf48 	.word	0x0800bf48
  ldr r2, =_sbss
 80024dc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024e0:	20000598 	.word	0x20000598

080024e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC1_IRQHandler>
	...

080024e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_Init+0x28>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <HAL_Init+0x28>)
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 ff8b 	bl	8003414 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	200f      	movs	r0, #15
 8002500:	f000 f808 	bl	8002514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7ff f99a 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000

08002514 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_InitTick+0x54>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_InitTick+0x58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 ffa3 	bl	800347e <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 ff6b 	bl	800342a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <HAL_InitTick+0x5c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000014 	.word	0x20000014
 800256c:	2000001c 	.word	0x2000001c
 8002570:	20000018 	.word	0x20000018

08002574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000001c 	.word	0x2000001c
 8002598:	20000448 	.word	0x20000448

0800259c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;  
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000448 	.word	0x20000448

080025b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000001c 	.word	0x2000001c

080025fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b09a      	sub	sp, #104	@ 0x68
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e169      	b.n	80028f0 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d176      	bne.n	800271c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d152      	bne.n	80026dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff f917 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d13b      	bne.n	80026dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fd9f 	bl	80031a8 <ADC_Disable>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d12f      	bne.n	80026dc <HAL_ADC_Init+0xe0>
 800267c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002680:	2b00      	cmp	r3, #0
 8002682:	d12b      	bne.n	80026dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800268c:	f023 0302 	bic.w	r3, r3, #2
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026b8:	4b8f      	ldr	r3, [pc, #572]	@ (80028f8 <HAL_ADC_Init+0x2fc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a8f      	ldr	r2, [pc, #572]	@ (80028fc <HAL_ADC_Init+0x300>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0c9a      	lsrs	r2, r3, #18
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ce:	e002      	b.n	80026d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f9      	bne.n	80026d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026f8:	d110      	bne.n	800271c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f023 0312 	bic.w	r3, r3, #18
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 80d6 	bne.w	80028d6 <HAL_ADC_Init+0x2da>
 800272a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 80d1 	bne.w	80028d6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 80c9 	bne.w	80028d6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800274c:	f043 0202 	orr.w	r2, r3, #2
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002754:	4b6a      	ldr	r3, [pc, #424]	@ (8002900 <HAL_ADC_Init+0x304>)
 8002756:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d108      	bne.n	800277c <HAL_ADC_Init+0x180>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_ADC_Init+0x180>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_ADC_Init+0x182>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11c      	bne.n	80027bc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002782:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d010      	beq.n	80027aa <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_ADC_Init+0x1a8>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_Init+0x1a8>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_Init+0x1aa>
 80027a4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ba:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7e5b      	ldrb	r3, [r3, #25]
 80027c0:	035b      	lsls	r3, r3, #13
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027c6:	2a01      	cmp	r2, #1
 80027c8:	d002      	beq.n	80027d0 <HAL_ADC_Init+0x1d4>
 80027ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_Init+0x1d6>
 80027d0:	2200      	movs	r2, #0
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4313      	orrs	r3, r2
 80027e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027e2:	4313      	orrs	r3, r2
 80027e4:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d11b      	bne.n	8002828 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e5b      	ldrb	r3, [r3, #25]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	3b01      	subs	r3, #1
 80027fe:	045a      	lsls	r2, r3, #17
 8002800:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002802:	4313      	orrs	r3, r2
 8002804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002808:	663b      	str	r3, [r7, #96]	@ 0x60
 800280a:	e00d      	b.n	8002828 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	4313      	orrs	r3, r2
 800283a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800283c:	4313      	orrs	r3, r2
 800283e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d114      	bne.n	8002878 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800285c:	f023 0302 	bic.w	r3, r3, #2
 8002860:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7e1b      	ldrb	r3, [r3, #24]
 8002866:	039a      	lsls	r2, r3, #14
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4313      	orrs	r3, r2
 8002872:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002874:	4313      	orrs	r3, r2
 8002876:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_ADC_Init+0x308>)
 8002880:	4013      	ands	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002888:	430b      	orrs	r3, r1
 800288a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10c      	bne.n	80028ae <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f023 010f 	bic.w	r1, r3, #15
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ac:	e007      	b.n	80028be <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 020f 	bic.w	r2, r2, #15
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	f023 0303 	bic.w	r3, r3, #3
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80028d4:	e00a      	b.n	80028ec <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f023 0312 	bic.w	r3, r3, #18
 80028de:	f043 0210 	orr.w	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80028ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3768      	adds	r7, #104	@ 0x68
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000014 	.word	0x20000014
 80028fc:	431bde83 	.word	0x431bde83
 8002900:	50000300 	.word	0x50000300
 8002904:	fff0c007 	.word	0xfff0c007

08002908 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d158      	bne.n	80029d4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ADC_Start+0x28>
 800292c:	2302      	movs	r3, #2
 800292e:	e054      	b.n	80029da <HAL_ADC_Start+0xd2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fbd1 	bl	80030e0 <ADC_Enable>
 800293e:	4603      	mov	r3, r0
 8002940:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d140      	bne.n	80029ca <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800297e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800298e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002992:	d106      	bne.n	80029a2 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002998:	f023 0206 	bic.w	r2, r3, #6
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	645a      	str	r2, [r3, #68]	@ 0x44
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	221c      	movs	r2, #28
 80029b6:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0204 	orr.w	r2, r2, #4
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	e006      	b.n	80029d8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80029d2:	e001      	b.n	80029d8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
 80029d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d102      	bne.n	8002a00 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80029fa:	2308      	movs	r3, #8
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e02e      	b.n	8002a5e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a00:	4b56      	ldr	r3, [pc, #344]	@ (8002b5c <HAL_ADC_PollForConversion+0x178>)
 8002a02:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d112      	bne.n	8002a36 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d11d      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e08d      	b.n	8002b52 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07b      	b.n	8002b52 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002a66:	f7ff fd99 	bl	800259c <HAL_GetTick>
 8002a6a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002a6c:	e021      	b.n	8002ab2 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d01d      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_ADC_PollForConversion+0xa8>
 8002a7c:	f7ff fd8e 	bl	800259c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d212      	bcs.n	8002ab2 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f043 0204 	orr.w	r2, r3, #4
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e04f      	b.n	8002b52 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0d6      	beq.n	8002a6e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d131      	bne.n	8002b3e <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d12c      	bne.n	8002b3e <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d125      	bne.n	8002b3e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d112      	bne.n	8002b26 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d112      	bne.n	8002b3e <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b24:	e00b      	b.n	8002b3e <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	50000300 	.word	0x50000300

08002b60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b09b      	sub	sp, #108	@ 0x6c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x22>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e295      	b.n	80030ca <HAL_ADC_ConfigChannel+0x54e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 8279 	bne.w	80030a8 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d81c      	bhi.n	8002bf8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	231f      	movs	r3, #31
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	4019      	ands	r1, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bf6:	e063      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	d81e      	bhi.n	8002c3e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	3b1e      	subs	r3, #30
 8002c14:	221f      	movs	r2, #31
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	4019      	ands	r1, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	3b1e      	subs	r3, #30
 8002c30:	fa00 f203 	lsl.w	r2, r0, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c3c:	e040      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b0e      	cmp	r3, #14
 8002c44:	d81e      	bhi.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	3b3c      	subs	r3, #60	@ 0x3c
 8002c5a:	221f      	movs	r2, #31
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4019      	ands	r1, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	3b3c      	subs	r3, #60	@ 0x3c
 8002c76:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c82:	e01d      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	3b5a      	subs	r3, #90	@ 0x5a
 8002c98:	221f      	movs	r2, #31
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	4019      	ands	r1, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	3b5a      	subs	r3, #90	@ 0x5a
 8002cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80e5 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b09      	cmp	r3, #9
 8002cd6:	d91c      	bls.n	8002d12 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b1e      	subs	r3, #30
 8002cea:	2207      	movs	r2, #7
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	4019      	ands	r1, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6898      	ldr	r0, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	3b1e      	subs	r3, #30
 8002d04:	fa00 f203 	lsl.w	r2, r0, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	619a      	str	r2, [r3, #24]
 8002d10:	e019      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6959      	ldr	r1, [r3, #20]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	2207      	movs	r2, #7
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	4019      	ands	r1, r3
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6898      	ldr	r0, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	08db      	lsrs	r3, r3, #3
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d84f      	bhi.n	8002e08 <HAL_ADC_ConfigChannel+0x28c>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <HAL_ADC_ConfigChannel+0x1f4>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002da3 	.word	0x08002da3
 8002d78:	08002dc5 	.word	0x08002dc5
 8002d7c:	08002de7 	.word	0x08002de7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d86:	4b97      	ldr	r3, [pc, #604]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x468>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	0691      	lsls	r1, r2, #26
 8002d90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d92:	430a      	orrs	r2, r1
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d9e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002da0:	e07b      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002da8:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x468>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	0691      	lsls	r1, r2, #26
 8002db2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002db4:	430a      	orrs	r2, r1
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002dc0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dc2:	e06a      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002dca:	4b86      	ldr	r3, [pc, #536]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x468>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	0691      	lsls	r1, r2, #26
 8002dd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002de2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002de4:	e059      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002dec:	4b7d      	ldr	r3, [pc, #500]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x468>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	0691      	lsls	r1, r2, #26
 8002df6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e04:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e06:	e048      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	069b      	lsls	r3, r3, #26
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d107      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e2a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d107      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e4e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	069b      	lsls	r3, r3, #26
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e72:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	069b      	lsls	r3, r3, #26
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e96:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002e98:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d108      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x33e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x33e>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x340>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f040 80fe 	bne.w	80030be <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00f      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43da      	mvns	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002ee8:	e049      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b09      	cmp	r3, #9
 8002f0a:	d91c      	bls.n	8002f46 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b1b      	subs	r3, #27
 8002f1e:	2207      	movs	r2, #7
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4019      	ands	r1, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6898      	ldr	r0, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	3b1b      	subs	r3, #27
 8002f38:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	619a      	str	r2, [r3, #24]
 8002f44:	e01b      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6959      	ldr	r1, [r3, #20]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	2207      	movs	r2, #7
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	4019      	ands	r1, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6898      	ldr	r0, [r3, #8]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	fa00 f203 	lsl.w	r2, r0, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x46c>)
 8002f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d105      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d014      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f9a:	2b11      	cmp	r3, #17
 8002f9c:	d105      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002fae:	2b12      	cmp	r3, #18
 8002fb0:	f040 8085 	bne.w	80030be <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d17e      	bne.n	80030be <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10c      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x470>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x470>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e004      	b.n	8002fee <HAL_ADC_ConfigChannel+0x472>
 8002fe4:	83fff000 	.word	0x83fff000
 8002fe8:	50000300 	.word	0x50000300
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d150      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x498>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x498>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_ADC_ConfigChannel+0x49a>
 8003014:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d13c      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d11d      	bne.n	800305e <HAL_ADC_ConfigChannel+0x4e2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800302a:	d118      	bne.n	800305e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800302c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003036:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003038:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <HAL_ADC_ConfigChannel+0x55c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a27      	ldr	r2, [pc, #156]	@ (80030dc <HAL_ADC_ConfigChannel+0x560>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0c9a      	lsrs	r2, r3, #18
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800304e:	e002      	b.n	8003056 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	3b01      	subs	r3, #1
 8003054:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f9      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800305c:	e02e      	b.n	80030bc <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b11      	cmp	r3, #17
 8003064:	d10b      	bne.n	800307e <HAL_ADC_ConfigChannel+0x502>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800306e:	d106      	bne.n	800307e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800307a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800307c:	e01e      	b.n	80030bc <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b12      	cmp	r3, #18
 8003084:	d11a      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800308e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003090:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003092:	e013      	b.n	80030bc <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80030a6:	e00a      	b.n	80030be <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80030ba:	e000      	b.n	80030be <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030bc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	376c      	adds	r7, #108	@ 0x6c
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000014 	.word	0x20000014
 80030dc:	431bde83 	.word	0x431bde83

080030e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d108      	bne.n	800310c <ADC_Enable+0x2c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <ADC_Enable+0x2c>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <ADC_Enable+0x2e>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d143      	bne.n	800319a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <ADC_Enable+0xc4>)
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f043 0210 	orr.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e02f      	b.n	800319c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800314c:	f7ff fa26 	bl	800259c <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003152:	e01b      	b.n	800318c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003154:	f7ff fa22 	bl	800259c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d914      	bls.n	800318c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d00d      	beq.n	800318c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f043 0210 	orr.w	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e007      	b.n	800319c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d1dc      	bne.n	8003154 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	8000003f 	.word	0x8000003f

080031a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d108      	bne.n	80031d4 <ADC_Disable+0x2c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <ADC_Disable+0x2c>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <ADC_Disable+0x2e>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d047      	beq.n	800326a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030d 	and.w	r3, r3, #13
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10f      	bne.n	8003208 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0202 	orr.w	r2, r2, #2
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2203      	movs	r2, #3
 80031fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003200:	f7ff f9cc 	bl	800259c <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003206:	e029      	b.n	800325c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e023      	b.n	800326c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003224:	f7ff f9ba 	bl	800259c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d914      	bls.n	800325c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10d      	bne.n	800325c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d0dc      	beq.n	8003224 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003284:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800329c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a6:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60d3      	str	r3, [r2, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <__NVIC_GetPriorityGrouping+0x18>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 0307 	and.w	r3, r3, #7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db0b      	blt.n	8003302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4907      	ldr	r1, [pc, #28]	@ (8003310 <__NVIC_EnableIRQ+0x38>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2001      	movs	r0, #1
 80032fa:	fa00 f202 	lsl.w	r2, r0, r2
 80032fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000e100 	.word	0xe000e100

08003314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	2b00      	cmp	r3, #0
 8003326:	db0a      	blt.n	800333e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	490c      	ldr	r1, [pc, #48]	@ (8003360 <__NVIC_SetPriority+0x4c>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	0112      	lsls	r2, r2, #4
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	440b      	add	r3, r1
 8003338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800333c:	e00a      	b.n	8003354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4908      	ldr	r1, [pc, #32]	@ (8003364 <__NVIC_SetPriority+0x50>)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3b04      	subs	r3, #4
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	440b      	add	r3, r1
 8003352:	761a      	strb	r2, [r3, #24]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	@ 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f1c3 0307 	rsb	r3, r3, #7
 8003382:	2b04      	cmp	r3, #4
 8003384:	bf28      	it	cs
 8003386:	2304      	movcs	r3, #4
 8003388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3304      	adds	r3, #4
 800338e:	2b06      	cmp	r3, #6
 8003390:	d902      	bls.n	8003398 <NVIC_EncodePriority+0x30>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3b03      	subs	r3, #3
 8003396:	e000      	b.n	800339a <NVIC_EncodePriority+0x32>
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	401a      	ands	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	43d9      	mvns	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	4313      	orrs	r3, r2
         );
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e0:	d301      	bcc.n	80033e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00f      	b.n	8003406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <SysTick_Config+0x40>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ee:	210f      	movs	r1, #15
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f7ff ff8e 	bl	8003314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <SysTick_Config+0x40>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <SysTick_Config+0x40>)
 8003400:	2207      	movs	r2, #7
 8003402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	e000e010 	.word	0xe000e010

08003414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff29 	bl	8003274 <__NVIC_SetPriorityGrouping>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800343c:	f7ff ff3e 	bl	80032bc <__NVIC_GetPriorityGrouping>
 8003440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	6978      	ldr	r0, [r7, #20]
 8003448:	f7ff ff8e 	bl	8003368 <NVIC_EncodePriority>
 800344c:	4602      	mov	r2, r0
 800344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff5d 	bl	8003314 <__NVIC_SetPriority>
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff31 	bl	80032d8 <__NVIC_EnableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffa2 	bl	80033d0 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a6:	e14e      	b.n	8003746 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8140 	beq.w	8003740 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d005      	beq.n	80034d8 <HAL_GPIO_Init+0x40>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d130      	bne.n	800353a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800350e:	2201      	movs	r2, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0201 	and.w	r2, r3, #1
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b03      	cmp	r3, #3
 8003544:	d017      	beq.n	8003576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d123      	bne.n	80035ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	08da      	lsrs	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3208      	adds	r2, #8
 800358a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	6939      	ldr	r1, [r7, #16]
 80035c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0203 	and.w	r2, r3, #3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 809a 	beq.w	8003740 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360c:	4b55      	ldr	r3, [pc, #340]	@ (8003764 <HAL_GPIO_Init+0x2cc>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	4a54      	ldr	r2, [pc, #336]	@ (8003764 <HAL_GPIO_Init+0x2cc>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6193      	str	r3, [r2, #24]
 8003618:	4b52      	ldr	r3, [pc, #328]	@ (8003764 <HAL_GPIO_Init+0x2cc>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003624:	4a50      	ldr	r2, [pc, #320]	@ (8003768 <HAL_GPIO_Init+0x2d0>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800364e:	d013      	beq.n	8003678 <HAL_GPIO_Init+0x1e0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a46      	ldr	r2, [pc, #280]	@ (800376c <HAL_GPIO_Init+0x2d4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00d      	beq.n	8003674 <HAL_GPIO_Init+0x1dc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a45      	ldr	r2, [pc, #276]	@ (8003770 <HAL_GPIO_Init+0x2d8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <HAL_GPIO_Init+0x1d8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a44      	ldr	r2, [pc, #272]	@ (8003774 <HAL_GPIO_Init+0x2dc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_GPIO_Init+0x1d4>
 8003668:	2303      	movs	r3, #3
 800366a:	e006      	b.n	800367a <HAL_GPIO_Init+0x1e2>
 800366c:	2305      	movs	r3, #5
 800366e:	e004      	b.n	800367a <HAL_GPIO_Init+0x1e2>
 8003670:	2302      	movs	r3, #2
 8003672:	e002      	b.n	800367a <HAL_GPIO_Init+0x1e2>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_GPIO_Init+0x1e2>
 8003678:	2300      	movs	r3, #0
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	f002 0203 	and.w	r2, r2, #3
 8003680:	0092      	lsls	r2, r2, #2
 8003682:	4093      	lsls	r3, r2
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800368a:	4937      	ldr	r1, [pc, #220]	@ (8003768 <HAL_GPIO_Init+0x2d0>)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003698:	4b37      	ldr	r3, [pc, #220]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4013      	ands	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036e6:	4a24      	ldr	r2, [pc, #144]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ec:	4b22      	ldr	r3, [pc, #136]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003710:	4a19      	ldr	r2, [pc, #100]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003716:	4b18      	ldr	r3, [pc, #96]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800373a:	4a0f      	ldr	r2, [pc, #60]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f aea9 	bne.w	80034a8 <HAL_GPIO_Init+0x10>
  }
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40021000 	.word	0x40021000
 8003768:	40010000 	.word	0x40010000
 800376c:	48000400 	.word	0x48000400
 8003770:	48000800 	.word	0x48000800
 8003774:	48000c00 	.word	0x48000c00
 8003778:	40010400 	.word	0x40010400

0800377c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	e001      	b.n	800379e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037c8:	e002      	b.n	80037d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037e6:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037f2:	4a05      	ldr	r2, [pc, #20]	@ (8003808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f806 	bl	800380c <HAL_GPIO_EXTI_Callback>
  }
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40010400 	.word	0x40010400

0800380c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e08d      	b.n	8003950 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fe f857 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2224      	movs	r2, #36	@ 0x24
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003872:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003882:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	e006      	b.n	80038aa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d108      	bne.n	80038c4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e007      	b.n	80038d4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69d9      	ldr	r1, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	461a      	mov	r2, r3
 8003964:	460b      	mov	r3, r1
 8003966:	817b      	strh	r3, [r7, #10]
 8003968:	4613      	mov	r3, r2
 800396a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b20      	cmp	r3, #32
 8003976:	f040 80fd 	bne.w	8003b74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_I2C_Master_Transmit+0x30>
 8003984:	2302      	movs	r3, #2
 8003986:	e0f6      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x21e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003990:	f7fe fe04 	bl	800259c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2319      	movs	r3, #25
 800399c:	2201      	movs	r2, #1
 800399e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f914 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0e1      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2221      	movs	r2, #33	@ 0x21
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2210      	movs	r2, #16
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	893a      	ldrh	r2, [r7, #8]
 80039d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2bff      	cmp	r3, #255	@ 0xff
 80039e2:	d906      	bls.n	80039f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	22ff      	movs	r2, #255	@ 0xff
 80039e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80039ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	e007      	b.n	8003a02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80039fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d024      	beq.n	8003a54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	781a      	ldrb	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	8979      	ldrh	r1, [r7, #10]
 8003a46:	4b4e      	ldr	r3, [pc, #312]	@ (8003b80 <HAL_I2C_Master_Transmit+0x228>)
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fa83 	bl	8003f58 <I2C_TransferConfig>
 8003a52:	e066      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	8979      	ldrh	r1, [r7, #10]
 8003a5c:	4b48      	ldr	r3, [pc, #288]	@ (8003b80 <HAL_I2C_Master_Transmit+0x228>)
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa78 	bl	8003f58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a68:	e05b      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f907 	bl	8003c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07b      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	781a      	ldrb	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d034      	beq.n	8003b22 <HAL_I2C_Master_Transmit+0x1ca>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d130      	bne.n	8003b22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2180      	movs	r1, #128	@ 0x80
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f880 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e04d      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2bff      	cmp	r3, #255	@ 0xff
 8003ae2:	d90e      	bls.n	8003b02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	22ff      	movs	r2, #255	@ 0xff
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	8979      	ldrh	r1, [r7, #10]
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fa2c 	bl	8003f58 <I2C_TransferConfig>
 8003b00:	e00f      	b.n	8003b22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	8979      	ldrh	r1, [r7, #10]
 8003b14:	2300      	movs	r3, #0
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fa1b 	bl	8003f58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d19e      	bne.n	8003a6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	6a39      	ldr	r1, [r7, #32]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f8ed 	bl	8003d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e01a      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2220      	movs	r2, #32
 8003b46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <HAL_I2C_Master_Transmit+0x22c>)
 8003b54:	400b      	ands	r3, r1
 8003b56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	80002000 	.word	0x80002000
 8003b84:	fe00e800 	.word	0xfe00e800

08003b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d103      	bne.n	8003ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d007      	beq.n	8003bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	619a      	str	r2, [r3, #24]
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be0:	e03b      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f8d6 	bl	8003d98 <I2C_IsErrorOccurred>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e041      	b.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d02d      	beq.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7fe fccd 	bl	800259c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d122      	bne.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d113      	bne.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f043 0220 	orr.w	r2, r3, #32
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e00f      	b.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d0b4      	beq.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c8e:	e033      	b.n	8003cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f87f 	bl	8003d98 <I2C_IsErrorOccurred>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e031      	b.n	8003d08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d025      	beq.n	8003cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	f7fe fc76 	bl	800259c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d11a      	bne.n	8003cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d013      	beq.n	8003cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e007      	b.n	8003d08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d1c4      	bne.n	8003c90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d1c:	e02f      	b.n	8003d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f838 	bl	8003d98 <I2C_IsErrorOccurred>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e02d      	b.n	8003d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fe fc33 	bl	800259c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d11a      	bne.n	8003d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d013      	beq.n	8003d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e007      	b.n	8003d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d1c8      	bne.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08a      	sub	sp, #40	@ 0x28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d068      	beq.n	8003e96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dcc:	e049      	b.n	8003e62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d045      	beq.n	8003e62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fe fbe1 	bl	800259c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <I2C_IsErrorOccurred+0x54>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d13a      	bne.n	8003e62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0e:	d121      	bne.n	8003e54 <I2C_IsErrorOccurred+0xbc>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e16:	d01d      	beq.n	8003e54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d01a      	beq.n	8003e54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e2e:	f7fe fbb5 	bl	800259c <HAL_GetTick>
 8003e32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e34:	e00e      	b.n	8003e54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e36:	f7fe fbb1 	bl	800259c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b19      	cmp	r3, #25
 8003e42:	d907      	bls.n	8003e54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	f043 0320 	orr.w	r3, r3, #32
 8003e4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e52:	e006      	b.n	8003e62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d1e9      	bne.n	8003e36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d003      	beq.n	8003e78 <I2C_IsErrorOccurred+0xe0>
 8003e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0aa      	beq.n	8003dce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2220      	movs	r2, #32
 8003e86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f043 0308 	orr.w	r3, r3, #8
 8003ed0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	f043 0302 	orr.w	r3, r3, #2
 8003ef2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01c      	beq.n	8003f46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fe3b 	bl	8003b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <I2C_IsErrorOccurred+0x1bc>)
 8003f1e:	400b      	ands	r3, r1
 8003f20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3728      	adds	r7, #40	@ 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	fe00e800 	.word	0xfe00e800

08003f58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	4613      	mov	r3, r2
 8003f68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f6a:	897b      	ldrh	r3, [r7, #10]
 8003f6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f70:	7a7b      	ldrb	r3, [r7, #9]
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	0d5b      	lsrs	r3, r3, #21
 8003f92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <I2C_TransferConfig+0x60>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	ea02 0103 	and.w	r1, r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	03ff63ff 	.word	0x03ff63ff

08003fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d138      	bne.n	8004044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e032      	b.n	8004046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	@ 0x24
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800400e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b20      	cmp	r3, #32
 8004066:	d139      	bne.n	80040dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004072:	2302      	movs	r3, #2
 8004074:	e033      	b.n	80040de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2224      	movs	r2, #36	@ 0x24
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f001 b823 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 817d 	beq.w	8004422 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004128:	4bbc      	ldr	r3, [pc, #752]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b04      	cmp	r3, #4
 8004132:	d00c      	beq.n	800414e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004134:	4bb9      	ldr	r3, [pc, #740]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d15c      	bne.n	80041fa <HAL_RCC_OscConfig+0x10e>
 8004140:	4bb6      	ldr	r3, [pc, #728]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800414c:	d155      	bne.n	80041fa <HAL_RCC_OscConfig+0x10e>
 800414e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004152:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004162:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_RCC_OscConfig+0x94>
 800417a:	4ba8      	ldr	r3, [pc, #672]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	e015      	b.n	80041ac <HAL_RCC_OscConfig+0xc0>
 8004180:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004184:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004198:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800419c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80041a8:	4b9c      	ldr	r3, [pc, #624]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041b0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80041b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80041b8:	fa92 f2a2 	rbit	r2, r2
 80041bc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80041c0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80041c4:	fab2 f282 	clz	r2, r2
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f002 021f 	and.w	r2, r2, #31
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f202 	lsl.w	r2, r1, r2
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 811f 	beq.w	8004420 <HAL_RCC_OscConfig+0x334>
 80041e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 8116 	bne.w	8004420 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f000 bfaf 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x12e>
 800420c:	4b83      	ldr	r3, [pc, #524]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a82      	ldr	r2, [pc, #520]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e036      	b.n	8004288 <HAL_RCC_OscConfig+0x19c>
 800421a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x158>
 800422a:	4b7c      	ldr	r3, [pc, #496]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7b      	ldr	r2, [pc, #492]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b79      	ldr	r3, [pc, #484]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a78      	ldr	r2, [pc, #480]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800423c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e021      	b.n	8004288 <HAL_RCC_OscConfig+0x19c>
 8004244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x184>
 8004256:	4b71      	ldr	r3, [pc, #452]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a70      	ldr	r2, [pc, #448]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b6e      	ldr	r3, [pc, #440]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6d      	ldr	r2, [pc, #436]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0x19c>
 8004270:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a69      	ldr	r2, [pc, #420]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b67      	ldr	r3, [pc, #412]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a66      	ldr	r2, [pc, #408]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004286:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004288:	4b64      	ldr	r3, [pc, #400]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	f023 020f 	bic.w	r2, r3, #15
 8004290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	495f      	ldr	r1, [pc, #380]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d059      	beq.n	8004366 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fe f973 	bl	800259c <HAL_GetTick>
 80042b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe f96e 	bl	800259c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b64      	cmp	r3, #100	@ 0x64
 80042ca:	d902      	bls.n	80042d2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	f000 bf43 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
 80042d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042d6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80042e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d102      	bne.n	8004304 <HAL_RCC_OscConfig+0x218>
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	e015      	b.n	8004330 <HAL_RCC_OscConfig+0x244>
 8004304:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004308:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004318:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800431c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004320:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800432c:	4b3b      	ldr	r3, [pc, #236]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004334:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004338:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800433c:	fa92 f2a2 	rbit	r2, r2
 8004340:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004344:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004348:	fab2 f282 	clz	r2, r2
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	f042 0220 	orr.w	r2, r2, #32
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	f002 021f 	and.w	r2, r2, #31
 8004358:	2101      	movs	r1, #1
 800435a:	fa01 f202 	lsl.w	r2, r1, r2
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ab      	beq.n	80042bc <HAL_RCC_OscConfig+0x1d0>
 8004364:	e05d      	b.n	8004422 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fe f919 	bl	800259c <HAL_GetTick>
 800436a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe f914 	bl	800259c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b64      	cmp	r3, #100	@ 0x64
 800437e:	d902      	bls.n	8004386 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	f000 bee9 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
 8004386:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800438a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800439a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d102      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2cc>
 80043b2:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	e015      	b.n	80043e4 <HAL_RCC_OscConfig+0x2f8>
 80043b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043bc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80043cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043d0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80043d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80043e0:	4b0e      	ldr	r3, [pc, #56]	@ (800441c <HAL_RCC_OscConfig+0x330>)
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043e8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80043ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80043f0:	fa92 f2a2 	rbit	r2, r2
 80043f4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80043f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80043fc:	fab2 f282 	clz	r2, r2
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	f042 0220 	orr.w	r2, r2, #32
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f002 021f 	and.w	r2, r2, #31
 800440c:	2101      	movs	r1, #1
 800440e:	fa01 f202 	lsl.w	r2, r1, r2
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ab      	bne.n	8004370 <HAL_RCC_OscConfig+0x284>
 8004418:	e003      	b.n	8004422 <HAL_RCC_OscConfig+0x336>
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004426:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 817d 	beq.w	8004732 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004438:	4ba6      	ldr	r3, [pc, #664]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004444:	4ba3      	ldr	r3, [pc, #652]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d172      	bne.n	8004536 <HAL_RCC_OscConfig+0x44a>
 8004450:	4ba0      	ldr	r3, [pc, #640]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d16c      	bne.n	8004536 <HAL_RCC_OscConfig+0x44a>
 800445c:	2302      	movs	r3, #2
 800445e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800446e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <HAL_RCC_OscConfig+0x3a0>
 8004486:	4b93      	ldr	r3, [pc, #588]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	e013      	b.n	80044b4 <HAL_RCC_OscConfig+0x3c8>
 800448c:	2302      	movs	r3, #2
 800448e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800449e:	2302      	movs	r3, #2
 80044a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80044a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80044b0:	4b88      	ldr	r3, [pc, #544]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	2202      	movs	r2, #2
 80044b6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80044ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80044be:	fa92 f2a2 	rbit	r2, r2
 80044c2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80044c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044ca:	fab2 f282 	clz	r2, r2
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	f042 0220 	orr.w	r2, r2, #32
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	f002 021f 	and.w	r2, r2, #31
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f202 	lsl.w	r2, r1, r2
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCC_OscConfig+0x410>
 80044e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f000 be2e 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fc:	4b75      	ldr	r3, [pc, #468]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004508:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	21f8      	movs	r1, #248	@ 0xf8
 8004512:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800451a:	fa91 f1a1 	rbit	r1, r1
 800451e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004522:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004526:	fab1 f181 	clz	r1, r1
 800452a:	b2c9      	uxtb	r1, r1
 800452c:	408b      	lsls	r3, r1
 800452e:	4969      	ldr	r1, [pc, #420]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004534:	e0fd      	b.n	8004732 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8088 	beq.w	8004658 <HAL_RCC_OscConfig+0x56c>
 8004548:	2301      	movs	r3, #1
 800454a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800455a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004568:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	461a      	mov	r2, r3
 8004570:	2301      	movs	r3, #1
 8004572:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fe f812 	bl	800259c <HAL_GetTick>
 8004578:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457e:	f7fe f80d 	bl	800259c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d902      	bls.n	8004594 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	f000 bde2 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
 8004594:	2302      	movs	r3, #2
 8004596:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80045a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d102      	bne.n	80045c4 <HAL_RCC_OscConfig+0x4d8>
 80045be:	4b45      	ldr	r3, [pc, #276]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	e013      	b.n	80045ec <HAL_RCC_OscConfig+0x500>
 80045c4:	2302      	movs	r3, #2
 80045c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80045d6:	2302      	movs	r3, #2
 80045d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80045dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80045e0:	fa93 f3a3 	rbit	r3, r3
 80045e4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80045e8:	4b3a      	ldr	r3, [pc, #232]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	2202      	movs	r2, #2
 80045ee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80045f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80045f6:	fa92 f2a2 	rbit	r2, r2
 80045fa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80045fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004602:	fab2 f282 	clz	r2, r2
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f042 0220 	orr.w	r2, r2, #32
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f002 021f 	and.w	r2, r2, #31
 8004612:	2101      	movs	r1, #1
 8004614:	fa01 f202 	lsl.w	r2, r1, r2
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0af      	beq.n	800457e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b2d      	ldr	r3, [pc, #180]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800462a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	21f8      	movs	r1, #248	@ 0xf8
 8004634:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800463c:	fa91 f1a1 	rbit	r1, r1
 8004640:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004644:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004648:	fab1 f181 	clz	r1, r1
 800464c:	b2c9      	uxtb	r1, r1
 800464e:	408b      	lsls	r3, r1
 8004650:	4920      	ldr	r1, [pc, #128]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
 8004656:	e06c      	b.n	8004732 <HAL_RCC_OscConfig+0x646>
 8004658:	2301      	movs	r3, #1
 800465a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800466a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004678:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	461a      	mov	r2, r3
 8004680:	2300      	movs	r3, #0
 8004682:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd ff8a 	bl	800259c <HAL_GetTick>
 8004688:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468e:	f7fd ff85 	bl	800259c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d902      	bls.n	80046a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	f000 bd5a 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
 80046a4:	2302      	movs	r3, #2
 80046a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80046b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d104      	bne.n	80046d8 <HAL_RCC_OscConfig+0x5ec>
 80046ce:	4b01      	ldr	r3, [pc, #4]	@ (80046d4 <HAL_RCC_OscConfig+0x5e8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	e015      	b.n	8004700 <HAL_RCC_OscConfig+0x614>
 80046d4:	40021000 	.word	0x40021000
 80046d8:	2302      	movs	r3, #2
 80046da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80046ea:	2302      	movs	r3, #2
 80046ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80046f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80046fc:	4bc8      	ldr	r3, [pc, #800]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	2202      	movs	r2, #2
 8004702:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004706:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800470a:	fa92 f2a2 	rbit	r2, r2
 800470e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004712:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004716:	fab2 f282 	clz	r2, r2
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	f042 0220 	orr.w	r2, r2, #32
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	f002 021f 	and.w	r2, r2, #31
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f202 	lsl.w	r2, r1, r2
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1ad      	bne.n	800468e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8110 	beq.w	8004968 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d079      	beq.n	800484c <HAL_RCC_OscConfig+0x760>
 8004758:	2301      	movs	r3, #1
 800475a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	4bab      	ldr	r3, [pc, #684]	@ (8004a24 <HAL_RCC_OscConfig+0x938>)
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	461a      	mov	r2, r3
 800477e:	2301      	movs	r3, #1
 8004780:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004782:	f7fd ff0b 	bl	800259c <HAL_GetTick>
 8004786:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478c:	f7fd ff06 	bl	800259c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d902      	bls.n	80047a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	f000 bcdb 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
 80047a2:	2302      	movs	r3, #2
 80047a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80047b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047bc:	2202      	movs	r2, #2
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	fa93 f2a3 	rbit	r2, r3
 80047ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e0:	2202      	movs	r2, #2
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	fa93 f2a3 	rbit	r2, r3
 80047f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fc:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 80047fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004804:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004808:	2102      	movs	r1, #2
 800480a:	6019      	str	r1, [r3, #0]
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	fa93 f1a3 	rbit	r1, r3
 800481a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004822:	6019      	str	r1, [r3, #0]
  return result;
 8004824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004828:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	fab3 f383 	clz	r3, r3
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2101      	movs	r1, #1
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0a0      	beq.n	800478c <HAL_RCC_OscConfig+0x6a0>
 800484a:	e08d      	b.n	8004968 <HAL_RCC_OscConfig+0x87c>
 800484c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004850:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	fa93 f2a3 	rbit	r2, r3
 8004866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800486e:	601a      	str	r2, [r3, #0]
  return result;
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004878:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	4b68      	ldr	r3, [pc, #416]	@ (8004a24 <HAL_RCC_OscConfig+0x938>)
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	461a      	mov	r2, r3
 800488a:	2300      	movs	r3, #0
 800488c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488e:	f7fd fe85 	bl	800259c <HAL_GetTick>
 8004892:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004898:	f7fd fe80 	bl	800259c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d902      	bls.n	80048ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	f000 bc55 	b.w	8005158 <HAL_RCC_OscConfig+0x106c>
 80048ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048b6:	2202      	movs	r2, #2
 80048b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	fa93 f2a3 	rbit	r2, r3
 80048c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80048da:	2202      	movs	r2, #2
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	fa93 f2a3 	rbit	r2, r3
 80048ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80048fe:	2202      	movs	r2, #2
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004906:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	fa93 f2a3 	rbit	r2, r3
 8004910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004914:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004918:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491a:	4b41      	ldr	r3, [pc, #260]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 800491c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800491e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004922:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004926:	2102      	movs	r1, #2
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	fa93 f1a3 	rbit	r1, r3
 8004938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800493c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004940:	6019      	str	r1, [r3, #0]
  return result;
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d197      	bne.n	8004898 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 81a1 	beq.w	8004cc0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004984:	4b26      	ldr	r3, [pc, #152]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d116      	bne.n	80049be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004990:	4b23      	ldr	r3, [pc, #140]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499a:	61d3      	str	r3, [r2, #28]
 800499c:	4b20      	ldr	r3, [pc, #128]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80049a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80049b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <HAL_RCC_OscConfig+0x93c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11a      	bne.n	8004a00 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ca:	4b17      	ldr	r3, [pc, #92]	@ (8004a28 <HAL_RCC_OscConfig+0x93c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a16      	ldr	r2, [pc, #88]	@ (8004a28 <HAL_RCC_OscConfig+0x93c>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d6:	f7fd fde1 	bl	800259c <HAL_GetTick>
 80049da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049de:	e009      	b.n	80049f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e0:	f7fd fddc 	bl	800259c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b64      	cmp	r3, #100	@ 0x64
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e3b1      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCC_OscConfig+0x93c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ef      	beq.n	80049e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d10d      	bne.n	8004a2c <HAL_RCC_OscConfig+0x940>
 8004a10:	4b03      	ldr	r3, [pc, #12]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4a02      	ldr	r2, [pc, #8]	@ (8004a20 <HAL_RCC_OscConfig+0x934>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6213      	str	r3, [r2, #32]
 8004a1c:	e03c      	b.n	8004a98 <HAL_RCC_OscConfig+0x9ac>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	10908120 	.word	0x10908120
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCC_OscConfig+0x96a>
 8004a3c:	4bc1      	ldr	r3, [pc, #772]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4ac0      	ldr	r2, [pc, #768]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	6213      	str	r3, [r2, #32]
 8004a48:	4bbe      	ldr	r3, [pc, #760]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	4abd      	ldr	r2, [pc, #756]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a4e:	f023 0304 	bic.w	r3, r3, #4
 8004a52:	6213      	str	r3, [r2, #32]
 8004a54:	e020      	b.n	8004a98 <HAL_RCC_OscConfig+0x9ac>
 8004a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x994>
 8004a66:	4bb7      	ldr	r3, [pc, #732]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4ab6      	ldr	r2, [pc, #728]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	6213      	str	r3, [r2, #32]
 8004a72:	4bb4      	ldr	r3, [pc, #720]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	4ab3      	ldr	r2, [pc, #716]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6213      	str	r3, [r2, #32]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0x9ac>
 8004a80:	4bb0      	ldr	r3, [pc, #704]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	4aaf      	ldr	r2, [pc, #700]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	6213      	str	r3, [r2, #32]
 8004a8c:	4bad      	ldr	r3, [pc, #692]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4aac      	ldr	r2, [pc, #688]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004a92:	f023 0304 	bic.w	r3, r3, #4
 8004a96:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8081 	beq.w	8004bac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aaa:	f7fd fd77 	bl	800259c <HAL_GetTick>
 8004aae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7fd fd72 	bl	800259c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e345      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
 8004acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004adc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	fa93 f2a3 	rbit	r2, r3
 8004ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004af8:	2202      	movs	r2, #2
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	fa93 f2a3 	rbit	r2, r3
 8004b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b12:	601a      	str	r2, [r3, #0]
  return result;
 8004b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b18:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1e:	fab3 f383 	clz	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d102      	bne.n	8004b38 <HAL_RCC_OscConfig+0xa4c>
 8004b32:	4b84      	ldr	r3, [pc, #528]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	e013      	b.n	8004b60 <HAL_RCC_OscConfig+0xa74>
 8004b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b40:	2202      	movs	r2, #2
 8004b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	fa93 f2a3 	rbit	r2, r3
 8004b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b56:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	4b79      	ldr	r3, [pc, #484]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b64:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b68:	2102      	movs	r1, #2
 8004b6a:	6011      	str	r1, [r2, #0]
 8004b6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b70:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	fa92 f1a2 	rbit	r1, r2
 8004b7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b7e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b82:	6011      	str	r1, [r2, #0]
  return result;
 8004b84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b88:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	fab2 f282 	clz	r2, r2
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	f002 021f 	and.w	r2, r2, #31
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d084      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x9c8>
 8004baa:	e07f      	b.n	8004cac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bac:	f7fd fcf6 	bl	800259c <HAL_GetTick>
 8004bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb4:	e00b      	b.n	8004bce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fd fcf1 	bl	800259c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e2c4      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
 8004bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bde:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	fa93 f2a3 	rbit	r2, r3
 8004be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c02:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	fa93 f2a3 	rbit	r2, r3
 8004c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c14:	601a      	str	r2, [r3, #0]
  return result;
 8004c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f043 0302 	orr.w	r3, r3, #2
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d102      	bne.n	8004c3a <HAL_RCC_OscConfig+0xb4e>
 8004c34:	4b43      	ldr	r3, [pc, #268]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	e013      	b.n	8004c62 <HAL_RCC_OscConfig+0xb76>
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c42:	2202      	movs	r2, #2
 8004c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	fa93 f2a3 	rbit	r2, r3
 8004c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c58:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	4b39      	ldr	r3, [pc, #228]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c66:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c72:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	fa92 f1a2 	rbit	r1, r2
 8004c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c80:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c84:	6011      	str	r1, [r2, #0]
  return result;
 8004c86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c8a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	fab2 f282 	clz	r2, r2
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	f002 021f 	and.w	r2, r2, #31
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d184      	bne.n	8004bb6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cac:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb4:	4b23      	ldr	r3, [pc, #140]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4a22      	ldr	r2, [pc, #136]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8242 	beq.w	8005156 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d44 <HAL_RCC_OscConfig+0xc58>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	f000 8213 	beq.w	8005106 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f040 8162 	bne.w	8004fb6 <HAL_RCC_OscConfig+0xeca>
 8004cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cf6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004cfa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d04:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	fa93 f2a3 	rbit	r2, r3
 8004d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d12:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d16:	601a      	str	r2, [r3, #0]
  return result;
 8004d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	461a      	mov	r2, r3
 8004d34:	2300      	movs	r3, #0
 8004d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7fd fc30 	bl	800259c <HAL_GetTick>
 8004d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d40:	e00c      	b.n	8004d5c <HAL_RCC_OscConfig+0xc70>
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fd fc28 	bl	800259c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e1fd      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
 8004d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d6e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	fa93 f2a3 	rbit	r2, r3
 8004d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d80:	601a      	str	r2, [r3, #0]
  return result;
 8004d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d86:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCC_OscConfig+0xcba>
 8004da0:	4bb0      	ldr	r3, [pc, #704]	@ (8005064 <HAL_RCC_OscConfig+0xf78>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	e027      	b.n	8004df6 <HAL_RCC_OscConfig+0xd0a>
 8004da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004daa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004dae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	fa93 f2a3 	rbit	r2, r3
 8004dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004dd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dde:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	fa93 f2a3 	rbit	r2, r3
 8004de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	4b9c      	ldr	r3, [pc, #624]	@ (8005064 <HAL_RCC_OscConfig+0xf78>)
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dfa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004dfe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e02:	6011      	str	r1, [r2, #0]
 8004e04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e08:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	fa92 f1a2 	rbit	r1, r2
 8004e12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e1a:	6011      	str	r1, [r2, #0]
  return result;
 8004e1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e20:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	fab2 f282 	clz	r2, r2
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	f042 0220 	orr.w	r2, r2, #32
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	f002 021f 	and.w	r2, r2, #31
 8004e36:	2101      	movs	r1, #1
 8004e38:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d182      	bne.n	8004d48 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e42:	4b88      	ldr	r3, [pc, #544]	@ (8005064 <HAL_RCC_OscConfig+0xf78>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	430b      	orrs	r3, r1
 8004e64:	497f      	ldr	r1, [pc, #508]	@ (8005064 <HAL_RCC_OscConfig+0xf78>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	604b      	str	r3, [r1, #4]
 8004e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e6e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004e72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	fa93 f2a3 	rbit	r2, r3
 8004e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e8a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004e8e:	601a      	str	r2, [r3, #0]
  return result;
 8004e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e94:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004e98:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ea4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2301      	movs	r3, #1
 8004eae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fd fb74 	bl	800259c <HAL_GetTick>
 8004eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eb8:	e009      	b.n	8004ece <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eba:	f7fd fb6f 	bl	800259c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e144      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
 8004ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004ed6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f2a3 	rbit	r2, r3
 8004eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004ef2:	601a      	str	r2, [r3, #0]
  return result;
 8004ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004efc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d102      	bne.n	8004f18 <HAL_RCC_OscConfig+0xe2c>
 8004f12:	4b54      	ldr	r3, [pc, #336]	@ (8005064 <HAL_RCC_OscConfig+0xf78>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	e027      	b.n	8004f68 <HAL_RCC_OscConfig+0xe7c>
 8004f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f2a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	fa93 f2a3 	rbit	r2, r3
 8004f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f42:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f50:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	fa93 f2a3 	rbit	r2, r3
 8004f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	4b3f      	ldr	r3, [pc, #252]	@ (8005064 <HAL_RCC_OscConfig+0xf78>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f6c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004f70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f74:	6011      	str	r1, [r2, #0]
 8004f76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f7a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	fa92 f1a2 	rbit	r1, r2
 8004f84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004f8c:	6011      	str	r1, [r2, #0]
  return result;
 8004f8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f92:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	fab2 f282 	clz	r2, r2
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	f042 0220 	orr.w	r2, r2, #32
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	f002 021f 	and.w	r2, r2, #31
 8004fa8:	2101      	movs	r1, #1
 8004faa:	fa01 f202 	lsl.w	r2, r1, r2
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d082      	beq.n	8004eba <HAL_RCC_OscConfig+0xdce>
 8004fb4:	e0cf      	b.n	8005156 <HAL_RCC_OscConfig+0x106a>
 8004fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	fa93 f2a3 	rbit	r2, r3
 8004fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004fda:	601a      	str	r2, [r3, #0]
  return result;
 8004fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004fe4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ff0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fd face 	bl	800259c <HAL_GetTick>
 8005000:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005004:	e009      	b.n	800501a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005006:	f7fd fac9 	bl	800259c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e09e      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
 800501a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800501e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005022:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800502c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	fa93 f2a3 	rbit	r2, r3
 8005036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800503a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800503e:	601a      	str	r2, [r3, #0]
  return result;
 8005040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005044:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005048:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d104      	bne.n	8005068 <HAL_RCC_OscConfig+0xf7c>
 800505e:	4b01      	ldr	r3, [pc, #4]	@ (8005064 <HAL_RCC_OscConfig+0xf78>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	e029      	b.n	80050b8 <HAL_RCC_OscConfig+0xfcc>
 8005064:	40021000 	.word	0x40021000
 8005068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005070:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800507a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fa93 f2a3 	rbit	r2, r3
 8005084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005088:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005092:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005096:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050a0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	fa93 f2a3 	rbit	r2, r3
 80050aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005164 <HAL_RCC_OscConfig+0x1078>)
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050bc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80050c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050ca:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	fa92 f1a2 	rbit	r1, r2
 80050d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050dc:	6011      	str	r1, [r2, #0]
  return result;
 80050de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050e2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	fab2 f282 	clz	r2, r2
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	f042 0220 	orr.w	r2, r2, #32
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	f002 021f 	and.w	r2, r2, #31
 80050f8:	2101      	movs	r1, #1
 80050fa:	fa01 f202 	lsl.w	r2, r1, r2
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d180      	bne.n	8005006 <HAL_RCC_OscConfig+0xf1a>
 8005104:	e027      	b.n	8005156 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e01e      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800511a:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <HAL_RCC_OscConfig+0x1078>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005122:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005126:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800512a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800512e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	429a      	cmp	r2, r3
 8005138:	d10b      	bne.n	8005152 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800513a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800513e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800514e:	429a      	cmp	r2, r3
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000

08005168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b09e      	sub	sp, #120	@ 0x78
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e162      	b.n	8005446 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005180:	4b90      	ldr	r3, [pc, #576]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d910      	bls.n	80051b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b8d      	ldr	r3, [pc, #564]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 0207 	bic.w	r2, r3, #7
 8005196:	498b      	ldr	r1, [pc, #556]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b89      	ldr	r3, [pc, #548]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e14a      	b.n	8005446 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051bc:	4b82      	ldr	r3, [pc, #520]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	497f      	ldr	r1, [pc, #508]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80dc 	beq.w	8005394 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d13c      	bne.n	800525e <HAL_RCC_ClockConfig+0xf6>
 80051e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ec:	fa93 f3a3 	rbit	r3, r3
 80051f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80051f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f4:	fab3 f383 	clz	r3, r3
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d102      	bne.n	800520e <HAL_RCC_ClockConfig+0xa6>
 8005208:	4b6f      	ldr	r3, [pc, #444]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	e00f      	b.n	800522e <HAL_RCC_ClockConfig+0xc6>
 800520e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005212:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005216:	fa93 f3a3 	rbit	r3, r3
 800521a:	667b      	str	r3, [r7, #100]	@ 0x64
 800521c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005220:	663b      	str	r3, [r7, #96]	@ 0x60
 8005222:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005224:	fa93 f3a3 	rbit	r3, r3
 8005228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800522a:	4b67      	ldr	r3, [pc, #412]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005232:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005236:	fa92 f2a2 	rbit	r2, r2
 800523a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800523c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800523e:	fab2 f282 	clz	r2, r2
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	f042 0220 	orr.w	r2, r2, #32
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	f002 021f 	and.w	r2, r2, #31
 800524e:	2101      	movs	r1, #1
 8005250:	fa01 f202 	lsl.w	r2, r1, r2
 8005254:	4013      	ands	r3, r2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d17b      	bne.n	8005352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0f3      	b.n	8005446 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d13c      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x178>
 8005266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800526a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800526e:	fa93 f3a3 	rbit	r3, r3
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005276:	fab3 f383 	clz	r3, r3
 800527a:	b2db      	uxtb	r3, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d102      	bne.n	8005290 <HAL_RCC_ClockConfig+0x128>
 800528a:	4b4f      	ldr	r3, [pc, #316]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	e00f      	b.n	80052b0 <HAL_RCC_ClockConfig+0x148>
 8005290:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005294:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005298:	fa93 f3a3 	rbit	r3, r3
 800529c:	647b      	str	r3, [r7, #68]	@ 0x44
 800529e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ac:	4b46      	ldr	r3, [pc, #280]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052b4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80052b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052b8:	fa92 f2a2 	rbit	r2, r2
 80052bc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80052be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052c0:	fab2 f282 	clz	r2, r2
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	f042 0220 	orr.w	r2, r2, #32
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	f002 021f 	and.w	r2, r2, #31
 80052d0:	2101      	movs	r1, #1
 80052d2:	fa01 f202 	lsl.w	r2, r1, r2
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d13a      	bne.n	8005352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b2      	b.n	8005446 <HAL_RCC_ClockConfig+0x2de>
 80052e0:	2302      	movs	r3, #2
 80052e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	fa93 f3a3 	rbit	r3, r3
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80052ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ee:	fab3 f383 	clz	r3, r3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d102      	bne.n	8005308 <HAL_RCC_ClockConfig+0x1a0>
 8005302:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	e00d      	b.n	8005324 <HAL_RCC_ClockConfig+0x1bc>
 8005308:	2302      	movs	r3, #2
 800530a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	fa93 f3a3 	rbit	r3, r3
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
 8005314:	2302      	movs	r3, #2
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	2202      	movs	r2, #2
 8005326:	61ba      	str	r2, [r7, #24]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	fa92 f2a2 	rbit	r2, r2
 800532e:	617a      	str	r2, [r7, #20]
  return result;
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	fab2 f282 	clz	r2, r2
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	f042 0220 	orr.w	r2, r2, #32
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	f002 021f 	and.w	r2, r2, #31
 8005342:	2101      	movs	r1, #1
 8005344:	fa01 f202 	lsl.w	r2, r1, r2
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e079      	b.n	8005446 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005352:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f023 0203 	bic.w	r2, r3, #3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	491a      	ldr	r1, [pc, #104]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005364:	f7fd f91a 	bl	800259c <HAL_GetTick>
 8005368:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	e00a      	b.n	8005382 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536c:	f7fd f916 	bl	800259c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e061      	b.n	8005446 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <HAL_RCC_ClockConfig+0x260>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 020c 	and.w	r2, r3, #12
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	429a      	cmp	r2, r3
 8005392:	d1eb      	bne.n	800536c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d214      	bcs.n	80053cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 0207 	bic.w	r2, r3, #7
 80053aa:	4906      	ldr	r1, [pc, #24]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <HAL_RCC_ClockConfig+0x25c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e040      	b.n	8005446 <HAL_RCC_ClockConfig+0x2de>
 80053c4:	40022000 	.word	0x40022000
 80053c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005450 <HAL_RCC_ClockConfig+0x2e8>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	491a      	ldr	r1, [pc, #104]	@ (8005450 <HAL_RCC_ClockConfig+0x2e8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f6:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <HAL_RCC_ClockConfig+0x2e8>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4912      	ldr	r1, [pc, #72]	@ (8005450 <HAL_RCC_ClockConfig+0x2e8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800540a:	f000 f829 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 800540e:	4601      	mov	r1, r0
 8005410:	4b0f      	ldr	r3, [pc, #60]	@ (8005450 <HAL_RCC_ClockConfig+0x2e8>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005418:	22f0      	movs	r2, #240	@ 0xf0
 800541a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	fa92 f2a2 	rbit	r2, r2
 8005422:	60fa      	str	r2, [r7, #12]
  return result;
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	fab2 f282 	clz	r2, r2
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	40d3      	lsrs	r3, r2
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <HAL_RCC_ClockConfig+0x2ec>)
 8005430:	5cd3      	ldrb	r3, [r2, r3]
 8005432:	fa21 f303 	lsr.w	r3, r1, r3
 8005436:	4a08      	ldr	r2, [pc, #32]	@ (8005458 <HAL_RCC_ClockConfig+0x2f0>)
 8005438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800543a:	4b08      	ldr	r3, [pc, #32]	@ (800545c <HAL_RCC_ClockConfig+0x2f4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fd f868 	bl	8002514 <HAL_InitTick>
  
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3778      	adds	r7, #120	@ 0x78
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	0800bad4 	.word	0x0800bad4
 8005458:	20000014 	.word	0x20000014
 800545c:	20000018 	.word	0x20000018

08005460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800547a:	4b1e      	ldr	r3, [pc, #120]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b04      	cmp	r3, #4
 8005488:	d002      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x30>
 800548a:	2b08      	cmp	r3, #8
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0x36>
 800548e:	e026      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005492:	613b      	str	r3, [r7, #16]
      break;
 8005494:	e026      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	0c9b      	lsrs	r3, r3, #18
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	4a17      	ldr	r2, [pc, #92]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80054a0:	5cd3      	ldrb	r3, [r2, r3]
 80054a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80054a4:	4b13      	ldr	r3, [pc, #76]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	4a14      	ldr	r2, [pc, #80]	@ (8005500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054bc:	4a0e      	ldr	r2, [pc, #56]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e004      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	613b      	str	r3, [r7, #16]
      break;
 80054dc:	e002      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054de:	4b06      	ldr	r3, [pc, #24]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80054e0:	613b      	str	r3, [r7, #16]
      break;
 80054e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e4:	693b      	ldr	r3, [r7, #16]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
 80054f8:	007a1200 	.word	0x007a1200
 80054fc:	0800baec 	.word	0x0800baec
 8005500:	0800bafc 	.word	0x0800bafc
 8005504:	003d0900 	.word	0x003d0900

08005508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	@ (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000014 	.word	0x20000014

08005520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005526:	f7ff ffef 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 800552a:	4601      	mov	r1, r0
 800552c:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005534:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005538:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	fa92 f2a2 	rbit	r2, r2
 8005540:	603a      	str	r2, [r7, #0]
  return result;
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	fab2 f282 	clz	r2, r2
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	40d3      	lsrs	r3, r2
 800554c:	4a04      	ldr	r2, [pc, #16]	@ (8005560 <HAL_RCC_GetPCLK1Freq+0x40>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40021000 	.word	0x40021000
 8005560:	0800bae4 	.word	0x0800bae4

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800556a:	f7ff ffcd 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 800556e:	4601      	mov	r1, r0
 8005570:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005578:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800557c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	fa92 f2a2 	rbit	r2, r2
 8005584:	603a      	str	r2, [r7, #0]
  return result;
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	fab2 f282 	clz	r2, r2
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	40d3      	lsrs	r3, r2
 8005590:	4a04      	ldr	r2, [pc, #16]	@ (80055a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005592:	5cd3      	ldrb	r3, [r2, r3]
 8005594:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40021000 	.word	0x40021000
 80055a4:	0800bae4 	.word	0x0800bae4

080055a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b092      	sub	sp, #72	@ 0x48
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80d4 	beq.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10e      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	61d3      	str	r3, [r2, #28]
 80055e4:	4b48      	ldr	r3, [pc, #288]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f6:	4b45      	ldr	r3, [pc, #276]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d118      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005602:	4b42      	ldr	r3, [pc, #264]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a41      	ldr	r2, [pc, #260]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800560c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560e:	f7fc ffc5 	bl	800259c <HAL_GetTick>
 8005612:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005614:	e008      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005616:	f7fc ffc1 	bl	800259c <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b64      	cmp	r3, #100	@ 0x64
 8005622:	d901      	bls.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e14b      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005628:	4b38      	ldr	r3, [pc, #224]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f0      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005634:	4b34      	ldr	r3, [pc, #208]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800563e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8084 	beq.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005650:	429a      	cmp	r2, r3
 8005652:	d07c      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005654:	4b2c      	ldr	r3, [pc, #176]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800565e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005662:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800566c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	4b26      	ldr	r3, [pc, #152]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	461a      	mov	r2, r3
 800567e:	2301      	movs	r3, #1
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568a:	fa93 f3a3 	rbit	r3, r3
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005692:	fab3 f383 	clz	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	4b1d      	ldr	r3, [pc, #116]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	461a      	mov	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056a6:	4a18      	ldr	r2, [pc, #96]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d04b      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b6:	f7fc ff71 	bl	800259c <HAL_GetTick>
 80056ba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fc ff6d 	bl	800259c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e0f5      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80056d4:	2302      	movs	r3, #2
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	fa93 f3a3 	rbit	r3, r3
 80056de:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e0:	2302      	movs	r3, #2
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	fa93 f3a3 	rbit	r3, r3
 80056ea:	61fb      	str	r3, [r7, #28]
  return result;
 80056ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d108      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005702:	4b01      	ldr	r3, [pc, #4]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	e00d      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
 8005710:	10908100 	.word	0x10908100
 8005714:	2302      	movs	r3, #2
 8005716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	4b69      	ldr	r3, [pc, #420]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	2202      	movs	r2, #2
 8005726:	613a      	str	r2, [r7, #16]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	fa92 f2a2 	rbit	r2, r2
 800572e:	60fa      	str	r2, [r7, #12]
  return result;
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	fab2 f282 	clz	r2, r2
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	f002 021f 	and.w	r2, r2, #31
 8005742:	2101      	movs	r1, #1
 8005744:	fa01 f202 	lsl.w	r2, r1, r2
 8005748:	4013      	ands	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0b7      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800574e:	4b5e      	ldr	r3, [pc, #376]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	495b      	ldr	r1, [pc, #364]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800575c:	4313      	orrs	r3, r2
 800575e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005760:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005768:	4b57      	ldr	r3, [pc, #348]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	4a56      	ldr	r2, [pc, #344]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800576e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005780:	4b51      	ldr	r3, [pc, #324]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	f023 0203 	bic.w	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494e      	ldr	r1, [pc, #312]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800578e:	4313      	orrs	r3, r2
 8005790:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800579e:	4b4a      	ldr	r3, [pc, #296]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a2:	f023 0210 	bic.w	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	4947      	ldr	r1, [pc, #284]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80057bc:	4b42      	ldr	r3, [pc, #264]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	493f      	ldr	r1, [pc, #252]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057da:	4b3b      	ldr	r3, [pc, #236]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	f023 0220 	bic.w	r2, r3, #32
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	4938      	ldr	r1, [pc, #224]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057f8:	4b33      	ldr	r3, [pc, #204]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	4930      	ldr	r1, [pc, #192]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005806:	4313      	orrs	r3, r2
 8005808:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005812:	2b00      	cmp	r3, #0
 8005814:	d008      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005816:	4b2c      	ldr	r3, [pc, #176]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	4929      	ldr	r1, [pc, #164]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005834:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	4921      	ldr	r1, [pc, #132]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005842:	4313      	orrs	r3, r2
 8005844:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005852:	4b1d      	ldr	r3, [pc, #116]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	491a      	ldr	r1, [pc, #104]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005860:	4313      	orrs	r3, r2
 8005862:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005870:	4b15      	ldr	r3, [pc, #84]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	4912      	ldr	r1, [pc, #72]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800587e:	4313      	orrs	r3, r2
 8005880:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800588e:	4b0e      	ldr	r3, [pc, #56]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	490b      	ldr	r1, [pc, #44]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800589c:	4313      	orrs	r3, r2
 800589e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80058ac:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	4903      	ldr	r1, [pc, #12]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3748      	adds	r7, #72	@ 0x48
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000

080058cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e049      	b.n	8005972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fc f866 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f000 fcda 	bl	80062c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d001      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e03b      	b.n	8005a0c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a19      	ldr	r2, [pc, #100]	@ (8005a18 <HAL_TIM_Base_Start_IT+0x9c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_TIM_Base_Start_IT+0x4e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059be:	d004      	beq.n	80059ca <HAL_TIM_Base_Start_IT+0x4e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xa0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d115      	bne.n	80059f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <HAL_TIM_Base_Start_IT+0xa4>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d015      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x8c>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e2:	d011      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	e008      	b.n	8005a08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e000      	b.n	8005a0a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	00010007 	.word	0x00010007

08005a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e049      	b.n	8005aca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fb ff9a 	bl	8001984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f000 fc2e 	bl	80062c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_TIM_PWM_Start+0x24>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	e03c      	b.n	8005b72 <HAL_TIM_PWM_Start+0x9e>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d109      	bne.n	8005b12 <HAL_TIM_PWM_Start+0x3e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	e02f      	b.n	8005b72 <HAL_TIM_PWM_Start+0x9e>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d109      	bne.n	8005b2c <HAL_TIM_PWM_Start+0x58>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	e022      	b.n	8005b72 <HAL_TIM_PWM_Start+0x9e>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d109      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x72>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	bf14      	ite	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	2300      	moveq	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	e015      	b.n	8005b72 <HAL_TIM_PWM_Start+0x9e>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d109      	bne.n	8005b60 <HAL_TIM_PWM_Start+0x8c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	e008      	b.n	8005b72 <HAL_TIM_PWM_Start+0x9e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e083      	b.n	8005c82 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0xb6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b88:	e023      	b.n	8005bd2 <HAL_TIM_PWM_Start+0xfe>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start+0xc6>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b98:	e01b      	b.n	8005bd2 <HAL_TIM_PWM_Start+0xfe>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_PWM_Start+0xd6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba8:	e013      	b.n	8005bd2 <HAL_TIM_PWM_Start+0xfe>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d104      	bne.n	8005bba <HAL_TIM_PWM_Start+0xe6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bb8:	e00b      	b.n	8005bd2 <HAL_TIM_PWM_Start+0xfe>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b10      	cmp	r3, #16
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_PWM_Start+0xf6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc8:	e003      	b.n	8005bd2 <HAL_TIM_PWM_Start+0xfe>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 ff2c 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a29      	ldr	r2, [pc, #164]	@ (8005c8c <HAL_TIM_PWM_Start+0x1b8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00e      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x134>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a28      	ldr	r2, [pc, #160]	@ (8005c90 <HAL_TIM_PWM_Start+0x1bc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d009      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x134>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a26      	ldr	r2, [pc, #152]	@ (8005c94 <HAL_TIM_PWM_Start+0x1c0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x134>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a25      	ldr	r2, [pc, #148]	@ (8005c98 <HAL_TIM_PWM_Start+0x1c4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_PWM_Start+0x138>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_PWM_Start+0x13a>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a19      	ldr	r2, [pc, #100]	@ (8005c8c <HAL_TIM_PWM_Start+0x1b8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x16c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x16c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	@ (8005c90 <HAL_TIM_PWM_Start+0x1bc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d115      	bne.n	8005c6c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	4b15      	ldr	r3, [pc, #84]	@ (8005c9c <HAL_TIM_PWM_Start+0x1c8>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d015      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x1aa>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c58:	d011      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6a:	e008      	b.n	8005c7e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	e000      	b.n	8005c80 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800
 8005c9c:	00010007 	.word	0x00010007

08005ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d020      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01b      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0202 	mvn.w	r2, #2
 8005cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 facb 	bl	8006286 <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fabd 	bl	8006272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 face 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d020      	beq.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01b      	beq.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0204 	mvn.w	r2, #4
 8005d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 faa5 	bl	8006286 <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa97 	bl	8006272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 faa8 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d020      	beq.n	8005d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01b      	beq.n	8005d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0208 	mvn.w	r2, #8
 8005d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa7f 	bl	8006286 <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa71 	bl	8006272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa82 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d020      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01b      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0210 	mvn.w	r2, #16
 8005db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa59 	bl	8006286 <HAL_TIM_IC_CaptureCallback>
 8005dd4:	e005      	b.n	8005de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa4b 	bl	8006272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fa5c 	bl	800629a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0201 	mvn.w	r2, #1
 8005e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa29 	bl	800625e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 ff12 	bl	8006c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 ff0a 	bl	8006c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa1b 	bl	80062ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0220 	mvn.w	r2, #32
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fed2 	bl	8006c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e0ff      	b.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b14      	cmp	r3, #20
 8005ece:	f200 80f0 	bhi.w	80060b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	080060b3 	.word	0x080060b3
 8005ee0:	080060b3 	.word	0x080060b3
 8005ee4:	080060b3 	.word	0x080060b3
 8005ee8:	08005f6d 	.word	0x08005f6d
 8005eec:	080060b3 	.word	0x080060b3
 8005ef0:	080060b3 	.word	0x080060b3
 8005ef4:	080060b3 	.word	0x080060b3
 8005ef8:	08005faf 	.word	0x08005faf
 8005efc:	080060b3 	.word	0x080060b3
 8005f00:	080060b3 	.word	0x080060b3
 8005f04:	080060b3 	.word	0x080060b3
 8005f08:	08005fef 	.word	0x08005fef
 8005f0c:	080060b3 	.word	0x080060b3
 8005f10:	080060b3 	.word	0x080060b3
 8005f14:	080060b3 	.word	0x080060b3
 8005f18:	08006031 	.word	0x08006031
 8005f1c:	080060b3 	.word	0x080060b3
 8005f20:	080060b3 	.word	0x080060b3
 8005f24:	080060b3 	.word	0x080060b3
 8005f28:	08006071 	.word	0x08006071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fa40 	bl	80063b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0208 	orr.w	r2, r2, #8
 8005f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	619a      	str	r2, [r3, #24]
      break;
 8005f6a:	e0a5      	b.n	80060b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 faa6 	bl	80064c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	619a      	str	r2, [r3, #24]
      break;
 8005fac:	e084      	b.n	80060b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fb05 	bl	80065c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0208 	orr.w	r2, r2, #8
 8005fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0204 	bic.w	r2, r2, #4
 8005fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69d9      	ldr	r1, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	61da      	str	r2, [r3, #28]
      break;
 8005fec:	e064      	b.n	80060b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fb63 	bl	80066c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	021a      	lsls	r2, r3, #8
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	61da      	str	r2, [r3, #28]
      break;
 800602e:	e043      	b.n	80060b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fba6 	bl	8006788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0208 	orr.w	r2, r2, #8
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0204 	bic.w	r2, r2, #4
 800605a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800606e:	e023      	b.n	80060b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fbe4 	bl	8006844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800608a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800609a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	021a      	lsls	r2, r3, #8
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060b0:	e002      	b.n	80060b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
      break;
 80060b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop

080060cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e0b6      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x18a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006106:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800610a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d03e      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0xd8>
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612a:	f200 8087 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x170>
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006132:	f000 8086 	beq.w	8006242 <HAL_TIM_ConfigClockSource+0x176>
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613a:	d87f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x170>
 800613c:	2b70      	cmp	r3, #112	@ 0x70
 800613e:	d01a      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0xaa>
 8006140:	2b70      	cmp	r3, #112	@ 0x70
 8006142:	d87b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x170>
 8006144:	2b60      	cmp	r3, #96	@ 0x60
 8006146:	d050      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x11e>
 8006148:	2b60      	cmp	r3, #96	@ 0x60
 800614a:	d877      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x170>
 800614c:	2b50      	cmp	r3, #80	@ 0x50
 800614e:	d03c      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0xfe>
 8006150:	2b50      	cmp	r3, #80	@ 0x50
 8006152:	d873      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x170>
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d058      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x13e>
 8006158:	2b40      	cmp	r3, #64	@ 0x40
 800615a:	d86f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x170>
 800615c:	2b30      	cmp	r3, #48	@ 0x30
 800615e:	d064      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x15e>
 8006160:	2b30      	cmp	r3, #48	@ 0x30
 8006162:	d86b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x170>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d060      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x15e>
 8006168:	2b20      	cmp	r3, #32
 800616a:	d867      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x170>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05c      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x15e>
 8006170:	2b10      	cmp	r3, #16
 8006172:	d05a      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x15e>
 8006174:	e062      	b.n	800623c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006186:	f000 fc37 	bl	80069f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	609a      	str	r2, [r3, #8]
      break;
 80061a2:	e04f      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b4:	f000 fc20 	bl	80069f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e03c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fb94 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2150      	movs	r1, #80	@ 0x50
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fbed 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e02c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 fbb3 	bl	8006962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2160      	movs	r1, #96	@ 0x60
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fbdd 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006208:	e01c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006216:	461a      	mov	r2, r3
 8006218:	f000 fb74 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2140      	movs	r1, #64	@ 0x40
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fbcd 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006228:	e00c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f000 fbc4 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 800623a:	e003      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      break;
 8006240:	e000      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a34      	ldr	r2, [pc, #208]	@ (80063a8 <TIM_Base_SetConfig+0xe4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_Base_SetConfig+0x20>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e2:	d108      	bne.n	80062f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	@ (80063a8 <TIM_Base_SetConfig+0xe4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00f      	beq.n	800631e <TIM_Base_SetConfig+0x5a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006304:	d00b      	beq.n	800631e <TIM_Base_SetConfig+0x5a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a28      	ldr	r2, [pc, #160]	@ (80063ac <TIM_Base_SetConfig+0xe8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d007      	beq.n	800631e <TIM_Base_SetConfig+0x5a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a27      	ldr	r2, [pc, #156]	@ (80063b0 <TIM_Base_SetConfig+0xec>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_Base_SetConfig+0x5a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a26      	ldr	r2, [pc, #152]	@ (80063b4 <TIM_Base_SetConfig+0xf0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d108      	bne.n	8006330 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a14      	ldr	r2, [pc, #80]	@ (80063a8 <TIM_Base_SetConfig+0xe4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <TIM_Base_SetConfig+0xb0>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a13      	ldr	r2, [pc, #76]	@ (80063ac <TIM_Base_SetConfig+0xe8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_Base_SetConfig+0xb0>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a12      	ldr	r2, [pc, #72]	@ (80063b0 <TIM_Base_SetConfig+0xec>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0xb0>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a11      	ldr	r2, [pc, #68]	@ (80063b4 <TIM_Base_SetConfig+0xf0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	611a      	str	r2, [r3, #16]
  }
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40014400 	.word	0x40014400
 80063b4:	40014800 	.word	0x40014800

080063b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f023 0201 	bic.w	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 0302 	bic.w	r3, r3, #2
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a28      	ldr	r2, [pc, #160]	@ (80064b4 <TIM_OC1_SetConfig+0xfc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00b      	beq.n	8006430 <TIM_OC1_SetConfig+0x78>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a27      	ldr	r2, [pc, #156]	@ (80064b8 <TIM_OC1_SetConfig+0x100>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_OC1_SetConfig+0x78>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a26      	ldr	r2, [pc, #152]	@ (80064bc <TIM_OC1_SetConfig+0x104>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC1_SetConfig+0x78>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a25      	ldr	r2, [pc, #148]	@ (80064c0 <TIM_OC1_SetConfig+0x108>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d10c      	bne.n	800644a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f023 0308 	bic.w	r3, r3, #8
 8006436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f023 0304 	bic.w	r3, r3, #4
 8006448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a19      	ldr	r2, [pc, #100]	@ (80064b4 <TIM_OC1_SetConfig+0xfc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00b      	beq.n	800646a <TIM_OC1_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <TIM_OC1_SetConfig+0x100>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d007      	beq.n	800646a <TIM_OC1_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a17      	ldr	r2, [pc, #92]	@ (80064bc <TIM_OC1_SetConfig+0x104>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d003      	beq.n	800646a <TIM_OC1_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a16      	ldr	r2, [pc, #88]	@ (80064c0 <TIM_OC1_SetConfig+0x108>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d111      	bne.n	800648e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800

080064c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f023 0210 	bic.w	r2, r3, #16
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0320 	bic.w	r3, r3, #32
 8006512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a24      	ldr	r2, [pc, #144]	@ (80065b4 <TIM_OC2_SetConfig+0xf0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10d      	bne.n	8006544 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a1b      	ldr	r2, [pc, #108]	@ (80065b4 <TIM_OC2_SetConfig+0xf0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <TIM_OC2_SetConfig+0xa0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a1a      	ldr	r2, [pc, #104]	@ (80065b8 <TIM_OC2_SetConfig+0xf4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_OC2_SetConfig+0xa0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a19      	ldr	r2, [pc, #100]	@ (80065bc <TIM_OC2_SetConfig+0xf8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_OC2_SetConfig+0xa0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a18      	ldr	r2, [pc, #96]	@ (80065c0 <TIM_OC2_SetConfig+0xfc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d113      	bne.n	800658c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800656a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006572:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a23      	ldr	r2, [pc, #140]	@ (80066b0 <TIM_OC3_SetConfig+0xec>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d10d      	bne.n	8006642 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800662c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006640:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a1a      	ldr	r2, [pc, #104]	@ (80066b0 <TIM_OC3_SetConfig+0xec>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00b      	beq.n	8006662 <TIM_OC3_SetConfig+0x9e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a19      	ldr	r2, [pc, #100]	@ (80066b4 <TIM_OC3_SetConfig+0xf0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d007      	beq.n	8006662 <TIM_OC3_SetConfig+0x9e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a18      	ldr	r2, [pc, #96]	@ (80066b8 <TIM_OC3_SetConfig+0xf4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <TIM_OC3_SetConfig+0x9e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a17      	ldr	r2, [pc, #92]	@ (80066bc <TIM_OC3_SetConfig+0xf8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d113      	bne.n	800668a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800

080066c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800670e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	031b      	lsls	r3, r3, #12
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a16      	ldr	r2, [pc, #88]	@ (8006778 <TIM_OC4_SetConfig+0xb8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_OC4_SetConfig+0x7c>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a15      	ldr	r2, [pc, #84]	@ (800677c <TIM_OC4_SetConfig+0xbc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_OC4_SetConfig+0x7c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a14      	ldr	r2, [pc, #80]	@ (8006780 <TIM_OC4_SetConfig+0xc0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_OC4_SetConfig+0x7c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a13      	ldr	r2, [pc, #76]	@ (8006784 <TIM_OC4_SetConfig+0xc4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d109      	bne.n	8006750 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	019b      	lsls	r3, r3, #6
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40014000 	.word	0x40014000
 8006780:	40014400 	.word	0x40014400
 8006784:	40014800 	.word	0x40014800

08006788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <TIM_OC5_SetConfig+0xac>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00b      	beq.n	80067fa <TIM_OC5_SetConfig+0x72>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a14      	ldr	r2, [pc, #80]	@ (8006838 <TIM_OC5_SetConfig+0xb0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <TIM_OC5_SetConfig+0x72>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a13      	ldr	r2, [pc, #76]	@ (800683c <TIM_OC5_SetConfig+0xb4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <TIM_OC5_SetConfig+0x72>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a12      	ldr	r2, [pc, #72]	@ (8006840 <TIM_OC5_SetConfig+0xb8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d109      	bne.n	800680e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	621a      	str	r2, [r3, #32]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800

08006844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800688a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	051b      	lsls	r3, r3, #20
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <TIM_OC6_SetConfig+0xb0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_OC6_SetConfig+0x74>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <TIM_OC6_SetConfig+0xb4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC6_SetConfig+0x74>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a14      	ldr	r2, [pc, #80]	@ (80068fc <TIM_OC6_SetConfig+0xb8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC6_SetConfig+0x74>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a13      	ldr	r2, [pc, #76]	@ (8006900 <TIM_OC6_SetConfig+0xbc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d109      	bne.n	80068cc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800

08006904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800692e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 030a 	bic.w	r3, r3, #10
 8006940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006962:	b480      	push	{r7}
 8006964:	b087      	sub	sp, #28
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f023 0210 	bic.w	r2, r3, #16
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800698c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	031b      	lsls	r3, r3, #12
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f043 0307 	orr.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e04f      	b.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a21      	ldr	r2, [pc, #132]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d108      	bne.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006acc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a14      	ldr	r2, [pc, #80]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d009      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b04:	d004      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a10      	ldr	r2, [pc, #64]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10c      	bne.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40014000 	.word	0x40014000

08006b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e060      	b.n	8006c2e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a14      	ldr	r2, [pc, #80]	@ (8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d115      	bne.n	8006c1c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	051b      	lsls	r3, r3, #20
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00

08006c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e040      	b.n	8006d10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fa ff08 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2224      	movs	r2, #36	@ 0x24
 8006ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f95e 	bl	8006f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f825 	bl	8006d18 <UART_SetConfig>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e01b      	b.n	8006d10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f9dd 	bl	80070c8 <UART_CheckIdleState>
 8006d0e:	4603      	mov	r3, r0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b8a      	ldr	r3, [pc, #552]	@ (8006f6c <UART_SetConfig+0x254>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	6979      	ldr	r1, [r7, #20]
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a78      	ldr	r2, [pc, #480]	@ (8006f70 <UART_SetConfig+0x258>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d120      	bne.n	8006dd6 <UART_SetConfig+0xbe>
 8006d94:	4b77      	ldr	r3, [pc, #476]	@ (8006f74 <UART_SetConfig+0x25c>)
 8006d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d817      	bhi.n	8006dd0 <UART_SetConfig+0xb8>
 8006da0:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <UART_SetConfig+0x90>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006dc5 	.word	0x08006dc5
 8006db0:	08006dcb 	.word	0x08006dcb
 8006db4:	08006dbf 	.word	0x08006dbf
 8006db8:	2300      	movs	r3, #0
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e01d      	b.n	8006dfa <UART_SetConfig+0xe2>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e01a      	b.n	8006dfa <UART_SetConfig+0xe2>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e017      	b.n	8006dfa <UART_SetConfig+0xe2>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	e014      	b.n	8006dfa <UART_SetConfig+0xe2>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e011      	b.n	8006dfa <UART_SetConfig+0xe2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a67      	ldr	r2, [pc, #412]	@ (8006f78 <UART_SetConfig+0x260>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d102      	bne.n	8006de6 <UART_SetConfig+0xce>
 8006de0:	2300      	movs	r3, #0
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e009      	b.n	8006dfa <UART_SetConfig+0xe2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a64      	ldr	r2, [pc, #400]	@ (8006f7c <UART_SetConfig+0x264>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d102      	bne.n	8006df6 <UART_SetConfig+0xde>
 8006df0:	2300      	movs	r3, #0
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e001      	b.n	8006dfa <UART_SetConfig+0xe2>
 8006df6:	2310      	movs	r3, #16
 8006df8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e02:	d15a      	bne.n	8006eba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006e04:	7ffb      	ldrb	r3, [r7, #31]
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d827      	bhi.n	8006e5a <UART_SetConfig+0x142>
 8006e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <UART_SetConfig+0xf8>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e3d 	.word	0x08006e3d
 8006e18:	08006e45 	.word	0x08006e45
 8006e1c:	08006e5b 	.word	0x08006e5b
 8006e20:	08006e4b 	.word	0x08006e4b
 8006e24:	08006e5b 	.word	0x08006e5b
 8006e28:	08006e5b 	.word	0x08006e5b
 8006e2c:	08006e5b 	.word	0x08006e5b
 8006e30:	08006e53 	.word	0x08006e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fe fb74 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006e38:	61b8      	str	r0, [r7, #24]
        break;
 8006e3a:	e013      	b.n	8006e64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e3c:	f7fe fb92 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006e40:	61b8      	str	r0, [r7, #24]
        break;
 8006e42:	e00f      	b.n	8006e64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e44:	4b4e      	ldr	r3, [pc, #312]	@ (8006f80 <UART_SetConfig+0x268>)
 8006e46:	61bb      	str	r3, [r7, #24]
        break;
 8006e48:	e00c      	b.n	8006e64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4a:	f7fe fb09 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 8006e4e:	61b8      	str	r0, [r7, #24]
        break;
 8006e50:	e008      	b.n	8006e64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e56:	61bb      	str	r3, [r7, #24]
        break;
 8006e58:	e004      	b.n	8006e64 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	77bb      	strb	r3, [r7, #30]
        break;
 8006e62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d074      	beq.n	8006f54 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	005a      	lsls	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b0f      	cmp	r3, #15
 8006e84:	d916      	bls.n	8006eb4 <UART_SetConfig+0x19c>
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e8c:	d212      	bcs.n	8006eb4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f023 030f 	bic.w	r3, r3, #15
 8006e96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	89fb      	ldrh	r3, [r7, #14]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	89fa      	ldrh	r2, [r7, #14]
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	e04f      	b.n	8006f54 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	77bb      	strb	r3, [r7, #30]
 8006eb8:	e04c      	b.n	8006f54 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eba:	7ffb      	ldrb	r3, [r7, #31]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d828      	bhi.n	8006f12 <UART_SetConfig+0x1fa>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <UART_SetConfig+0x1b0>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006f13 	.word	0x08006f13
 8006ed8:	08006f03 	.word	0x08006f03
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f13 	.word	0x08006f13
 8006ee4:	08006f13 	.word	0x08006f13
 8006ee8:	08006f0b 	.word	0x08006f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fe fb18 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8006ef0:	61b8      	str	r0, [r7, #24]
        break;
 8006ef2:	e013      	b.n	8006f1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef4:	f7fe fb36 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006ef8:	61b8      	str	r0, [r7, #24]
        break;
 8006efa:	e00f      	b.n	8006f1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006efc:	4b20      	ldr	r3, [pc, #128]	@ (8006f80 <UART_SetConfig+0x268>)
 8006efe:	61bb      	str	r3, [r7, #24]
        break;
 8006f00:	e00c      	b.n	8006f1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f02:	f7fe faad 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 8006f06:	61b8      	str	r0, [r7, #24]
        break;
 8006f08:	e008      	b.n	8006f1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0e:	61bb      	str	r3, [r7, #24]
        break;
 8006f10:	e004      	b.n	8006f1c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	77bb      	strb	r3, [r7, #30]
        break;
 8006f1a:	bf00      	nop
    }

    if (pclk != 0U)
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d018      	beq.n	8006f54 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	085a      	lsrs	r2, r3, #1
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	441a      	add	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b0f      	cmp	r3, #15
 8006f3a:	d909      	bls.n	8006f50 <UART_SetConfig+0x238>
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f42:	d205      	bcs.n	8006f50 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	e001      	b.n	8006f54 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006f60:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	efff69f3 	.word	0xefff69f3
 8006f70:	40013800 	.word	0x40013800
 8006f74:	40021000 	.word	0x40021000
 8006f78:	40004400 	.word	0x40004400
 8006f7c:	40004800 	.word	0x40004800
 8006f80:	007a1200 	.word	0x007a1200

08006f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01a      	beq.n	800709a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007082:	d10a      	bne.n	800709a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b098      	sub	sp, #96	@ 0x60
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070d8:	f7fb fa60 	bl	800259c <HAL_GetTick>
 80070dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d12e      	bne.n	800714a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f88c 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d021      	beq.n	800714a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800711a:	653b      	str	r3, [r7, #80]	@ 0x50
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007124:	647b      	str	r3, [r7, #68]	@ 0x44
 8007126:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800712a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e062      	b.n	8007210 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b04      	cmp	r3, #4
 8007156:	d149      	bne.n	80071ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f856 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d03c      	beq.n	80071ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	623b      	str	r3, [r7, #32]
   return(result);
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007190:	633b      	str	r3, [r7, #48]	@ 0x30
 8007192:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e6      	bne.n	8007172 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3308      	adds	r3, #8
 80071aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071c4:	61fa      	str	r2, [r7, #28]
 80071c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	69b9      	ldr	r1, [r7, #24]
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	617b      	str	r3, [r7, #20]
   return(result);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e5      	bne.n	80071a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e011      	b.n	8007210 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3758      	adds	r7, #88	@ 0x58
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007228:	e04f      	b.n	80072ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d04b      	beq.n	80072ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007232:	f7fb f9b3 	bl	800259c <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <UART_WaitOnFlagUntilTimeout+0x30>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e04e      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d037      	beq.n	80072ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b80      	cmp	r3, #128	@ 0x80
 800725e:	d034      	beq.n	80072ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b40      	cmp	r3, #64	@ 0x40
 8007264:	d031      	beq.n	80072ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b08      	cmp	r3, #8
 8007272:	d110      	bne.n	8007296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2208      	movs	r2, #8
 800727a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f838 	bl	80072f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2208      	movs	r2, #8
 8007286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e029      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a4:	d111      	bne.n	80072ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f81e 	bl	80072f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e00f      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	bf0c      	ite	eq
 80072da:	2301      	moveq	r3, #1
 80072dc:	2300      	movne	r3, #0
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d0a0      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b095      	sub	sp, #84	@ 0x54
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800730e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007318:	643b      	str	r3, [r7, #64]	@ 0x40
 800731a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800731e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e6      	bne.n	80072fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	61fb      	str	r3, [r7, #28]
   return(result);
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800734c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e5      	bne.n	800732c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007364:	2b01      	cmp	r3, #1
 8007366:	d118      	bne.n	800739a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	60bb      	str	r3, [r7, #8]
   return(result);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f023 0310 	bic.w	r3, r3, #16
 800737c:	647b      	str	r3, [r7, #68]	@ 0x44
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6979      	ldr	r1, [r7, #20]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	613b      	str	r3, [r7, #16]
   return(result);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e6      	bne.n	8007368 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2220      	movs	r2, #32
 800739e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80073ae:	bf00      	nop
 80073b0:	3754      	adds	r7, #84	@ 0x54
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <calloc>:
 80073bc:	4b02      	ldr	r3, [pc, #8]	@ (80073c8 <calloc+0xc>)
 80073be:	460a      	mov	r2, r1
 80073c0:	4601      	mov	r1, r0
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	f000 b802 	b.w	80073cc <_calloc_r>
 80073c8:	2000002c 	.word	0x2000002c

080073cc <_calloc_r>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	fba1 5402 	umull	r5, r4, r1, r2
 80073d2:	b93c      	cbnz	r4, 80073e4 <_calloc_r+0x18>
 80073d4:	4629      	mov	r1, r5
 80073d6:	f000 f837 	bl	8007448 <_malloc_r>
 80073da:	4606      	mov	r6, r0
 80073dc:	b928      	cbnz	r0, 80073ea <_calloc_r+0x1e>
 80073de:	2600      	movs	r6, #0
 80073e0:	4630      	mov	r0, r6
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	220c      	movs	r2, #12
 80073e6:	6002      	str	r2, [r0, #0]
 80073e8:	e7f9      	b.n	80073de <_calloc_r+0x12>
 80073ea:	462a      	mov	r2, r5
 80073ec:	4621      	mov	r1, r4
 80073ee:	f001 f848 	bl	8008482 <memset>
 80073f2:	e7f5      	b.n	80073e0 <_calloc_r+0x14>

080073f4 <malloc>:
 80073f4:	4b02      	ldr	r3, [pc, #8]	@ (8007400 <malloc+0xc>)
 80073f6:	4601      	mov	r1, r0
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	f000 b825 	b.w	8007448 <_malloc_r>
 80073fe:	bf00      	nop
 8007400:	2000002c 	.word	0x2000002c

08007404 <sbrk_aligned>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4e0f      	ldr	r6, [pc, #60]	@ (8007444 <sbrk_aligned+0x40>)
 8007408:	460c      	mov	r4, r1
 800740a:	6831      	ldr	r1, [r6, #0]
 800740c:	4605      	mov	r5, r0
 800740e:	b911      	cbnz	r1, 8007416 <sbrk_aligned+0x12>
 8007410:	f001 f878 	bl	8008504 <_sbrk_r>
 8007414:	6030      	str	r0, [r6, #0]
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f001 f873 	bl	8008504 <_sbrk_r>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d103      	bne.n	800742a <sbrk_aligned+0x26>
 8007422:	f04f 34ff 	mov.w	r4, #4294967295
 8007426:	4620      	mov	r0, r4
 8007428:	bd70      	pop	{r4, r5, r6, pc}
 800742a:	1cc4      	adds	r4, r0, #3
 800742c:	f024 0403 	bic.w	r4, r4, #3
 8007430:	42a0      	cmp	r0, r4
 8007432:	d0f8      	beq.n	8007426 <sbrk_aligned+0x22>
 8007434:	1a21      	subs	r1, r4, r0
 8007436:	4628      	mov	r0, r5
 8007438:	f001 f864 	bl	8008504 <_sbrk_r>
 800743c:	3001      	adds	r0, #1
 800743e:	d1f2      	bne.n	8007426 <sbrk_aligned+0x22>
 8007440:	e7ef      	b.n	8007422 <sbrk_aligned+0x1e>
 8007442:	bf00      	nop
 8007444:	2000044c 	.word	0x2000044c

08007448 <_malloc_r>:
 8007448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744c:	1ccd      	adds	r5, r1, #3
 800744e:	f025 0503 	bic.w	r5, r5, #3
 8007452:	3508      	adds	r5, #8
 8007454:	2d0c      	cmp	r5, #12
 8007456:	bf38      	it	cc
 8007458:	250c      	movcc	r5, #12
 800745a:	2d00      	cmp	r5, #0
 800745c:	4606      	mov	r6, r0
 800745e:	db01      	blt.n	8007464 <_malloc_r+0x1c>
 8007460:	42a9      	cmp	r1, r5
 8007462:	d904      	bls.n	800746e <_malloc_r+0x26>
 8007464:	230c      	movs	r3, #12
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	2000      	movs	r0, #0
 800746a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007544 <_malloc_r+0xfc>
 8007472:	f000 f869 	bl	8007548 <__malloc_lock>
 8007476:	f8d8 3000 	ldr.w	r3, [r8]
 800747a:	461c      	mov	r4, r3
 800747c:	bb44      	cbnz	r4, 80074d0 <_malloc_r+0x88>
 800747e:	4629      	mov	r1, r5
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff ffbf 	bl	8007404 <sbrk_aligned>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	4604      	mov	r4, r0
 800748a:	d158      	bne.n	800753e <_malloc_r+0xf6>
 800748c:	f8d8 4000 	ldr.w	r4, [r8]
 8007490:	4627      	mov	r7, r4
 8007492:	2f00      	cmp	r7, #0
 8007494:	d143      	bne.n	800751e <_malloc_r+0xd6>
 8007496:	2c00      	cmp	r4, #0
 8007498:	d04b      	beq.n	8007532 <_malloc_r+0xea>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	4639      	mov	r1, r7
 800749e:	4630      	mov	r0, r6
 80074a0:	eb04 0903 	add.w	r9, r4, r3
 80074a4:	f001 f82e 	bl	8008504 <_sbrk_r>
 80074a8:	4581      	cmp	r9, r0
 80074aa:	d142      	bne.n	8007532 <_malloc_r+0xea>
 80074ac:	6821      	ldr	r1, [r4, #0]
 80074ae:	1a6d      	subs	r5, r5, r1
 80074b0:	4629      	mov	r1, r5
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ffa6 	bl	8007404 <sbrk_aligned>
 80074b8:	3001      	adds	r0, #1
 80074ba:	d03a      	beq.n	8007532 <_malloc_r+0xea>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	442b      	add	r3, r5
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	f8d8 3000 	ldr.w	r3, [r8]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	bb62      	cbnz	r2, 8007524 <_malloc_r+0xdc>
 80074ca:	f8c8 7000 	str.w	r7, [r8]
 80074ce:	e00f      	b.n	80074f0 <_malloc_r+0xa8>
 80074d0:	6822      	ldr	r2, [r4, #0]
 80074d2:	1b52      	subs	r2, r2, r5
 80074d4:	d420      	bmi.n	8007518 <_malloc_r+0xd0>
 80074d6:	2a0b      	cmp	r2, #11
 80074d8:	d917      	bls.n	800750a <_malloc_r+0xc2>
 80074da:	1961      	adds	r1, r4, r5
 80074dc:	42a3      	cmp	r3, r4
 80074de:	6025      	str	r5, [r4, #0]
 80074e0:	bf18      	it	ne
 80074e2:	6059      	strne	r1, [r3, #4]
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	bf08      	it	eq
 80074e8:	f8c8 1000 	streq.w	r1, [r8]
 80074ec:	5162      	str	r2, [r4, r5]
 80074ee:	604b      	str	r3, [r1, #4]
 80074f0:	4630      	mov	r0, r6
 80074f2:	f000 f82f 	bl	8007554 <__malloc_unlock>
 80074f6:	f104 000b 	add.w	r0, r4, #11
 80074fa:	1d23      	adds	r3, r4, #4
 80074fc:	f020 0007 	bic.w	r0, r0, #7
 8007500:	1ac2      	subs	r2, r0, r3
 8007502:	bf1c      	itt	ne
 8007504:	1a1b      	subne	r3, r3, r0
 8007506:	50a3      	strne	r3, [r4, r2]
 8007508:	e7af      	b.n	800746a <_malloc_r+0x22>
 800750a:	6862      	ldr	r2, [r4, #4]
 800750c:	42a3      	cmp	r3, r4
 800750e:	bf0c      	ite	eq
 8007510:	f8c8 2000 	streq.w	r2, [r8]
 8007514:	605a      	strne	r2, [r3, #4]
 8007516:	e7eb      	b.n	80074f0 <_malloc_r+0xa8>
 8007518:	4623      	mov	r3, r4
 800751a:	6864      	ldr	r4, [r4, #4]
 800751c:	e7ae      	b.n	800747c <_malloc_r+0x34>
 800751e:	463c      	mov	r4, r7
 8007520:	687f      	ldr	r7, [r7, #4]
 8007522:	e7b6      	b.n	8007492 <_malloc_r+0x4a>
 8007524:	461a      	mov	r2, r3
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	42a3      	cmp	r3, r4
 800752a:	d1fb      	bne.n	8007524 <_malloc_r+0xdc>
 800752c:	2300      	movs	r3, #0
 800752e:	6053      	str	r3, [r2, #4]
 8007530:	e7de      	b.n	80074f0 <_malloc_r+0xa8>
 8007532:	230c      	movs	r3, #12
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	4630      	mov	r0, r6
 8007538:	f000 f80c 	bl	8007554 <__malloc_unlock>
 800753c:	e794      	b.n	8007468 <_malloc_r+0x20>
 800753e:	6005      	str	r5, [r0, #0]
 8007540:	e7d6      	b.n	80074f0 <_malloc_r+0xa8>
 8007542:	bf00      	nop
 8007544:	20000450 	.word	0x20000450

08007548 <__malloc_lock>:
 8007548:	4801      	ldr	r0, [pc, #4]	@ (8007550 <__malloc_lock+0x8>)
 800754a:	f001 b828 	b.w	800859e <__retarget_lock_acquire_recursive>
 800754e:	bf00      	nop
 8007550:	20000594 	.word	0x20000594

08007554 <__malloc_unlock>:
 8007554:	4801      	ldr	r0, [pc, #4]	@ (800755c <__malloc_unlock+0x8>)
 8007556:	f001 b823 	b.w	80085a0 <__retarget_lock_release_recursive>
 800755a:	bf00      	nop
 800755c:	20000594 	.word	0x20000594

08007560 <__cvt>:
 8007560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007564:	ec57 6b10 	vmov	r6, r7, d0
 8007568:	2f00      	cmp	r7, #0
 800756a:	460c      	mov	r4, r1
 800756c:	4619      	mov	r1, r3
 800756e:	463b      	mov	r3, r7
 8007570:	bfbb      	ittet	lt
 8007572:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007576:	461f      	movlt	r7, r3
 8007578:	2300      	movge	r3, #0
 800757a:	232d      	movlt	r3, #45	@ 0x2d
 800757c:	700b      	strb	r3, [r1, #0]
 800757e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007580:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007584:	4691      	mov	r9, r2
 8007586:	f023 0820 	bic.w	r8, r3, #32
 800758a:	bfbc      	itt	lt
 800758c:	4632      	movlt	r2, r6
 800758e:	4616      	movlt	r6, r2
 8007590:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007594:	d005      	beq.n	80075a2 <__cvt+0x42>
 8007596:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800759a:	d100      	bne.n	800759e <__cvt+0x3e>
 800759c:	3401      	adds	r4, #1
 800759e:	2102      	movs	r1, #2
 80075a0:	e000      	b.n	80075a4 <__cvt+0x44>
 80075a2:	2103      	movs	r1, #3
 80075a4:	ab03      	add	r3, sp, #12
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	ab02      	add	r3, sp, #8
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	ec47 6b10 	vmov	d0, r6, r7
 80075b0:	4653      	mov	r3, sl
 80075b2:	4622      	mov	r2, r4
 80075b4:	f001 f884 	bl	80086c0 <_dtoa_r>
 80075b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075bc:	4605      	mov	r5, r0
 80075be:	d119      	bne.n	80075f4 <__cvt+0x94>
 80075c0:	f019 0f01 	tst.w	r9, #1
 80075c4:	d00e      	beq.n	80075e4 <__cvt+0x84>
 80075c6:	eb00 0904 	add.w	r9, r0, r4
 80075ca:	2200      	movs	r2, #0
 80075cc:	2300      	movs	r3, #0
 80075ce:	4630      	mov	r0, r6
 80075d0:	4639      	mov	r1, r7
 80075d2:	f7f9 fa89 	bl	8000ae8 <__aeabi_dcmpeq>
 80075d6:	b108      	cbz	r0, 80075dc <__cvt+0x7c>
 80075d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80075dc:	2230      	movs	r2, #48	@ 0x30
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	454b      	cmp	r3, r9
 80075e2:	d31e      	bcc.n	8007622 <__cvt+0xc2>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075e8:	1b5b      	subs	r3, r3, r5
 80075ea:	4628      	mov	r0, r5
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	b004      	add	sp, #16
 80075f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075f8:	eb00 0904 	add.w	r9, r0, r4
 80075fc:	d1e5      	bne.n	80075ca <__cvt+0x6a>
 80075fe:	7803      	ldrb	r3, [r0, #0]
 8007600:	2b30      	cmp	r3, #48	@ 0x30
 8007602:	d10a      	bne.n	800761a <__cvt+0xba>
 8007604:	2200      	movs	r2, #0
 8007606:	2300      	movs	r3, #0
 8007608:	4630      	mov	r0, r6
 800760a:	4639      	mov	r1, r7
 800760c:	f7f9 fa6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007610:	b918      	cbnz	r0, 800761a <__cvt+0xba>
 8007612:	f1c4 0401 	rsb	r4, r4, #1
 8007616:	f8ca 4000 	str.w	r4, [sl]
 800761a:	f8da 3000 	ldr.w	r3, [sl]
 800761e:	4499      	add	r9, r3
 8007620:	e7d3      	b.n	80075ca <__cvt+0x6a>
 8007622:	1c59      	adds	r1, r3, #1
 8007624:	9103      	str	r1, [sp, #12]
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e7d9      	b.n	80075de <__cvt+0x7e>

0800762a <__exponent>:
 800762a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800762c:	2900      	cmp	r1, #0
 800762e:	bfba      	itte	lt
 8007630:	4249      	neglt	r1, r1
 8007632:	232d      	movlt	r3, #45	@ 0x2d
 8007634:	232b      	movge	r3, #43	@ 0x2b
 8007636:	2909      	cmp	r1, #9
 8007638:	7002      	strb	r2, [r0, #0]
 800763a:	7043      	strb	r3, [r0, #1]
 800763c:	dd29      	ble.n	8007692 <__exponent+0x68>
 800763e:	f10d 0307 	add.w	r3, sp, #7
 8007642:	461d      	mov	r5, r3
 8007644:	270a      	movs	r7, #10
 8007646:	461a      	mov	r2, r3
 8007648:	fbb1 f6f7 	udiv	r6, r1, r7
 800764c:	fb07 1416 	mls	r4, r7, r6, r1
 8007650:	3430      	adds	r4, #48	@ 0x30
 8007652:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007656:	460c      	mov	r4, r1
 8007658:	2c63      	cmp	r4, #99	@ 0x63
 800765a:	f103 33ff 	add.w	r3, r3, #4294967295
 800765e:	4631      	mov	r1, r6
 8007660:	dcf1      	bgt.n	8007646 <__exponent+0x1c>
 8007662:	3130      	adds	r1, #48	@ 0x30
 8007664:	1e94      	subs	r4, r2, #2
 8007666:	f803 1c01 	strb.w	r1, [r3, #-1]
 800766a:	1c41      	adds	r1, r0, #1
 800766c:	4623      	mov	r3, r4
 800766e:	42ab      	cmp	r3, r5
 8007670:	d30a      	bcc.n	8007688 <__exponent+0x5e>
 8007672:	f10d 0309 	add.w	r3, sp, #9
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	42ac      	cmp	r4, r5
 800767a:	bf88      	it	hi
 800767c:	2300      	movhi	r3, #0
 800767e:	3302      	adds	r3, #2
 8007680:	4403      	add	r3, r0
 8007682:	1a18      	subs	r0, r3, r0
 8007684:	b003      	add	sp, #12
 8007686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007688:	f813 6b01 	ldrb.w	r6, [r3], #1
 800768c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007690:	e7ed      	b.n	800766e <__exponent+0x44>
 8007692:	2330      	movs	r3, #48	@ 0x30
 8007694:	3130      	adds	r1, #48	@ 0x30
 8007696:	7083      	strb	r3, [r0, #2]
 8007698:	70c1      	strb	r1, [r0, #3]
 800769a:	1d03      	adds	r3, r0, #4
 800769c:	e7f1      	b.n	8007682 <__exponent+0x58>
	...

080076a0 <_printf_float>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	b08d      	sub	sp, #52	@ 0x34
 80076a6:	460c      	mov	r4, r1
 80076a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076ac:	4616      	mov	r6, r2
 80076ae:	461f      	mov	r7, r3
 80076b0:	4605      	mov	r5, r0
 80076b2:	f000 feef 	bl	8008494 <_localeconv_r>
 80076b6:	6803      	ldr	r3, [r0, #0]
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7f8 fde8 	bl	8000290 <strlen>
 80076c0:	2300      	movs	r3, #0
 80076c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c4:	f8d8 3000 	ldr.w	r3, [r8]
 80076c8:	9005      	str	r0, [sp, #20]
 80076ca:	3307      	adds	r3, #7
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	f103 0208 	add.w	r2, r3, #8
 80076d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076d8:	f8d4 b000 	ldr.w	fp, [r4]
 80076dc:	f8c8 2000 	str.w	r2, [r8]
 80076e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80076e8:	9307      	str	r3, [sp, #28]
 80076ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80076ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80076f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007968 <_printf_float+0x2c8>)
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	f7f9 fa26 	bl	8000b4c <__aeabi_dcmpun>
 8007700:	bb70      	cbnz	r0, 8007760 <_printf_float+0xc0>
 8007702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007706:	4b98      	ldr	r3, [pc, #608]	@ (8007968 <_printf_float+0x2c8>)
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	f7f9 fa00 	bl	8000b10 <__aeabi_dcmple>
 8007710:	bb30      	cbnz	r0, 8007760 <_printf_float+0xc0>
 8007712:	2200      	movs	r2, #0
 8007714:	2300      	movs	r3, #0
 8007716:	4640      	mov	r0, r8
 8007718:	4649      	mov	r1, r9
 800771a:	f7f9 f9ef 	bl	8000afc <__aeabi_dcmplt>
 800771e:	b110      	cbz	r0, 8007726 <_printf_float+0x86>
 8007720:	232d      	movs	r3, #45	@ 0x2d
 8007722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007726:	4a91      	ldr	r2, [pc, #580]	@ (800796c <_printf_float+0x2cc>)
 8007728:	4b91      	ldr	r3, [pc, #580]	@ (8007970 <_printf_float+0x2d0>)
 800772a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800772e:	bf94      	ite	ls
 8007730:	4690      	movls	r8, r2
 8007732:	4698      	movhi	r8, r3
 8007734:	2303      	movs	r3, #3
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	f02b 0304 	bic.w	r3, fp, #4
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	f04f 0900 	mov.w	r9, #0
 8007742:	9700      	str	r7, [sp, #0]
 8007744:	4633      	mov	r3, r6
 8007746:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007748:	4621      	mov	r1, r4
 800774a:	4628      	mov	r0, r5
 800774c:	f000 f9d2 	bl	8007af4 <_printf_common>
 8007750:	3001      	adds	r0, #1
 8007752:	f040 808d 	bne.w	8007870 <_printf_float+0x1d0>
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	b00d      	add	sp, #52	@ 0x34
 800775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007760:	4642      	mov	r2, r8
 8007762:	464b      	mov	r3, r9
 8007764:	4640      	mov	r0, r8
 8007766:	4649      	mov	r1, r9
 8007768:	f7f9 f9f0 	bl	8000b4c <__aeabi_dcmpun>
 800776c:	b140      	cbz	r0, 8007780 <_printf_float+0xe0>
 800776e:	464b      	mov	r3, r9
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfbc      	itt	lt
 8007774:	232d      	movlt	r3, #45	@ 0x2d
 8007776:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800777a:	4a7e      	ldr	r2, [pc, #504]	@ (8007974 <_printf_float+0x2d4>)
 800777c:	4b7e      	ldr	r3, [pc, #504]	@ (8007978 <_printf_float+0x2d8>)
 800777e:	e7d4      	b.n	800772a <_printf_float+0x8a>
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007786:	9206      	str	r2, [sp, #24]
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	d13b      	bne.n	8007804 <_printf_float+0x164>
 800778c:	2306      	movs	r3, #6
 800778e:	6063      	str	r3, [r4, #4]
 8007790:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007794:	2300      	movs	r3, #0
 8007796:	6022      	str	r2, [r4, #0]
 8007798:	9303      	str	r3, [sp, #12]
 800779a:	ab0a      	add	r3, sp, #40	@ 0x28
 800779c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077a0:	ab09      	add	r3, sp, #36	@ 0x24
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	6861      	ldr	r1, [r4, #4]
 80077a6:	ec49 8b10 	vmov	d0, r8, r9
 80077aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077ae:	4628      	mov	r0, r5
 80077b0:	f7ff fed6 	bl	8007560 <__cvt>
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077b8:	2b47      	cmp	r3, #71	@ 0x47
 80077ba:	4680      	mov	r8, r0
 80077bc:	d129      	bne.n	8007812 <_printf_float+0x172>
 80077be:	1cc8      	adds	r0, r1, #3
 80077c0:	db02      	blt.n	80077c8 <_printf_float+0x128>
 80077c2:	6863      	ldr	r3, [r4, #4]
 80077c4:	4299      	cmp	r1, r3
 80077c6:	dd41      	ble.n	800784c <_printf_float+0x1ac>
 80077c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80077cc:	fa5f fa8a 	uxtb.w	sl, sl
 80077d0:	3901      	subs	r1, #1
 80077d2:	4652      	mov	r2, sl
 80077d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80077da:	f7ff ff26 	bl	800762a <__exponent>
 80077de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077e0:	1813      	adds	r3, r2, r0
 80077e2:	2a01      	cmp	r2, #1
 80077e4:	4681      	mov	r9, r0
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	dc02      	bgt.n	80077f0 <_printf_float+0x150>
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	07d2      	lsls	r2, r2, #31
 80077ee:	d501      	bpl.n	80077f4 <_printf_float+0x154>
 80077f0:	3301      	adds	r3, #1
 80077f2:	6123      	str	r3, [r4, #16]
 80077f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0a2      	beq.n	8007742 <_printf_float+0xa2>
 80077fc:	232d      	movs	r3, #45	@ 0x2d
 80077fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007802:	e79e      	b.n	8007742 <_printf_float+0xa2>
 8007804:	9a06      	ldr	r2, [sp, #24]
 8007806:	2a47      	cmp	r2, #71	@ 0x47
 8007808:	d1c2      	bne.n	8007790 <_printf_float+0xf0>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1c0      	bne.n	8007790 <_printf_float+0xf0>
 800780e:	2301      	movs	r3, #1
 8007810:	e7bd      	b.n	800778e <_printf_float+0xee>
 8007812:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007816:	d9db      	bls.n	80077d0 <_printf_float+0x130>
 8007818:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800781c:	d118      	bne.n	8007850 <_printf_float+0x1b0>
 800781e:	2900      	cmp	r1, #0
 8007820:	6863      	ldr	r3, [r4, #4]
 8007822:	dd0b      	ble.n	800783c <_printf_float+0x19c>
 8007824:	6121      	str	r1, [r4, #16]
 8007826:	b913      	cbnz	r3, 800782e <_printf_float+0x18e>
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	07d0      	lsls	r0, r2, #31
 800782c:	d502      	bpl.n	8007834 <_printf_float+0x194>
 800782e:	3301      	adds	r3, #1
 8007830:	440b      	add	r3, r1
 8007832:	6123      	str	r3, [r4, #16]
 8007834:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007836:	f04f 0900 	mov.w	r9, #0
 800783a:	e7db      	b.n	80077f4 <_printf_float+0x154>
 800783c:	b913      	cbnz	r3, 8007844 <_printf_float+0x1a4>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	07d2      	lsls	r2, r2, #31
 8007842:	d501      	bpl.n	8007848 <_printf_float+0x1a8>
 8007844:	3302      	adds	r3, #2
 8007846:	e7f4      	b.n	8007832 <_printf_float+0x192>
 8007848:	2301      	movs	r3, #1
 800784a:	e7f2      	b.n	8007832 <_printf_float+0x192>
 800784c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007852:	4299      	cmp	r1, r3
 8007854:	db05      	blt.n	8007862 <_printf_float+0x1c2>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	6121      	str	r1, [r4, #16]
 800785a:	07d8      	lsls	r0, r3, #31
 800785c:	d5ea      	bpl.n	8007834 <_printf_float+0x194>
 800785e:	1c4b      	adds	r3, r1, #1
 8007860:	e7e7      	b.n	8007832 <_printf_float+0x192>
 8007862:	2900      	cmp	r1, #0
 8007864:	bfd4      	ite	le
 8007866:	f1c1 0202 	rsble	r2, r1, #2
 800786a:	2201      	movgt	r2, #1
 800786c:	4413      	add	r3, r2
 800786e:	e7e0      	b.n	8007832 <_printf_float+0x192>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	055a      	lsls	r2, r3, #21
 8007874:	d407      	bmi.n	8007886 <_printf_float+0x1e6>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	4642      	mov	r2, r8
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	d12b      	bne.n	80078dc <_printf_float+0x23c>
 8007884:	e767      	b.n	8007756 <_printf_float+0xb6>
 8007886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800788a:	f240 80dd 	bls.w	8007a48 <_printf_float+0x3a8>
 800788e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007892:	2200      	movs	r2, #0
 8007894:	2300      	movs	r3, #0
 8007896:	f7f9 f927 	bl	8000ae8 <__aeabi_dcmpeq>
 800789a:	2800      	cmp	r0, #0
 800789c:	d033      	beq.n	8007906 <_printf_float+0x266>
 800789e:	4a37      	ldr	r2, [pc, #220]	@ (800797c <_printf_float+0x2dc>)
 80078a0:	2301      	movs	r3, #1
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	f43f af54 	beq.w	8007756 <_printf_float+0xb6>
 80078ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078b2:	4543      	cmp	r3, r8
 80078b4:	db02      	blt.n	80078bc <_printf_float+0x21c>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	07d8      	lsls	r0, r3, #31
 80078ba:	d50f      	bpl.n	80078dc <_printf_float+0x23c>
 80078bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	f43f af45 	beq.w	8007756 <_printf_float+0xb6>
 80078cc:	f04f 0900 	mov.w	r9, #0
 80078d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80078d4:	f104 0a1a 	add.w	sl, r4, #26
 80078d8:	45c8      	cmp	r8, r9
 80078da:	dc09      	bgt.n	80078f0 <_printf_float+0x250>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	079b      	lsls	r3, r3, #30
 80078e0:	f100 8103 	bmi.w	8007aea <_printf_float+0x44a>
 80078e4:	68e0      	ldr	r0, [r4, #12]
 80078e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e8:	4298      	cmp	r0, r3
 80078ea:	bfb8      	it	lt
 80078ec:	4618      	movlt	r0, r3
 80078ee:	e734      	b.n	800775a <_printf_float+0xba>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4652      	mov	r2, sl
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af2b 	beq.w	8007756 <_printf_float+0xb6>
 8007900:	f109 0901 	add.w	r9, r9, #1
 8007904:	e7e8      	b.n	80078d8 <_printf_float+0x238>
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc39      	bgt.n	8007980 <_printf_float+0x2e0>
 800790c:	4a1b      	ldr	r2, [pc, #108]	@ (800797c <_printf_float+0x2dc>)
 800790e:	2301      	movs	r3, #1
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	f43f af1d 	beq.w	8007756 <_printf_float+0xb6>
 800791c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007920:	ea59 0303 	orrs.w	r3, r9, r3
 8007924:	d102      	bne.n	800792c <_printf_float+0x28c>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	07d9      	lsls	r1, r3, #31
 800792a:	d5d7      	bpl.n	80078dc <_printf_float+0x23c>
 800792c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f af0d 	beq.w	8007756 <_printf_float+0xb6>
 800793c:	f04f 0a00 	mov.w	sl, #0
 8007940:	f104 0b1a 	add.w	fp, r4, #26
 8007944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007946:	425b      	negs	r3, r3
 8007948:	4553      	cmp	r3, sl
 800794a:	dc01      	bgt.n	8007950 <_printf_float+0x2b0>
 800794c:	464b      	mov	r3, r9
 800794e:	e793      	b.n	8007878 <_printf_float+0x1d8>
 8007950:	2301      	movs	r3, #1
 8007952:	465a      	mov	r2, fp
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	f43f aefb 	beq.w	8007756 <_printf_float+0xb6>
 8007960:	f10a 0a01 	add.w	sl, sl, #1
 8007964:	e7ee      	b.n	8007944 <_printf_float+0x2a4>
 8007966:	bf00      	nop
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	0800bb0c 	.word	0x0800bb0c
 8007970:	0800bb10 	.word	0x0800bb10
 8007974:	0800bb14 	.word	0x0800bb14
 8007978:	0800bb18 	.word	0x0800bb18
 800797c:	0800bb1c 	.word	0x0800bb1c
 8007980:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007982:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007986:	4553      	cmp	r3, sl
 8007988:	bfa8      	it	ge
 800798a:	4653      	movge	r3, sl
 800798c:	2b00      	cmp	r3, #0
 800798e:	4699      	mov	r9, r3
 8007990:	dc36      	bgt.n	8007a00 <_printf_float+0x360>
 8007992:	f04f 0b00 	mov.w	fp, #0
 8007996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800799a:	f104 021a 	add.w	r2, r4, #26
 800799e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079a0:	9306      	str	r3, [sp, #24]
 80079a2:	eba3 0309 	sub.w	r3, r3, r9
 80079a6:	455b      	cmp	r3, fp
 80079a8:	dc31      	bgt.n	8007a0e <_printf_float+0x36e>
 80079aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ac:	459a      	cmp	sl, r3
 80079ae:	dc3a      	bgt.n	8007a26 <_printf_float+0x386>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	07da      	lsls	r2, r3, #31
 80079b4:	d437      	bmi.n	8007a26 <_printf_float+0x386>
 80079b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b8:	ebaa 0903 	sub.w	r9, sl, r3
 80079bc:	9b06      	ldr	r3, [sp, #24]
 80079be:	ebaa 0303 	sub.w	r3, sl, r3
 80079c2:	4599      	cmp	r9, r3
 80079c4:	bfa8      	it	ge
 80079c6:	4699      	movge	r9, r3
 80079c8:	f1b9 0f00 	cmp.w	r9, #0
 80079cc:	dc33      	bgt.n	8007a36 <_printf_float+0x396>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079d6:	f104 0b1a 	add.w	fp, r4, #26
 80079da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079dc:	ebaa 0303 	sub.w	r3, sl, r3
 80079e0:	eba3 0309 	sub.w	r3, r3, r9
 80079e4:	4543      	cmp	r3, r8
 80079e6:	f77f af79 	ble.w	80078dc <_printf_float+0x23c>
 80079ea:	2301      	movs	r3, #1
 80079ec:	465a      	mov	r2, fp
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f aeae 	beq.w	8007756 <_printf_float+0xb6>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	e7ec      	b.n	80079da <_printf_float+0x33a>
 8007a00:	4642      	mov	r2, r8
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d1c2      	bne.n	8007992 <_printf_float+0x2f2>
 8007a0c:	e6a3      	b.n	8007756 <_printf_float+0xb6>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	9206      	str	r2, [sp, #24]
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f ae9c 	beq.w	8007756 <_printf_float+0xb6>
 8007a1e:	9a06      	ldr	r2, [sp, #24]
 8007a20:	f10b 0b01 	add.w	fp, fp, #1
 8007a24:	e7bb      	b.n	800799e <_printf_float+0x2fe>
 8007a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	d1c0      	bne.n	80079b6 <_printf_float+0x316>
 8007a34:	e68f      	b.n	8007756 <_printf_float+0xb6>
 8007a36:	9a06      	ldr	r2, [sp, #24]
 8007a38:	464b      	mov	r3, r9
 8007a3a:	4442      	add	r2, r8
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	d1c3      	bne.n	80079ce <_printf_float+0x32e>
 8007a46:	e686      	b.n	8007756 <_printf_float+0xb6>
 8007a48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a4c:	f1ba 0f01 	cmp.w	sl, #1
 8007a50:	dc01      	bgt.n	8007a56 <_printf_float+0x3b6>
 8007a52:	07db      	lsls	r3, r3, #31
 8007a54:	d536      	bpl.n	8007ac4 <_printf_float+0x424>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4642      	mov	r2, r8
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f ae78 	beq.w	8007756 <_printf_float+0xb6>
 8007a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	f43f ae70 	beq.w	8007756 <_printf_float+0xb6>
 8007a76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a82:	f7f9 f831 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a86:	b9c0      	cbnz	r0, 8007aba <_printf_float+0x41a>
 8007a88:	4653      	mov	r3, sl
 8007a8a:	f108 0201 	add.w	r2, r8, #1
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b8      	blx	r7
 8007a94:	3001      	adds	r0, #1
 8007a96:	d10c      	bne.n	8007ab2 <_printf_float+0x412>
 8007a98:	e65d      	b.n	8007756 <_printf_float+0xb6>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	465a      	mov	r2, fp
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f ae56 	beq.w	8007756 <_printf_float+0xb6>
 8007aaa:	f108 0801 	add.w	r8, r8, #1
 8007aae:	45d0      	cmp	r8, sl
 8007ab0:	dbf3      	blt.n	8007a9a <_printf_float+0x3fa>
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ab8:	e6df      	b.n	800787a <_printf_float+0x1da>
 8007aba:	f04f 0800 	mov.w	r8, #0
 8007abe:	f104 0b1a 	add.w	fp, r4, #26
 8007ac2:	e7f4      	b.n	8007aae <_printf_float+0x40e>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	4642      	mov	r2, r8
 8007ac8:	e7e1      	b.n	8007a8e <_printf_float+0x3ee>
 8007aca:	2301      	movs	r3, #1
 8007acc:	464a      	mov	r2, r9
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f43f ae3e 	beq.w	8007756 <_printf_float+0xb6>
 8007ada:	f108 0801 	add.w	r8, r8, #1
 8007ade:	68e3      	ldr	r3, [r4, #12]
 8007ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ae2:	1a5b      	subs	r3, r3, r1
 8007ae4:	4543      	cmp	r3, r8
 8007ae6:	dcf0      	bgt.n	8007aca <_printf_float+0x42a>
 8007ae8:	e6fc      	b.n	80078e4 <_printf_float+0x244>
 8007aea:	f04f 0800 	mov.w	r8, #0
 8007aee:	f104 0919 	add.w	r9, r4, #25
 8007af2:	e7f4      	b.n	8007ade <_printf_float+0x43e>

08007af4 <_printf_common>:
 8007af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af8:	4616      	mov	r6, r2
 8007afa:	4698      	mov	r8, r3
 8007afc:	688a      	ldr	r2, [r1, #8]
 8007afe:	690b      	ldr	r3, [r1, #16]
 8007b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b04:	4293      	cmp	r3, r2
 8007b06:	bfb8      	it	lt
 8007b08:	4613      	movlt	r3, r2
 8007b0a:	6033      	str	r3, [r6, #0]
 8007b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b10:	4607      	mov	r7, r0
 8007b12:	460c      	mov	r4, r1
 8007b14:	b10a      	cbz	r2, 8007b1a <_printf_common+0x26>
 8007b16:	3301      	adds	r3, #1
 8007b18:	6033      	str	r3, [r6, #0]
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	0699      	lsls	r1, r3, #26
 8007b1e:	bf42      	ittt	mi
 8007b20:	6833      	ldrmi	r3, [r6, #0]
 8007b22:	3302      	addmi	r3, #2
 8007b24:	6033      	strmi	r3, [r6, #0]
 8007b26:	6825      	ldr	r5, [r4, #0]
 8007b28:	f015 0506 	ands.w	r5, r5, #6
 8007b2c:	d106      	bne.n	8007b3c <_printf_common+0x48>
 8007b2e:	f104 0a19 	add.w	sl, r4, #25
 8007b32:	68e3      	ldr	r3, [r4, #12]
 8007b34:	6832      	ldr	r2, [r6, #0]
 8007b36:	1a9b      	subs	r3, r3, r2
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	dc26      	bgt.n	8007b8a <_printf_common+0x96>
 8007b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	3b00      	subs	r3, #0
 8007b44:	bf18      	it	ne
 8007b46:	2301      	movne	r3, #1
 8007b48:	0692      	lsls	r2, r2, #26
 8007b4a:	d42b      	bmi.n	8007ba4 <_printf_common+0xb0>
 8007b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b50:	4641      	mov	r1, r8
 8007b52:	4638      	mov	r0, r7
 8007b54:	47c8      	blx	r9
 8007b56:	3001      	adds	r0, #1
 8007b58:	d01e      	beq.n	8007b98 <_printf_common+0xa4>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	6922      	ldr	r2, [r4, #16]
 8007b5e:	f003 0306 	and.w	r3, r3, #6
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	bf02      	ittt	eq
 8007b66:	68e5      	ldreq	r5, [r4, #12]
 8007b68:	6833      	ldreq	r3, [r6, #0]
 8007b6a:	1aed      	subeq	r5, r5, r3
 8007b6c:	68a3      	ldr	r3, [r4, #8]
 8007b6e:	bf0c      	ite	eq
 8007b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b74:	2500      	movne	r5, #0
 8007b76:	4293      	cmp	r3, r2
 8007b78:	bfc4      	itt	gt
 8007b7a:	1a9b      	subgt	r3, r3, r2
 8007b7c:	18ed      	addgt	r5, r5, r3
 8007b7e:	2600      	movs	r6, #0
 8007b80:	341a      	adds	r4, #26
 8007b82:	42b5      	cmp	r5, r6
 8007b84:	d11a      	bne.n	8007bbc <_printf_common+0xc8>
 8007b86:	2000      	movs	r0, #0
 8007b88:	e008      	b.n	8007b9c <_printf_common+0xa8>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4652      	mov	r2, sl
 8007b8e:	4641      	mov	r1, r8
 8007b90:	4638      	mov	r0, r7
 8007b92:	47c8      	blx	r9
 8007b94:	3001      	adds	r0, #1
 8007b96:	d103      	bne.n	8007ba0 <_printf_common+0xac>
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	e7c6      	b.n	8007b32 <_printf_common+0x3e>
 8007ba4:	18e1      	adds	r1, r4, r3
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	2030      	movs	r0, #48	@ 0x30
 8007baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bae:	4422      	add	r2, r4
 8007bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bb8:	3302      	adds	r3, #2
 8007bba:	e7c7      	b.n	8007b4c <_printf_common+0x58>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	47c8      	blx	r9
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d0e6      	beq.n	8007b98 <_printf_common+0xa4>
 8007bca:	3601      	adds	r6, #1
 8007bcc:	e7d9      	b.n	8007b82 <_printf_common+0x8e>
	...

08007bd0 <_printf_i>:
 8007bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd4:	7e0f      	ldrb	r7, [r1, #24]
 8007bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bd8:	2f78      	cmp	r7, #120	@ 0x78
 8007bda:	4691      	mov	r9, r2
 8007bdc:	4680      	mov	r8, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	469a      	mov	sl, r3
 8007be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007be6:	d807      	bhi.n	8007bf8 <_printf_i+0x28>
 8007be8:	2f62      	cmp	r7, #98	@ 0x62
 8007bea:	d80a      	bhi.n	8007c02 <_printf_i+0x32>
 8007bec:	2f00      	cmp	r7, #0
 8007bee:	f000 80d2 	beq.w	8007d96 <_printf_i+0x1c6>
 8007bf2:	2f58      	cmp	r7, #88	@ 0x58
 8007bf4:	f000 80b9 	beq.w	8007d6a <_printf_i+0x19a>
 8007bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c00:	e03a      	b.n	8007c78 <_printf_i+0xa8>
 8007c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c06:	2b15      	cmp	r3, #21
 8007c08:	d8f6      	bhi.n	8007bf8 <_printf_i+0x28>
 8007c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8007c10 <_printf_i+0x40>)
 8007c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c10:	08007c69 	.word	0x08007c69
 8007c14:	08007c7d 	.word	0x08007c7d
 8007c18:	08007bf9 	.word	0x08007bf9
 8007c1c:	08007bf9 	.word	0x08007bf9
 8007c20:	08007bf9 	.word	0x08007bf9
 8007c24:	08007bf9 	.word	0x08007bf9
 8007c28:	08007c7d 	.word	0x08007c7d
 8007c2c:	08007bf9 	.word	0x08007bf9
 8007c30:	08007bf9 	.word	0x08007bf9
 8007c34:	08007bf9 	.word	0x08007bf9
 8007c38:	08007bf9 	.word	0x08007bf9
 8007c3c:	08007d7d 	.word	0x08007d7d
 8007c40:	08007ca7 	.word	0x08007ca7
 8007c44:	08007d37 	.word	0x08007d37
 8007c48:	08007bf9 	.word	0x08007bf9
 8007c4c:	08007bf9 	.word	0x08007bf9
 8007c50:	08007d9f 	.word	0x08007d9f
 8007c54:	08007bf9 	.word	0x08007bf9
 8007c58:	08007ca7 	.word	0x08007ca7
 8007c5c:	08007bf9 	.word	0x08007bf9
 8007c60:	08007bf9 	.word	0x08007bf9
 8007c64:	08007d3f 	.word	0x08007d3f
 8007c68:	6833      	ldr	r3, [r6, #0]
 8007c6a:	1d1a      	adds	r2, r3, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6032      	str	r2, [r6, #0]
 8007c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e09d      	b.n	8007db8 <_printf_i+0x1e8>
 8007c7c:	6833      	ldr	r3, [r6, #0]
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	1d19      	adds	r1, r3, #4
 8007c82:	6031      	str	r1, [r6, #0]
 8007c84:	0606      	lsls	r6, r0, #24
 8007c86:	d501      	bpl.n	8007c8c <_printf_i+0xbc>
 8007c88:	681d      	ldr	r5, [r3, #0]
 8007c8a:	e003      	b.n	8007c94 <_printf_i+0xc4>
 8007c8c:	0645      	lsls	r5, r0, #25
 8007c8e:	d5fb      	bpl.n	8007c88 <_printf_i+0xb8>
 8007c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	da03      	bge.n	8007ca0 <_printf_i+0xd0>
 8007c98:	232d      	movs	r3, #45	@ 0x2d
 8007c9a:	426d      	negs	r5, r5
 8007c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ca0:	4859      	ldr	r0, [pc, #356]	@ (8007e08 <_printf_i+0x238>)
 8007ca2:	230a      	movs	r3, #10
 8007ca4:	e011      	b.n	8007cca <_printf_i+0xfa>
 8007ca6:	6821      	ldr	r1, [r4, #0]
 8007ca8:	6833      	ldr	r3, [r6, #0]
 8007caa:	0608      	lsls	r0, r1, #24
 8007cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cb0:	d402      	bmi.n	8007cb8 <_printf_i+0xe8>
 8007cb2:	0649      	lsls	r1, r1, #25
 8007cb4:	bf48      	it	mi
 8007cb6:	b2ad      	uxthmi	r5, r5
 8007cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cba:	4853      	ldr	r0, [pc, #332]	@ (8007e08 <_printf_i+0x238>)
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	bf14      	ite	ne
 8007cc0:	230a      	movne	r3, #10
 8007cc2:	2308      	moveq	r3, #8
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cca:	6866      	ldr	r6, [r4, #4]
 8007ccc:	60a6      	str	r6, [r4, #8]
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	bfa2      	ittt	ge
 8007cd2:	6821      	ldrge	r1, [r4, #0]
 8007cd4:	f021 0104 	bicge.w	r1, r1, #4
 8007cd8:	6021      	strge	r1, [r4, #0]
 8007cda:	b90d      	cbnz	r5, 8007ce0 <_printf_i+0x110>
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	d04b      	beq.n	8007d78 <_printf_i+0x1a8>
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8007cea:	5dc7      	ldrb	r7, [r0, r7]
 8007cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cf0:	462f      	mov	r7, r5
 8007cf2:	42bb      	cmp	r3, r7
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	d9f4      	bls.n	8007ce2 <_printf_i+0x112>
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d10b      	bne.n	8007d14 <_printf_i+0x144>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	07df      	lsls	r7, r3, #31
 8007d00:	d508      	bpl.n	8007d14 <_printf_i+0x144>
 8007d02:	6923      	ldr	r3, [r4, #16]
 8007d04:	6861      	ldr	r1, [r4, #4]
 8007d06:	4299      	cmp	r1, r3
 8007d08:	bfde      	ittt	le
 8007d0a:	2330      	movle	r3, #48	@ 0x30
 8007d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d14:	1b92      	subs	r2, r2, r6
 8007d16:	6122      	str	r2, [r4, #16]
 8007d18:	f8cd a000 	str.w	sl, [sp]
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	aa03      	add	r2, sp, #12
 8007d20:	4621      	mov	r1, r4
 8007d22:	4640      	mov	r0, r8
 8007d24:	f7ff fee6 	bl	8007af4 <_printf_common>
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d14a      	bne.n	8007dc2 <_printf_i+0x1f2>
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	b004      	add	sp, #16
 8007d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	f043 0320 	orr.w	r3, r3, #32
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	4833      	ldr	r0, [pc, #204]	@ (8007e0c <_printf_i+0x23c>)
 8007d40:	2778      	movs	r7, #120	@ 0x78
 8007d42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	6831      	ldr	r1, [r6, #0]
 8007d4a:	061f      	lsls	r7, r3, #24
 8007d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d50:	d402      	bmi.n	8007d58 <_printf_i+0x188>
 8007d52:	065f      	lsls	r7, r3, #25
 8007d54:	bf48      	it	mi
 8007d56:	b2ad      	uxthmi	r5, r5
 8007d58:	6031      	str	r1, [r6, #0]
 8007d5a:	07d9      	lsls	r1, r3, #31
 8007d5c:	bf44      	itt	mi
 8007d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d62:	6023      	strmi	r3, [r4, #0]
 8007d64:	b11d      	cbz	r5, 8007d6e <_printf_i+0x19e>
 8007d66:	2310      	movs	r3, #16
 8007d68:	e7ac      	b.n	8007cc4 <_printf_i+0xf4>
 8007d6a:	4827      	ldr	r0, [pc, #156]	@ (8007e08 <_printf_i+0x238>)
 8007d6c:	e7e9      	b.n	8007d42 <_printf_i+0x172>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	f023 0320 	bic.w	r3, r3, #32
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	e7f6      	b.n	8007d66 <_printf_i+0x196>
 8007d78:	4616      	mov	r6, r2
 8007d7a:	e7bd      	b.n	8007cf8 <_printf_i+0x128>
 8007d7c:	6833      	ldr	r3, [r6, #0]
 8007d7e:	6825      	ldr	r5, [r4, #0]
 8007d80:	6961      	ldr	r1, [r4, #20]
 8007d82:	1d18      	adds	r0, r3, #4
 8007d84:	6030      	str	r0, [r6, #0]
 8007d86:	062e      	lsls	r6, r5, #24
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	d501      	bpl.n	8007d90 <_printf_i+0x1c0>
 8007d8c:	6019      	str	r1, [r3, #0]
 8007d8e:	e002      	b.n	8007d96 <_printf_i+0x1c6>
 8007d90:	0668      	lsls	r0, r5, #25
 8007d92:	d5fb      	bpl.n	8007d8c <_printf_i+0x1bc>
 8007d94:	8019      	strh	r1, [r3, #0]
 8007d96:	2300      	movs	r3, #0
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	4616      	mov	r6, r2
 8007d9c:	e7bc      	b.n	8007d18 <_printf_i+0x148>
 8007d9e:	6833      	ldr	r3, [r6, #0]
 8007da0:	1d1a      	adds	r2, r3, #4
 8007da2:	6032      	str	r2, [r6, #0]
 8007da4:	681e      	ldr	r6, [r3, #0]
 8007da6:	6862      	ldr	r2, [r4, #4]
 8007da8:	2100      	movs	r1, #0
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7f8 fa20 	bl	80001f0 <memchr>
 8007db0:	b108      	cbz	r0, 8007db6 <_printf_i+0x1e6>
 8007db2:	1b80      	subs	r0, r0, r6
 8007db4:	6060      	str	r0, [r4, #4]
 8007db6:	6863      	ldr	r3, [r4, #4]
 8007db8:	6123      	str	r3, [r4, #16]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dc0:	e7aa      	b.n	8007d18 <_printf_i+0x148>
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	4640      	mov	r0, r8
 8007dca:	47d0      	blx	sl
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d0ad      	beq.n	8007d2c <_printf_i+0x15c>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	079b      	lsls	r3, r3, #30
 8007dd4:	d413      	bmi.n	8007dfe <_printf_i+0x22e>
 8007dd6:	68e0      	ldr	r0, [r4, #12]
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	4298      	cmp	r0, r3
 8007ddc:	bfb8      	it	lt
 8007dde:	4618      	movlt	r0, r3
 8007de0:	e7a6      	b.n	8007d30 <_printf_i+0x160>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4632      	mov	r2, r6
 8007de6:	4649      	mov	r1, r9
 8007de8:	4640      	mov	r0, r8
 8007dea:	47d0      	blx	sl
 8007dec:	3001      	adds	r0, #1
 8007dee:	d09d      	beq.n	8007d2c <_printf_i+0x15c>
 8007df0:	3501      	adds	r5, #1
 8007df2:	68e3      	ldr	r3, [r4, #12]
 8007df4:	9903      	ldr	r1, [sp, #12]
 8007df6:	1a5b      	subs	r3, r3, r1
 8007df8:	42ab      	cmp	r3, r5
 8007dfa:	dcf2      	bgt.n	8007de2 <_printf_i+0x212>
 8007dfc:	e7eb      	b.n	8007dd6 <_printf_i+0x206>
 8007dfe:	2500      	movs	r5, #0
 8007e00:	f104 0619 	add.w	r6, r4, #25
 8007e04:	e7f5      	b.n	8007df2 <_printf_i+0x222>
 8007e06:	bf00      	nop
 8007e08:	0800bb1e 	.word	0x0800bb1e
 8007e0c:	0800bb2f 	.word	0x0800bb2f

08007e10 <_scanf_float>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	b087      	sub	sp, #28
 8007e16:	4617      	mov	r7, r2
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	688b      	ldr	r3, [r1, #8]
 8007e1c:	1e5a      	subs	r2, r3, #1
 8007e1e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007e22:	bf81      	itttt	hi
 8007e24:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007e28:	eb03 0b05 	addhi.w	fp, r3, r5
 8007e2c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007e30:	608b      	strhi	r3, [r1, #8]
 8007e32:	680b      	ldr	r3, [r1, #0]
 8007e34:	460a      	mov	r2, r1
 8007e36:	f04f 0500 	mov.w	r5, #0
 8007e3a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007e3e:	f842 3b1c 	str.w	r3, [r2], #28
 8007e42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e46:	4680      	mov	r8, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	bf98      	it	ls
 8007e4c:	f04f 0b00 	movls.w	fp, #0
 8007e50:	9201      	str	r2, [sp, #4]
 8007e52:	4616      	mov	r6, r2
 8007e54:	46aa      	mov	sl, r5
 8007e56:	46a9      	mov	r9, r5
 8007e58:	9502      	str	r5, [sp, #8]
 8007e5a:	68a2      	ldr	r2, [r4, #8]
 8007e5c:	b152      	cbz	r2, 8007e74 <_scanf_float+0x64>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b4e      	cmp	r3, #78	@ 0x4e
 8007e64:	d864      	bhi.n	8007f30 <_scanf_float+0x120>
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d83c      	bhi.n	8007ee4 <_scanf_float+0xd4>
 8007e6a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007e6e:	b2c8      	uxtb	r0, r1
 8007e70:	280e      	cmp	r0, #14
 8007e72:	d93a      	bls.n	8007eea <_scanf_float+0xda>
 8007e74:	f1b9 0f00 	cmp.w	r9, #0
 8007e78:	d003      	beq.n	8007e82 <_scanf_float+0x72>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e86:	f1ba 0f01 	cmp.w	sl, #1
 8007e8a:	f200 8117 	bhi.w	80080bc <_scanf_float+0x2ac>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	429e      	cmp	r6, r3
 8007e92:	f200 8108 	bhi.w	80080a6 <_scanf_float+0x296>
 8007e96:	2001      	movs	r0, #1
 8007e98:	b007      	add	sp, #28
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ea2:	2a0d      	cmp	r2, #13
 8007ea4:	d8e6      	bhi.n	8007e74 <_scanf_float+0x64>
 8007ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8007eac <_scanf_float+0x9c>)
 8007ea8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007eac:	08007ff3 	.word	0x08007ff3
 8007eb0:	08007e75 	.word	0x08007e75
 8007eb4:	08007e75 	.word	0x08007e75
 8007eb8:	08007e75 	.word	0x08007e75
 8007ebc:	08008053 	.word	0x08008053
 8007ec0:	0800802b 	.word	0x0800802b
 8007ec4:	08007e75 	.word	0x08007e75
 8007ec8:	08007e75 	.word	0x08007e75
 8007ecc:	08008001 	.word	0x08008001
 8007ed0:	08007e75 	.word	0x08007e75
 8007ed4:	08007e75 	.word	0x08007e75
 8007ed8:	08007e75 	.word	0x08007e75
 8007edc:	08007e75 	.word	0x08007e75
 8007ee0:	08007fb9 	.word	0x08007fb9
 8007ee4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007ee8:	e7db      	b.n	8007ea2 <_scanf_float+0x92>
 8007eea:	290e      	cmp	r1, #14
 8007eec:	d8c2      	bhi.n	8007e74 <_scanf_float+0x64>
 8007eee:	a001      	add	r0, pc, #4	@ (adr r0, 8007ef4 <_scanf_float+0xe4>)
 8007ef0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ef4:	08007fa9 	.word	0x08007fa9
 8007ef8:	08007e75 	.word	0x08007e75
 8007efc:	08007fa9 	.word	0x08007fa9
 8007f00:	0800803f 	.word	0x0800803f
 8007f04:	08007e75 	.word	0x08007e75
 8007f08:	08007f51 	.word	0x08007f51
 8007f0c:	08007f8f 	.word	0x08007f8f
 8007f10:	08007f8f 	.word	0x08007f8f
 8007f14:	08007f8f 	.word	0x08007f8f
 8007f18:	08007f8f 	.word	0x08007f8f
 8007f1c:	08007f8f 	.word	0x08007f8f
 8007f20:	08007f8f 	.word	0x08007f8f
 8007f24:	08007f8f 	.word	0x08007f8f
 8007f28:	08007f8f 	.word	0x08007f8f
 8007f2c:	08007f8f 	.word	0x08007f8f
 8007f30:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f32:	d809      	bhi.n	8007f48 <_scanf_float+0x138>
 8007f34:	2b60      	cmp	r3, #96	@ 0x60
 8007f36:	d8b2      	bhi.n	8007e9e <_scanf_float+0x8e>
 8007f38:	2b54      	cmp	r3, #84	@ 0x54
 8007f3a:	d07b      	beq.n	8008034 <_scanf_float+0x224>
 8007f3c:	2b59      	cmp	r3, #89	@ 0x59
 8007f3e:	d199      	bne.n	8007e74 <_scanf_float+0x64>
 8007f40:	2d07      	cmp	r5, #7
 8007f42:	d197      	bne.n	8007e74 <_scanf_float+0x64>
 8007f44:	2508      	movs	r5, #8
 8007f46:	e02c      	b.n	8007fa2 <_scanf_float+0x192>
 8007f48:	2b74      	cmp	r3, #116	@ 0x74
 8007f4a:	d073      	beq.n	8008034 <_scanf_float+0x224>
 8007f4c:	2b79      	cmp	r3, #121	@ 0x79
 8007f4e:	e7f6      	b.n	8007f3e <_scanf_float+0x12e>
 8007f50:	6821      	ldr	r1, [r4, #0]
 8007f52:	05c8      	lsls	r0, r1, #23
 8007f54:	d51b      	bpl.n	8007f8e <_scanf_float+0x17e>
 8007f56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007f5a:	6021      	str	r1, [r4, #0]
 8007f5c:	f109 0901 	add.w	r9, r9, #1
 8007f60:	f1bb 0f00 	cmp.w	fp, #0
 8007f64:	d003      	beq.n	8007f6e <_scanf_float+0x15e>
 8007f66:	3201      	adds	r2, #1
 8007f68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f6c:	60a2      	str	r2, [r4, #8]
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	60a3      	str	r3, [r4, #8]
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	3301      	adds	r3, #1
 8007f78:	6123      	str	r3, [r4, #16]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	f340 8087 	ble.w	8008094 <_scanf_float+0x284>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	e765      	b.n	8007e5a <_scanf_float+0x4a>
 8007f8e:	eb1a 0105 	adds.w	r1, sl, r5
 8007f92:	f47f af6f 	bne.w	8007e74 <_scanf_float+0x64>
 8007f96:	6822      	ldr	r2, [r4, #0]
 8007f98:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	468a      	mov	sl, r1
 8007fa2:	f806 3b01 	strb.w	r3, [r6], #1
 8007fa6:	e7e2      	b.n	8007f6e <_scanf_float+0x15e>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	0610      	lsls	r0, r2, #24
 8007fac:	f57f af62 	bpl.w	8007e74 <_scanf_float+0x64>
 8007fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	e7f4      	b.n	8007fa2 <_scanf_float+0x192>
 8007fb8:	f1ba 0f00 	cmp.w	sl, #0
 8007fbc:	d10e      	bne.n	8007fdc <_scanf_float+0x1cc>
 8007fbe:	f1b9 0f00 	cmp.w	r9, #0
 8007fc2:	d10e      	bne.n	8007fe2 <_scanf_float+0x1d2>
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007fca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007fce:	d108      	bne.n	8007fe2 <_scanf_float+0x1d2>
 8007fd0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007fd4:	6022      	str	r2, [r4, #0]
 8007fd6:	f04f 0a01 	mov.w	sl, #1
 8007fda:	e7e2      	b.n	8007fa2 <_scanf_float+0x192>
 8007fdc:	f1ba 0f02 	cmp.w	sl, #2
 8007fe0:	d055      	beq.n	800808e <_scanf_float+0x27e>
 8007fe2:	2d01      	cmp	r5, #1
 8007fe4:	d002      	beq.n	8007fec <_scanf_float+0x1dc>
 8007fe6:	2d04      	cmp	r5, #4
 8007fe8:	f47f af44 	bne.w	8007e74 <_scanf_float+0x64>
 8007fec:	3501      	adds	r5, #1
 8007fee:	b2ed      	uxtb	r5, r5
 8007ff0:	e7d7      	b.n	8007fa2 <_scanf_float+0x192>
 8007ff2:	f1ba 0f01 	cmp.w	sl, #1
 8007ff6:	f47f af3d 	bne.w	8007e74 <_scanf_float+0x64>
 8007ffa:	f04f 0a02 	mov.w	sl, #2
 8007ffe:	e7d0      	b.n	8007fa2 <_scanf_float+0x192>
 8008000:	b97d      	cbnz	r5, 8008022 <_scanf_float+0x212>
 8008002:	f1b9 0f00 	cmp.w	r9, #0
 8008006:	f47f af38 	bne.w	8007e7a <_scanf_float+0x6a>
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008010:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008014:	f040 8108 	bne.w	8008228 <_scanf_float+0x418>
 8008018:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	2501      	movs	r5, #1
 8008020:	e7bf      	b.n	8007fa2 <_scanf_float+0x192>
 8008022:	2d03      	cmp	r5, #3
 8008024:	d0e2      	beq.n	8007fec <_scanf_float+0x1dc>
 8008026:	2d05      	cmp	r5, #5
 8008028:	e7de      	b.n	8007fe8 <_scanf_float+0x1d8>
 800802a:	2d02      	cmp	r5, #2
 800802c:	f47f af22 	bne.w	8007e74 <_scanf_float+0x64>
 8008030:	2503      	movs	r5, #3
 8008032:	e7b6      	b.n	8007fa2 <_scanf_float+0x192>
 8008034:	2d06      	cmp	r5, #6
 8008036:	f47f af1d 	bne.w	8007e74 <_scanf_float+0x64>
 800803a:	2507      	movs	r5, #7
 800803c:	e7b1      	b.n	8007fa2 <_scanf_float+0x192>
 800803e:	6822      	ldr	r2, [r4, #0]
 8008040:	0591      	lsls	r1, r2, #22
 8008042:	f57f af17 	bpl.w	8007e74 <_scanf_float+0x64>
 8008046:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800804a:	6022      	str	r2, [r4, #0]
 800804c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008050:	e7a7      	b.n	8007fa2 <_scanf_float+0x192>
 8008052:	6822      	ldr	r2, [r4, #0]
 8008054:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008058:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800805c:	d006      	beq.n	800806c <_scanf_float+0x25c>
 800805e:	0550      	lsls	r0, r2, #21
 8008060:	f57f af08 	bpl.w	8007e74 <_scanf_float+0x64>
 8008064:	f1b9 0f00 	cmp.w	r9, #0
 8008068:	f000 80de 	beq.w	8008228 <_scanf_float+0x418>
 800806c:	0591      	lsls	r1, r2, #22
 800806e:	bf58      	it	pl
 8008070:	9902      	ldrpl	r1, [sp, #8]
 8008072:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008076:	bf58      	it	pl
 8008078:	eba9 0101 	subpl.w	r1, r9, r1
 800807c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008080:	bf58      	it	pl
 8008082:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	f04f 0900 	mov.w	r9, #0
 800808c:	e789      	b.n	8007fa2 <_scanf_float+0x192>
 800808e:	f04f 0a03 	mov.w	sl, #3
 8008092:	e786      	b.n	8007fa2 <_scanf_float+0x192>
 8008094:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008098:	4639      	mov	r1, r7
 800809a:	4640      	mov	r0, r8
 800809c:	4798      	blx	r3
 800809e:	2800      	cmp	r0, #0
 80080a0:	f43f aedb 	beq.w	8007e5a <_scanf_float+0x4a>
 80080a4:	e6e6      	b.n	8007e74 <_scanf_float+0x64>
 80080a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080ae:	463a      	mov	r2, r7
 80080b0:	4640      	mov	r0, r8
 80080b2:	4798      	blx	r3
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	6123      	str	r3, [r4, #16]
 80080ba:	e6e8      	b.n	8007e8e <_scanf_float+0x7e>
 80080bc:	1e6b      	subs	r3, r5, #1
 80080be:	2b06      	cmp	r3, #6
 80080c0:	d824      	bhi.n	800810c <_scanf_float+0x2fc>
 80080c2:	2d02      	cmp	r5, #2
 80080c4:	d836      	bhi.n	8008134 <_scanf_float+0x324>
 80080c6:	9b01      	ldr	r3, [sp, #4]
 80080c8:	429e      	cmp	r6, r3
 80080ca:	f67f aee4 	bls.w	8007e96 <_scanf_float+0x86>
 80080ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080d6:	463a      	mov	r2, r7
 80080d8:	4640      	mov	r0, r8
 80080da:	4798      	blx	r3
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	3b01      	subs	r3, #1
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	e7f0      	b.n	80080c6 <_scanf_float+0x2b6>
 80080e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080e8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80080ec:	463a      	mov	r2, r7
 80080ee:	4640      	mov	r0, r8
 80080f0:	4798      	blx	r3
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fc:	fa5f fa8a 	uxtb.w	sl, sl
 8008100:	f1ba 0f02 	cmp.w	sl, #2
 8008104:	d1ee      	bne.n	80080e4 <_scanf_float+0x2d4>
 8008106:	3d03      	subs	r5, #3
 8008108:	b2ed      	uxtb	r5, r5
 800810a:	1b76      	subs	r6, r6, r5
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	05da      	lsls	r2, r3, #23
 8008110:	d530      	bpl.n	8008174 <_scanf_float+0x364>
 8008112:	055b      	lsls	r3, r3, #21
 8008114:	d511      	bpl.n	800813a <_scanf_float+0x32a>
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	429e      	cmp	r6, r3
 800811a:	f67f aebc 	bls.w	8007e96 <_scanf_float+0x86>
 800811e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008122:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008126:	463a      	mov	r2, r7
 8008128:	4640      	mov	r0, r8
 800812a:	4798      	blx	r3
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	3b01      	subs	r3, #1
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	e7f0      	b.n	8008116 <_scanf_float+0x306>
 8008134:	46aa      	mov	sl, r5
 8008136:	46b3      	mov	fp, r6
 8008138:	e7de      	b.n	80080f8 <_scanf_float+0x2e8>
 800813a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	2965      	cmp	r1, #101	@ 0x65
 8008142:	f103 33ff 	add.w	r3, r3, #4294967295
 8008146:	f106 35ff 	add.w	r5, r6, #4294967295
 800814a:	6123      	str	r3, [r4, #16]
 800814c:	d00c      	beq.n	8008168 <_scanf_float+0x358>
 800814e:	2945      	cmp	r1, #69	@ 0x45
 8008150:	d00a      	beq.n	8008168 <_scanf_float+0x358>
 8008152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008156:	463a      	mov	r2, r7
 8008158:	4640      	mov	r0, r8
 800815a:	4798      	blx	r3
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008162:	3b01      	subs	r3, #1
 8008164:	1eb5      	subs	r5, r6, #2
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800816c:	463a      	mov	r2, r7
 800816e:	4640      	mov	r0, r8
 8008170:	4798      	blx	r3
 8008172:	462e      	mov	r6, r5
 8008174:	6822      	ldr	r2, [r4, #0]
 8008176:	f012 0210 	ands.w	r2, r2, #16
 800817a:	d001      	beq.n	8008180 <_scanf_float+0x370>
 800817c:	2000      	movs	r0, #0
 800817e:	e68b      	b.n	8007e98 <_scanf_float+0x88>
 8008180:	7032      	strb	r2, [r6, #0]
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800818c:	d11c      	bne.n	80081c8 <_scanf_float+0x3b8>
 800818e:	9b02      	ldr	r3, [sp, #8]
 8008190:	454b      	cmp	r3, r9
 8008192:	eba3 0209 	sub.w	r2, r3, r9
 8008196:	d123      	bne.n	80081e0 <_scanf_float+0x3d0>
 8008198:	9901      	ldr	r1, [sp, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	4640      	mov	r0, r8
 800819e:	f002 fb53 	bl	800a848 <_strtod_r>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	6821      	ldr	r1, [r4, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f011 0f02 	tst.w	r1, #2
 80081ac:	ec57 6b10 	vmov	r6, r7, d0
 80081b0:	f103 0204 	add.w	r2, r3, #4
 80081b4:	d01f      	beq.n	80081f6 <_scanf_float+0x3e6>
 80081b6:	9903      	ldr	r1, [sp, #12]
 80081b8:	600a      	str	r2, [r1, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	e9c3 6700 	strd	r6, r7, [r3]
 80081c0:	68e3      	ldr	r3, [r4, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60e3      	str	r3, [r4, #12]
 80081c6:	e7d9      	b.n	800817c <_scanf_float+0x36c>
 80081c8:	9b04      	ldr	r3, [sp, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0e4      	beq.n	8008198 <_scanf_float+0x388>
 80081ce:	9905      	ldr	r1, [sp, #20]
 80081d0:	230a      	movs	r3, #10
 80081d2:	3101      	adds	r1, #1
 80081d4:	4640      	mov	r0, r8
 80081d6:	f002 fbb7 	bl	800a948 <_strtol_r>
 80081da:	9b04      	ldr	r3, [sp, #16]
 80081dc:	9e05      	ldr	r6, [sp, #20]
 80081de:	1ac2      	subs	r2, r0, r3
 80081e0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80081e4:	429e      	cmp	r6, r3
 80081e6:	bf28      	it	cs
 80081e8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80081ec:	4910      	ldr	r1, [pc, #64]	@ (8008230 <_scanf_float+0x420>)
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 f8e4 	bl	80083bc <siprintf>
 80081f4:	e7d0      	b.n	8008198 <_scanf_float+0x388>
 80081f6:	f011 0f04 	tst.w	r1, #4
 80081fa:	9903      	ldr	r1, [sp, #12]
 80081fc:	600a      	str	r2, [r1, #0]
 80081fe:	d1dc      	bne.n	80081ba <_scanf_float+0x3aa>
 8008200:	681d      	ldr	r5, [r3, #0]
 8008202:	4632      	mov	r2, r6
 8008204:	463b      	mov	r3, r7
 8008206:	4630      	mov	r0, r6
 8008208:	4639      	mov	r1, r7
 800820a:	f7f8 fc9f 	bl	8000b4c <__aeabi_dcmpun>
 800820e:	b128      	cbz	r0, 800821c <_scanf_float+0x40c>
 8008210:	4808      	ldr	r0, [pc, #32]	@ (8008234 <_scanf_float+0x424>)
 8008212:	f000 f9c7 	bl	80085a4 <nanf>
 8008216:	ed85 0a00 	vstr	s0, [r5]
 800821a:	e7d1      	b.n	80081c0 <_scanf_float+0x3b0>
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	f7f8 fcf2 	bl	8000c08 <__aeabi_d2f>
 8008224:	6028      	str	r0, [r5, #0]
 8008226:	e7cb      	b.n	80081c0 <_scanf_float+0x3b0>
 8008228:	f04f 0900 	mov.w	r9, #0
 800822c:	e629      	b.n	8007e82 <_scanf_float+0x72>
 800822e:	bf00      	nop
 8008230:	0800bb40 	.word	0x0800bb40
 8008234:	0800bed5 	.word	0x0800bed5

08008238 <std>:
 8008238:	2300      	movs	r3, #0
 800823a:	b510      	push	{r4, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	e9c0 3300 	strd	r3, r3, [r0]
 8008242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008246:	6083      	str	r3, [r0, #8]
 8008248:	8181      	strh	r1, [r0, #12]
 800824a:	6643      	str	r3, [r0, #100]	@ 0x64
 800824c:	81c2      	strh	r2, [r0, #14]
 800824e:	6183      	str	r3, [r0, #24]
 8008250:	4619      	mov	r1, r3
 8008252:	2208      	movs	r2, #8
 8008254:	305c      	adds	r0, #92	@ 0x5c
 8008256:	f000 f914 	bl	8008482 <memset>
 800825a:	4b0d      	ldr	r3, [pc, #52]	@ (8008290 <std+0x58>)
 800825c:	6263      	str	r3, [r4, #36]	@ 0x24
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <std+0x5c>)
 8008260:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008262:	4b0d      	ldr	r3, [pc, #52]	@ (8008298 <std+0x60>)
 8008264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008266:	4b0d      	ldr	r3, [pc, #52]	@ (800829c <std+0x64>)
 8008268:	6323      	str	r3, [r4, #48]	@ 0x30
 800826a:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <std+0x68>)
 800826c:	6224      	str	r4, [r4, #32]
 800826e:	429c      	cmp	r4, r3
 8008270:	d006      	beq.n	8008280 <std+0x48>
 8008272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008276:	4294      	cmp	r4, r2
 8008278:	d002      	beq.n	8008280 <std+0x48>
 800827a:	33d0      	adds	r3, #208	@ 0xd0
 800827c:	429c      	cmp	r4, r3
 800827e:	d105      	bne.n	800828c <std+0x54>
 8008280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008288:	f000 b988 	b.w	800859c <__retarget_lock_init_recursive>
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	080083fd 	.word	0x080083fd
 8008294:	0800841f 	.word	0x0800841f
 8008298:	08008457 	.word	0x08008457
 800829c:	0800847b 	.word	0x0800847b
 80082a0:	20000454 	.word	0x20000454

080082a4 <stdio_exit_handler>:
 80082a4:	4a02      	ldr	r2, [pc, #8]	@ (80082b0 <stdio_exit_handler+0xc>)
 80082a6:	4903      	ldr	r1, [pc, #12]	@ (80082b4 <stdio_exit_handler+0x10>)
 80082a8:	4803      	ldr	r0, [pc, #12]	@ (80082b8 <stdio_exit_handler+0x14>)
 80082aa:	f000 b869 	b.w	8008380 <_fwalk_sglue>
 80082ae:	bf00      	nop
 80082b0:	20000020 	.word	0x20000020
 80082b4:	0800ad05 	.word	0x0800ad05
 80082b8:	20000030 	.word	0x20000030

080082bc <cleanup_stdio>:
 80082bc:	6841      	ldr	r1, [r0, #4]
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <cleanup_stdio+0x34>)
 80082c0:	4299      	cmp	r1, r3
 80082c2:	b510      	push	{r4, lr}
 80082c4:	4604      	mov	r4, r0
 80082c6:	d001      	beq.n	80082cc <cleanup_stdio+0x10>
 80082c8:	f002 fd1c 	bl	800ad04 <_fflush_r>
 80082cc:	68a1      	ldr	r1, [r4, #8]
 80082ce:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <cleanup_stdio+0x38>)
 80082d0:	4299      	cmp	r1, r3
 80082d2:	d002      	beq.n	80082da <cleanup_stdio+0x1e>
 80082d4:	4620      	mov	r0, r4
 80082d6:	f002 fd15 	bl	800ad04 <_fflush_r>
 80082da:	68e1      	ldr	r1, [r4, #12]
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <cleanup_stdio+0x3c>)
 80082de:	4299      	cmp	r1, r3
 80082e0:	d004      	beq.n	80082ec <cleanup_stdio+0x30>
 80082e2:	4620      	mov	r0, r4
 80082e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e8:	f002 bd0c 	b.w	800ad04 <_fflush_r>
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	bf00      	nop
 80082f0:	20000454 	.word	0x20000454
 80082f4:	200004bc 	.word	0x200004bc
 80082f8:	20000524 	.word	0x20000524

080082fc <global_stdio_init.part.0>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4b0b      	ldr	r3, [pc, #44]	@ (800832c <global_stdio_init.part.0+0x30>)
 8008300:	4c0b      	ldr	r4, [pc, #44]	@ (8008330 <global_stdio_init.part.0+0x34>)
 8008302:	4a0c      	ldr	r2, [pc, #48]	@ (8008334 <global_stdio_init.part.0+0x38>)
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	4620      	mov	r0, r4
 8008308:	2200      	movs	r2, #0
 800830a:	2104      	movs	r1, #4
 800830c:	f7ff ff94 	bl	8008238 <std>
 8008310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008314:	2201      	movs	r2, #1
 8008316:	2109      	movs	r1, #9
 8008318:	f7ff ff8e 	bl	8008238 <std>
 800831c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008320:	2202      	movs	r2, #2
 8008322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008326:	2112      	movs	r1, #18
 8008328:	f7ff bf86 	b.w	8008238 <std>
 800832c:	2000058c 	.word	0x2000058c
 8008330:	20000454 	.word	0x20000454
 8008334:	080082a5 	.word	0x080082a5

08008338 <__sfp_lock_acquire>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__sfp_lock_acquire+0x8>)
 800833a:	f000 b930 	b.w	800859e <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	20000595 	.word	0x20000595

08008344 <__sfp_lock_release>:
 8008344:	4801      	ldr	r0, [pc, #4]	@ (800834c <__sfp_lock_release+0x8>)
 8008346:	f000 b92b 	b.w	80085a0 <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	20000595 	.word	0x20000595

08008350 <__sinit>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	f7ff fff0 	bl	8008338 <__sfp_lock_acquire>
 8008358:	6a23      	ldr	r3, [r4, #32]
 800835a:	b11b      	cbz	r3, 8008364 <__sinit+0x14>
 800835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008360:	f7ff bff0 	b.w	8008344 <__sfp_lock_release>
 8008364:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <__sinit+0x28>)
 8008366:	6223      	str	r3, [r4, #32]
 8008368:	4b04      	ldr	r3, [pc, #16]	@ (800837c <__sinit+0x2c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f5      	bne.n	800835c <__sinit+0xc>
 8008370:	f7ff ffc4 	bl	80082fc <global_stdio_init.part.0>
 8008374:	e7f2      	b.n	800835c <__sinit+0xc>
 8008376:	bf00      	nop
 8008378:	080082bd 	.word	0x080082bd
 800837c:	2000058c 	.word	0x2000058c

08008380 <_fwalk_sglue>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4607      	mov	r7, r0
 8008386:	4688      	mov	r8, r1
 8008388:	4614      	mov	r4, r2
 800838a:	2600      	movs	r6, #0
 800838c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008390:	f1b9 0901 	subs.w	r9, r9, #1
 8008394:	d505      	bpl.n	80083a2 <_fwalk_sglue+0x22>
 8008396:	6824      	ldr	r4, [r4, #0]
 8008398:	2c00      	cmp	r4, #0
 800839a:	d1f7      	bne.n	800838c <_fwalk_sglue+0xc>
 800839c:	4630      	mov	r0, r6
 800839e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d907      	bls.n	80083b8 <_fwalk_sglue+0x38>
 80083a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083ac:	3301      	adds	r3, #1
 80083ae:	d003      	beq.n	80083b8 <_fwalk_sglue+0x38>
 80083b0:	4629      	mov	r1, r5
 80083b2:	4638      	mov	r0, r7
 80083b4:	47c0      	blx	r8
 80083b6:	4306      	orrs	r6, r0
 80083b8:	3568      	adds	r5, #104	@ 0x68
 80083ba:	e7e9      	b.n	8008390 <_fwalk_sglue+0x10>

080083bc <siprintf>:
 80083bc:	b40e      	push	{r1, r2, r3}
 80083be:	b500      	push	{lr}
 80083c0:	b09c      	sub	sp, #112	@ 0x70
 80083c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80083c4:	9002      	str	r0, [sp, #8]
 80083c6:	9006      	str	r0, [sp, #24]
 80083c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083cc:	4809      	ldr	r0, [pc, #36]	@ (80083f4 <siprintf+0x38>)
 80083ce:	9107      	str	r1, [sp, #28]
 80083d0:	9104      	str	r1, [sp, #16]
 80083d2:	4909      	ldr	r1, [pc, #36]	@ (80083f8 <siprintf+0x3c>)
 80083d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d8:	9105      	str	r1, [sp, #20]
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	a902      	add	r1, sp, #8
 80083e0:	f002 fb10 	bl	800aa04 <_svfiprintf_r>
 80083e4:	9b02      	ldr	r3, [sp, #8]
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	b01c      	add	sp, #112	@ 0x70
 80083ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f0:	b003      	add	sp, #12
 80083f2:	4770      	bx	lr
 80083f4:	2000002c 	.word	0x2000002c
 80083f8:	ffff0208 	.word	0xffff0208

080083fc <__sread>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	460c      	mov	r4, r1
 8008400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008404:	f000 f86c 	bl	80084e0 <_read_r>
 8008408:	2800      	cmp	r0, #0
 800840a:	bfab      	itete	ge
 800840c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800840e:	89a3      	ldrhlt	r3, [r4, #12]
 8008410:	181b      	addge	r3, r3, r0
 8008412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008416:	bfac      	ite	ge
 8008418:	6563      	strge	r3, [r4, #84]	@ 0x54
 800841a:	81a3      	strhlt	r3, [r4, #12]
 800841c:	bd10      	pop	{r4, pc}

0800841e <__swrite>:
 800841e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008422:	461f      	mov	r7, r3
 8008424:	898b      	ldrh	r3, [r1, #12]
 8008426:	05db      	lsls	r3, r3, #23
 8008428:	4605      	mov	r5, r0
 800842a:	460c      	mov	r4, r1
 800842c:	4616      	mov	r6, r2
 800842e:	d505      	bpl.n	800843c <__swrite+0x1e>
 8008430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008434:	2302      	movs	r3, #2
 8008436:	2200      	movs	r2, #0
 8008438:	f000 f840 	bl	80084bc <_lseek_r>
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	4632      	mov	r2, r6
 800844a:	463b      	mov	r3, r7
 800844c:	4628      	mov	r0, r5
 800844e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008452:	f000 b867 	b.w	8008524 <_write_r>

08008456 <__sseek>:
 8008456:	b510      	push	{r4, lr}
 8008458:	460c      	mov	r4, r1
 800845a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800845e:	f000 f82d 	bl	80084bc <_lseek_r>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	bf15      	itete	ne
 8008468:	6560      	strne	r0, [r4, #84]	@ 0x54
 800846a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800846e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008472:	81a3      	strheq	r3, [r4, #12]
 8008474:	bf18      	it	ne
 8008476:	81a3      	strhne	r3, [r4, #12]
 8008478:	bd10      	pop	{r4, pc}

0800847a <__sclose>:
 800847a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847e:	f000 b80d 	b.w	800849c <_close_r>

08008482 <memset>:
 8008482:	4402      	add	r2, r0
 8008484:	4603      	mov	r3, r0
 8008486:	4293      	cmp	r3, r2
 8008488:	d100      	bne.n	800848c <memset+0xa>
 800848a:	4770      	bx	lr
 800848c:	f803 1b01 	strb.w	r1, [r3], #1
 8008490:	e7f9      	b.n	8008486 <memset+0x4>
	...

08008494 <_localeconv_r>:
 8008494:	4800      	ldr	r0, [pc, #0]	@ (8008498 <_localeconv_r+0x4>)
 8008496:	4770      	bx	lr
 8008498:	2000016c 	.word	0x2000016c

0800849c <_close_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d06      	ldr	r5, [pc, #24]	@ (80084b8 <_close_r+0x1c>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	602b      	str	r3, [r5, #0]
 80084a8:	f7f9 ff78 	bl	800239c <_close>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d102      	bne.n	80084b6 <_close_r+0x1a>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	b103      	cbz	r3, 80084b6 <_close_r+0x1a>
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	20000590 	.word	0x20000590

080084bc <_lseek_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	@ (80084dc <_lseek_r+0x20>)
 80084c0:	4604      	mov	r4, r0
 80084c2:	4608      	mov	r0, r1
 80084c4:	4611      	mov	r1, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f7f9 ff8d 	bl	80023ea <_lseek>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_lseek_r+0x1e>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_lseek_r+0x1e>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	20000590 	.word	0x20000590

080084e0 <_read_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4d07      	ldr	r5, [pc, #28]	@ (8008500 <_read_r+0x20>)
 80084e4:	4604      	mov	r4, r0
 80084e6:	4608      	mov	r0, r1
 80084e8:	4611      	mov	r1, r2
 80084ea:	2200      	movs	r2, #0
 80084ec:	602a      	str	r2, [r5, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	f7f9 ff1b 	bl	800232a <_read>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_read_r+0x1e>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_read_r+0x1e>
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	20000590 	.word	0x20000590

08008504 <_sbrk_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d06      	ldr	r5, [pc, #24]	@ (8008520 <_sbrk_r+0x1c>)
 8008508:	2300      	movs	r3, #0
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	f7f9 ff78 	bl	8002404 <_sbrk>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_sbrk_r+0x1a>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_sbrk_r+0x1a>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	20000590 	.word	0x20000590

08008524 <_write_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d07      	ldr	r5, [pc, #28]	@ (8008544 <_write_r+0x20>)
 8008528:	4604      	mov	r4, r0
 800852a:	4608      	mov	r0, r1
 800852c:	4611      	mov	r1, r2
 800852e:	2200      	movs	r2, #0
 8008530:	602a      	str	r2, [r5, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	f7f9 ff16 	bl	8002364 <_write>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_write_r+0x1e>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_write_r+0x1e>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20000590 	.word	0x20000590

08008548 <__errno>:
 8008548:	4b01      	ldr	r3, [pc, #4]	@ (8008550 <__errno+0x8>)
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	2000002c 	.word	0x2000002c

08008554 <__libc_init_array>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4d0d      	ldr	r5, [pc, #52]	@ (800858c <__libc_init_array+0x38>)
 8008558:	4c0d      	ldr	r4, [pc, #52]	@ (8008590 <__libc_init_array+0x3c>)
 800855a:	1b64      	subs	r4, r4, r5
 800855c:	10a4      	asrs	r4, r4, #2
 800855e:	2600      	movs	r6, #0
 8008560:	42a6      	cmp	r6, r4
 8008562:	d109      	bne.n	8008578 <__libc_init_array+0x24>
 8008564:	4d0b      	ldr	r5, [pc, #44]	@ (8008594 <__libc_init_array+0x40>)
 8008566:	4c0c      	ldr	r4, [pc, #48]	@ (8008598 <__libc_init_array+0x44>)
 8008568:	f003 fa98 	bl	800ba9c <_init>
 800856c:	1b64      	subs	r4, r4, r5
 800856e:	10a4      	asrs	r4, r4, #2
 8008570:	2600      	movs	r6, #0
 8008572:	42a6      	cmp	r6, r4
 8008574:	d105      	bne.n	8008582 <__libc_init_array+0x2e>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	f855 3b04 	ldr.w	r3, [r5], #4
 800857c:	4798      	blx	r3
 800857e:	3601      	adds	r6, #1
 8008580:	e7ee      	b.n	8008560 <__libc_init_array+0xc>
 8008582:	f855 3b04 	ldr.w	r3, [r5], #4
 8008586:	4798      	blx	r3
 8008588:	3601      	adds	r6, #1
 800858a:	e7f2      	b.n	8008572 <__libc_init_array+0x1e>
 800858c:	0800bf40 	.word	0x0800bf40
 8008590:	0800bf40 	.word	0x0800bf40
 8008594:	0800bf40 	.word	0x0800bf40
 8008598:	0800bf44 	.word	0x0800bf44

0800859c <__retarget_lock_init_recursive>:
 800859c:	4770      	bx	lr

0800859e <__retarget_lock_acquire_recursive>:
 800859e:	4770      	bx	lr

080085a0 <__retarget_lock_release_recursive>:
 80085a0:	4770      	bx	lr
	...

080085a4 <nanf>:
 80085a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80085ac <nanf+0x8>
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	7fc00000 	.word	0x7fc00000

080085b0 <quorem>:
 80085b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	6903      	ldr	r3, [r0, #16]
 80085b6:	690c      	ldr	r4, [r1, #16]
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	4607      	mov	r7, r0
 80085bc:	db7e      	blt.n	80086bc <quorem+0x10c>
 80085be:	3c01      	subs	r4, #1
 80085c0:	f101 0814 	add.w	r8, r1, #20
 80085c4:	00a3      	lsls	r3, r4, #2
 80085c6:	f100 0514 	add.w	r5, r0, #20
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085da:	3301      	adds	r3, #1
 80085dc:	429a      	cmp	r2, r3
 80085de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80085e6:	d32e      	bcc.n	8008646 <quorem+0x96>
 80085e8:	f04f 0a00 	mov.w	sl, #0
 80085ec:	46c4      	mov	ip, r8
 80085ee:	46ae      	mov	lr, r5
 80085f0:	46d3      	mov	fp, sl
 80085f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085f6:	b298      	uxth	r0, r3
 80085f8:	fb06 a000 	mla	r0, r6, r0, sl
 80085fc:	0c02      	lsrs	r2, r0, #16
 80085fe:	0c1b      	lsrs	r3, r3, #16
 8008600:	fb06 2303 	mla	r3, r6, r3, r2
 8008604:	f8de 2000 	ldr.w	r2, [lr]
 8008608:	b280      	uxth	r0, r0
 800860a:	b292      	uxth	r2, r2
 800860c:	1a12      	subs	r2, r2, r0
 800860e:	445a      	add	r2, fp
 8008610:	f8de 0000 	ldr.w	r0, [lr]
 8008614:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008618:	b29b      	uxth	r3, r3
 800861a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800861e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008622:	b292      	uxth	r2, r2
 8008624:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008628:	45e1      	cmp	r9, ip
 800862a:	f84e 2b04 	str.w	r2, [lr], #4
 800862e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008632:	d2de      	bcs.n	80085f2 <quorem+0x42>
 8008634:	9b00      	ldr	r3, [sp, #0]
 8008636:	58eb      	ldr	r3, [r5, r3]
 8008638:	b92b      	cbnz	r3, 8008646 <quorem+0x96>
 800863a:	9b01      	ldr	r3, [sp, #4]
 800863c:	3b04      	subs	r3, #4
 800863e:	429d      	cmp	r5, r3
 8008640:	461a      	mov	r2, r3
 8008642:	d32f      	bcc.n	80086a4 <quorem+0xf4>
 8008644:	613c      	str	r4, [r7, #16]
 8008646:	4638      	mov	r0, r7
 8008648:	f001 f90c 	bl	8009864 <__mcmp>
 800864c:	2800      	cmp	r0, #0
 800864e:	db25      	blt.n	800869c <quorem+0xec>
 8008650:	4629      	mov	r1, r5
 8008652:	2000      	movs	r0, #0
 8008654:	f858 2b04 	ldr.w	r2, [r8], #4
 8008658:	f8d1 c000 	ldr.w	ip, [r1]
 800865c:	fa1f fe82 	uxth.w	lr, r2
 8008660:	fa1f f38c 	uxth.w	r3, ip
 8008664:	eba3 030e 	sub.w	r3, r3, lr
 8008668:	4403      	add	r3, r0
 800866a:	0c12      	lsrs	r2, r2, #16
 800866c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008670:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008674:	b29b      	uxth	r3, r3
 8008676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800867a:	45c1      	cmp	r9, r8
 800867c:	f841 3b04 	str.w	r3, [r1], #4
 8008680:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008684:	d2e6      	bcs.n	8008654 <quorem+0xa4>
 8008686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800868a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800868e:	b922      	cbnz	r2, 800869a <quorem+0xea>
 8008690:	3b04      	subs	r3, #4
 8008692:	429d      	cmp	r5, r3
 8008694:	461a      	mov	r2, r3
 8008696:	d30b      	bcc.n	80086b0 <quorem+0x100>
 8008698:	613c      	str	r4, [r7, #16]
 800869a:	3601      	adds	r6, #1
 800869c:	4630      	mov	r0, r6
 800869e:	b003      	add	sp, #12
 80086a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	3b04      	subs	r3, #4
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	d1cb      	bne.n	8008644 <quorem+0x94>
 80086ac:	3c01      	subs	r4, #1
 80086ae:	e7c6      	b.n	800863e <quorem+0x8e>
 80086b0:	6812      	ldr	r2, [r2, #0]
 80086b2:	3b04      	subs	r3, #4
 80086b4:	2a00      	cmp	r2, #0
 80086b6:	d1ef      	bne.n	8008698 <quorem+0xe8>
 80086b8:	3c01      	subs	r4, #1
 80086ba:	e7ea      	b.n	8008692 <quorem+0xe2>
 80086bc:	2000      	movs	r0, #0
 80086be:	e7ee      	b.n	800869e <quorem+0xee>

080086c0 <_dtoa_r>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	69c7      	ldr	r7, [r0, #28]
 80086c6:	b099      	sub	sp, #100	@ 0x64
 80086c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086cc:	ec55 4b10 	vmov	r4, r5, d0
 80086d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80086d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80086d4:	4683      	mov	fp, r0
 80086d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80086d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086da:	b97f      	cbnz	r7, 80086fc <_dtoa_r+0x3c>
 80086dc:	2010      	movs	r0, #16
 80086de:	f7fe fe89 	bl	80073f4 <malloc>
 80086e2:	4602      	mov	r2, r0
 80086e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80086e8:	b920      	cbnz	r0, 80086f4 <_dtoa_r+0x34>
 80086ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008988 <_dtoa_r+0x2c8>)
 80086ec:	21ef      	movs	r1, #239	@ 0xef
 80086ee:	48a7      	ldr	r0, [pc, #668]	@ (800898c <_dtoa_r+0x2cc>)
 80086f0:	f002 fb72 	bl	800add8 <__assert_func>
 80086f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086f8:	6007      	str	r7, [r0, #0]
 80086fa:	60c7      	str	r7, [r0, #12]
 80086fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008700:	6819      	ldr	r1, [r3, #0]
 8008702:	b159      	cbz	r1, 800871c <_dtoa_r+0x5c>
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	604a      	str	r2, [r1, #4]
 8008708:	2301      	movs	r3, #1
 800870a:	4093      	lsls	r3, r2
 800870c:	608b      	str	r3, [r1, #8]
 800870e:	4658      	mov	r0, fp
 8008710:	f000 fe24 	bl	800935c <_Bfree>
 8008714:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008718:	2200      	movs	r2, #0
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	1e2b      	subs	r3, r5, #0
 800871e:	bfb9      	ittee	lt
 8008720:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008724:	9303      	strlt	r3, [sp, #12]
 8008726:	2300      	movge	r3, #0
 8008728:	6033      	strge	r3, [r6, #0]
 800872a:	9f03      	ldr	r7, [sp, #12]
 800872c:	4b98      	ldr	r3, [pc, #608]	@ (8008990 <_dtoa_r+0x2d0>)
 800872e:	bfbc      	itt	lt
 8008730:	2201      	movlt	r2, #1
 8008732:	6032      	strlt	r2, [r6, #0]
 8008734:	43bb      	bics	r3, r7
 8008736:	d112      	bne.n	800875e <_dtoa_r+0x9e>
 8008738:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800873a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008744:	4323      	orrs	r3, r4
 8008746:	f000 854d 	beq.w	80091e4 <_dtoa_r+0xb24>
 800874a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800874c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80089a4 <_dtoa_r+0x2e4>
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 854f 	beq.w	80091f4 <_dtoa_r+0xb34>
 8008756:	f10a 0303 	add.w	r3, sl, #3
 800875a:	f000 bd49 	b.w	80091f0 <_dtoa_r+0xb30>
 800875e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	ec51 0b17 	vmov	r0, r1, d7
 8008768:	2300      	movs	r3, #0
 800876a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800876e:	f7f8 f9bb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008772:	4680      	mov	r8, r0
 8008774:	b158      	cbz	r0, 800878e <_dtoa_r+0xce>
 8008776:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008778:	2301      	movs	r3, #1
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800877e:	b113      	cbz	r3, 8008786 <_dtoa_r+0xc6>
 8008780:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008782:	4b84      	ldr	r3, [pc, #528]	@ (8008994 <_dtoa_r+0x2d4>)
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80089a8 <_dtoa_r+0x2e8>
 800878a:	f000 bd33 	b.w	80091f4 <_dtoa_r+0xb34>
 800878e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008792:	aa16      	add	r2, sp, #88	@ 0x58
 8008794:	a917      	add	r1, sp, #92	@ 0x5c
 8008796:	4658      	mov	r0, fp
 8008798:	f001 f984 	bl	8009aa4 <__d2b>
 800879c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80087a0:	4681      	mov	r9, r0
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	d077      	beq.n	8008896 <_dtoa_r+0x1d6>
 80087a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80087ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087c0:	4619      	mov	r1, r3
 80087c2:	2200      	movs	r2, #0
 80087c4:	4b74      	ldr	r3, [pc, #464]	@ (8008998 <_dtoa_r+0x2d8>)
 80087c6:	f7f7 fd6f 	bl	80002a8 <__aeabi_dsub>
 80087ca:	a369      	add	r3, pc, #420	@ (adr r3, 8008970 <_dtoa_r+0x2b0>)
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f7f7 ff22 	bl	8000618 <__aeabi_dmul>
 80087d4:	a368      	add	r3, pc, #416	@ (adr r3, 8008978 <_dtoa_r+0x2b8>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 fd67 	bl	80002ac <__adddf3>
 80087de:	4604      	mov	r4, r0
 80087e0:	4630      	mov	r0, r6
 80087e2:	460d      	mov	r5, r1
 80087e4:	f7f7 feae 	bl	8000544 <__aeabi_i2d>
 80087e8:	a365      	add	r3, pc, #404	@ (adr r3, 8008980 <_dtoa_r+0x2c0>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f7f7 ff13 	bl	8000618 <__aeabi_dmul>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f7 fd57 	bl	80002ac <__adddf3>
 80087fe:	4604      	mov	r4, r0
 8008800:	460d      	mov	r5, r1
 8008802:	f7f8 f9b9 	bl	8000b78 <__aeabi_d2iz>
 8008806:	2200      	movs	r2, #0
 8008808:	4607      	mov	r7, r0
 800880a:	2300      	movs	r3, #0
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f8 f974 	bl	8000afc <__aeabi_dcmplt>
 8008814:	b140      	cbz	r0, 8008828 <_dtoa_r+0x168>
 8008816:	4638      	mov	r0, r7
 8008818:	f7f7 fe94 	bl	8000544 <__aeabi_i2d>
 800881c:	4622      	mov	r2, r4
 800881e:	462b      	mov	r3, r5
 8008820:	f7f8 f962 	bl	8000ae8 <__aeabi_dcmpeq>
 8008824:	b900      	cbnz	r0, 8008828 <_dtoa_r+0x168>
 8008826:	3f01      	subs	r7, #1
 8008828:	2f16      	cmp	r7, #22
 800882a:	d851      	bhi.n	80088d0 <_dtoa_r+0x210>
 800882c:	4b5b      	ldr	r3, [pc, #364]	@ (800899c <_dtoa_r+0x2dc>)
 800882e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800883a:	f7f8 f95f 	bl	8000afc <__aeabi_dcmplt>
 800883e:	2800      	cmp	r0, #0
 8008840:	d048      	beq.n	80088d4 <_dtoa_r+0x214>
 8008842:	3f01      	subs	r7, #1
 8008844:	2300      	movs	r3, #0
 8008846:	9312      	str	r3, [sp, #72]	@ 0x48
 8008848:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800884a:	1b9b      	subs	r3, r3, r6
 800884c:	1e5a      	subs	r2, r3, #1
 800884e:	bf44      	itt	mi
 8008850:	f1c3 0801 	rsbmi	r8, r3, #1
 8008854:	2300      	movmi	r3, #0
 8008856:	9208      	str	r2, [sp, #32]
 8008858:	bf54      	ite	pl
 800885a:	f04f 0800 	movpl.w	r8, #0
 800885e:	9308      	strmi	r3, [sp, #32]
 8008860:	2f00      	cmp	r7, #0
 8008862:	db39      	blt.n	80088d8 <_dtoa_r+0x218>
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008868:	443b      	add	r3, r7
 800886a:	9308      	str	r3, [sp, #32]
 800886c:	2300      	movs	r3, #0
 800886e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008872:	2b09      	cmp	r3, #9
 8008874:	d864      	bhi.n	8008940 <_dtoa_r+0x280>
 8008876:	2b05      	cmp	r3, #5
 8008878:	bfc4      	itt	gt
 800887a:	3b04      	subgt	r3, #4
 800887c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800887e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008880:	f1a3 0302 	sub.w	r3, r3, #2
 8008884:	bfcc      	ite	gt
 8008886:	2400      	movgt	r4, #0
 8008888:	2401      	movle	r4, #1
 800888a:	2b03      	cmp	r3, #3
 800888c:	d863      	bhi.n	8008956 <_dtoa_r+0x296>
 800888e:	e8df f003 	tbb	[pc, r3]
 8008892:	372a      	.short	0x372a
 8008894:	5535      	.short	0x5535
 8008896:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800889a:	441e      	add	r6, r3
 800889c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	bfc1      	itttt	gt
 80088a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80088a8:	409f      	lslgt	r7, r3
 80088aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088b2:	bfd6      	itet	le
 80088b4:	f1c3 0320 	rsble	r3, r3, #32
 80088b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80088bc:	fa04 f003 	lslle.w	r0, r4, r3
 80088c0:	f7f7 fe30 	bl	8000524 <__aeabi_ui2d>
 80088c4:	2201      	movs	r2, #1
 80088c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088ca:	3e01      	subs	r6, #1
 80088cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80088ce:	e777      	b.n	80087c0 <_dtoa_r+0x100>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e7b8      	b.n	8008846 <_dtoa_r+0x186>
 80088d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80088d6:	e7b7      	b.n	8008848 <_dtoa_r+0x188>
 80088d8:	427b      	negs	r3, r7
 80088da:	930a      	str	r3, [sp, #40]	@ 0x28
 80088dc:	2300      	movs	r3, #0
 80088de:	eba8 0807 	sub.w	r8, r8, r7
 80088e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088e4:	e7c4      	b.n	8008870 <_dtoa_r+0x1b0>
 80088e6:	2300      	movs	r3, #0
 80088e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	dc35      	bgt.n	800895c <_dtoa_r+0x29c>
 80088f0:	2301      	movs	r3, #1
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	9307      	str	r3, [sp, #28]
 80088f6:	461a      	mov	r2, r3
 80088f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80088fa:	e00b      	b.n	8008914 <_dtoa_r+0x254>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e7f3      	b.n	80088e8 <_dtoa_r+0x228>
 8008900:	2300      	movs	r3, #0
 8008902:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008906:	18fb      	adds	r3, r7, r3
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	2b01      	cmp	r3, #1
 800890e:	9307      	str	r3, [sp, #28]
 8008910:	bfb8      	it	lt
 8008912:	2301      	movlt	r3, #1
 8008914:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008918:	2100      	movs	r1, #0
 800891a:	2204      	movs	r2, #4
 800891c:	f102 0514 	add.w	r5, r2, #20
 8008920:	429d      	cmp	r5, r3
 8008922:	d91f      	bls.n	8008964 <_dtoa_r+0x2a4>
 8008924:	6041      	str	r1, [r0, #4]
 8008926:	4658      	mov	r0, fp
 8008928:	f000 fcd8 	bl	80092dc <_Balloc>
 800892c:	4682      	mov	sl, r0
 800892e:	2800      	cmp	r0, #0
 8008930:	d13c      	bne.n	80089ac <_dtoa_r+0x2ec>
 8008932:	4b1b      	ldr	r3, [pc, #108]	@ (80089a0 <_dtoa_r+0x2e0>)
 8008934:	4602      	mov	r2, r0
 8008936:	f240 11af 	movw	r1, #431	@ 0x1af
 800893a:	e6d8      	b.n	80086ee <_dtoa_r+0x2e>
 800893c:	2301      	movs	r3, #1
 800893e:	e7e0      	b.n	8008902 <_dtoa_r+0x242>
 8008940:	2401      	movs	r4, #1
 8008942:	2300      	movs	r3, #0
 8008944:	9309      	str	r3, [sp, #36]	@ 0x24
 8008946:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008948:	f04f 33ff 	mov.w	r3, #4294967295
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	2200      	movs	r2, #0
 8008952:	2312      	movs	r3, #18
 8008954:	e7d0      	b.n	80088f8 <_dtoa_r+0x238>
 8008956:	2301      	movs	r3, #1
 8008958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800895a:	e7f5      	b.n	8008948 <_dtoa_r+0x288>
 800895c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	9307      	str	r3, [sp, #28]
 8008962:	e7d7      	b.n	8008914 <_dtoa_r+0x254>
 8008964:	3101      	adds	r1, #1
 8008966:	0052      	lsls	r2, r2, #1
 8008968:	e7d8      	b.n	800891c <_dtoa_r+0x25c>
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w
 8008970:	636f4361 	.word	0x636f4361
 8008974:	3fd287a7 	.word	0x3fd287a7
 8008978:	8b60c8b3 	.word	0x8b60c8b3
 800897c:	3fc68a28 	.word	0x3fc68a28
 8008980:	509f79fb 	.word	0x509f79fb
 8008984:	3fd34413 	.word	0x3fd34413
 8008988:	0800bb52 	.word	0x0800bb52
 800898c:	0800bb69 	.word	0x0800bb69
 8008990:	7ff00000 	.word	0x7ff00000
 8008994:	0800bb1d 	.word	0x0800bb1d
 8008998:	3ff80000 	.word	0x3ff80000
 800899c:	0800bc60 	.word	0x0800bc60
 80089a0:	0800bbc1 	.word	0x0800bbc1
 80089a4:	0800bb4e 	.word	0x0800bb4e
 80089a8:	0800bb1c 	.word	0x0800bb1c
 80089ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089b0:	6018      	str	r0, [r3, #0]
 80089b2:	9b07      	ldr	r3, [sp, #28]
 80089b4:	2b0e      	cmp	r3, #14
 80089b6:	f200 80a4 	bhi.w	8008b02 <_dtoa_r+0x442>
 80089ba:	2c00      	cmp	r4, #0
 80089bc:	f000 80a1 	beq.w	8008b02 <_dtoa_r+0x442>
 80089c0:	2f00      	cmp	r7, #0
 80089c2:	dd33      	ble.n	8008a2c <_dtoa_r+0x36c>
 80089c4:	4bad      	ldr	r3, [pc, #692]	@ (8008c7c <_dtoa_r+0x5bc>)
 80089c6:	f007 020f 	and.w	r2, r7, #15
 80089ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ce:	ed93 7b00 	vldr	d7, [r3]
 80089d2:	05f8      	lsls	r0, r7, #23
 80089d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089dc:	d516      	bpl.n	8008a0c <_dtoa_r+0x34c>
 80089de:	4ba8      	ldr	r3, [pc, #672]	@ (8008c80 <_dtoa_r+0x5c0>)
 80089e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089e8:	f7f7 ff40 	bl	800086c <__aeabi_ddiv>
 80089ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f0:	f004 040f 	and.w	r4, r4, #15
 80089f4:	2603      	movs	r6, #3
 80089f6:	4da2      	ldr	r5, [pc, #648]	@ (8008c80 <_dtoa_r+0x5c0>)
 80089f8:	b954      	cbnz	r4, 8008a10 <_dtoa_r+0x350>
 80089fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a02:	f7f7 ff33 	bl	800086c <__aeabi_ddiv>
 8008a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a0a:	e028      	b.n	8008a5e <_dtoa_r+0x39e>
 8008a0c:	2602      	movs	r6, #2
 8008a0e:	e7f2      	b.n	80089f6 <_dtoa_r+0x336>
 8008a10:	07e1      	lsls	r1, r4, #31
 8008a12:	d508      	bpl.n	8008a26 <_dtoa_r+0x366>
 8008a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a1c:	f7f7 fdfc 	bl	8000618 <__aeabi_dmul>
 8008a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a24:	3601      	adds	r6, #1
 8008a26:	1064      	asrs	r4, r4, #1
 8008a28:	3508      	adds	r5, #8
 8008a2a:	e7e5      	b.n	80089f8 <_dtoa_r+0x338>
 8008a2c:	f000 80d2 	beq.w	8008bd4 <_dtoa_r+0x514>
 8008a30:	427c      	negs	r4, r7
 8008a32:	4b92      	ldr	r3, [pc, #584]	@ (8008c7c <_dtoa_r+0x5bc>)
 8008a34:	4d92      	ldr	r5, [pc, #584]	@ (8008c80 <_dtoa_r+0x5c0>)
 8008a36:	f004 020f 	and.w	r2, r4, #15
 8008a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a46:	f7f7 fde7 	bl	8000618 <__aeabi_dmul>
 8008a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a4e:	1124      	asrs	r4, r4, #4
 8008a50:	2300      	movs	r3, #0
 8008a52:	2602      	movs	r6, #2
 8008a54:	2c00      	cmp	r4, #0
 8008a56:	f040 80b2 	bne.w	8008bbe <_dtoa_r+0x4fe>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1d3      	bne.n	8008a06 <_dtoa_r+0x346>
 8008a5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80b7 	beq.w	8008bd8 <_dtoa_r+0x518>
 8008a6a:	4b86      	ldr	r3, [pc, #536]	@ (8008c84 <_dtoa_r+0x5c4>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4620      	mov	r0, r4
 8008a70:	4629      	mov	r1, r5
 8008a72:	f7f8 f843 	bl	8000afc <__aeabi_dcmplt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f000 80ae 	beq.w	8008bd8 <_dtoa_r+0x518>
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80aa 	beq.w	8008bd8 <_dtoa_r+0x518>
 8008a84:	9b00      	ldr	r3, [sp, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dd37      	ble.n	8008afa <_dtoa_r+0x43a>
 8008a8a:	1e7b      	subs	r3, r7, #1
 8008a8c:	9304      	str	r3, [sp, #16]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4b7d      	ldr	r3, [pc, #500]	@ (8008c88 <_dtoa_r+0x5c8>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	4629      	mov	r1, r5
 8008a96:	f7f7 fdbf 	bl	8000618 <__aeabi_dmul>
 8008a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a9e:	9c00      	ldr	r4, [sp, #0]
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7f7 fd4e 	bl	8000544 <__aeabi_i2d>
 8008aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aac:	f7f7 fdb4 	bl	8000618 <__aeabi_dmul>
 8008ab0:	4b76      	ldr	r3, [pc, #472]	@ (8008c8c <_dtoa_r+0x5cc>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f7f7 fbfa 	bl	80002ac <__adddf3>
 8008ab8:	4605      	mov	r5, r0
 8008aba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008abe:	2c00      	cmp	r4, #0
 8008ac0:	f040 808d 	bne.w	8008bde <_dtoa_r+0x51e>
 8008ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac8:	4b71      	ldr	r3, [pc, #452]	@ (8008c90 <_dtoa_r+0x5d0>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	f7f7 fbec 	bl	80002a8 <__aeabi_dsub>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4633      	mov	r3, r6
 8008adc:	f7f8 f82c 	bl	8000b38 <__aeabi_dcmpgt>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	f040 828b 	bne.w	8008ffc <_dtoa_r+0x93c>
 8008ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aea:	462a      	mov	r2, r5
 8008aec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008af0:	f7f8 f804 	bl	8000afc <__aeabi_dcmplt>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f040 8128 	bne.w	8008d4a <_dtoa_r+0x68a>
 8008afa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008afe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f2c0 815a 	blt.w	8008dbe <_dtoa_r+0x6fe>
 8008b0a:	2f0e      	cmp	r7, #14
 8008b0c:	f300 8157 	bgt.w	8008dbe <_dtoa_r+0x6fe>
 8008b10:	4b5a      	ldr	r3, [pc, #360]	@ (8008c7c <_dtoa_r+0x5bc>)
 8008b12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b16:	ed93 7b00 	vldr	d7, [r3]
 8008b1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	ed8d 7b00 	vstr	d7, [sp]
 8008b22:	da03      	bge.n	8008b2c <_dtoa_r+0x46c>
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f340 8101 	ble.w	8008d2e <_dtoa_r+0x66e>
 8008b2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b30:	4656      	mov	r6, sl
 8008b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b36:	4620      	mov	r0, r4
 8008b38:	4629      	mov	r1, r5
 8008b3a:	f7f7 fe97 	bl	800086c <__aeabi_ddiv>
 8008b3e:	f7f8 f81b 	bl	8000b78 <__aeabi_d2iz>
 8008b42:	4680      	mov	r8, r0
 8008b44:	f7f7 fcfe 	bl	8000544 <__aeabi_i2d>
 8008b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b4c:	f7f7 fd64 	bl	8000618 <__aeabi_dmul>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4620      	mov	r0, r4
 8008b56:	4629      	mov	r1, r5
 8008b58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b5c:	f7f7 fba4 	bl	80002a8 <__aeabi_dsub>
 8008b60:	f806 4b01 	strb.w	r4, [r6], #1
 8008b64:	9d07      	ldr	r5, [sp, #28]
 8008b66:	eba6 040a 	sub.w	r4, r6, sl
 8008b6a:	42a5      	cmp	r5, r4
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	f040 8117 	bne.w	8008da2 <_dtoa_r+0x6e2>
 8008b74:	f7f7 fb9a 	bl	80002ac <__adddf3>
 8008b78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	f7f7 ffda 	bl	8000b38 <__aeabi_dcmpgt>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f040 80f9 	bne.w	8008d7c <_dtoa_r+0x6bc>
 8008b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7f7 ffa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b96:	b118      	cbz	r0, 8008ba0 <_dtoa_r+0x4e0>
 8008b98:	f018 0f01 	tst.w	r8, #1
 8008b9c:	f040 80ee 	bne.w	8008d7c <_dtoa_r+0x6bc>
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4658      	mov	r0, fp
 8008ba4:	f000 fbda 	bl	800935c <_Bfree>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	7033      	strb	r3, [r6, #0]
 8008bac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bae:	3701      	adds	r7, #1
 8008bb0:	601f      	str	r7, [r3, #0]
 8008bb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 831d 	beq.w	80091f4 <_dtoa_r+0xb34>
 8008bba:	601e      	str	r6, [r3, #0]
 8008bbc:	e31a      	b.n	80091f4 <_dtoa_r+0xb34>
 8008bbe:	07e2      	lsls	r2, r4, #31
 8008bc0:	d505      	bpl.n	8008bce <_dtoa_r+0x50e>
 8008bc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bc6:	f7f7 fd27 	bl	8000618 <__aeabi_dmul>
 8008bca:	3601      	adds	r6, #1
 8008bcc:	2301      	movs	r3, #1
 8008bce:	1064      	asrs	r4, r4, #1
 8008bd0:	3508      	adds	r5, #8
 8008bd2:	e73f      	b.n	8008a54 <_dtoa_r+0x394>
 8008bd4:	2602      	movs	r6, #2
 8008bd6:	e742      	b.n	8008a5e <_dtoa_r+0x39e>
 8008bd8:	9c07      	ldr	r4, [sp, #28]
 8008bda:	9704      	str	r7, [sp, #16]
 8008bdc:	e761      	b.n	8008aa2 <_dtoa_r+0x3e2>
 8008bde:	4b27      	ldr	r3, [pc, #156]	@ (8008c7c <_dtoa_r+0x5bc>)
 8008be0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008be2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008be6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bea:	4454      	add	r4, sl
 8008bec:	2900      	cmp	r1, #0
 8008bee:	d053      	beq.n	8008c98 <_dtoa_r+0x5d8>
 8008bf0:	4928      	ldr	r1, [pc, #160]	@ (8008c94 <_dtoa_r+0x5d4>)
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	f7f7 fe3a 	bl	800086c <__aeabi_ddiv>
 8008bf8:	4633      	mov	r3, r6
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	f7f7 fb54 	bl	80002a8 <__aeabi_dsub>
 8008c00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c04:	4656      	mov	r6, sl
 8008c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c0a:	f7f7 ffb5 	bl	8000b78 <__aeabi_d2iz>
 8008c0e:	4605      	mov	r5, r0
 8008c10:	f7f7 fc98 	bl	8000544 <__aeabi_i2d>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1c:	f7f7 fb44 	bl	80002a8 <__aeabi_dsub>
 8008c20:	3530      	adds	r5, #48	@ 0x30
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c2a:	f806 5b01 	strb.w	r5, [r6], #1
 8008c2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c32:	f7f7 ff63 	bl	8000afc <__aeabi_dcmplt>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d171      	bne.n	8008d1e <_dtoa_r+0x65e>
 8008c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c3e:	4911      	ldr	r1, [pc, #68]	@ (8008c84 <_dtoa_r+0x5c4>)
 8008c40:	2000      	movs	r0, #0
 8008c42:	f7f7 fb31 	bl	80002a8 <__aeabi_dsub>
 8008c46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c4a:	f7f7 ff57 	bl	8000afc <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f040 8095 	bne.w	8008d7e <_dtoa_r+0x6be>
 8008c54:	42a6      	cmp	r6, r4
 8008c56:	f43f af50 	beq.w	8008afa <_dtoa_r+0x43a>
 8008c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <_dtoa_r+0x5c8>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	f7f7 fcd9 	bl	8000618 <__aeabi_dmul>
 8008c66:	4b08      	ldr	r3, [pc, #32]	@ (8008c88 <_dtoa_r+0x5c8>)
 8008c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c72:	f7f7 fcd1 	bl	8000618 <__aeabi_dmul>
 8008c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c7a:	e7c4      	b.n	8008c06 <_dtoa_r+0x546>
 8008c7c:	0800bc60 	.word	0x0800bc60
 8008c80:	0800bc38 	.word	0x0800bc38
 8008c84:	3ff00000 	.word	0x3ff00000
 8008c88:	40240000 	.word	0x40240000
 8008c8c:	401c0000 	.word	0x401c0000
 8008c90:	40140000 	.word	0x40140000
 8008c94:	3fe00000 	.word	0x3fe00000
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f7f7 fcbc 	bl	8000618 <__aeabi_dmul>
 8008ca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ca4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008ca6:	4656      	mov	r6, sl
 8008ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cac:	f7f7 ff64 	bl	8000b78 <__aeabi_d2iz>
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	f7f7 fc47 	bl	8000544 <__aeabi_i2d>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cbe:	f7f7 faf3 	bl	80002a8 <__aeabi_dsub>
 8008cc2:	3530      	adds	r5, #48	@ 0x30
 8008cc4:	f806 5b01 	strb.w	r5, [r6], #1
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	42a6      	cmp	r6, r4
 8008cce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cd2:	f04f 0200 	mov.w	r2, #0
 8008cd6:	d124      	bne.n	8008d22 <_dtoa_r+0x662>
 8008cd8:	4bac      	ldr	r3, [pc, #688]	@ (8008f8c <_dtoa_r+0x8cc>)
 8008cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cde:	f7f7 fae5 	bl	80002ac <__adddf3>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cea:	f7f7 ff25 	bl	8000b38 <__aeabi_dcmpgt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d145      	bne.n	8008d7e <_dtoa_r+0x6be>
 8008cf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cf6:	49a5      	ldr	r1, [pc, #660]	@ (8008f8c <_dtoa_r+0x8cc>)
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	f7f7 fad5 	bl	80002a8 <__aeabi_dsub>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d06:	f7f7 fef9 	bl	8000afc <__aeabi_dcmplt>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	f43f aef5 	beq.w	8008afa <_dtoa_r+0x43a>
 8008d10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008d12:	1e73      	subs	r3, r6, #1
 8008d14:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d1a:	2b30      	cmp	r3, #48	@ 0x30
 8008d1c:	d0f8      	beq.n	8008d10 <_dtoa_r+0x650>
 8008d1e:	9f04      	ldr	r7, [sp, #16]
 8008d20:	e73e      	b.n	8008ba0 <_dtoa_r+0x4e0>
 8008d22:	4b9b      	ldr	r3, [pc, #620]	@ (8008f90 <_dtoa_r+0x8d0>)
 8008d24:	f7f7 fc78 	bl	8000618 <__aeabi_dmul>
 8008d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d2c:	e7bc      	b.n	8008ca8 <_dtoa_r+0x5e8>
 8008d2e:	d10c      	bne.n	8008d4a <_dtoa_r+0x68a>
 8008d30:	4b98      	ldr	r3, [pc, #608]	@ (8008f94 <_dtoa_r+0x8d4>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d38:	f7f7 fc6e 	bl	8000618 <__aeabi_dmul>
 8008d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d40:	f7f7 fef0 	bl	8000b24 <__aeabi_dcmpge>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	f000 8157 	beq.w	8008ff8 <_dtoa_r+0x938>
 8008d4a:	2400      	movs	r4, #0
 8008d4c:	4625      	mov	r5, r4
 8008d4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d50:	43db      	mvns	r3, r3
 8008d52:	9304      	str	r3, [sp, #16]
 8008d54:	4656      	mov	r6, sl
 8008d56:	2700      	movs	r7, #0
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f000 fafe 	bl	800935c <_Bfree>
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	d0dc      	beq.n	8008d1e <_dtoa_r+0x65e>
 8008d64:	b12f      	cbz	r7, 8008d72 <_dtoa_r+0x6b2>
 8008d66:	42af      	cmp	r7, r5
 8008d68:	d003      	beq.n	8008d72 <_dtoa_r+0x6b2>
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	4658      	mov	r0, fp
 8008d6e:	f000 faf5 	bl	800935c <_Bfree>
 8008d72:	4629      	mov	r1, r5
 8008d74:	4658      	mov	r0, fp
 8008d76:	f000 faf1 	bl	800935c <_Bfree>
 8008d7a:	e7d0      	b.n	8008d1e <_dtoa_r+0x65e>
 8008d7c:	9704      	str	r7, [sp, #16]
 8008d7e:	4633      	mov	r3, r6
 8008d80:	461e      	mov	r6, r3
 8008d82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d86:	2a39      	cmp	r2, #57	@ 0x39
 8008d88:	d107      	bne.n	8008d9a <_dtoa_r+0x6da>
 8008d8a:	459a      	cmp	sl, r3
 8008d8c:	d1f8      	bne.n	8008d80 <_dtoa_r+0x6c0>
 8008d8e:	9a04      	ldr	r2, [sp, #16]
 8008d90:	3201      	adds	r2, #1
 8008d92:	9204      	str	r2, [sp, #16]
 8008d94:	2230      	movs	r2, #48	@ 0x30
 8008d96:	f88a 2000 	strb.w	r2, [sl]
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	3201      	adds	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	e7bd      	b.n	8008d1e <_dtoa_r+0x65e>
 8008da2:	4b7b      	ldr	r3, [pc, #492]	@ (8008f90 <_dtoa_r+0x8d0>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	f7f7 fc37 	bl	8000618 <__aeabi_dmul>
 8008daa:	2200      	movs	r2, #0
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	460d      	mov	r5, r1
 8008db2:	f7f7 fe99 	bl	8000ae8 <__aeabi_dcmpeq>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f43f aebb 	beq.w	8008b32 <_dtoa_r+0x472>
 8008dbc:	e6f0      	b.n	8008ba0 <_dtoa_r+0x4e0>
 8008dbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 80db 	beq.w	8008f7c <_dtoa_r+0x8bc>
 8008dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dc8:	2a01      	cmp	r2, #1
 8008dca:	f300 80bf 	bgt.w	8008f4c <_dtoa_r+0x88c>
 8008dce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008dd0:	2a00      	cmp	r2, #0
 8008dd2:	f000 80b7 	beq.w	8008f44 <_dtoa_r+0x884>
 8008dd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008dda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ddc:	4646      	mov	r6, r8
 8008dde:	9a08      	ldr	r2, [sp, #32]
 8008de0:	2101      	movs	r1, #1
 8008de2:	441a      	add	r2, r3
 8008de4:	4658      	mov	r0, fp
 8008de6:	4498      	add	r8, r3
 8008de8:	9208      	str	r2, [sp, #32]
 8008dea:	f000 fbb5 	bl	8009558 <__i2b>
 8008dee:	4605      	mov	r5, r0
 8008df0:	b15e      	cbz	r6, 8008e0a <_dtoa_r+0x74a>
 8008df2:	9b08      	ldr	r3, [sp, #32]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd08      	ble.n	8008e0a <_dtoa_r+0x74a>
 8008df8:	42b3      	cmp	r3, r6
 8008dfa:	9a08      	ldr	r2, [sp, #32]
 8008dfc:	bfa8      	it	ge
 8008dfe:	4633      	movge	r3, r6
 8008e00:	eba8 0803 	sub.w	r8, r8, r3
 8008e04:	1af6      	subs	r6, r6, r3
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	9308      	str	r3, [sp, #32]
 8008e0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e0c:	b1f3      	cbz	r3, 8008e4c <_dtoa_r+0x78c>
 8008e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80b7 	beq.w	8008f84 <_dtoa_r+0x8c4>
 8008e16:	b18c      	cbz	r4, 8008e3c <_dtoa_r+0x77c>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	4658      	mov	r0, fp
 8008e1e:	f000 fc5b 	bl	80096d8 <__pow5mult>
 8008e22:	464a      	mov	r2, r9
 8008e24:	4601      	mov	r1, r0
 8008e26:	4605      	mov	r5, r0
 8008e28:	4658      	mov	r0, fp
 8008e2a:	f000 fbab 	bl	8009584 <__multiply>
 8008e2e:	4649      	mov	r1, r9
 8008e30:	9004      	str	r0, [sp, #16]
 8008e32:	4658      	mov	r0, fp
 8008e34:	f000 fa92 	bl	800935c <_Bfree>
 8008e38:	9b04      	ldr	r3, [sp, #16]
 8008e3a:	4699      	mov	r9, r3
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e3e:	1b1a      	subs	r2, r3, r4
 8008e40:	d004      	beq.n	8008e4c <_dtoa_r+0x78c>
 8008e42:	4649      	mov	r1, r9
 8008e44:	4658      	mov	r0, fp
 8008e46:	f000 fc47 	bl	80096d8 <__pow5mult>
 8008e4a:	4681      	mov	r9, r0
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	4658      	mov	r0, fp
 8008e50:	f000 fb82 	bl	8009558 <__i2b>
 8008e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e56:	4604      	mov	r4, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 81cf 	beq.w	80091fc <_dtoa_r+0xb3c>
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4601      	mov	r1, r0
 8008e62:	4658      	mov	r0, fp
 8008e64:	f000 fc38 	bl	80096d8 <__pow5mult>
 8008e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	f300 8095 	bgt.w	8008f9c <_dtoa_r+0x8dc>
 8008e72:	9b02      	ldr	r3, [sp, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f040 8087 	bne.w	8008f88 <_dtoa_r+0x8c8>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f040 8089 	bne.w	8008f98 <_dtoa_r+0x8d8>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e8c:	0d1b      	lsrs	r3, r3, #20
 8008e8e:	051b      	lsls	r3, r3, #20
 8008e90:	b12b      	cbz	r3, 8008e9e <_dtoa_r+0x7de>
 8008e92:	9b08      	ldr	r3, [sp, #32]
 8008e94:	3301      	adds	r3, #1
 8008e96:	9308      	str	r3, [sp, #32]
 8008e98:	f108 0801 	add.w	r8, r8, #1
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 81b0 	beq.w	8009208 <_dtoa_r+0xb48>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008eae:	6918      	ldr	r0, [r3, #16]
 8008eb0:	f000 fb06 	bl	80094c0 <__hi0bits>
 8008eb4:	f1c0 0020 	rsb	r0, r0, #32
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	4418      	add	r0, r3
 8008ebc:	f010 001f 	ands.w	r0, r0, #31
 8008ec0:	d077      	beq.n	8008fb2 <_dtoa_r+0x8f2>
 8008ec2:	f1c0 0320 	rsb	r3, r0, #32
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	dd6b      	ble.n	8008fa2 <_dtoa_r+0x8e2>
 8008eca:	9b08      	ldr	r3, [sp, #32]
 8008ecc:	f1c0 001c 	rsb	r0, r0, #28
 8008ed0:	4403      	add	r3, r0
 8008ed2:	4480      	add	r8, r0
 8008ed4:	4406      	add	r6, r0
 8008ed6:	9308      	str	r3, [sp, #32]
 8008ed8:	f1b8 0f00 	cmp.w	r8, #0
 8008edc:	dd05      	ble.n	8008eea <_dtoa_r+0x82a>
 8008ede:	4649      	mov	r1, r9
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	4658      	mov	r0, fp
 8008ee4:	f000 fc52 	bl	800978c <__lshift>
 8008ee8:	4681      	mov	r9, r0
 8008eea:	9b08      	ldr	r3, [sp, #32]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dd05      	ble.n	8008efc <_dtoa_r+0x83c>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	4658      	mov	r0, fp
 8008ef6:	f000 fc49 	bl	800978c <__lshift>
 8008efa:	4604      	mov	r4, r0
 8008efc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d059      	beq.n	8008fb6 <_dtoa_r+0x8f6>
 8008f02:	4621      	mov	r1, r4
 8008f04:	4648      	mov	r0, r9
 8008f06:	f000 fcad 	bl	8009864 <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	da53      	bge.n	8008fb6 <_dtoa_r+0x8f6>
 8008f0e:	1e7b      	subs	r3, r7, #1
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	4649      	mov	r1, r9
 8008f14:	2300      	movs	r3, #0
 8008f16:	220a      	movs	r2, #10
 8008f18:	4658      	mov	r0, fp
 8008f1a:	f000 fa41 	bl	80093a0 <__multadd>
 8008f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f20:	4681      	mov	r9, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8172 	beq.w	800920c <_dtoa_r+0xb4c>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	220a      	movs	r2, #10
 8008f2e:	4658      	mov	r0, fp
 8008f30:	f000 fa36 	bl	80093a0 <__multadd>
 8008f34:	9b00      	ldr	r3, [sp, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	4605      	mov	r5, r0
 8008f3a:	dc67      	bgt.n	800900c <_dtoa_r+0x94c>
 8008f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	dc41      	bgt.n	8008fc6 <_dtoa_r+0x906>
 8008f42:	e063      	b.n	800900c <_dtoa_r+0x94c>
 8008f44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f4a:	e746      	b.n	8008dda <_dtoa_r+0x71a>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	1e5c      	subs	r4, r3, #1
 8008f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	bfbf      	itttt	lt
 8008f56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f5c:	1ae3      	sublt	r3, r4, r3
 8008f5e:	bfb4      	ite	lt
 8008f60:	18d2      	addlt	r2, r2, r3
 8008f62:	1b1c      	subge	r4, r3, r4
 8008f64:	9b07      	ldr	r3, [sp, #28]
 8008f66:	bfbc      	itt	lt
 8008f68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f6a:	2400      	movlt	r4, #0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	bfb5      	itete	lt
 8008f70:	eba8 0603 	sublt.w	r6, r8, r3
 8008f74:	9b07      	ldrge	r3, [sp, #28]
 8008f76:	2300      	movlt	r3, #0
 8008f78:	4646      	movge	r6, r8
 8008f7a:	e730      	b.n	8008dde <_dtoa_r+0x71e>
 8008f7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f80:	4646      	mov	r6, r8
 8008f82:	e735      	b.n	8008df0 <_dtoa_r+0x730>
 8008f84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f86:	e75c      	b.n	8008e42 <_dtoa_r+0x782>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e788      	b.n	8008e9e <_dtoa_r+0x7de>
 8008f8c:	3fe00000 	.word	0x3fe00000
 8008f90:	40240000 	.word	0x40240000
 8008f94:	40140000 	.word	0x40140000
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	e780      	b.n	8008e9e <_dtoa_r+0x7de>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fa0:	e782      	b.n	8008ea8 <_dtoa_r+0x7e8>
 8008fa2:	d099      	beq.n	8008ed8 <_dtoa_r+0x818>
 8008fa4:	9a08      	ldr	r2, [sp, #32]
 8008fa6:	331c      	adds	r3, #28
 8008fa8:	441a      	add	r2, r3
 8008faa:	4498      	add	r8, r3
 8008fac:	441e      	add	r6, r3
 8008fae:	9208      	str	r2, [sp, #32]
 8008fb0:	e792      	b.n	8008ed8 <_dtoa_r+0x818>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	e7f6      	b.n	8008fa4 <_dtoa_r+0x8e4>
 8008fb6:	9b07      	ldr	r3, [sp, #28]
 8008fb8:	9704      	str	r7, [sp, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dc20      	bgt.n	8009000 <_dtoa_r+0x940>
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	dd1e      	ble.n	8009004 <_dtoa_r+0x944>
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f47f aec0 	bne.w	8008d4e <_dtoa_r+0x68e>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	2205      	movs	r2, #5
 8008fd2:	4658      	mov	r0, fp
 8008fd4:	f000 f9e4 	bl	80093a0 <__multadd>
 8008fd8:	4601      	mov	r1, r0
 8008fda:	4604      	mov	r4, r0
 8008fdc:	4648      	mov	r0, r9
 8008fde:	f000 fc41 	bl	8009864 <__mcmp>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f77f aeb3 	ble.w	8008d4e <_dtoa_r+0x68e>
 8008fe8:	4656      	mov	r6, sl
 8008fea:	2331      	movs	r3, #49	@ 0x31
 8008fec:	f806 3b01 	strb.w	r3, [r6], #1
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	e6ae      	b.n	8008d56 <_dtoa_r+0x696>
 8008ff8:	9c07      	ldr	r4, [sp, #28]
 8008ffa:	9704      	str	r7, [sp, #16]
 8008ffc:	4625      	mov	r5, r4
 8008ffe:	e7f3      	b.n	8008fe8 <_dtoa_r+0x928>
 8009000:	9b07      	ldr	r3, [sp, #28]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 8104 	beq.w	8009214 <_dtoa_r+0xb54>
 800900c:	2e00      	cmp	r6, #0
 800900e:	dd05      	ble.n	800901c <_dtoa_r+0x95c>
 8009010:	4629      	mov	r1, r5
 8009012:	4632      	mov	r2, r6
 8009014:	4658      	mov	r0, fp
 8009016:	f000 fbb9 	bl	800978c <__lshift>
 800901a:	4605      	mov	r5, r0
 800901c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d05a      	beq.n	80090d8 <_dtoa_r+0xa18>
 8009022:	6869      	ldr	r1, [r5, #4]
 8009024:	4658      	mov	r0, fp
 8009026:	f000 f959 	bl	80092dc <_Balloc>
 800902a:	4606      	mov	r6, r0
 800902c:	b928      	cbnz	r0, 800903a <_dtoa_r+0x97a>
 800902e:	4b84      	ldr	r3, [pc, #528]	@ (8009240 <_dtoa_r+0xb80>)
 8009030:	4602      	mov	r2, r0
 8009032:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009036:	f7ff bb5a 	b.w	80086ee <_dtoa_r+0x2e>
 800903a:	692a      	ldr	r2, [r5, #16]
 800903c:	3202      	adds	r2, #2
 800903e:	0092      	lsls	r2, r2, #2
 8009040:	f105 010c 	add.w	r1, r5, #12
 8009044:	300c      	adds	r0, #12
 8009046:	f001 feb1 	bl	800adac <memcpy>
 800904a:	2201      	movs	r2, #1
 800904c:	4631      	mov	r1, r6
 800904e:	4658      	mov	r0, fp
 8009050:	f000 fb9c 	bl	800978c <__lshift>
 8009054:	f10a 0301 	add.w	r3, sl, #1
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	4453      	add	r3, sl
 800905e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	462f      	mov	r7, r5
 8009068:	930a      	str	r3, [sp, #40]	@ 0x28
 800906a:	4605      	mov	r5, r0
 800906c:	9b07      	ldr	r3, [sp, #28]
 800906e:	4621      	mov	r1, r4
 8009070:	3b01      	subs	r3, #1
 8009072:	4648      	mov	r0, r9
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	f7ff fa9b 	bl	80085b0 <quorem>
 800907a:	4639      	mov	r1, r7
 800907c:	9002      	str	r0, [sp, #8]
 800907e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009082:	4648      	mov	r0, r9
 8009084:	f000 fbee 	bl	8009864 <__mcmp>
 8009088:	462a      	mov	r2, r5
 800908a:	9008      	str	r0, [sp, #32]
 800908c:	4621      	mov	r1, r4
 800908e:	4658      	mov	r0, fp
 8009090:	f000 fc04 	bl	800989c <__mdiff>
 8009094:	68c2      	ldr	r2, [r0, #12]
 8009096:	4606      	mov	r6, r0
 8009098:	bb02      	cbnz	r2, 80090dc <_dtoa_r+0xa1c>
 800909a:	4601      	mov	r1, r0
 800909c:	4648      	mov	r0, r9
 800909e:	f000 fbe1 	bl	8009864 <__mcmp>
 80090a2:	4602      	mov	r2, r0
 80090a4:	4631      	mov	r1, r6
 80090a6:	4658      	mov	r0, fp
 80090a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80090aa:	f000 f957 	bl	800935c <_Bfree>
 80090ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090b2:	9e07      	ldr	r6, [sp, #28]
 80090b4:	ea43 0102 	orr.w	r1, r3, r2
 80090b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ba:	4319      	orrs	r1, r3
 80090bc:	d110      	bne.n	80090e0 <_dtoa_r+0xa20>
 80090be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090c2:	d029      	beq.n	8009118 <_dtoa_r+0xa58>
 80090c4:	9b08      	ldr	r3, [sp, #32]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	dd02      	ble.n	80090d0 <_dtoa_r+0xa10>
 80090ca:	9b02      	ldr	r3, [sp, #8]
 80090cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090d0:	9b00      	ldr	r3, [sp, #0]
 80090d2:	f883 8000 	strb.w	r8, [r3]
 80090d6:	e63f      	b.n	8008d58 <_dtoa_r+0x698>
 80090d8:	4628      	mov	r0, r5
 80090da:	e7bb      	b.n	8009054 <_dtoa_r+0x994>
 80090dc:	2201      	movs	r2, #1
 80090de:	e7e1      	b.n	80090a4 <_dtoa_r+0x9e4>
 80090e0:	9b08      	ldr	r3, [sp, #32]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	db04      	blt.n	80090f0 <_dtoa_r+0xa30>
 80090e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090e8:	430b      	orrs	r3, r1
 80090ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090ec:	430b      	orrs	r3, r1
 80090ee:	d120      	bne.n	8009132 <_dtoa_r+0xa72>
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	dded      	ble.n	80090d0 <_dtoa_r+0xa10>
 80090f4:	4649      	mov	r1, r9
 80090f6:	2201      	movs	r2, #1
 80090f8:	4658      	mov	r0, fp
 80090fa:	f000 fb47 	bl	800978c <__lshift>
 80090fe:	4621      	mov	r1, r4
 8009100:	4681      	mov	r9, r0
 8009102:	f000 fbaf 	bl	8009864 <__mcmp>
 8009106:	2800      	cmp	r0, #0
 8009108:	dc03      	bgt.n	8009112 <_dtoa_r+0xa52>
 800910a:	d1e1      	bne.n	80090d0 <_dtoa_r+0xa10>
 800910c:	f018 0f01 	tst.w	r8, #1
 8009110:	d0de      	beq.n	80090d0 <_dtoa_r+0xa10>
 8009112:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009116:	d1d8      	bne.n	80090ca <_dtoa_r+0xa0a>
 8009118:	9a00      	ldr	r2, [sp, #0]
 800911a:	2339      	movs	r3, #57	@ 0x39
 800911c:	7013      	strb	r3, [r2, #0]
 800911e:	4633      	mov	r3, r6
 8009120:	461e      	mov	r6, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009128:	2a39      	cmp	r2, #57	@ 0x39
 800912a:	d052      	beq.n	80091d2 <_dtoa_r+0xb12>
 800912c:	3201      	adds	r2, #1
 800912e:	701a      	strb	r2, [r3, #0]
 8009130:	e612      	b.n	8008d58 <_dtoa_r+0x698>
 8009132:	2a00      	cmp	r2, #0
 8009134:	dd07      	ble.n	8009146 <_dtoa_r+0xa86>
 8009136:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800913a:	d0ed      	beq.n	8009118 <_dtoa_r+0xa58>
 800913c:	9a00      	ldr	r2, [sp, #0]
 800913e:	f108 0301 	add.w	r3, r8, #1
 8009142:	7013      	strb	r3, [r2, #0]
 8009144:	e608      	b.n	8008d58 <_dtoa_r+0x698>
 8009146:	9b07      	ldr	r3, [sp, #28]
 8009148:	9a07      	ldr	r2, [sp, #28]
 800914a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800914e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009150:	4293      	cmp	r3, r2
 8009152:	d028      	beq.n	80091a6 <_dtoa_r+0xae6>
 8009154:	4649      	mov	r1, r9
 8009156:	2300      	movs	r3, #0
 8009158:	220a      	movs	r2, #10
 800915a:	4658      	mov	r0, fp
 800915c:	f000 f920 	bl	80093a0 <__multadd>
 8009160:	42af      	cmp	r7, r5
 8009162:	4681      	mov	r9, r0
 8009164:	f04f 0300 	mov.w	r3, #0
 8009168:	f04f 020a 	mov.w	r2, #10
 800916c:	4639      	mov	r1, r7
 800916e:	4658      	mov	r0, fp
 8009170:	d107      	bne.n	8009182 <_dtoa_r+0xac2>
 8009172:	f000 f915 	bl	80093a0 <__multadd>
 8009176:	4607      	mov	r7, r0
 8009178:	4605      	mov	r5, r0
 800917a:	9b07      	ldr	r3, [sp, #28]
 800917c:	3301      	adds	r3, #1
 800917e:	9307      	str	r3, [sp, #28]
 8009180:	e774      	b.n	800906c <_dtoa_r+0x9ac>
 8009182:	f000 f90d 	bl	80093a0 <__multadd>
 8009186:	4629      	mov	r1, r5
 8009188:	4607      	mov	r7, r0
 800918a:	2300      	movs	r3, #0
 800918c:	220a      	movs	r2, #10
 800918e:	4658      	mov	r0, fp
 8009190:	f000 f906 	bl	80093a0 <__multadd>
 8009194:	4605      	mov	r5, r0
 8009196:	e7f0      	b.n	800917a <_dtoa_r+0xaba>
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	bfcc      	ite	gt
 800919e:	461e      	movgt	r6, r3
 80091a0:	2601      	movle	r6, #1
 80091a2:	4456      	add	r6, sl
 80091a4:	2700      	movs	r7, #0
 80091a6:	4649      	mov	r1, r9
 80091a8:	2201      	movs	r2, #1
 80091aa:	4658      	mov	r0, fp
 80091ac:	f000 faee 	bl	800978c <__lshift>
 80091b0:	4621      	mov	r1, r4
 80091b2:	4681      	mov	r9, r0
 80091b4:	f000 fb56 	bl	8009864 <__mcmp>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	dcb0      	bgt.n	800911e <_dtoa_r+0xa5e>
 80091bc:	d102      	bne.n	80091c4 <_dtoa_r+0xb04>
 80091be:	f018 0f01 	tst.w	r8, #1
 80091c2:	d1ac      	bne.n	800911e <_dtoa_r+0xa5e>
 80091c4:	4633      	mov	r3, r6
 80091c6:	461e      	mov	r6, r3
 80091c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091cc:	2a30      	cmp	r2, #48	@ 0x30
 80091ce:	d0fa      	beq.n	80091c6 <_dtoa_r+0xb06>
 80091d0:	e5c2      	b.n	8008d58 <_dtoa_r+0x698>
 80091d2:	459a      	cmp	sl, r3
 80091d4:	d1a4      	bne.n	8009120 <_dtoa_r+0xa60>
 80091d6:	9b04      	ldr	r3, [sp, #16]
 80091d8:	3301      	adds	r3, #1
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	2331      	movs	r3, #49	@ 0x31
 80091de:	f88a 3000 	strb.w	r3, [sl]
 80091e2:	e5b9      	b.n	8008d58 <_dtoa_r+0x698>
 80091e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009244 <_dtoa_r+0xb84>
 80091ea:	b11b      	cbz	r3, 80091f4 <_dtoa_r+0xb34>
 80091ec:	f10a 0308 	add.w	r3, sl, #8
 80091f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	4650      	mov	r0, sl
 80091f6:	b019      	add	sp, #100	@ 0x64
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fe:	2b01      	cmp	r3, #1
 8009200:	f77f ae37 	ble.w	8008e72 <_dtoa_r+0x7b2>
 8009204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009206:	930a      	str	r3, [sp, #40]	@ 0x28
 8009208:	2001      	movs	r0, #1
 800920a:	e655      	b.n	8008eb8 <_dtoa_r+0x7f8>
 800920c:	9b00      	ldr	r3, [sp, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f77f aed6 	ble.w	8008fc0 <_dtoa_r+0x900>
 8009214:	4656      	mov	r6, sl
 8009216:	4621      	mov	r1, r4
 8009218:	4648      	mov	r0, r9
 800921a:	f7ff f9c9 	bl	80085b0 <quorem>
 800921e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009222:	f806 8b01 	strb.w	r8, [r6], #1
 8009226:	9b00      	ldr	r3, [sp, #0]
 8009228:	eba6 020a 	sub.w	r2, r6, sl
 800922c:	4293      	cmp	r3, r2
 800922e:	ddb3      	ble.n	8009198 <_dtoa_r+0xad8>
 8009230:	4649      	mov	r1, r9
 8009232:	2300      	movs	r3, #0
 8009234:	220a      	movs	r2, #10
 8009236:	4658      	mov	r0, fp
 8009238:	f000 f8b2 	bl	80093a0 <__multadd>
 800923c:	4681      	mov	r9, r0
 800923e:	e7ea      	b.n	8009216 <_dtoa_r+0xb56>
 8009240:	0800bbc1 	.word	0x0800bbc1
 8009244:	0800bb45 	.word	0x0800bb45

08009248 <_free_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4605      	mov	r5, r0
 800924c:	2900      	cmp	r1, #0
 800924e:	d041      	beq.n	80092d4 <_free_r+0x8c>
 8009250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009254:	1f0c      	subs	r4, r1, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	bfb8      	it	lt
 800925a:	18e4      	addlt	r4, r4, r3
 800925c:	f7fe f974 	bl	8007548 <__malloc_lock>
 8009260:	4a1d      	ldr	r2, [pc, #116]	@ (80092d8 <_free_r+0x90>)
 8009262:	6813      	ldr	r3, [r2, #0]
 8009264:	b933      	cbnz	r3, 8009274 <_free_r+0x2c>
 8009266:	6063      	str	r3, [r4, #4]
 8009268:	6014      	str	r4, [r2, #0]
 800926a:	4628      	mov	r0, r5
 800926c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009270:	f7fe b970 	b.w	8007554 <__malloc_unlock>
 8009274:	42a3      	cmp	r3, r4
 8009276:	d908      	bls.n	800928a <_free_r+0x42>
 8009278:	6820      	ldr	r0, [r4, #0]
 800927a:	1821      	adds	r1, r4, r0
 800927c:	428b      	cmp	r3, r1
 800927e:	bf01      	itttt	eq
 8009280:	6819      	ldreq	r1, [r3, #0]
 8009282:	685b      	ldreq	r3, [r3, #4]
 8009284:	1809      	addeq	r1, r1, r0
 8009286:	6021      	streq	r1, [r4, #0]
 8009288:	e7ed      	b.n	8009266 <_free_r+0x1e>
 800928a:	461a      	mov	r2, r3
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	b10b      	cbz	r3, 8009294 <_free_r+0x4c>
 8009290:	42a3      	cmp	r3, r4
 8009292:	d9fa      	bls.n	800928a <_free_r+0x42>
 8009294:	6811      	ldr	r1, [r2, #0]
 8009296:	1850      	adds	r0, r2, r1
 8009298:	42a0      	cmp	r0, r4
 800929a:	d10b      	bne.n	80092b4 <_free_r+0x6c>
 800929c:	6820      	ldr	r0, [r4, #0]
 800929e:	4401      	add	r1, r0
 80092a0:	1850      	adds	r0, r2, r1
 80092a2:	4283      	cmp	r3, r0
 80092a4:	6011      	str	r1, [r2, #0]
 80092a6:	d1e0      	bne.n	800926a <_free_r+0x22>
 80092a8:	6818      	ldr	r0, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	6053      	str	r3, [r2, #4]
 80092ae:	4408      	add	r0, r1
 80092b0:	6010      	str	r0, [r2, #0]
 80092b2:	e7da      	b.n	800926a <_free_r+0x22>
 80092b4:	d902      	bls.n	80092bc <_free_r+0x74>
 80092b6:	230c      	movs	r3, #12
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	e7d6      	b.n	800926a <_free_r+0x22>
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	1821      	adds	r1, r4, r0
 80092c0:	428b      	cmp	r3, r1
 80092c2:	bf04      	itt	eq
 80092c4:	6819      	ldreq	r1, [r3, #0]
 80092c6:	685b      	ldreq	r3, [r3, #4]
 80092c8:	6063      	str	r3, [r4, #4]
 80092ca:	bf04      	itt	eq
 80092cc:	1809      	addeq	r1, r1, r0
 80092ce:	6021      	streq	r1, [r4, #0]
 80092d0:	6054      	str	r4, [r2, #4]
 80092d2:	e7ca      	b.n	800926a <_free_r+0x22>
 80092d4:	bd38      	pop	{r3, r4, r5, pc}
 80092d6:	bf00      	nop
 80092d8:	20000450 	.word	0x20000450

080092dc <_Balloc>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	69c6      	ldr	r6, [r0, #28]
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	b976      	cbnz	r6, 8009304 <_Balloc+0x28>
 80092e6:	2010      	movs	r0, #16
 80092e8:	f7fe f884 	bl	80073f4 <malloc>
 80092ec:	4602      	mov	r2, r0
 80092ee:	61e0      	str	r0, [r4, #28]
 80092f0:	b920      	cbnz	r0, 80092fc <_Balloc+0x20>
 80092f2:	4b18      	ldr	r3, [pc, #96]	@ (8009354 <_Balloc+0x78>)
 80092f4:	4818      	ldr	r0, [pc, #96]	@ (8009358 <_Balloc+0x7c>)
 80092f6:	216b      	movs	r1, #107	@ 0x6b
 80092f8:	f001 fd6e 	bl	800add8 <__assert_func>
 80092fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009300:	6006      	str	r6, [r0, #0]
 8009302:	60c6      	str	r6, [r0, #12]
 8009304:	69e6      	ldr	r6, [r4, #28]
 8009306:	68f3      	ldr	r3, [r6, #12]
 8009308:	b183      	cbz	r3, 800932c <_Balloc+0x50>
 800930a:	69e3      	ldr	r3, [r4, #28]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009312:	b9b8      	cbnz	r0, 8009344 <_Balloc+0x68>
 8009314:	2101      	movs	r1, #1
 8009316:	fa01 f605 	lsl.w	r6, r1, r5
 800931a:	1d72      	adds	r2, r6, #5
 800931c:	0092      	lsls	r2, r2, #2
 800931e:	4620      	mov	r0, r4
 8009320:	f7fe f854 	bl	80073cc <_calloc_r>
 8009324:	b160      	cbz	r0, 8009340 <_Balloc+0x64>
 8009326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800932a:	e00e      	b.n	800934a <_Balloc+0x6e>
 800932c:	2221      	movs	r2, #33	@ 0x21
 800932e:	2104      	movs	r1, #4
 8009330:	4620      	mov	r0, r4
 8009332:	f7fe f84b 	bl	80073cc <_calloc_r>
 8009336:	69e3      	ldr	r3, [r4, #28]
 8009338:	60f0      	str	r0, [r6, #12]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e4      	bne.n	800930a <_Balloc+0x2e>
 8009340:	2000      	movs	r0, #0
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	6802      	ldr	r2, [r0, #0]
 8009346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800934a:	2300      	movs	r3, #0
 800934c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009350:	e7f7      	b.n	8009342 <_Balloc+0x66>
 8009352:	bf00      	nop
 8009354:	0800bb52 	.word	0x0800bb52
 8009358:	0800bbd2 	.word	0x0800bbd2

0800935c <_Bfree>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	69c6      	ldr	r6, [r0, #28]
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b976      	cbnz	r6, 8009384 <_Bfree+0x28>
 8009366:	2010      	movs	r0, #16
 8009368:	f7fe f844 	bl	80073f4 <malloc>
 800936c:	4602      	mov	r2, r0
 800936e:	61e8      	str	r0, [r5, #28]
 8009370:	b920      	cbnz	r0, 800937c <_Bfree+0x20>
 8009372:	4b09      	ldr	r3, [pc, #36]	@ (8009398 <_Bfree+0x3c>)
 8009374:	4809      	ldr	r0, [pc, #36]	@ (800939c <_Bfree+0x40>)
 8009376:	218f      	movs	r1, #143	@ 0x8f
 8009378:	f001 fd2e 	bl	800add8 <__assert_func>
 800937c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009380:	6006      	str	r6, [r0, #0]
 8009382:	60c6      	str	r6, [r0, #12]
 8009384:	b13c      	cbz	r4, 8009396 <_Bfree+0x3a>
 8009386:	69eb      	ldr	r3, [r5, #28]
 8009388:	6862      	ldr	r2, [r4, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009390:	6021      	str	r1, [r4, #0]
 8009392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	0800bb52 	.word	0x0800bb52
 800939c:	0800bbd2 	.word	0x0800bbd2

080093a0 <__multadd>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	690d      	ldr	r5, [r1, #16]
 80093a6:	4607      	mov	r7, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	461e      	mov	r6, r3
 80093ac:	f101 0c14 	add.w	ip, r1, #20
 80093b0:	2000      	movs	r0, #0
 80093b2:	f8dc 3000 	ldr.w	r3, [ip]
 80093b6:	b299      	uxth	r1, r3
 80093b8:	fb02 6101 	mla	r1, r2, r1, r6
 80093bc:	0c1e      	lsrs	r6, r3, #16
 80093be:	0c0b      	lsrs	r3, r1, #16
 80093c0:	fb02 3306 	mla	r3, r2, r6, r3
 80093c4:	b289      	uxth	r1, r1
 80093c6:	3001      	adds	r0, #1
 80093c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093cc:	4285      	cmp	r5, r0
 80093ce:	f84c 1b04 	str.w	r1, [ip], #4
 80093d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093d6:	dcec      	bgt.n	80093b2 <__multadd+0x12>
 80093d8:	b30e      	cbz	r6, 800941e <__multadd+0x7e>
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	42ab      	cmp	r3, r5
 80093de:	dc19      	bgt.n	8009414 <__multadd+0x74>
 80093e0:	6861      	ldr	r1, [r4, #4]
 80093e2:	4638      	mov	r0, r7
 80093e4:	3101      	adds	r1, #1
 80093e6:	f7ff ff79 	bl	80092dc <_Balloc>
 80093ea:	4680      	mov	r8, r0
 80093ec:	b928      	cbnz	r0, 80093fa <__multadd+0x5a>
 80093ee:	4602      	mov	r2, r0
 80093f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009424 <__multadd+0x84>)
 80093f2:	480d      	ldr	r0, [pc, #52]	@ (8009428 <__multadd+0x88>)
 80093f4:	21ba      	movs	r1, #186	@ 0xba
 80093f6:	f001 fcef 	bl	800add8 <__assert_func>
 80093fa:	6922      	ldr	r2, [r4, #16]
 80093fc:	3202      	adds	r2, #2
 80093fe:	f104 010c 	add.w	r1, r4, #12
 8009402:	0092      	lsls	r2, r2, #2
 8009404:	300c      	adds	r0, #12
 8009406:	f001 fcd1 	bl	800adac <memcpy>
 800940a:	4621      	mov	r1, r4
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff ffa5 	bl	800935c <_Bfree>
 8009412:	4644      	mov	r4, r8
 8009414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009418:	3501      	adds	r5, #1
 800941a:	615e      	str	r6, [r3, #20]
 800941c:	6125      	str	r5, [r4, #16]
 800941e:	4620      	mov	r0, r4
 8009420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009424:	0800bbc1 	.word	0x0800bbc1
 8009428:	0800bbd2 	.word	0x0800bbd2

0800942c <__s2b>:
 800942c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009430:	460c      	mov	r4, r1
 8009432:	4615      	mov	r5, r2
 8009434:	461f      	mov	r7, r3
 8009436:	2209      	movs	r2, #9
 8009438:	3308      	adds	r3, #8
 800943a:	4606      	mov	r6, r0
 800943c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009440:	2100      	movs	r1, #0
 8009442:	2201      	movs	r2, #1
 8009444:	429a      	cmp	r2, r3
 8009446:	db09      	blt.n	800945c <__s2b+0x30>
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff ff47 	bl	80092dc <_Balloc>
 800944e:	b940      	cbnz	r0, 8009462 <__s2b+0x36>
 8009450:	4602      	mov	r2, r0
 8009452:	4b19      	ldr	r3, [pc, #100]	@ (80094b8 <__s2b+0x8c>)
 8009454:	4819      	ldr	r0, [pc, #100]	@ (80094bc <__s2b+0x90>)
 8009456:	21d3      	movs	r1, #211	@ 0xd3
 8009458:	f001 fcbe 	bl	800add8 <__assert_func>
 800945c:	0052      	lsls	r2, r2, #1
 800945e:	3101      	adds	r1, #1
 8009460:	e7f0      	b.n	8009444 <__s2b+0x18>
 8009462:	9b08      	ldr	r3, [sp, #32]
 8009464:	6143      	str	r3, [r0, #20]
 8009466:	2d09      	cmp	r5, #9
 8009468:	f04f 0301 	mov.w	r3, #1
 800946c:	6103      	str	r3, [r0, #16]
 800946e:	dd16      	ble.n	800949e <__s2b+0x72>
 8009470:	f104 0909 	add.w	r9, r4, #9
 8009474:	46c8      	mov	r8, r9
 8009476:	442c      	add	r4, r5
 8009478:	f818 3b01 	ldrb.w	r3, [r8], #1
 800947c:	4601      	mov	r1, r0
 800947e:	3b30      	subs	r3, #48	@ 0x30
 8009480:	220a      	movs	r2, #10
 8009482:	4630      	mov	r0, r6
 8009484:	f7ff ff8c 	bl	80093a0 <__multadd>
 8009488:	45a0      	cmp	r8, r4
 800948a:	d1f5      	bne.n	8009478 <__s2b+0x4c>
 800948c:	f1a5 0408 	sub.w	r4, r5, #8
 8009490:	444c      	add	r4, r9
 8009492:	1b2d      	subs	r5, r5, r4
 8009494:	1963      	adds	r3, r4, r5
 8009496:	42bb      	cmp	r3, r7
 8009498:	db04      	blt.n	80094a4 <__s2b+0x78>
 800949a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949e:	340a      	adds	r4, #10
 80094a0:	2509      	movs	r5, #9
 80094a2:	e7f6      	b.n	8009492 <__s2b+0x66>
 80094a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094a8:	4601      	mov	r1, r0
 80094aa:	3b30      	subs	r3, #48	@ 0x30
 80094ac:	220a      	movs	r2, #10
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff ff76 	bl	80093a0 <__multadd>
 80094b4:	e7ee      	b.n	8009494 <__s2b+0x68>
 80094b6:	bf00      	nop
 80094b8:	0800bbc1 	.word	0x0800bbc1
 80094bc:	0800bbd2 	.word	0x0800bbd2

080094c0 <__hi0bits>:
 80094c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094c4:	4603      	mov	r3, r0
 80094c6:	bf36      	itet	cc
 80094c8:	0403      	lslcc	r3, r0, #16
 80094ca:	2000      	movcs	r0, #0
 80094cc:	2010      	movcc	r0, #16
 80094ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094d2:	bf3c      	itt	cc
 80094d4:	021b      	lslcc	r3, r3, #8
 80094d6:	3008      	addcc	r0, #8
 80094d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094dc:	bf3c      	itt	cc
 80094de:	011b      	lslcc	r3, r3, #4
 80094e0:	3004      	addcc	r0, #4
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e6:	bf3c      	itt	cc
 80094e8:	009b      	lslcc	r3, r3, #2
 80094ea:	3002      	addcc	r0, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	db05      	blt.n	80094fc <__hi0bits+0x3c>
 80094f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80094f4:	f100 0001 	add.w	r0, r0, #1
 80094f8:	bf08      	it	eq
 80094fa:	2020      	moveq	r0, #32
 80094fc:	4770      	bx	lr

080094fe <__lo0bits>:
 80094fe:	6803      	ldr	r3, [r0, #0]
 8009500:	4602      	mov	r2, r0
 8009502:	f013 0007 	ands.w	r0, r3, #7
 8009506:	d00b      	beq.n	8009520 <__lo0bits+0x22>
 8009508:	07d9      	lsls	r1, r3, #31
 800950a:	d421      	bmi.n	8009550 <__lo0bits+0x52>
 800950c:	0798      	lsls	r0, r3, #30
 800950e:	bf49      	itett	mi
 8009510:	085b      	lsrmi	r3, r3, #1
 8009512:	089b      	lsrpl	r3, r3, #2
 8009514:	2001      	movmi	r0, #1
 8009516:	6013      	strmi	r3, [r2, #0]
 8009518:	bf5c      	itt	pl
 800951a:	6013      	strpl	r3, [r2, #0]
 800951c:	2002      	movpl	r0, #2
 800951e:	4770      	bx	lr
 8009520:	b299      	uxth	r1, r3
 8009522:	b909      	cbnz	r1, 8009528 <__lo0bits+0x2a>
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	2010      	movs	r0, #16
 8009528:	b2d9      	uxtb	r1, r3
 800952a:	b909      	cbnz	r1, 8009530 <__lo0bits+0x32>
 800952c:	3008      	adds	r0, #8
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	0719      	lsls	r1, r3, #28
 8009532:	bf04      	itt	eq
 8009534:	091b      	lsreq	r3, r3, #4
 8009536:	3004      	addeq	r0, #4
 8009538:	0799      	lsls	r1, r3, #30
 800953a:	bf04      	itt	eq
 800953c:	089b      	lsreq	r3, r3, #2
 800953e:	3002      	addeq	r0, #2
 8009540:	07d9      	lsls	r1, r3, #31
 8009542:	d403      	bmi.n	800954c <__lo0bits+0x4e>
 8009544:	085b      	lsrs	r3, r3, #1
 8009546:	f100 0001 	add.w	r0, r0, #1
 800954a:	d003      	beq.n	8009554 <__lo0bits+0x56>
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	4770      	bx	lr
 8009550:	2000      	movs	r0, #0
 8009552:	4770      	bx	lr
 8009554:	2020      	movs	r0, #32
 8009556:	4770      	bx	lr

08009558 <__i2b>:
 8009558:	b510      	push	{r4, lr}
 800955a:	460c      	mov	r4, r1
 800955c:	2101      	movs	r1, #1
 800955e:	f7ff febd 	bl	80092dc <_Balloc>
 8009562:	4602      	mov	r2, r0
 8009564:	b928      	cbnz	r0, 8009572 <__i2b+0x1a>
 8009566:	4b05      	ldr	r3, [pc, #20]	@ (800957c <__i2b+0x24>)
 8009568:	4805      	ldr	r0, [pc, #20]	@ (8009580 <__i2b+0x28>)
 800956a:	f240 1145 	movw	r1, #325	@ 0x145
 800956e:	f001 fc33 	bl	800add8 <__assert_func>
 8009572:	2301      	movs	r3, #1
 8009574:	6144      	str	r4, [r0, #20]
 8009576:	6103      	str	r3, [r0, #16]
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	0800bbc1 	.word	0x0800bbc1
 8009580:	0800bbd2 	.word	0x0800bbd2

08009584 <__multiply>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4614      	mov	r4, r2
 800958a:	690a      	ldr	r2, [r1, #16]
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	429a      	cmp	r2, r3
 8009590:	bfa8      	it	ge
 8009592:	4623      	movge	r3, r4
 8009594:	460f      	mov	r7, r1
 8009596:	bfa4      	itt	ge
 8009598:	460c      	movge	r4, r1
 800959a:	461f      	movge	r7, r3
 800959c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80095a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	6861      	ldr	r1, [r4, #4]
 80095a8:	eb0a 0609 	add.w	r6, sl, r9
 80095ac:	42b3      	cmp	r3, r6
 80095ae:	b085      	sub	sp, #20
 80095b0:	bfb8      	it	lt
 80095b2:	3101      	addlt	r1, #1
 80095b4:	f7ff fe92 	bl	80092dc <_Balloc>
 80095b8:	b930      	cbnz	r0, 80095c8 <__multiply+0x44>
 80095ba:	4602      	mov	r2, r0
 80095bc:	4b44      	ldr	r3, [pc, #272]	@ (80096d0 <__multiply+0x14c>)
 80095be:	4845      	ldr	r0, [pc, #276]	@ (80096d4 <__multiply+0x150>)
 80095c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095c4:	f001 fc08 	bl	800add8 <__assert_func>
 80095c8:	f100 0514 	add.w	r5, r0, #20
 80095cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095d0:	462b      	mov	r3, r5
 80095d2:	2200      	movs	r2, #0
 80095d4:	4543      	cmp	r3, r8
 80095d6:	d321      	bcc.n	800961c <__multiply+0x98>
 80095d8:	f107 0114 	add.w	r1, r7, #20
 80095dc:	f104 0214 	add.w	r2, r4, #20
 80095e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80095e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	1b13      	subs	r3, r2, r4
 80095ec:	3b15      	subs	r3, #21
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	3304      	adds	r3, #4
 80095f4:	f104 0715 	add.w	r7, r4, #21
 80095f8:	42ba      	cmp	r2, r7
 80095fa:	bf38      	it	cc
 80095fc:	2304      	movcc	r3, #4
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	9b02      	ldr	r3, [sp, #8]
 8009602:	9103      	str	r1, [sp, #12]
 8009604:	428b      	cmp	r3, r1
 8009606:	d80c      	bhi.n	8009622 <__multiply+0x9e>
 8009608:	2e00      	cmp	r6, #0
 800960a:	dd03      	ble.n	8009614 <__multiply+0x90>
 800960c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009610:	2b00      	cmp	r3, #0
 8009612:	d05b      	beq.n	80096cc <__multiply+0x148>
 8009614:	6106      	str	r6, [r0, #16]
 8009616:	b005      	add	sp, #20
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	f843 2b04 	str.w	r2, [r3], #4
 8009620:	e7d8      	b.n	80095d4 <__multiply+0x50>
 8009622:	f8b1 a000 	ldrh.w	sl, [r1]
 8009626:	f1ba 0f00 	cmp.w	sl, #0
 800962a:	d024      	beq.n	8009676 <__multiply+0xf2>
 800962c:	f104 0e14 	add.w	lr, r4, #20
 8009630:	46a9      	mov	r9, r5
 8009632:	f04f 0c00 	mov.w	ip, #0
 8009636:	f85e 7b04 	ldr.w	r7, [lr], #4
 800963a:	f8d9 3000 	ldr.w	r3, [r9]
 800963e:	fa1f fb87 	uxth.w	fp, r7
 8009642:	b29b      	uxth	r3, r3
 8009644:	fb0a 330b 	mla	r3, sl, fp, r3
 8009648:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800964c:	f8d9 7000 	ldr.w	r7, [r9]
 8009650:	4463      	add	r3, ip
 8009652:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009656:	fb0a c70b 	mla	r7, sl, fp, ip
 800965a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800965e:	b29b      	uxth	r3, r3
 8009660:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009664:	4572      	cmp	r2, lr
 8009666:	f849 3b04 	str.w	r3, [r9], #4
 800966a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800966e:	d8e2      	bhi.n	8009636 <__multiply+0xb2>
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	f845 c003 	str.w	ip, [r5, r3]
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800967c:	3104      	adds	r1, #4
 800967e:	f1b9 0f00 	cmp.w	r9, #0
 8009682:	d021      	beq.n	80096c8 <__multiply+0x144>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	f104 0c14 	add.w	ip, r4, #20
 800968a:	46ae      	mov	lr, r5
 800968c:	f04f 0a00 	mov.w	sl, #0
 8009690:	f8bc b000 	ldrh.w	fp, [ip]
 8009694:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009698:	fb09 770b 	mla	r7, r9, fp, r7
 800969c:	4457      	add	r7, sl
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096a4:	f84e 3b04 	str.w	r3, [lr], #4
 80096a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096b0:	f8be 3000 	ldrh.w	r3, [lr]
 80096b4:	fb09 330a 	mla	r3, r9, sl, r3
 80096b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80096bc:	4562      	cmp	r2, ip
 80096be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096c2:	d8e5      	bhi.n	8009690 <__multiply+0x10c>
 80096c4:	9f01      	ldr	r7, [sp, #4]
 80096c6:	51eb      	str	r3, [r5, r7]
 80096c8:	3504      	adds	r5, #4
 80096ca:	e799      	b.n	8009600 <__multiply+0x7c>
 80096cc:	3e01      	subs	r6, #1
 80096ce:	e79b      	b.n	8009608 <__multiply+0x84>
 80096d0:	0800bbc1 	.word	0x0800bbc1
 80096d4:	0800bbd2 	.word	0x0800bbd2

080096d8 <__pow5mult>:
 80096d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	4615      	mov	r5, r2
 80096de:	f012 0203 	ands.w	r2, r2, #3
 80096e2:	4607      	mov	r7, r0
 80096e4:	460e      	mov	r6, r1
 80096e6:	d007      	beq.n	80096f8 <__pow5mult+0x20>
 80096e8:	4c25      	ldr	r4, [pc, #148]	@ (8009780 <__pow5mult+0xa8>)
 80096ea:	3a01      	subs	r2, #1
 80096ec:	2300      	movs	r3, #0
 80096ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096f2:	f7ff fe55 	bl	80093a0 <__multadd>
 80096f6:	4606      	mov	r6, r0
 80096f8:	10ad      	asrs	r5, r5, #2
 80096fa:	d03d      	beq.n	8009778 <__pow5mult+0xa0>
 80096fc:	69fc      	ldr	r4, [r7, #28]
 80096fe:	b97c      	cbnz	r4, 8009720 <__pow5mult+0x48>
 8009700:	2010      	movs	r0, #16
 8009702:	f7fd fe77 	bl	80073f4 <malloc>
 8009706:	4602      	mov	r2, r0
 8009708:	61f8      	str	r0, [r7, #28]
 800970a:	b928      	cbnz	r0, 8009718 <__pow5mult+0x40>
 800970c:	4b1d      	ldr	r3, [pc, #116]	@ (8009784 <__pow5mult+0xac>)
 800970e:	481e      	ldr	r0, [pc, #120]	@ (8009788 <__pow5mult+0xb0>)
 8009710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009714:	f001 fb60 	bl	800add8 <__assert_func>
 8009718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800971c:	6004      	str	r4, [r0, #0]
 800971e:	60c4      	str	r4, [r0, #12]
 8009720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009728:	b94c      	cbnz	r4, 800973e <__pow5mult+0x66>
 800972a:	f240 2171 	movw	r1, #625	@ 0x271
 800972e:	4638      	mov	r0, r7
 8009730:	f7ff ff12 	bl	8009558 <__i2b>
 8009734:	2300      	movs	r3, #0
 8009736:	f8c8 0008 	str.w	r0, [r8, #8]
 800973a:	4604      	mov	r4, r0
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	07eb      	lsls	r3, r5, #31
 8009744:	d50a      	bpl.n	800975c <__pow5mult+0x84>
 8009746:	4631      	mov	r1, r6
 8009748:	4622      	mov	r2, r4
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ff1a 	bl	8009584 <__multiply>
 8009750:	4631      	mov	r1, r6
 8009752:	4680      	mov	r8, r0
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff fe01 	bl	800935c <_Bfree>
 800975a:	4646      	mov	r6, r8
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	d00b      	beq.n	8009778 <__pow5mult+0xa0>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	b938      	cbnz	r0, 8009774 <__pow5mult+0x9c>
 8009764:	4622      	mov	r2, r4
 8009766:	4621      	mov	r1, r4
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff ff0b 	bl	8009584 <__multiply>
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	f8c0 9000 	str.w	r9, [r0]
 8009774:	4604      	mov	r4, r0
 8009776:	e7e4      	b.n	8009742 <__pow5mult+0x6a>
 8009778:	4630      	mov	r0, r6
 800977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977e:	bf00      	nop
 8009780:	0800bc2c 	.word	0x0800bc2c
 8009784:	0800bb52 	.word	0x0800bb52
 8009788:	0800bbd2 	.word	0x0800bbd2

0800978c <__lshift>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	460c      	mov	r4, r1
 8009792:	6849      	ldr	r1, [r1, #4]
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	4607      	mov	r7, r0
 800979e:	4691      	mov	r9, r2
 80097a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a4:	f108 0601 	add.w	r6, r8, #1
 80097a8:	42b3      	cmp	r3, r6
 80097aa:	db0b      	blt.n	80097c4 <__lshift+0x38>
 80097ac:	4638      	mov	r0, r7
 80097ae:	f7ff fd95 	bl	80092dc <_Balloc>
 80097b2:	4605      	mov	r5, r0
 80097b4:	b948      	cbnz	r0, 80097ca <__lshift+0x3e>
 80097b6:	4602      	mov	r2, r0
 80097b8:	4b28      	ldr	r3, [pc, #160]	@ (800985c <__lshift+0xd0>)
 80097ba:	4829      	ldr	r0, [pc, #164]	@ (8009860 <__lshift+0xd4>)
 80097bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097c0:	f001 fb0a 	bl	800add8 <__assert_func>
 80097c4:	3101      	adds	r1, #1
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	e7ee      	b.n	80097a8 <__lshift+0x1c>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f100 0114 	add.w	r1, r0, #20
 80097d0:	f100 0210 	add.w	r2, r0, #16
 80097d4:	4618      	mov	r0, r3
 80097d6:	4553      	cmp	r3, sl
 80097d8:	db33      	blt.n	8009842 <__lshift+0xb6>
 80097da:	6920      	ldr	r0, [r4, #16]
 80097dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e0:	f104 0314 	add.w	r3, r4, #20
 80097e4:	f019 091f 	ands.w	r9, r9, #31
 80097e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f0:	d02b      	beq.n	800984a <__lshift+0xbe>
 80097f2:	f1c9 0e20 	rsb	lr, r9, #32
 80097f6:	468a      	mov	sl, r1
 80097f8:	2200      	movs	r2, #0
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009800:	4310      	orrs	r0, r2
 8009802:	f84a 0b04 	str.w	r0, [sl], #4
 8009806:	f853 2b04 	ldr.w	r2, [r3], #4
 800980a:	459c      	cmp	ip, r3
 800980c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009810:	d8f3      	bhi.n	80097fa <__lshift+0x6e>
 8009812:	ebac 0304 	sub.w	r3, ip, r4
 8009816:	3b15      	subs	r3, #21
 8009818:	f023 0303 	bic.w	r3, r3, #3
 800981c:	3304      	adds	r3, #4
 800981e:	f104 0015 	add.w	r0, r4, #21
 8009822:	4584      	cmp	ip, r0
 8009824:	bf38      	it	cc
 8009826:	2304      	movcc	r3, #4
 8009828:	50ca      	str	r2, [r1, r3]
 800982a:	b10a      	cbz	r2, 8009830 <__lshift+0xa4>
 800982c:	f108 0602 	add.w	r6, r8, #2
 8009830:	3e01      	subs	r6, #1
 8009832:	4638      	mov	r0, r7
 8009834:	612e      	str	r6, [r5, #16]
 8009836:	4621      	mov	r1, r4
 8009838:	f7ff fd90 	bl	800935c <_Bfree>
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	f842 0f04 	str.w	r0, [r2, #4]!
 8009846:	3301      	adds	r3, #1
 8009848:	e7c5      	b.n	80097d6 <__lshift+0x4a>
 800984a:	3904      	subs	r1, #4
 800984c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009850:	f841 2f04 	str.w	r2, [r1, #4]!
 8009854:	459c      	cmp	ip, r3
 8009856:	d8f9      	bhi.n	800984c <__lshift+0xc0>
 8009858:	e7ea      	b.n	8009830 <__lshift+0xa4>
 800985a:	bf00      	nop
 800985c:	0800bbc1 	.word	0x0800bbc1
 8009860:	0800bbd2 	.word	0x0800bbd2

08009864 <__mcmp>:
 8009864:	690a      	ldr	r2, [r1, #16]
 8009866:	4603      	mov	r3, r0
 8009868:	6900      	ldr	r0, [r0, #16]
 800986a:	1a80      	subs	r0, r0, r2
 800986c:	b530      	push	{r4, r5, lr}
 800986e:	d10e      	bne.n	800988e <__mcmp+0x2a>
 8009870:	3314      	adds	r3, #20
 8009872:	3114      	adds	r1, #20
 8009874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800987c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009884:	4295      	cmp	r5, r2
 8009886:	d003      	beq.n	8009890 <__mcmp+0x2c>
 8009888:	d205      	bcs.n	8009896 <__mcmp+0x32>
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	42a3      	cmp	r3, r4
 8009892:	d3f3      	bcc.n	800987c <__mcmp+0x18>
 8009894:	e7fb      	b.n	800988e <__mcmp+0x2a>
 8009896:	2001      	movs	r0, #1
 8009898:	e7f9      	b.n	800988e <__mcmp+0x2a>
	...

0800989c <__mdiff>:
 800989c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	4689      	mov	r9, r1
 80098a2:	4606      	mov	r6, r0
 80098a4:	4611      	mov	r1, r2
 80098a6:	4648      	mov	r0, r9
 80098a8:	4614      	mov	r4, r2
 80098aa:	f7ff ffdb 	bl	8009864 <__mcmp>
 80098ae:	1e05      	subs	r5, r0, #0
 80098b0:	d112      	bne.n	80098d8 <__mdiff+0x3c>
 80098b2:	4629      	mov	r1, r5
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff fd11 	bl	80092dc <_Balloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	b928      	cbnz	r0, 80098ca <__mdiff+0x2e>
 80098be:	4b3f      	ldr	r3, [pc, #252]	@ (80099bc <__mdiff+0x120>)
 80098c0:	f240 2137 	movw	r1, #567	@ 0x237
 80098c4:	483e      	ldr	r0, [pc, #248]	@ (80099c0 <__mdiff+0x124>)
 80098c6:	f001 fa87 	bl	800add8 <__assert_func>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d0:	4610      	mov	r0, r2
 80098d2:	b003      	add	sp, #12
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	bfbc      	itt	lt
 80098da:	464b      	movlt	r3, r9
 80098dc:	46a1      	movlt	r9, r4
 80098de:	4630      	mov	r0, r6
 80098e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098e4:	bfba      	itte	lt
 80098e6:	461c      	movlt	r4, r3
 80098e8:	2501      	movlt	r5, #1
 80098ea:	2500      	movge	r5, #0
 80098ec:	f7ff fcf6 	bl	80092dc <_Balloc>
 80098f0:	4602      	mov	r2, r0
 80098f2:	b918      	cbnz	r0, 80098fc <__mdiff+0x60>
 80098f4:	4b31      	ldr	r3, [pc, #196]	@ (80099bc <__mdiff+0x120>)
 80098f6:	f240 2145 	movw	r1, #581	@ 0x245
 80098fa:	e7e3      	b.n	80098c4 <__mdiff+0x28>
 80098fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009900:	6926      	ldr	r6, [r4, #16]
 8009902:	60c5      	str	r5, [r0, #12]
 8009904:	f109 0310 	add.w	r3, r9, #16
 8009908:	f109 0514 	add.w	r5, r9, #20
 800990c:	f104 0e14 	add.w	lr, r4, #20
 8009910:	f100 0b14 	add.w	fp, r0, #20
 8009914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	46d9      	mov	r9, fp
 8009920:	f04f 0c00 	mov.w	ip, #0
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800992a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	fa1f f38a 	uxth.w	r3, sl
 8009934:	4619      	mov	r1, r3
 8009936:	b283      	uxth	r3, r0
 8009938:	1acb      	subs	r3, r1, r3
 800993a:	0c00      	lsrs	r0, r0, #16
 800993c:	4463      	add	r3, ip
 800993e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800994c:	4576      	cmp	r6, lr
 800994e:	f849 3b04 	str.w	r3, [r9], #4
 8009952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009956:	d8e5      	bhi.n	8009924 <__mdiff+0x88>
 8009958:	1b33      	subs	r3, r6, r4
 800995a:	3b15      	subs	r3, #21
 800995c:	f023 0303 	bic.w	r3, r3, #3
 8009960:	3415      	adds	r4, #21
 8009962:	3304      	adds	r3, #4
 8009964:	42a6      	cmp	r6, r4
 8009966:	bf38      	it	cc
 8009968:	2304      	movcc	r3, #4
 800996a:	441d      	add	r5, r3
 800996c:	445b      	add	r3, fp
 800996e:	461e      	mov	r6, r3
 8009970:	462c      	mov	r4, r5
 8009972:	4544      	cmp	r4, r8
 8009974:	d30e      	bcc.n	8009994 <__mdiff+0xf8>
 8009976:	f108 0103 	add.w	r1, r8, #3
 800997a:	1b49      	subs	r1, r1, r5
 800997c:	f021 0103 	bic.w	r1, r1, #3
 8009980:	3d03      	subs	r5, #3
 8009982:	45a8      	cmp	r8, r5
 8009984:	bf38      	it	cc
 8009986:	2100      	movcc	r1, #0
 8009988:	440b      	add	r3, r1
 800998a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800998e:	b191      	cbz	r1, 80099b6 <__mdiff+0x11a>
 8009990:	6117      	str	r7, [r2, #16]
 8009992:	e79d      	b.n	80098d0 <__mdiff+0x34>
 8009994:	f854 1b04 	ldr.w	r1, [r4], #4
 8009998:	46e6      	mov	lr, ip
 800999a:	0c08      	lsrs	r0, r1, #16
 800999c:	fa1c fc81 	uxtah	ip, ip, r1
 80099a0:	4471      	add	r1, lr
 80099a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099a6:	b289      	uxth	r1, r1
 80099a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099ac:	f846 1b04 	str.w	r1, [r6], #4
 80099b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099b4:	e7dd      	b.n	8009972 <__mdiff+0xd6>
 80099b6:	3f01      	subs	r7, #1
 80099b8:	e7e7      	b.n	800998a <__mdiff+0xee>
 80099ba:	bf00      	nop
 80099bc:	0800bbc1 	.word	0x0800bbc1
 80099c0:	0800bbd2 	.word	0x0800bbd2

080099c4 <__ulp>:
 80099c4:	b082      	sub	sp, #8
 80099c6:	ed8d 0b00 	vstr	d0, [sp]
 80099ca:	9a01      	ldr	r2, [sp, #4]
 80099cc:	4b0f      	ldr	r3, [pc, #60]	@ (8009a0c <__ulp+0x48>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dc08      	bgt.n	80099ea <__ulp+0x26>
 80099d8:	425b      	negs	r3, r3
 80099da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80099de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099e2:	da04      	bge.n	80099ee <__ulp+0x2a>
 80099e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80099e8:	4113      	asrs	r3, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	e008      	b.n	8009a00 <__ulp+0x3c>
 80099ee:	f1a2 0314 	sub.w	r3, r2, #20
 80099f2:	2b1e      	cmp	r3, #30
 80099f4:	bfda      	itte	le
 80099f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80099fa:	40da      	lsrle	r2, r3
 80099fc:	2201      	movgt	r2, #1
 80099fe:	2300      	movs	r3, #0
 8009a00:	4619      	mov	r1, r3
 8009a02:	4610      	mov	r0, r2
 8009a04:	ec41 0b10 	vmov	d0, r0, r1
 8009a08:	b002      	add	sp, #8
 8009a0a:	4770      	bx	lr
 8009a0c:	7ff00000 	.word	0x7ff00000

08009a10 <__b2d>:
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	6906      	ldr	r6, [r0, #16]
 8009a16:	f100 0814 	add.w	r8, r0, #20
 8009a1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a1e:	1f37      	subs	r7, r6, #4
 8009a20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a24:	4610      	mov	r0, r2
 8009a26:	f7ff fd4b 	bl	80094c0 <__hi0bits>
 8009a2a:	f1c0 0320 	rsb	r3, r0, #32
 8009a2e:	280a      	cmp	r0, #10
 8009a30:	600b      	str	r3, [r1, #0]
 8009a32:	491b      	ldr	r1, [pc, #108]	@ (8009aa0 <__b2d+0x90>)
 8009a34:	dc15      	bgt.n	8009a62 <__b2d+0x52>
 8009a36:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a3e:	45b8      	cmp	r8, r7
 8009a40:	ea43 0501 	orr.w	r5, r3, r1
 8009a44:	bf34      	ite	cc
 8009a46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a4a:	2300      	movcs	r3, #0
 8009a4c:	3015      	adds	r0, #21
 8009a4e:	fa02 f000 	lsl.w	r0, r2, r0
 8009a52:	fa23 f30c 	lsr.w	r3, r3, ip
 8009a56:	4303      	orrs	r3, r0
 8009a58:	461c      	mov	r4, r3
 8009a5a:	ec45 4b10 	vmov	d0, r4, r5
 8009a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a62:	45b8      	cmp	r8, r7
 8009a64:	bf3a      	itte	cc
 8009a66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009a6e:	2300      	movcs	r3, #0
 8009a70:	380b      	subs	r0, #11
 8009a72:	d012      	beq.n	8009a9a <__b2d+0x8a>
 8009a74:	f1c0 0120 	rsb	r1, r0, #32
 8009a78:	fa23 f401 	lsr.w	r4, r3, r1
 8009a7c:	4082      	lsls	r2, r0
 8009a7e:	4322      	orrs	r2, r4
 8009a80:	4547      	cmp	r7, r8
 8009a82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009a86:	bf8c      	ite	hi
 8009a88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009a8c:	2200      	movls	r2, #0
 8009a8e:	4083      	lsls	r3, r0
 8009a90:	40ca      	lsrs	r2, r1
 8009a92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009a96:	4313      	orrs	r3, r2
 8009a98:	e7de      	b.n	8009a58 <__b2d+0x48>
 8009a9a:	ea42 0501 	orr.w	r5, r2, r1
 8009a9e:	e7db      	b.n	8009a58 <__b2d+0x48>
 8009aa0:	3ff00000 	.word	0x3ff00000

08009aa4 <__d2b>:
 8009aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009aa8:	460f      	mov	r7, r1
 8009aaa:	2101      	movs	r1, #1
 8009aac:	ec59 8b10 	vmov	r8, r9, d0
 8009ab0:	4616      	mov	r6, r2
 8009ab2:	f7ff fc13 	bl	80092dc <_Balloc>
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	b930      	cbnz	r0, 8009ac8 <__d2b+0x24>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4b23      	ldr	r3, [pc, #140]	@ (8009b4c <__d2b+0xa8>)
 8009abe:	4824      	ldr	r0, [pc, #144]	@ (8009b50 <__d2b+0xac>)
 8009ac0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ac4:	f001 f988 	bl	800add8 <__assert_func>
 8009ac8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009acc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ad0:	b10d      	cbz	r5, 8009ad6 <__d2b+0x32>
 8009ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	f1b8 0300 	subs.w	r3, r8, #0
 8009adc:	d023      	beq.n	8009b26 <__d2b+0x82>
 8009ade:	4668      	mov	r0, sp
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	f7ff fd0c 	bl	80094fe <__lo0bits>
 8009ae6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009aea:	b1d0      	cbz	r0, 8009b22 <__d2b+0x7e>
 8009aec:	f1c0 0320 	rsb	r3, r0, #32
 8009af0:	fa02 f303 	lsl.w	r3, r2, r3
 8009af4:	430b      	orrs	r3, r1
 8009af6:	40c2      	lsrs	r2, r0
 8009af8:	6163      	str	r3, [r4, #20]
 8009afa:	9201      	str	r2, [sp, #4]
 8009afc:	9b01      	ldr	r3, [sp, #4]
 8009afe:	61a3      	str	r3, [r4, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bf0c      	ite	eq
 8009b04:	2201      	moveq	r2, #1
 8009b06:	2202      	movne	r2, #2
 8009b08:	6122      	str	r2, [r4, #16]
 8009b0a:	b1a5      	cbz	r5, 8009b36 <__d2b+0x92>
 8009b0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b10:	4405      	add	r5, r0
 8009b12:	603d      	str	r5, [r7, #0]
 8009b14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b18:	6030      	str	r0, [r6, #0]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	b003      	add	sp, #12
 8009b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b22:	6161      	str	r1, [r4, #20]
 8009b24:	e7ea      	b.n	8009afc <__d2b+0x58>
 8009b26:	a801      	add	r0, sp, #4
 8009b28:	f7ff fce9 	bl	80094fe <__lo0bits>
 8009b2c:	9b01      	ldr	r3, [sp, #4]
 8009b2e:	6163      	str	r3, [r4, #20]
 8009b30:	3020      	adds	r0, #32
 8009b32:	2201      	movs	r2, #1
 8009b34:	e7e8      	b.n	8009b08 <__d2b+0x64>
 8009b36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b3e:	6038      	str	r0, [r7, #0]
 8009b40:	6918      	ldr	r0, [r3, #16]
 8009b42:	f7ff fcbd 	bl	80094c0 <__hi0bits>
 8009b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b4a:	e7e5      	b.n	8009b18 <__d2b+0x74>
 8009b4c:	0800bbc1 	.word	0x0800bbc1
 8009b50:	0800bbd2 	.word	0x0800bbd2

08009b54 <__ratio>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	e9cd 1000 	strd	r1, r0, [sp]
 8009b5e:	a902      	add	r1, sp, #8
 8009b60:	f7ff ff56 	bl	8009a10 <__b2d>
 8009b64:	9800      	ldr	r0, [sp, #0]
 8009b66:	a903      	add	r1, sp, #12
 8009b68:	ec55 4b10 	vmov	r4, r5, d0
 8009b6c:	f7ff ff50 	bl	8009a10 <__b2d>
 8009b70:	9b01      	ldr	r3, [sp, #4]
 8009b72:	6919      	ldr	r1, [r3, #16]
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	1ac9      	subs	r1, r1, r3
 8009b7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	ec5b ab10 	vmov	sl, fp, d0
 8009b84:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfce      	itee	gt
 8009b8c:	462a      	movgt	r2, r5
 8009b8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b92:	465a      	movle	r2, fp
 8009b94:	462f      	mov	r7, r5
 8009b96:	46d9      	mov	r9, fp
 8009b98:	bfcc      	ite	gt
 8009b9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b9e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	4652      	mov	r2, sl
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fe5f 	bl	800086c <__aeabi_ddiv>
 8009bae:	ec41 0b10 	vmov	d0, r0, r1
 8009bb2:	b005      	add	sp, #20
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bb8 <__copybits>:
 8009bb8:	3901      	subs	r1, #1
 8009bba:	b570      	push	{r4, r5, r6, lr}
 8009bbc:	1149      	asrs	r1, r1, #5
 8009bbe:	6914      	ldr	r4, [r2, #16]
 8009bc0:	3101      	adds	r1, #1
 8009bc2:	f102 0314 	add.w	r3, r2, #20
 8009bc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bce:	1f05      	subs	r5, r0, #4
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	d30c      	bcc.n	8009bee <__copybits+0x36>
 8009bd4:	1aa3      	subs	r3, r4, r2
 8009bd6:	3b11      	subs	r3, #17
 8009bd8:	f023 0303 	bic.w	r3, r3, #3
 8009bdc:	3211      	adds	r2, #17
 8009bde:	42a2      	cmp	r2, r4
 8009be0:	bf88      	it	hi
 8009be2:	2300      	movhi	r3, #0
 8009be4:	4418      	add	r0, r3
 8009be6:	2300      	movs	r3, #0
 8009be8:	4288      	cmp	r0, r1
 8009bea:	d305      	bcc.n	8009bf8 <__copybits+0x40>
 8009bec:	bd70      	pop	{r4, r5, r6, pc}
 8009bee:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bf2:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bf6:	e7eb      	b.n	8009bd0 <__copybits+0x18>
 8009bf8:	f840 3b04 	str.w	r3, [r0], #4
 8009bfc:	e7f4      	b.n	8009be8 <__copybits+0x30>

08009bfe <__any_on>:
 8009bfe:	f100 0214 	add.w	r2, r0, #20
 8009c02:	6900      	ldr	r0, [r0, #16]
 8009c04:	114b      	asrs	r3, r1, #5
 8009c06:	4298      	cmp	r0, r3
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	db11      	blt.n	8009c30 <__any_on+0x32>
 8009c0c:	dd0a      	ble.n	8009c24 <__any_on+0x26>
 8009c0e:	f011 011f 	ands.w	r1, r1, #31
 8009c12:	d007      	beq.n	8009c24 <__any_on+0x26>
 8009c14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c18:	fa24 f001 	lsr.w	r0, r4, r1
 8009c1c:	fa00 f101 	lsl.w	r1, r0, r1
 8009c20:	428c      	cmp	r4, r1
 8009c22:	d10b      	bne.n	8009c3c <__any_on+0x3e>
 8009c24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d803      	bhi.n	8009c34 <__any_on+0x36>
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	4603      	mov	r3, r0
 8009c32:	e7f7      	b.n	8009c24 <__any_on+0x26>
 8009c34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	d0f5      	beq.n	8009c28 <__any_on+0x2a>
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	e7f6      	b.n	8009c2e <__any_on+0x30>

08009c40 <sulp>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	4604      	mov	r4, r0
 8009c44:	460d      	mov	r5, r1
 8009c46:	ec45 4b10 	vmov	d0, r4, r5
 8009c4a:	4616      	mov	r6, r2
 8009c4c:	f7ff feba 	bl	80099c4 <__ulp>
 8009c50:	ec51 0b10 	vmov	r0, r1, d0
 8009c54:	b17e      	cbz	r6, 8009c76 <sulp+0x36>
 8009c56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	dd09      	ble.n	8009c76 <sulp+0x36>
 8009c62:	051b      	lsls	r3, r3, #20
 8009c64:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009c68:	2400      	movs	r4, #0
 8009c6a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009c6e:	4622      	mov	r2, r4
 8009c70:	462b      	mov	r3, r5
 8009c72:	f7f6 fcd1 	bl	8000618 <__aeabi_dmul>
 8009c76:	ec41 0b10 	vmov	d0, r0, r1
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
 8009c7c:	0000      	movs	r0, r0
	...

08009c80 <_strtod_l>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	b09f      	sub	sp, #124	@ 0x7c
 8009c86:	460c      	mov	r4, r1
 8009c88:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009c8e:	9005      	str	r0, [sp, #20]
 8009c90:	f04f 0a00 	mov.w	sl, #0
 8009c94:	f04f 0b00 	mov.w	fp, #0
 8009c98:	460a      	mov	r2, r1
 8009c9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c9c:	7811      	ldrb	r1, [r2, #0]
 8009c9e:	292b      	cmp	r1, #43	@ 0x2b
 8009ca0:	d04a      	beq.n	8009d38 <_strtod_l+0xb8>
 8009ca2:	d838      	bhi.n	8009d16 <_strtod_l+0x96>
 8009ca4:	290d      	cmp	r1, #13
 8009ca6:	d832      	bhi.n	8009d0e <_strtod_l+0x8e>
 8009ca8:	2908      	cmp	r1, #8
 8009caa:	d832      	bhi.n	8009d12 <_strtod_l+0x92>
 8009cac:	2900      	cmp	r1, #0
 8009cae:	d03b      	beq.n	8009d28 <_strtod_l+0xa8>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009cb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009cb6:	782a      	ldrb	r2, [r5, #0]
 8009cb8:	2a30      	cmp	r2, #48	@ 0x30
 8009cba:	f040 80b3 	bne.w	8009e24 <_strtod_l+0x1a4>
 8009cbe:	786a      	ldrb	r2, [r5, #1]
 8009cc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cc4:	2a58      	cmp	r2, #88	@ 0x58
 8009cc6:	d16e      	bne.n	8009da6 <_strtod_l+0x126>
 8009cc8:	9302      	str	r3, [sp, #8]
 8009cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	ab1a      	add	r3, sp, #104	@ 0x68
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4a8e      	ldr	r2, [pc, #568]	@ (8009f0c <_strtod_l+0x28c>)
 8009cd4:	9805      	ldr	r0, [sp, #20]
 8009cd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009cd8:	a919      	add	r1, sp, #100	@ 0x64
 8009cda:	f001 f903 	bl	800aee4 <__gethex>
 8009cde:	f010 060f 	ands.w	r6, r0, #15
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	d005      	beq.n	8009cf2 <_strtod_l+0x72>
 8009ce6:	2e06      	cmp	r6, #6
 8009ce8:	d128      	bne.n	8009d3c <_strtod_l+0xbc>
 8009cea:	3501      	adds	r5, #1
 8009cec:	2300      	movs	r3, #0
 8009cee:	9519      	str	r5, [sp, #100]	@ 0x64
 8009cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 858e 	bne.w	800a816 <_strtod_l+0xb96>
 8009cfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cfc:	b1cb      	cbz	r3, 8009d32 <_strtod_l+0xb2>
 8009cfe:	4652      	mov	r2, sl
 8009d00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d04:	ec43 2b10 	vmov	d0, r2, r3
 8009d08:	b01f      	add	sp, #124	@ 0x7c
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	2920      	cmp	r1, #32
 8009d10:	d1ce      	bne.n	8009cb0 <_strtod_l+0x30>
 8009d12:	3201      	adds	r2, #1
 8009d14:	e7c1      	b.n	8009c9a <_strtod_l+0x1a>
 8009d16:	292d      	cmp	r1, #45	@ 0x2d
 8009d18:	d1ca      	bne.n	8009cb0 <_strtod_l+0x30>
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009d1e:	1c51      	adds	r1, r2, #1
 8009d20:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d22:	7852      	ldrb	r2, [r2, #1]
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	d1c5      	bne.n	8009cb4 <_strtod_l+0x34>
 8009d28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 8570 	bne.w	800a812 <_strtod_l+0xb92>
 8009d32:	4652      	mov	r2, sl
 8009d34:	465b      	mov	r3, fp
 8009d36:	e7e5      	b.n	8009d04 <_strtod_l+0x84>
 8009d38:	2100      	movs	r1, #0
 8009d3a:	e7ef      	b.n	8009d1c <_strtod_l+0x9c>
 8009d3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d3e:	b13a      	cbz	r2, 8009d50 <_strtod_l+0xd0>
 8009d40:	2135      	movs	r1, #53	@ 0x35
 8009d42:	a81c      	add	r0, sp, #112	@ 0x70
 8009d44:	f7ff ff38 	bl	8009bb8 <__copybits>
 8009d48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d4a:	9805      	ldr	r0, [sp, #20]
 8009d4c:	f7ff fb06 	bl	800935c <_Bfree>
 8009d50:	3e01      	subs	r6, #1
 8009d52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009d54:	2e04      	cmp	r6, #4
 8009d56:	d806      	bhi.n	8009d66 <_strtod_l+0xe6>
 8009d58:	e8df f006 	tbb	[pc, r6]
 8009d5c:	201d0314 	.word	0x201d0314
 8009d60:	14          	.byte	0x14
 8009d61:	00          	.byte	0x00
 8009d62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009d66:	05e1      	lsls	r1, r4, #23
 8009d68:	bf48      	it	mi
 8009d6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009d6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d72:	0d1b      	lsrs	r3, r3, #20
 8009d74:	051b      	lsls	r3, r3, #20
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1bb      	bne.n	8009cf2 <_strtod_l+0x72>
 8009d7a:	f7fe fbe5 	bl	8008548 <__errno>
 8009d7e:	2322      	movs	r3, #34	@ 0x22
 8009d80:	6003      	str	r3, [r0, #0]
 8009d82:	e7b6      	b.n	8009cf2 <_strtod_l+0x72>
 8009d84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009d88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009d94:	e7e7      	b.n	8009d66 <_strtod_l+0xe6>
 8009d96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009f14 <_strtod_l+0x294>
 8009d9a:	e7e4      	b.n	8009d66 <_strtod_l+0xe6>
 8009d9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009da0:	f04f 3aff 	mov.w	sl, #4294967295
 8009da4:	e7df      	b.n	8009d66 <_strtod_l+0xe6>
 8009da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	2b30      	cmp	r3, #48	@ 0x30
 8009db0:	d0f9      	beq.n	8009da6 <_strtod_l+0x126>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d09d      	beq.n	8009cf2 <_strtod_l+0x72>
 8009db6:	2301      	movs	r3, #1
 8009db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc4:	461f      	mov	r7, r3
 8009dc6:	220a      	movs	r2, #10
 8009dc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009dca:	7805      	ldrb	r5, [r0, #0]
 8009dcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009dd0:	b2d9      	uxtb	r1, r3
 8009dd2:	2909      	cmp	r1, #9
 8009dd4:	d928      	bls.n	8009e28 <_strtod_l+0x1a8>
 8009dd6:	494e      	ldr	r1, [pc, #312]	@ (8009f10 <_strtod_l+0x290>)
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f000 ffd5 	bl	800ad88 <strncmp>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d032      	beq.n	8009e48 <_strtod_l+0x1c8>
 8009de2:	2000      	movs	r0, #0
 8009de4:	462a      	mov	r2, r5
 8009de6:	4681      	mov	r9, r0
 8009de8:	463d      	mov	r5, r7
 8009dea:	4603      	mov	r3, r0
 8009dec:	2a65      	cmp	r2, #101	@ 0x65
 8009dee:	d001      	beq.n	8009df4 <_strtod_l+0x174>
 8009df0:	2a45      	cmp	r2, #69	@ 0x45
 8009df2:	d114      	bne.n	8009e1e <_strtod_l+0x19e>
 8009df4:	b91d      	cbnz	r5, 8009dfe <_strtod_l+0x17e>
 8009df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df8:	4302      	orrs	r2, r0
 8009dfa:	d095      	beq.n	8009d28 <_strtod_l+0xa8>
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009e00:	1c62      	adds	r2, r4, #1
 8009e02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e04:	7862      	ldrb	r2, [r4, #1]
 8009e06:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e08:	d077      	beq.n	8009efa <_strtod_l+0x27a>
 8009e0a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009e0c:	d07b      	beq.n	8009f06 <_strtod_l+0x286>
 8009e0e:	f04f 0c00 	mov.w	ip, #0
 8009e12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009e16:	2909      	cmp	r1, #9
 8009e18:	f240 8082 	bls.w	8009f20 <_strtod_l+0x2a0>
 8009e1c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e1e:	f04f 0800 	mov.w	r8, #0
 8009e22:	e0a2      	b.n	8009f6a <_strtod_l+0x2ea>
 8009e24:	2300      	movs	r3, #0
 8009e26:	e7c7      	b.n	8009db8 <_strtod_l+0x138>
 8009e28:	2f08      	cmp	r7, #8
 8009e2a:	bfd5      	itete	le
 8009e2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009e2e:	9908      	ldrgt	r1, [sp, #32]
 8009e30:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e34:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009e38:	f100 0001 	add.w	r0, r0, #1
 8009e3c:	bfd4      	ite	le
 8009e3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009e40:	9308      	strgt	r3, [sp, #32]
 8009e42:	3701      	adds	r7, #1
 8009e44:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e46:	e7bf      	b.n	8009dc8 <_strtod_l+0x148>
 8009e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e4e:	785a      	ldrb	r2, [r3, #1]
 8009e50:	b37f      	cbz	r7, 8009eb2 <_strtod_l+0x232>
 8009e52:	4681      	mov	r9, r0
 8009e54:	463d      	mov	r5, r7
 8009e56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009e5a:	2b09      	cmp	r3, #9
 8009e5c:	d912      	bls.n	8009e84 <_strtod_l+0x204>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e7c4      	b.n	8009dec <_strtod_l+0x16c>
 8009e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e68:	785a      	ldrb	r2, [r3, #1]
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	2a30      	cmp	r2, #48	@ 0x30
 8009e6e:	d0f8      	beq.n	8009e62 <_strtod_l+0x1e2>
 8009e70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	f200 84d3 	bhi.w	800a820 <_strtod_l+0xba0>
 8009e7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e7e:	4681      	mov	r9, r0
 8009e80:	2000      	movs	r0, #0
 8009e82:	4605      	mov	r5, r0
 8009e84:	3a30      	subs	r2, #48	@ 0x30
 8009e86:	f100 0301 	add.w	r3, r0, #1
 8009e8a:	d02a      	beq.n	8009ee2 <_strtod_l+0x262>
 8009e8c:	4499      	add	r9, r3
 8009e8e:	eb00 0c05 	add.w	ip, r0, r5
 8009e92:	462b      	mov	r3, r5
 8009e94:	210a      	movs	r1, #10
 8009e96:	4563      	cmp	r3, ip
 8009e98:	d10d      	bne.n	8009eb6 <_strtod_l+0x236>
 8009e9a:	1c69      	adds	r1, r5, #1
 8009e9c:	4401      	add	r1, r0
 8009e9e:	4428      	add	r0, r5
 8009ea0:	2808      	cmp	r0, #8
 8009ea2:	dc16      	bgt.n	8009ed2 <_strtod_l+0x252>
 8009ea4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ea6:	230a      	movs	r3, #10
 8009ea8:	fb03 2300 	mla	r3, r3, r0, r2
 8009eac:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e018      	b.n	8009ee4 <_strtod_l+0x264>
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	e7da      	b.n	8009e6c <_strtod_l+0x1ec>
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	f103 0301 	add.w	r3, r3, #1
 8009ebc:	dc03      	bgt.n	8009ec6 <_strtod_l+0x246>
 8009ebe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009ec0:	434e      	muls	r6, r1
 8009ec2:	960a      	str	r6, [sp, #40]	@ 0x28
 8009ec4:	e7e7      	b.n	8009e96 <_strtod_l+0x216>
 8009ec6:	2b10      	cmp	r3, #16
 8009ec8:	bfde      	ittt	le
 8009eca:	9e08      	ldrle	r6, [sp, #32]
 8009ecc:	434e      	mulle	r6, r1
 8009ece:	9608      	strle	r6, [sp, #32]
 8009ed0:	e7e1      	b.n	8009e96 <_strtod_l+0x216>
 8009ed2:	280f      	cmp	r0, #15
 8009ed4:	dceb      	bgt.n	8009eae <_strtod_l+0x22e>
 8009ed6:	9808      	ldr	r0, [sp, #32]
 8009ed8:	230a      	movs	r3, #10
 8009eda:	fb03 2300 	mla	r3, r3, r0, r2
 8009ede:	9308      	str	r3, [sp, #32]
 8009ee0:	e7e5      	b.n	8009eae <_strtod_l+0x22e>
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ee6:	1c50      	adds	r0, r2, #1
 8009ee8:	9019      	str	r0, [sp, #100]	@ 0x64
 8009eea:	7852      	ldrb	r2, [r2, #1]
 8009eec:	4618      	mov	r0, r3
 8009eee:	460d      	mov	r5, r1
 8009ef0:	e7b1      	b.n	8009e56 <_strtod_l+0x1d6>
 8009ef2:	f04f 0900 	mov.w	r9, #0
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e77d      	b.n	8009df6 <_strtod_l+0x176>
 8009efa:	f04f 0c00 	mov.w	ip, #0
 8009efe:	1ca2      	adds	r2, r4, #2
 8009f00:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f02:	78a2      	ldrb	r2, [r4, #2]
 8009f04:	e785      	b.n	8009e12 <_strtod_l+0x192>
 8009f06:	f04f 0c01 	mov.w	ip, #1
 8009f0a:	e7f8      	b.n	8009efe <_strtod_l+0x27e>
 8009f0c:	0800bd40 	.word	0x0800bd40
 8009f10:	0800bd28 	.word	0x0800bd28
 8009f14:	7ff00000 	.word	0x7ff00000
 8009f18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f1a:	1c51      	adds	r1, r2, #1
 8009f1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f1e:	7852      	ldrb	r2, [r2, #1]
 8009f20:	2a30      	cmp	r2, #48	@ 0x30
 8009f22:	d0f9      	beq.n	8009f18 <_strtod_l+0x298>
 8009f24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009f28:	2908      	cmp	r1, #8
 8009f2a:	f63f af78 	bhi.w	8009e1e <_strtod_l+0x19e>
 8009f2e:	3a30      	subs	r2, #48	@ 0x30
 8009f30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f34:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f36:	f04f 080a 	mov.w	r8, #10
 8009f3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f3c:	1c56      	adds	r6, r2, #1
 8009f3e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009f40:	7852      	ldrb	r2, [r2, #1]
 8009f42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009f46:	f1be 0f09 	cmp.w	lr, #9
 8009f4a:	d939      	bls.n	8009fc0 <_strtod_l+0x340>
 8009f4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f4e:	1a76      	subs	r6, r6, r1
 8009f50:	2e08      	cmp	r6, #8
 8009f52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009f56:	dc03      	bgt.n	8009f60 <_strtod_l+0x2e0>
 8009f58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009f5a:	4588      	cmp	r8, r1
 8009f5c:	bfa8      	it	ge
 8009f5e:	4688      	movge	r8, r1
 8009f60:	f1bc 0f00 	cmp.w	ip, #0
 8009f64:	d001      	beq.n	8009f6a <_strtod_l+0x2ea>
 8009f66:	f1c8 0800 	rsb	r8, r8, #0
 8009f6a:	2d00      	cmp	r5, #0
 8009f6c:	d14e      	bne.n	800a00c <_strtod_l+0x38c>
 8009f6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f70:	4308      	orrs	r0, r1
 8009f72:	f47f aebe 	bne.w	8009cf2 <_strtod_l+0x72>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f47f aed6 	bne.w	8009d28 <_strtod_l+0xa8>
 8009f7c:	2a69      	cmp	r2, #105	@ 0x69
 8009f7e:	d028      	beq.n	8009fd2 <_strtod_l+0x352>
 8009f80:	dc25      	bgt.n	8009fce <_strtod_l+0x34e>
 8009f82:	2a49      	cmp	r2, #73	@ 0x49
 8009f84:	d025      	beq.n	8009fd2 <_strtod_l+0x352>
 8009f86:	2a4e      	cmp	r2, #78	@ 0x4e
 8009f88:	f47f aece 	bne.w	8009d28 <_strtod_l+0xa8>
 8009f8c:	499b      	ldr	r1, [pc, #620]	@ (800a1fc <_strtod_l+0x57c>)
 8009f8e:	a819      	add	r0, sp, #100	@ 0x64
 8009f90:	f001 f9ca 	bl	800b328 <__match>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f43f aec7 	beq.w	8009d28 <_strtod_l+0xa8>
 8009f9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b28      	cmp	r3, #40	@ 0x28
 8009fa0:	d12e      	bne.n	800a000 <_strtod_l+0x380>
 8009fa2:	4997      	ldr	r1, [pc, #604]	@ (800a200 <_strtod_l+0x580>)
 8009fa4:	aa1c      	add	r2, sp, #112	@ 0x70
 8009fa6:	a819      	add	r0, sp, #100	@ 0x64
 8009fa8:	f001 f9d2 	bl	800b350 <__hexnan>
 8009fac:	2805      	cmp	r0, #5
 8009fae:	d127      	bne.n	800a000 <_strtod_l+0x380>
 8009fb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009fb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009fba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009fbe:	e698      	b.n	8009cf2 <_strtod_l+0x72>
 8009fc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009fc2:	fb08 2101 	mla	r1, r8, r1, r2
 8009fc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009fca:	920e      	str	r2, [sp, #56]	@ 0x38
 8009fcc:	e7b5      	b.n	8009f3a <_strtod_l+0x2ba>
 8009fce:	2a6e      	cmp	r2, #110	@ 0x6e
 8009fd0:	e7da      	b.n	8009f88 <_strtod_l+0x308>
 8009fd2:	498c      	ldr	r1, [pc, #560]	@ (800a204 <_strtod_l+0x584>)
 8009fd4:	a819      	add	r0, sp, #100	@ 0x64
 8009fd6:	f001 f9a7 	bl	800b328 <__match>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	f43f aea4 	beq.w	8009d28 <_strtod_l+0xa8>
 8009fe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fe2:	4989      	ldr	r1, [pc, #548]	@ (800a208 <_strtod_l+0x588>)
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	a819      	add	r0, sp, #100	@ 0x64
 8009fe8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009fea:	f001 f99d 	bl	800b328 <__match>
 8009fee:	b910      	cbnz	r0, 8009ff6 <_strtod_l+0x376>
 8009ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ff6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a218 <_strtod_l+0x598>
 8009ffa:	f04f 0a00 	mov.w	sl, #0
 8009ffe:	e678      	b.n	8009cf2 <_strtod_l+0x72>
 800a000:	4882      	ldr	r0, [pc, #520]	@ (800a20c <_strtod_l+0x58c>)
 800a002:	f000 fee1 	bl	800adc8 <nan>
 800a006:	ec5b ab10 	vmov	sl, fp, d0
 800a00a:	e672      	b.n	8009cf2 <_strtod_l+0x72>
 800a00c:	eba8 0309 	sub.w	r3, r8, r9
 800a010:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a012:	9309      	str	r3, [sp, #36]	@ 0x24
 800a014:	2f00      	cmp	r7, #0
 800a016:	bf08      	it	eq
 800a018:	462f      	moveq	r7, r5
 800a01a:	2d10      	cmp	r5, #16
 800a01c:	462c      	mov	r4, r5
 800a01e:	bfa8      	it	ge
 800a020:	2410      	movge	r4, #16
 800a022:	f7f6 fa7f 	bl	8000524 <__aeabi_ui2d>
 800a026:	2d09      	cmp	r5, #9
 800a028:	4682      	mov	sl, r0
 800a02a:	468b      	mov	fp, r1
 800a02c:	dc13      	bgt.n	800a056 <_strtod_l+0x3d6>
 800a02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	f43f ae5e 	beq.w	8009cf2 <_strtod_l+0x72>
 800a036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a038:	dd78      	ble.n	800a12c <_strtod_l+0x4ac>
 800a03a:	2b16      	cmp	r3, #22
 800a03c:	dc5f      	bgt.n	800a0fe <_strtod_l+0x47e>
 800a03e:	4974      	ldr	r1, [pc, #464]	@ (800a210 <_strtod_l+0x590>)
 800a040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a048:	4652      	mov	r2, sl
 800a04a:	465b      	mov	r3, fp
 800a04c:	f7f6 fae4 	bl	8000618 <__aeabi_dmul>
 800a050:	4682      	mov	sl, r0
 800a052:	468b      	mov	fp, r1
 800a054:	e64d      	b.n	8009cf2 <_strtod_l+0x72>
 800a056:	4b6e      	ldr	r3, [pc, #440]	@ (800a210 <_strtod_l+0x590>)
 800a058:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a05c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a060:	f7f6 fada 	bl	8000618 <__aeabi_dmul>
 800a064:	4682      	mov	sl, r0
 800a066:	9808      	ldr	r0, [sp, #32]
 800a068:	468b      	mov	fp, r1
 800a06a:	f7f6 fa5b 	bl	8000524 <__aeabi_ui2d>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4650      	mov	r0, sl
 800a074:	4659      	mov	r1, fp
 800a076:	f7f6 f919 	bl	80002ac <__adddf3>
 800a07a:	2d0f      	cmp	r5, #15
 800a07c:	4682      	mov	sl, r0
 800a07e:	468b      	mov	fp, r1
 800a080:	ddd5      	ble.n	800a02e <_strtod_l+0x3ae>
 800a082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a084:	1b2c      	subs	r4, r5, r4
 800a086:	441c      	add	r4, r3
 800a088:	2c00      	cmp	r4, #0
 800a08a:	f340 8096 	ble.w	800a1ba <_strtod_l+0x53a>
 800a08e:	f014 030f 	ands.w	r3, r4, #15
 800a092:	d00a      	beq.n	800a0aa <_strtod_l+0x42a>
 800a094:	495e      	ldr	r1, [pc, #376]	@ (800a210 <_strtod_l+0x590>)
 800a096:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a09a:	4652      	mov	r2, sl
 800a09c:	465b      	mov	r3, fp
 800a09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a2:	f7f6 fab9 	bl	8000618 <__aeabi_dmul>
 800a0a6:	4682      	mov	sl, r0
 800a0a8:	468b      	mov	fp, r1
 800a0aa:	f034 040f 	bics.w	r4, r4, #15
 800a0ae:	d073      	beq.n	800a198 <_strtod_l+0x518>
 800a0b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a0b4:	dd48      	ble.n	800a148 <_strtod_l+0x4c8>
 800a0b6:	2400      	movs	r4, #0
 800a0b8:	46a0      	mov	r8, r4
 800a0ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800a0bc:	46a1      	mov	r9, r4
 800a0be:	9a05      	ldr	r2, [sp, #20]
 800a0c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a218 <_strtod_l+0x598>
 800a0c4:	2322      	movs	r3, #34	@ 0x22
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	f04f 0a00 	mov.w	sl, #0
 800a0cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f43f ae0f 	beq.w	8009cf2 <_strtod_l+0x72>
 800a0d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0d6:	9805      	ldr	r0, [sp, #20]
 800a0d8:	f7ff f940 	bl	800935c <_Bfree>
 800a0dc:	9805      	ldr	r0, [sp, #20]
 800a0de:	4649      	mov	r1, r9
 800a0e0:	f7ff f93c 	bl	800935c <_Bfree>
 800a0e4:	9805      	ldr	r0, [sp, #20]
 800a0e6:	4641      	mov	r1, r8
 800a0e8:	f7ff f938 	bl	800935c <_Bfree>
 800a0ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a0ee:	9805      	ldr	r0, [sp, #20]
 800a0f0:	f7ff f934 	bl	800935c <_Bfree>
 800a0f4:	9805      	ldr	r0, [sp, #20]
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	f7ff f930 	bl	800935c <_Bfree>
 800a0fc:	e5f9      	b.n	8009cf2 <_strtod_l+0x72>
 800a0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a100:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a104:	4293      	cmp	r3, r2
 800a106:	dbbc      	blt.n	800a082 <_strtod_l+0x402>
 800a108:	4c41      	ldr	r4, [pc, #260]	@ (800a210 <_strtod_l+0x590>)
 800a10a:	f1c5 050f 	rsb	r5, r5, #15
 800a10e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a112:	4652      	mov	r2, sl
 800a114:	465b      	mov	r3, fp
 800a116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a11a:	f7f6 fa7d 	bl	8000618 <__aeabi_dmul>
 800a11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a120:	1b5d      	subs	r5, r3, r5
 800a122:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a126:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a12a:	e78f      	b.n	800a04c <_strtod_l+0x3cc>
 800a12c:	3316      	adds	r3, #22
 800a12e:	dba8      	blt.n	800a082 <_strtod_l+0x402>
 800a130:	4b37      	ldr	r3, [pc, #220]	@ (800a210 <_strtod_l+0x590>)
 800a132:	eba9 0808 	sub.w	r8, r9, r8
 800a136:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a13a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a13e:	4650      	mov	r0, sl
 800a140:	4659      	mov	r1, fp
 800a142:	f7f6 fb93 	bl	800086c <__aeabi_ddiv>
 800a146:	e783      	b.n	800a050 <_strtod_l+0x3d0>
 800a148:	4b32      	ldr	r3, [pc, #200]	@ (800a214 <_strtod_l+0x594>)
 800a14a:	9308      	str	r3, [sp, #32]
 800a14c:	2300      	movs	r3, #0
 800a14e:	1124      	asrs	r4, r4, #4
 800a150:	4650      	mov	r0, sl
 800a152:	4659      	mov	r1, fp
 800a154:	461e      	mov	r6, r3
 800a156:	2c01      	cmp	r4, #1
 800a158:	dc21      	bgt.n	800a19e <_strtod_l+0x51e>
 800a15a:	b10b      	cbz	r3, 800a160 <_strtod_l+0x4e0>
 800a15c:	4682      	mov	sl, r0
 800a15e:	468b      	mov	fp, r1
 800a160:	492c      	ldr	r1, [pc, #176]	@ (800a214 <_strtod_l+0x594>)
 800a162:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a166:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a16a:	4652      	mov	r2, sl
 800a16c:	465b      	mov	r3, fp
 800a16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a172:	f7f6 fa51 	bl	8000618 <__aeabi_dmul>
 800a176:	4b28      	ldr	r3, [pc, #160]	@ (800a218 <_strtod_l+0x598>)
 800a178:	460a      	mov	r2, r1
 800a17a:	400b      	ands	r3, r1
 800a17c:	4927      	ldr	r1, [pc, #156]	@ (800a21c <_strtod_l+0x59c>)
 800a17e:	428b      	cmp	r3, r1
 800a180:	4682      	mov	sl, r0
 800a182:	d898      	bhi.n	800a0b6 <_strtod_l+0x436>
 800a184:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a188:	428b      	cmp	r3, r1
 800a18a:	bf86      	itte	hi
 800a18c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a220 <_strtod_l+0x5a0>
 800a190:	f04f 3aff 	movhi.w	sl, #4294967295
 800a194:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a198:	2300      	movs	r3, #0
 800a19a:	9308      	str	r3, [sp, #32]
 800a19c:	e07a      	b.n	800a294 <_strtod_l+0x614>
 800a19e:	07e2      	lsls	r2, r4, #31
 800a1a0:	d505      	bpl.n	800a1ae <_strtod_l+0x52e>
 800a1a2:	9b08      	ldr	r3, [sp, #32]
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f7f6 fa36 	bl	8000618 <__aeabi_dmul>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	9a08      	ldr	r2, [sp, #32]
 800a1b0:	3208      	adds	r2, #8
 800a1b2:	3601      	adds	r6, #1
 800a1b4:	1064      	asrs	r4, r4, #1
 800a1b6:	9208      	str	r2, [sp, #32]
 800a1b8:	e7cd      	b.n	800a156 <_strtod_l+0x4d6>
 800a1ba:	d0ed      	beq.n	800a198 <_strtod_l+0x518>
 800a1bc:	4264      	negs	r4, r4
 800a1be:	f014 020f 	ands.w	r2, r4, #15
 800a1c2:	d00a      	beq.n	800a1da <_strtod_l+0x55a>
 800a1c4:	4b12      	ldr	r3, [pc, #72]	@ (800a210 <_strtod_l+0x590>)
 800a1c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	4659      	mov	r1, fp
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f7f6 fb4b 	bl	800086c <__aeabi_ddiv>
 800a1d6:	4682      	mov	sl, r0
 800a1d8:	468b      	mov	fp, r1
 800a1da:	1124      	asrs	r4, r4, #4
 800a1dc:	d0dc      	beq.n	800a198 <_strtod_l+0x518>
 800a1de:	2c1f      	cmp	r4, #31
 800a1e0:	dd20      	ble.n	800a224 <_strtod_l+0x5a4>
 800a1e2:	2400      	movs	r4, #0
 800a1e4:	46a0      	mov	r8, r4
 800a1e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a1e8:	46a1      	mov	r9, r4
 800a1ea:	9a05      	ldr	r2, [sp, #20]
 800a1ec:	2322      	movs	r3, #34	@ 0x22
 800a1ee:	f04f 0a00 	mov.w	sl, #0
 800a1f2:	f04f 0b00 	mov.w	fp, #0
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	e768      	b.n	800a0cc <_strtod_l+0x44c>
 800a1fa:	bf00      	nop
 800a1fc:	0800bb19 	.word	0x0800bb19
 800a200:	0800bd2c 	.word	0x0800bd2c
 800a204:	0800bb11 	.word	0x0800bb11
 800a208:	0800bb48 	.word	0x0800bb48
 800a20c:	0800bed5 	.word	0x0800bed5
 800a210:	0800bc60 	.word	0x0800bc60
 800a214:	0800bc38 	.word	0x0800bc38
 800a218:	7ff00000 	.word	0x7ff00000
 800a21c:	7ca00000 	.word	0x7ca00000
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	f014 0310 	ands.w	r3, r4, #16
 800a228:	bf18      	it	ne
 800a22a:	236a      	movne	r3, #106	@ 0x6a
 800a22c:	4ea9      	ldr	r6, [pc, #676]	@ (800a4d4 <_strtod_l+0x854>)
 800a22e:	9308      	str	r3, [sp, #32]
 800a230:	4650      	mov	r0, sl
 800a232:	4659      	mov	r1, fp
 800a234:	2300      	movs	r3, #0
 800a236:	07e2      	lsls	r2, r4, #31
 800a238:	d504      	bpl.n	800a244 <_strtod_l+0x5c4>
 800a23a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a23e:	f7f6 f9eb 	bl	8000618 <__aeabi_dmul>
 800a242:	2301      	movs	r3, #1
 800a244:	1064      	asrs	r4, r4, #1
 800a246:	f106 0608 	add.w	r6, r6, #8
 800a24a:	d1f4      	bne.n	800a236 <_strtod_l+0x5b6>
 800a24c:	b10b      	cbz	r3, 800a252 <_strtod_l+0x5d2>
 800a24e:	4682      	mov	sl, r0
 800a250:	468b      	mov	fp, r1
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	b1b3      	cbz	r3, 800a284 <_strtod_l+0x604>
 800a256:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a25a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a25e:	2b00      	cmp	r3, #0
 800a260:	4659      	mov	r1, fp
 800a262:	dd0f      	ble.n	800a284 <_strtod_l+0x604>
 800a264:	2b1f      	cmp	r3, #31
 800a266:	dd55      	ble.n	800a314 <_strtod_l+0x694>
 800a268:	2b34      	cmp	r3, #52	@ 0x34
 800a26a:	bfde      	ittt	le
 800a26c:	f04f 33ff 	movle.w	r3, #4294967295
 800a270:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a274:	4093      	lslle	r3, r2
 800a276:	f04f 0a00 	mov.w	sl, #0
 800a27a:	bfcc      	ite	gt
 800a27c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a280:	ea03 0b01 	andle.w	fp, r3, r1
 800a284:	2200      	movs	r2, #0
 800a286:	2300      	movs	r3, #0
 800a288:	4650      	mov	r0, sl
 800a28a:	4659      	mov	r1, fp
 800a28c:	f7f6 fc2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a290:	2800      	cmp	r0, #0
 800a292:	d1a6      	bne.n	800a1e2 <_strtod_l+0x562>
 800a294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a29a:	9805      	ldr	r0, [sp, #20]
 800a29c:	462b      	mov	r3, r5
 800a29e:	463a      	mov	r2, r7
 800a2a0:	f7ff f8c4 	bl	800942c <__s2b>
 800a2a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f43f af05 	beq.w	800a0b6 <_strtod_l+0x436>
 800a2ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	eba9 0308 	sub.w	r3, r9, r8
 800a2b4:	bfa8      	it	ge
 800a2b6:	2300      	movge	r3, #0
 800a2b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a2c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a2c2:	46a0      	mov	r8, r4
 800a2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c6:	9805      	ldr	r0, [sp, #20]
 800a2c8:	6859      	ldr	r1, [r3, #4]
 800a2ca:	f7ff f807 	bl	80092dc <_Balloc>
 800a2ce:	4681      	mov	r9, r0
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f43f aef4 	beq.w	800a0be <_strtod_l+0x43e>
 800a2d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2d8:	691a      	ldr	r2, [r3, #16]
 800a2da:	3202      	adds	r2, #2
 800a2dc:	f103 010c 	add.w	r1, r3, #12
 800a2e0:	0092      	lsls	r2, r2, #2
 800a2e2:	300c      	adds	r0, #12
 800a2e4:	f000 fd62 	bl	800adac <memcpy>
 800a2e8:	ec4b ab10 	vmov	d0, sl, fp
 800a2ec:	9805      	ldr	r0, [sp, #20]
 800a2ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800a2f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a2f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a2f6:	f7ff fbd5 	bl	8009aa4 <__d2b>
 800a2fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	f43f aede 	beq.w	800a0be <_strtod_l+0x43e>
 800a302:	9805      	ldr	r0, [sp, #20]
 800a304:	2101      	movs	r1, #1
 800a306:	f7ff f927 	bl	8009558 <__i2b>
 800a30a:	4680      	mov	r8, r0
 800a30c:	b948      	cbnz	r0, 800a322 <_strtod_l+0x6a2>
 800a30e:	f04f 0800 	mov.w	r8, #0
 800a312:	e6d4      	b.n	800a0be <_strtod_l+0x43e>
 800a314:	f04f 32ff 	mov.w	r2, #4294967295
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	ea03 0a0a 	and.w	sl, r3, sl
 800a320:	e7b0      	b.n	800a284 <_strtod_l+0x604>
 800a322:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a324:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a326:	2d00      	cmp	r5, #0
 800a328:	bfab      	itete	ge
 800a32a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a32c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a32e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a330:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a332:	bfac      	ite	ge
 800a334:	18ef      	addge	r7, r5, r3
 800a336:	1b5e      	sublt	r6, r3, r5
 800a338:	9b08      	ldr	r3, [sp, #32]
 800a33a:	1aed      	subs	r5, r5, r3
 800a33c:	4415      	add	r5, r2
 800a33e:	4b66      	ldr	r3, [pc, #408]	@ (800a4d8 <_strtod_l+0x858>)
 800a340:	3d01      	subs	r5, #1
 800a342:	429d      	cmp	r5, r3
 800a344:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a348:	da50      	bge.n	800a3ec <_strtod_l+0x76c>
 800a34a:	1b5b      	subs	r3, r3, r5
 800a34c:	2b1f      	cmp	r3, #31
 800a34e:	eba2 0203 	sub.w	r2, r2, r3
 800a352:	f04f 0101 	mov.w	r1, #1
 800a356:	dc3d      	bgt.n	800a3d4 <_strtod_l+0x754>
 800a358:	fa01 f303 	lsl.w	r3, r1, r3
 800a35c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a35e:	2300      	movs	r3, #0
 800a360:	9310      	str	r3, [sp, #64]	@ 0x40
 800a362:	18bd      	adds	r5, r7, r2
 800a364:	9b08      	ldr	r3, [sp, #32]
 800a366:	42af      	cmp	r7, r5
 800a368:	4416      	add	r6, r2
 800a36a:	441e      	add	r6, r3
 800a36c:	463b      	mov	r3, r7
 800a36e:	bfa8      	it	ge
 800a370:	462b      	movge	r3, r5
 800a372:	42b3      	cmp	r3, r6
 800a374:	bfa8      	it	ge
 800a376:	4633      	movge	r3, r6
 800a378:	2b00      	cmp	r3, #0
 800a37a:	bfc2      	ittt	gt
 800a37c:	1aed      	subgt	r5, r5, r3
 800a37e:	1af6      	subgt	r6, r6, r3
 800a380:	1aff      	subgt	r7, r7, r3
 800a382:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a384:	2b00      	cmp	r3, #0
 800a386:	dd16      	ble.n	800a3b6 <_strtod_l+0x736>
 800a388:	4641      	mov	r1, r8
 800a38a:	9805      	ldr	r0, [sp, #20]
 800a38c:	461a      	mov	r2, r3
 800a38e:	f7ff f9a3 	bl	80096d8 <__pow5mult>
 800a392:	4680      	mov	r8, r0
 800a394:	2800      	cmp	r0, #0
 800a396:	d0ba      	beq.n	800a30e <_strtod_l+0x68e>
 800a398:	4601      	mov	r1, r0
 800a39a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a39c:	9805      	ldr	r0, [sp, #20]
 800a39e:	f7ff f8f1 	bl	8009584 <__multiply>
 800a3a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	f43f ae8a 	beq.w	800a0be <_strtod_l+0x43e>
 800a3aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3ac:	9805      	ldr	r0, [sp, #20]
 800a3ae:	f7fe ffd5 	bl	800935c <_Bfree>
 800a3b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3b6:	2d00      	cmp	r5, #0
 800a3b8:	dc1d      	bgt.n	800a3f6 <_strtod_l+0x776>
 800a3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dd23      	ble.n	800a408 <_strtod_l+0x788>
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a3c4:	9805      	ldr	r0, [sp, #20]
 800a3c6:	f7ff f987 	bl	80096d8 <__pow5mult>
 800a3ca:	4681      	mov	r9, r0
 800a3cc:	b9e0      	cbnz	r0, 800a408 <_strtod_l+0x788>
 800a3ce:	f04f 0900 	mov.w	r9, #0
 800a3d2:	e674      	b.n	800a0be <_strtod_l+0x43e>
 800a3d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a3d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a3dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a3e0:	35e2      	adds	r5, #226	@ 0xe2
 800a3e2:	fa01 f305 	lsl.w	r3, r1, r5
 800a3e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a3ea:	e7ba      	b.n	800a362 <_strtod_l+0x6e2>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3f4:	e7b5      	b.n	800a362 <_strtod_l+0x6e2>
 800a3f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3f8:	9805      	ldr	r0, [sp, #20]
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	f7ff f9c6 	bl	800978c <__lshift>
 800a400:	901a      	str	r0, [sp, #104]	@ 0x68
 800a402:	2800      	cmp	r0, #0
 800a404:	d1d9      	bne.n	800a3ba <_strtod_l+0x73a>
 800a406:	e65a      	b.n	800a0be <_strtod_l+0x43e>
 800a408:	2e00      	cmp	r6, #0
 800a40a:	dd07      	ble.n	800a41c <_strtod_l+0x79c>
 800a40c:	4649      	mov	r1, r9
 800a40e:	9805      	ldr	r0, [sp, #20]
 800a410:	4632      	mov	r2, r6
 800a412:	f7ff f9bb 	bl	800978c <__lshift>
 800a416:	4681      	mov	r9, r0
 800a418:	2800      	cmp	r0, #0
 800a41a:	d0d8      	beq.n	800a3ce <_strtod_l+0x74e>
 800a41c:	2f00      	cmp	r7, #0
 800a41e:	dd08      	ble.n	800a432 <_strtod_l+0x7b2>
 800a420:	4641      	mov	r1, r8
 800a422:	9805      	ldr	r0, [sp, #20]
 800a424:	463a      	mov	r2, r7
 800a426:	f7ff f9b1 	bl	800978c <__lshift>
 800a42a:	4680      	mov	r8, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f43f ae46 	beq.w	800a0be <_strtod_l+0x43e>
 800a432:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a434:	9805      	ldr	r0, [sp, #20]
 800a436:	464a      	mov	r2, r9
 800a438:	f7ff fa30 	bl	800989c <__mdiff>
 800a43c:	4604      	mov	r4, r0
 800a43e:	2800      	cmp	r0, #0
 800a440:	f43f ae3d 	beq.w	800a0be <_strtod_l+0x43e>
 800a444:	68c3      	ldr	r3, [r0, #12]
 800a446:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a448:	2300      	movs	r3, #0
 800a44a:	60c3      	str	r3, [r0, #12]
 800a44c:	4641      	mov	r1, r8
 800a44e:	f7ff fa09 	bl	8009864 <__mcmp>
 800a452:	2800      	cmp	r0, #0
 800a454:	da46      	bge.n	800a4e4 <_strtod_l+0x864>
 800a456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a458:	ea53 030a 	orrs.w	r3, r3, sl
 800a45c:	d16c      	bne.n	800a538 <_strtod_l+0x8b8>
 800a45e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a462:	2b00      	cmp	r3, #0
 800a464:	d168      	bne.n	800a538 <_strtod_l+0x8b8>
 800a466:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a46a:	0d1b      	lsrs	r3, r3, #20
 800a46c:	051b      	lsls	r3, r3, #20
 800a46e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a472:	d961      	bls.n	800a538 <_strtod_l+0x8b8>
 800a474:	6963      	ldr	r3, [r4, #20]
 800a476:	b913      	cbnz	r3, 800a47e <_strtod_l+0x7fe>
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	dd5c      	ble.n	800a538 <_strtod_l+0x8b8>
 800a47e:	4621      	mov	r1, r4
 800a480:	2201      	movs	r2, #1
 800a482:	9805      	ldr	r0, [sp, #20]
 800a484:	f7ff f982 	bl	800978c <__lshift>
 800a488:	4641      	mov	r1, r8
 800a48a:	4604      	mov	r4, r0
 800a48c:	f7ff f9ea 	bl	8009864 <__mcmp>
 800a490:	2800      	cmp	r0, #0
 800a492:	dd51      	ble.n	800a538 <_strtod_l+0x8b8>
 800a494:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a498:	9a08      	ldr	r2, [sp, #32]
 800a49a:	0d1b      	lsrs	r3, r3, #20
 800a49c:	051b      	lsls	r3, r3, #20
 800a49e:	2a00      	cmp	r2, #0
 800a4a0:	d06b      	beq.n	800a57a <_strtod_l+0x8fa>
 800a4a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4a6:	d868      	bhi.n	800a57a <_strtod_l+0x8fa>
 800a4a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a4ac:	f67f ae9d 	bls.w	800a1ea <_strtod_l+0x56a>
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a4dc <_strtod_l+0x85c>)
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f7f6 f8ae 	bl	8000618 <__aeabi_dmul>
 800a4bc:	4b08      	ldr	r3, [pc, #32]	@ (800a4e0 <_strtod_l+0x860>)
 800a4be:	400b      	ands	r3, r1
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	468b      	mov	fp, r1
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f47f ae05 	bne.w	800a0d4 <_strtod_l+0x454>
 800a4ca:	9a05      	ldr	r2, [sp, #20]
 800a4cc:	2322      	movs	r3, #34	@ 0x22
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	e600      	b.n	800a0d4 <_strtod_l+0x454>
 800a4d2:	bf00      	nop
 800a4d4:	0800bd58 	.word	0x0800bd58
 800a4d8:	fffffc02 	.word	0xfffffc02
 800a4dc:	39500000 	.word	0x39500000
 800a4e0:	7ff00000 	.word	0x7ff00000
 800a4e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a4e8:	d165      	bne.n	800a5b6 <_strtod_l+0x936>
 800a4ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a4ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4f0:	b35a      	cbz	r2, 800a54a <_strtod_l+0x8ca>
 800a4f2:	4a9f      	ldr	r2, [pc, #636]	@ (800a770 <_strtod_l+0xaf0>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d12b      	bne.n	800a550 <_strtod_l+0x8d0>
 800a4f8:	9b08      	ldr	r3, [sp, #32]
 800a4fa:	4651      	mov	r1, sl
 800a4fc:	b303      	cbz	r3, 800a540 <_strtod_l+0x8c0>
 800a4fe:	4b9d      	ldr	r3, [pc, #628]	@ (800a774 <_strtod_l+0xaf4>)
 800a500:	465a      	mov	r2, fp
 800a502:	4013      	ands	r3, r2
 800a504:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a508:	f04f 32ff 	mov.w	r2, #4294967295
 800a50c:	d81b      	bhi.n	800a546 <_strtod_l+0x8c6>
 800a50e:	0d1b      	lsrs	r3, r3, #20
 800a510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	4299      	cmp	r1, r3
 800a51a:	d119      	bne.n	800a550 <_strtod_l+0x8d0>
 800a51c:	4b96      	ldr	r3, [pc, #600]	@ (800a778 <_strtod_l+0xaf8>)
 800a51e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a520:	429a      	cmp	r2, r3
 800a522:	d102      	bne.n	800a52a <_strtod_l+0x8aa>
 800a524:	3101      	adds	r1, #1
 800a526:	f43f adca 	beq.w	800a0be <_strtod_l+0x43e>
 800a52a:	4b92      	ldr	r3, [pc, #584]	@ (800a774 <_strtod_l+0xaf4>)
 800a52c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a52e:	401a      	ands	r2, r3
 800a530:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a534:	f04f 0a00 	mov.w	sl, #0
 800a538:	9b08      	ldr	r3, [sp, #32]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1b8      	bne.n	800a4b0 <_strtod_l+0x830>
 800a53e:	e5c9      	b.n	800a0d4 <_strtod_l+0x454>
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	e7e8      	b.n	800a518 <_strtod_l+0x898>
 800a546:	4613      	mov	r3, r2
 800a548:	e7e6      	b.n	800a518 <_strtod_l+0x898>
 800a54a:	ea53 030a 	orrs.w	r3, r3, sl
 800a54e:	d0a1      	beq.n	800a494 <_strtod_l+0x814>
 800a550:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a552:	b1db      	cbz	r3, 800a58c <_strtod_l+0x90c>
 800a554:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a556:	4213      	tst	r3, r2
 800a558:	d0ee      	beq.n	800a538 <_strtod_l+0x8b8>
 800a55a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a55c:	9a08      	ldr	r2, [sp, #32]
 800a55e:	4650      	mov	r0, sl
 800a560:	4659      	mov	r1, fp
 800a562:	b1bb      	cbz	r3, 800a594 <_strtod_l+0x914>
 800a564:	f7ff fb6c 	bl	8009c40 <sulp>
 800a568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a56c:	ec53 2b10 	vmov	r2, r3, d0
 800a570:	f7f5 fe9c 	bl	80002ac <__adddf3>
 800a574:	4682      	mov	sl, r0
 800a576:	468b      	mov	fp, r1
 800a578:	e7de      	b.n	800a538 <_strtod_l+0x8b8>
 800a57a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a57e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a582:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a586:	f04f 3aff 	mov.w	sl, #4294967295
 800a58a:	e7d5      	b.n	800a538 <_strtod_l+0x8b8>
 800a58c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a58e:	ea13 0f0a 	tst.w	r3, sl
 800a592:	e7e1      	b.n	800a558 <_strtod_l+0x8d8>
 800a594:	f7ff fb54 	bl	8009c40 <sulp>
 800a598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a59c:	ec53 2b10 	vmov	r2, r3, d0
 800a5a0:	f7f5 fe82 	bl	80002a8 <__aeabi_dsub>
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	468b      	mov	fp, r1
 800a5ac:	f7f6 fa9c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d0c1      	beq.n	800a538 <_strtod_l+0x8b8>
 800a5b4:	e619      	b.n	800a1ea <_strtod_l+0x56a>
 800a5b6:	4641      	mov	r1, r8
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7ff facb 	bl	8009b54 <__ratio>
 800a5be:	ec57 6b10 	vmov	r6, r7, d0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f6 faa0 	bl	8000b10 <__aeabi_dcmple>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d06f      	beq.n	800a6b4 <_strtod_l+0xa34>
 800a5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d17a      	bne.n	800a6d0 <_strtod_l+0xa50>
 800a5da:	f1ba 0f00 	cmp.w	sl, #0
 800a5de:	d158      	bne.n	800a692 <_strtod_l+0xa12>
 800a5e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d15a      	bne.n	800a6a0 <_strtod_l+0xa20>
 800a5ea:	4b64      	ldr	r3, [pc, #400]	@ (800a77c <_strtod_l+0xafc>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	f7f6 fa83 	bl	8000afc <__aeabi_dcmplt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d159      	bne.n	800a6ae <_strtod_l+0xa2e>
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	4b60      	ldr	r3, [pc, #384]	@ (800a780 <_strtod_l+0xb00>)
 800a600:	2200      	movs	r2, #0
 800a602:	f7f6 f809 	bl	8000618 <__aeabi_dmul>
 800a606:	4606      	mov	r6, r0
 800a608:	460f      	mov	r7, r1
 800a60a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a60e:	9606      	str	r6, [sp, #24]
 800a610:	9307      	str	r3, [sp, #28]
 800a612:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a616:	4d57      	ldr	r5, [pc, #348]	@ (800a774 <_strtod_l+0xaf4>)
 800a618:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a61c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a61e:	401d      	ands	r5, r3
 800a620:	4b58      	ldr	r3, [pc, #352]	@ (800a784 <_strtod_l+0xb04>)
 800a622:	429d      	cmp	r5, r3
 800a624:	f040 80b2 	bne.w	800a78c <_strtod_l+0xb0c>
 800a628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a62a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a62e:	ec4b ab10 	vmov	d0, sl, fp
 800a632:	f7ff f9c7 	bl	80099c4 <__ulp>
 800a636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a63a:	ec51 0b10 	vmov	r0, r1, d0
 800a63e:	f7f5 ffeb 	bl	8000618 <__aeabi_dmul>
 800a642:	4652      	mov	r2, sl
 800a644:	465b      	mov	r3, fp
 800a646:	f7f5 fe31 	bl	80002ac <__adddf3>
 800a64a:	460b      	mov	r3, r1
 800a64c:	4949      	ldr	r1, [pc, #292]	@ (800a774 <_strtod_l+0xaf4>)
 800a64e:	4a4e      	ldr	r2, [pc, #312]	@ (800a788 <_strtod_l+0xb08>)
 800a650:	4019      	ands	r1, r3
 800a652:	4291      	cmp	r1, r2
 800a654:	4682      	mov	sl, r0
 800a656:	d942      	bls.n	800a6de <_strtod_l+0xa5e>
 800a658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a65a:	4b47      	ldr	r3, [pc, #284]	@ (800a778 <_strtod_l+0xaf8>)
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d103      	bne.n	800a668 <_strtod_l+0x9e8>
 800a660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a662:	3301      	adds	r3, #1
 800a664:	f43f ad2b 	beq.w	800a0be <_strtod_l+0x43e>
 800a668:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a778 <_strtod_l+0xaf8>
 800a66c:	f04f 3aff 	mov.w	sl, #4294967295
 800a670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a672:	9805      	ldr	r0, [sp, #20]
 800a674:	f7fe fe72 	bl	800935c <_Bfree>
 800a678:	9805      	ldr	r0, [sp, #20]
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7fe fe6e 	bl	800935c <_Bfree>
 800a680:	9805      	ldr	r0, [sp, #20]
 800a682:	4641      	mov	r1, r8
 800a684:	f7fe fe6a 	bl	800935c <_Bfree>
 800a688:	9805      	ldr	r0, [sp, #20]
 800a68a:	4621      	mov	r1, r4
 800a68c:	f7fe fe66 	bl	800935c <_Bfree>
 800a690:	e618      	b.n	800a2c4 <_strtod_l+0x644>
 800a692:	f1ba 0f01 	cmp.w	sl, #1
 800a696:	d103      	bne.n	800a6a0 <_strtod_l+0xa20>
 800a698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f43f ada5 	beq.w	800a1ea <_strtod_l+0x56a>
 800a6a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a750 <_strtod_l+0xad0>
 800a6a4:	4f35      	ldr	r7, [pc, #212]	@ (800a77c <_strtod_l+0xafc>)
 800a6a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	e7b1      	b.n	800a612 <_strtod_l+0x992>
 800a6ae:	4f34      	ldr	r7, [pc, #208]	@ (800a780 <_strtod_l+0xb00>)
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	e7aa      	b.n	800a60a <_strtod_l+0x98a>
 800a6b4:	4b32      	ldr	r3, [pc, #200]	@ (800a780 <_strtod_l+0xb00>)
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f7f5 ffac 	bl	8000618 <__aeabi_dmul>
 800a6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d09f      	beq.n	800a60a <_strtod_l+0x98a>
 800a6ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6ce:	e7a0      	b.n	800a612 <_strtod_l+0x992>
 800a6d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a758 <_strtod_l+0xad8>
 800a6d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6d8:	ec57 6b17 	vmov	r6, r7, d7
 800a6dc:	e799      	b.n	800a612 <_strtod_l+0x992>
 800a6de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a6e2:	9b08      	ldr	r3, [sp, #32]
 800a6e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1c1      	bne.n	800a670 <_strtod_l+0x9f0>
 800a6ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6f0:	0d1b      	lsrs	r3, r3, #20
 800a6f2:	051b      	lsls	r3, r3, #20
 800a6f4:	429d      	cmp	r5, r3
 800a6f6:	d1bb      	bne.n	800a670 <_strtod_l+0x9f0>
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f6 fad4 	bl	8000ca8 <__aeabi_d2lz>
 800a700:	f7f5 ff5c 	bl	80005bc <__aeabi_l2d>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f5 fdcc 	bl	80002a8 <__aeabi_dsub>
 800a710:	460b      	mov	r3, r1
 800a712:	4602      	mov	r2, r0
 800a714:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a718:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71e:	ea46 060a 	orr.w	r6, r6, sl
 800a722:	431e      	orrs	r6, r3
 800a724:	d06f      	beq.n	800a806 <_strtod_l+0xb86>
 800a726:	a30e      	add	r3, pc, #56	@ (adr r3, 800a760 <_strtod_l+0xae0>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	f7f6 f9e6 	bl	8000afc <__aeabi_dcmplt>
 800a730:	2800      	cmp	r0, #0
 800a732:	f47f accf 	bne.w	800a0d4 <_strtod_l+0x454>
 800a736:	a30c      	add	r3, pc, #48	@ (adr r3, 800a768 <_strtod_l+0xae8>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a740:	f7f6 f9fa 	bl	8000b38 <__aeabi_dcmpgt>
 800a744:	2800      	cmp	r0, #0
 800a746:	d093      	beq.n	800a670 <_strtod_l+0x9f0>
 800a748:	e4c4      	b.n	800a0d4 <_strtod_l+0x454>
 800a74a:	bf00      	nop
 800a74c:	f3af 8000 	nop.w
 800a750:	00000000 	.word	0x00000000
 800a754:	bff00000 	.word	0xbff00000
 800a758:	00000000 	.word	0x00000000
 800a75c:	3ff00000 	.word	0x3ff00000
 800a760:	94a03595 	.word	0x94a03595
 800a764:	3fdfffff 	.word	0x3fdfffff
 800a768:	35afe535 	.word	0x35afe535
 800a76c:	3fe00000 	.word	0x3fe00000
 800a770:	000fffff 	.word	0x000fffff
 800a774:	7ff00000 	.word	0x7ff00000
 800a778:	7fefffff 	.word	0x7fefffff
 800a77c:	3ff00000 	.word	0x3ff00000
 800a780:	3fe00000 	.word	0x3fe00000
 800a784:	7fe00000 	.word	0x7fe00000
 800a788:	7c9fffff 	.word	0x7c9fffff
 800a78c:	9b08      	ldr	r3, [sp, #32]
 800a78e:	b323      	cbz	r3, 800a7da <_strtod_l+0xb5a>
 800a790:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a794:	d821      	bhi.n	800a7da <_strtod_l+0xb5a>
 800a796:	a328      	add	r3, pc, #160	@ (adr r3, 800a838 <_strtod_l+0xbb8>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f6 f9b6 	bl	8000b10 <__aeabi_dcmple>
 800a7a4:	b1a0      	cbz	r0, 800a7d0 <_strtod_l+0xb50>
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7f6 fa0d 	bl	8000bc8 <__aeabi_d2uiz>
 800a7ae:	2801      	cmp	r0, #1
 800a7b0:	bf38      	it	cc
 800a7b2:	2001      	movcc	r0, #1
 800a7b4:	f7f5 feb6 	bl	8000524 <__aeabi_ui2d>
 800a7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	b9fb      	cbnz	r3, 800a800 <_strtod_l+0xb80>
 800a7c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a7c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a7cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a7d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a7d6:	1b5b      	subs	r3, r3, r5
 800a7d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a7e2:	f7ff f8ef 	bl	80099c4 <__ulp>
 800a7e6:	4650      	mov	r0, sl
 800a7e8:	ec53 2b10 	vmov	r2, r3, d0
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	f7f5 ff13 	bl	8000618 <__aeabi_dmul>
 800a7f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a7f6:	f7f5 fd59 	bl	80002ac <__adddf3>
 800a7fa:	4682      	mov	sl, r0
 800a7fc:	468b      	mov	fp, r1
 800a7fe:	e770      	b.n	800a6e2 <_strtod_l+0xa62>
 800a800:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a804:	e7e0      	b.n	800a7c8 <_strtod_l+0xb48>
 800a806:	a30e      	add	r3, pc, #56	@ (adr r3, 800a840 <_strtod_l+0xbc0>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f6 f976 	bl	8000afc <__aeabi_dcmplt>
 800a810:	e798      	b.n	800a744 <_strtod_l+0xac4>
 800a812:	2300      	movs	r3, #0
 800a814:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a816:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	f7ff ba6d 	b.w	8009cfa <_strtod_l+0x7a>
 800a820:	2a65      	cmp	r2, #101	@ 0x65
 800a822:	f43f ab66 	beq.w	8009ef2 <_strtod_l+0x272>
 800a826:	2a45      	cmp	r2, #69	@ 0x45
 800a828:	f43f ab63 	beq.w	8009ef2 <_strtod_l+0x272>
 800a82c:	2301      	movs	r3, #1
 800a82e:	f7ff bb9e 	b.w	8009f6e <_strtod_l+0x2ee>
 800a832:	bf00      	nop
 800a834:	f3af 8000 	nop.w
 800a838:	ffc00000 	.word	0xffc00000
 800a83c:	41dfffff 	.word	0x41dfffff
 800a840:	94a03595 	.word	0x94a03595
 800a844:	3fcfffff 	.word	0x3fcfffff

0800a848 <_strtod_r>:
 800a848:	4b01      	ldr	r3, [pc, #4]	@ (800a850 <_strtod_r+0x8>)
 800a84a:	f7ff ba19 	b.w	8009c80 <_strtod_l>
 800a84e:	bf00      	nop
 800a850:	2000007c 	.word	0x2000007c

0800a854 <_strtol_l.constprop.0>:
 800a854:	2b24      	cmp	r3, #36	@ 0x24
 800a856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a85a:	4686      	mov	lr, r0
 800a85c:	4690      	mov	r8, r2
 800a85e:	d801      	bhi.n	800a864 <_strtol_l.constprop.0+0x10>
 800a860:	2b01      	cmp	r3, #1
 800a862:	d106      	bne.n	800a872 <_strtol_l.constprop.0+0x1e>
 800a864:	f7fd fe70 	bl	8008548 <__errno>
 800a868:	2316      	movs	r3, #22
 800a86a:	6003      	str	r3, [r0, #0]
 800a86c:	2000      	movs	r0, #0
 800a86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a872:	4834      	ldr	r0, [pc, #208]	@ (800a944 <_strtol_l.constprop.0+0xf0>)
 800a874:	460d      	mov	r5, r1
 800a876:	462a      	mov	r2, r5
 800a878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a87c:	5d06      	ldrb	r6, [r0, r4]
 800a87e:	f016 0608 	ands.w	r6, r6, #8
 800a882:	d1f8      	bne.n	800a876 <_strtol_l.constprop.0+0x22>
 800a884:	2c2d      	cmp	r4, #45	@ 0x2d
 800a886:	d12d      	bne.n	800a8e4 <_strtol_l.constprop.0+0x90>
 800a888:	782c      	ldrb	r4, [r5, #0]
 800a88a:	2601      	movs	r6, #1
 800a88c:	1c95      	adds	r5, r2, #2
 800a88e:	f033 0210 	bics.w	r2, r3, #16
 800a892:	d109      	bne.n	800a8a8 <_strtol_l.constprop.0+0x54>
 800a894:	2c30      	cmp	r4, #48	@ 0x30
 800a896:	d12a      	bne.n	800a8ee <_strtol_l.constprop.0+0x9a>
 800a898:	782a      	ldrb	r2, [r5, #0]
 800a89a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a89e:	2a58      	cmp	r2, #88	@ 0x58
 800a8a0:	d125      	bne.n	800a8ee <_strtol_l.constprop.0+0x9a>
 800a8a2:	786c      	ldrb	r4, [r5, #1]
 800a8a4:	2310      	movs	r3, #16
 800a8a6:	3502      	adds	r5, #2
 800a8a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a8ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	fbbc f9f3 	udiv	r9, ip, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a8bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a8c0:	2f09      	cmp	r7, #9
 800a8c2:	d81b      	bhi.n	800a8fc <_strtol_l.constprop.0+0xa8>
 800a8c4:	463c      	mov	r4, r7
 800a8c6:	42a3      	cmp	r3, r4
 800a8c8:	dd27      	ble.n	800a91a <_strtol_l.constprop.0+0xc6>
 800a8ca:	1c57      	adds	r7, r2, #1
 800a8cc:	d007      	beq.n	800a8de <_strtol_l.constprop.0+0x8a>
 800a8ce:	4581      	cmp	r9, r0
 800a8d0:	d320      	bcc.n	800a914 <_strtol_l.constprop.0+0xc0>
 800a8d2:	d101      	bne.n	800a8d8 <_strtol_l.constprop.0+0x84>
 800a8d4:	45a2      	cmp	sl, r4
 800a8d6:	db1d      	blt.n	800a914 <_strtol_l.constprop.0+0xc0>
 800a8d8:	fb00 4003 	mla	r0, r0, r3, r4
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8e2:	e7eb      	b.n	800a8bc <_strtol_l.constprop.0+0x68>
 800a8e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8e6:	bf04      	itt	eq
 800a8e8:	782c      	ldrbeq	r4, [r5, #0]
 800a8ea:	1c95      	addeq	r5, r2, #2
 800a8ec:	e7cf      	b.n	800a88e <_strtol_l.constprop.0+0x3a>
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1da      	bne.n	800a8a8 <_strtol_l.constprop.0+0x54>
 800a8f2:	2c30      	cmp	r4, #48	@ 0x30
 800a8f4:	bf0c      	ite	eq
 800a8f6:	2308      	moveq	r3, #8
 800a8f8:	230a      	movne	r3, #10
 800a8fa:	e7d5      	b.n	800a8a8 <_strtol_l.constprop.0+0x54>
 800a8fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a900:	2f19      	cmp	r7, #25
 800a902:	d801      	bhi.n	800a908 <_strtol_l.constprop.0+0xb4>
 800a904:	3c37      	subs	r4, #55	@ 0x37
 800a906:	e7de      	b.n	800a8c6 <_strtol_l.constprop.0+0x72>
 800a908:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a90c:	2f19      	cmp	r7, #25
 800a90e:	d804      	bhi.n	800a91a <_strtol_l.constprop.0+0xc6>
 800a910:	3c57      	subs	r4, #87	@ 0x57
 800a912:	e7d8      	b.n	800a8c6 <_strtol_l.constprop.0+0x72>
 800a914:	f04f 32ff 	mov.w	r2, #4294967295
 800a918:	e7e1      	b.n	800a8de <_strtol_l.constprop.0+0x8a>
 800a91a:	1c53      	adds	r3, r2, #1
 800a91c:	d108      	bne.n	800a930 <_strtol_l.constprop.0+0xdc>
 800a91e:	2322      	movs	r3, #34	@ 0x22
 800a920:	f8ce 3000 	str.w	r3, [lr]
 800a924:	4660      	mov	r0, ip
 800a926:	f1b8 0f00 	cmp.w	r8, #0
 800a92a:	d0a0      	beq.n	800a86e <_strtol_l.constprop.0+0x1a>
 800a92c:	1e69      	subs	r1, r5, #1
 800a92e:	e006      	b.n	800a93e <_strtol_l.constprop.0+0xea>
 800a930:	b106      	cbz	r6, 800a934 <_strtol_l.constprop.0+0xe0>
 800a932:	4240      	negs	r0, r0
 800a934:	f1b8 0f00 	cmp.w	r8, #0
 800a938:	d099      	beq.n	800a86e <_strtol_l.constprop.0+0x1a>
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	d1f6      	bne.n	800a92c <_strtol_l.constprop.0+0xd8>
 800a93e:	f8c8 1000 	str.w	r1, [r8]
 800a942:	e794      	b.n	800a86e <_strtol_l.constprop.0+0x1a>
 800a944:	0800bd81 	.word	0x0800bd81

0800a948 <_strtol_r>:
 800a948:	f7ff bf84 	b.w	800a854 <_strtol_l.constprop.0>

0800a94c <__ssputs_r>:
 800a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a950:	688e      	ldr	r6, [r1, #8]
 800a952:	461f      	mov	r7, r3
 800a954:	42be      	cmp	r6, r7
 800a956:	680b      	ldr	r3, [r1, #0]
 800a958:	4682      	mov	sl, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	4690      	mov	r8, r2
 800a95e:	d82d      	bhi.n	800a9bc <__ssputs_r+0x70>
 800a960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a968:	d026      	beq.n	800a9b8 <__ssputs_r+0x6c>
 800a96a:	6965      	ldr	r5, [r4, #20]
 800a96c:	6909      	ldr	r1, [r1, #16]
 800a96e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a972:	eba3 0901 	sub.w	r9, r3, r1
 800a976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a97a:	1c7b      	adds	r3, r7, #1
 800a97c:	444b      	add	r3, r9
 800a97e:	106d      	asrs	r5, r5, #1
 800a980:	429d      	cmp	r5, r3
 800a982:	bf38      	it	cc
 800a984:	461d      	movcc	r5, r3
 800a986:	0553      	lsls	r3, r2, #21
 800a988:	d527      	bpl.n	800a9da <__ssputs_r+0x8e>
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7fc fd5c 	bl	8007448 <_malloc_r>
 800a990:	4606      	mov	r6, r0
 800a992:	b360      	cbz	r0, 800a9ee <__ssputs_r+0xa2>
 800a994:	6921      	ldr	r1, [r4, #16]
 800a996:	464a      	mov	r2, r9
 800a998:	f000 fa08 	bl	800adac <memcpy>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	6126      	str	r6, [r4, #16]
 800a9aa:	6165      	str	r5, [r4, #20]
 800a9ac:	444e      	add	r6, r9
 800a9ae:	eba5 0509 	sub.w	r5, r5, r9
 800a9b2:	6026      	str	r6, [r4, #0]
 800a9b4:	60a5      	str	r5, [r4, #8]
 800a9b6:	463e      	mov	r6, r7
 800a9b8:	42be      	cmp	r6, r7
 800a9ba:	d900      	bls.n	800a9be <__ssputs_r+0x72>
 800a9bc:	463e      	mov	r6, r7
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	f000 f9c6 	bl	800ad54 <memmove>
 800a9c8:	68a3      	ldr	r3, [r4, #8]
 800a9ca:	1b9b      	subs	r3, r3, r6
 800a9cc:	60a3      	str	r3, [r4, #8]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	4433      	add	r3, r6
 800a9d2:	6023      	str	r3, [r4, #0]
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9da:	462a      	mov	r2, r5
 800a9dc:	f000 fd65 	bl	800b4aa <_realloc_r>
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d1e0      	bne.n	800a9a8 <__ssputs_r+0x5c>
 800a9e6:	6921      	ldr	r1, [r4, #16]
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	f7fe fc2d 	bl	8009248 <_free_r>
 800a9ee:	230c      	movs	r3, #12
 800a9f0:	f8ca 3000 	str.w	r3, [sl]
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800aa00:	e7e9      	b.n	800a9d6 <__ssputs_r+0x8a>
	...

0800aa04 <_svfiprintf_r>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	4698      	mov	r8, r3
 800aa0a:	898b      	ldrh	r3, [r1, #12]
 800aa0c:	061b      	lsls	r3, r3, #24
 800aa0e:	b09d      	sub	sp, #116	@ 0x74
 800aa10:	4607      	mov	r7, r0
 800aa12:	460d      	mov	r5, r1
 800aa14:	4614      	mov	r4, r2
 800aa16:	d510      	bpl.n	800aa3a <_svfiprintf_r+0x36>
 800aa18:	690b      	ldr	r3, [r1, #16]
 800aa1a:	b973      	cbnz	r3, 800aa3a <_svfiprintf_r+0x36>
 800aa1c:	2140      	movs	r1, #64	@ 0x40
 800aa1e:	f7fc fd13 	bl	8007448 <_malloc_r>
 800aa22:	6028      	str	r0, [r5, #0]
 800aa24:	6128      	str	r0, [r5, #16]
 800aa26:	b930      	cbnz	r0, 800aa36 <_svfiprintf_r+0x32>
 800aa28:	230c      	movs	r3, #12
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	b01d      	add	sp, #116	@ 0x74
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	2340      	movs	r3, #64	@ 0x40
 800aa38:	616b      	str	r3, [r5, #20]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa3e:	2320      	movs	r3, #32
 800aa40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa44:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa48:	2330      	movs	r3, #48	@ 0x30
 800aa4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800abe8 <_svfiprintf_r+0x1e4>
 800aa4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa52:	f04f 0901 	mov.w	r9, #1
 800aa56:	4623      	mov	r3, r4
 800aa58:	469a      	mov	sl, r3
 800aa5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5e:	b10a      	cbz	r2, 800aa64 <_svfiprintf_r+0x60>
 800aa60:	2a25      	cmp	r2, #37	@ 0x25
 800aa62:	d1f9      	bne.n	800aa58 <_svfiprintf_r+0x54>
 800aa64:	ebba 0b04 	subs.w	fp, sl, r4
 800aa68:	d00b      	beq.n	800aa82 <_svfiprintf_r+0x7e>
 800aa6a:	465b      	mov	r3, fp
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4638      	mov	r0, r7
 800aa72:	f7ff ff6b 	bl	800a94c <__ssputs_r>
 800aa76:	3001      	adds	r0, #1
 800aa78:	f000 80a7 	beq.w	800abca <_svfiprintf_r+0x1c6>
 800aa7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa7e:	445a      	add	r2, fp
 800aa80:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa82:	f89a 3000 	ldrb.w	r3, [sl]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 809f 	beq.w	800abca <_svfiprintf_r+0x1c6>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa96:	f10a 0a01 	add.w	sl, sl, #1
 800aa9a:	9304      	str	r3, [sp, #16]
 800aa9c:	9307      	str	r3, [sp, #28]
 800aa9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aaa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aaa4:	4654      	mov	r4, sl
 800aaa6:	2205      	movs	r2, #5
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	484e      	ldr	r0, [pc, #312]	@ (800abe8 <_svfiprintf_r+0x1e4>)
 800aaae:	f7f5 fb9f 	bl	80001f0 <memchr>
 800aab2:	9a04      	ldr	r2, [sp, #16]
 800aab4:	b9d8      	cbnz	r0, 800aaee <_svfiprintf_r+0xea>
 800aab6:	06d0      	lsls	r0, r2, #27
 800aab8:	bf44      	itt	mi
 800aaba:	2320      	movmi	r3, #32
 800aabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aac0:	0711      	lsls	r1, r2, #28
 800aac2:	bf44      	itt	mi
 800aac4:	232b      	movmi	r3, #43	@ 0x2b
 800aac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaca:	f89a 3000 	ldrb.w	r3, [sl]
 800aace:	2b2a      	cmp	r3, #42	@ 0x2a
 800aad0:	d015      	beq.n	800aafe <_svfiprintf_r+0xfa>
 800aad2:	9a07      	ldr	r2, [sp, #28]
 800aad4:	4654      	mov	r4, sl
 800aad6:	2000      	movs	r0, #0
 800aad8:	f04f 0c0a 	mov.w	ip, #10
 800aadc:	4621      	mov	r1, r4
 800aade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae2:	3b30      	subs	r3, #48	@ 0x30
 800aae4:	2b09      	cmp	r3, #9
 800aae6:	d94b      	bls.n	800ab80 <_svfiprintf_r+0x17c>
 800aae8:	b1b0      	cbz	r0, 800ab18 <_svfiprintf_r+0x114>
 800aaea:	9207      	str	r2, [sp, #28]
 800aaec:	e014      	b.n	800ab18 <_svfiprintf_r+0x114>
 800aaee:	eba0 0308 	sub.w	r3, r0, r8
 800aaf2:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	46a2      	mov	sl, r4
 800aafc:	e7d2      	b.n	800aaa4 <_svfiprintf_r+0xa0>
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	1d19      	adds	r1, r3, #4
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	9103      	str	r1, [sp, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bfbb      	ittet	lt
 800ab0a:	425b      	neglt	r3, r3
 800ab0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab10:	9307      	strge	r3, [sp, #28]
 800ab12:	9307      	strlt	r3, [sp, #28]
 800ab14:	bfb8      	it	lt
 800ab16:	9204      	strlt	r2, [sp, #16]
 800ab18:	7823      	ldrb	r3, [r4, #0]
 800ab1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab1c:	d10a      	bne.n	800ab34 <_svfiprintf_r+0x130>
 800ab1e:	7863      	ldrb	r3, [r4, #1]
 800ab20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab22:	d132      	bne.n	800ab8a <_svfiprintf_r+0x186>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	9203      	str	r2, [sp, #12]
 800ab2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab30:	3402      	adds	r4, #2
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800abf8 <_svfiprintf_r+0x1f4>
 800ab38:	7821      	ldrb	r1, [r4, #0]
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	f7f5 fb57 	bl	80001f0 <memchr>
 800ab42:	b138      	cbz	r0, 800ab54 <_svfiprintf_r+0x150>
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	eba0 000a 	sub.w	r0, r0, sl
 800ab4a:	2240      	movs	r2, #64	@ 0x40
 800ab4c:	4082      	lsls	r2, r0
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	3401      	adds	r4, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab58:	4824      	ldr	r0, [pc, #144]	@ (800abec <_svfiprintf_r+0x1e8>)
 800ab5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab5e:	2206      	movs	r2, #6
 800ab60:	f7f5 fb46 	bl	80001f0 <memchr>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d036      	beq.n	800abd6 <_svfiprintf_r+0x1d2>
 800ab68:	4b21      	ldr	r3, [pc, #132]	@ (800abf0 <_svfiprintf_r+0x1ec>)
 800ab6a:	bb1b      	cbnz	r3, 800abb4 <_svfiprintf_r+0x1b0>
 800ab6c:	9b03      	ldr	r3, [sp, #12]
 800ab6e:	3307      	adds	r3, #7
 800ab70:	f023 0307 	bic.w	r3, r3, #7
 800ab74:	3308      	adds	r3, #8
 800ab76:	9303      	str	r3, [sp, #12]
 800ab78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7a:	4433      	add	r3, r6
 800ab7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab7e:	e76a      	b.n	800aa56 <_svfiprintf_r+0x52>
 800ab80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab84:	460c      	mov	r4, r1
 800ab86:	2001      	movs	r0, #1
 800ab88:	e7a8      	b.n	800aadc <_svfiprintf_r+0xd8>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	3401      	adds	r4, #1
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	4619      	mov	r1, r3
 800ab92:	f04f 0c0a 	mov.w	ip, #10
 800ab96:	4620      	mov	r0, r4
 800ab98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab9c:	3a30      	subs	r2, #48	@ 0x30
 800ab9e:	2a09      	cmp	r2, #9
 800aba0:	d903      	bls.n	800abaa <_svfiprintf_r+0x1a6>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d0c6      	beq.n	800ab34 <_svfiprintf_r+0x130>
 800aba6:	9105      	str	r1, [sp, #20]
 800aba8:	e7c4      	b.n	800ab34 <_svfiprintf_r+0x130>
 800abaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800abae:	4604      	mov	r4, r0
 800abb0:	2301      	movs	r3, #1
 800abb2:	e7f0      	b.n	800ab96 <_svfiprintf_r+0x192>
 800abb4:	ab03      	add	r3, sp, #12
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	462a      	mov	r2, r5
 800abba:	4b0e      	ldr	r3, [pc, #56]	@ (800abf4 <_svfiprintf_r+0x1f0>)
 800abbc:	a904      	add	r1, sp, #16
 800abbe:	4638      	mov	r0, r7
 800abc0:	f7fc fd6e 	bl	80076a0 <_printf_float>
 800abc4:	1c42      	adds	r2, r0, #1
 800abc6:	4606      	mov	r6, r0
 800abc8:	d1d6      	bne.n	800ab78 <_svfiprintf_r+0x174>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	065b      	lsls	r3, r3, #25
 800abce:	f53f af2d 	bmi.w	800aa2c <_svfiprintf_r+0x28>
 800abd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abd4:	e72c      	b.n	800aa30 <_svfiprintf_r+0x2c>
 800abd6:	ab03      	add	r3, sp, #12
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	462a      	mov	r2, r5
 800abdc:	4b05      	ldr	r3, [pc, #20]	@ (800abf4 <_svfiprintf_r+0x1f0>)
 800abde:	a904      	add	r1, sp, #16
 800abe0:	4638      	mov	r0, r7
 800abe2:	f7fc fff5 	bl	8007bd0 <_printf_i>
 800abe6:	e7ed      	b.n	800abc4 <_svfiprintf_r+0x1c0>
 800abe8:	0800be81 	.word	0x0800be81
 800abec:	0800be8b 	.word	0x0800be8b
 800abf0:	080076a1 	.word	0x080076a1
 800abf4:	0800a94d 	.word	0x0800a94d
 800abf8:	0800be87 	.word	0x0800be87

0800abfc <__sflush_r>:
 800abfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac04:	0716      	lsls	r6, r2, #28
 800ac06:	4605      	mov	r5, r0
 800ac08:	460c      	mov	r4, r1
 800ac0a:	d454      	bmi.n	800acb6 <__sflush_r+0xba>
 800ac0c:	684b      	ldr	r3, [r1, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	dc02      	bgt.n	800ac18 <__sflush_r+0x1c>
 800ac12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dd48      	ble.n	800acaa <__sflush_r+0xae>
 800ac18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d045      	beq.n	800acaa <__sflush_r+0xae>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac24:	682f      	ldr	r7, [r5, #0]
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	d030      	beq.n	800ac8e <__sflush_r+0x92>
 800ac2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	0759      	lsls	r1, r3, #29
 800ac32:	d505      	bpl.n	800ac40 <__sflush_r+0x44>
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac3a:	b10b      	cbz	r3, 800ac40 <__sflush_r+0x44>
 800ac3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	2300      	movs	r3, #0
 800ac42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac44:	6a21      	ldr	r1, [r4, #32]
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b0      	blx	r6
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	d106      	bne.n	800ac5e <__sflush_r+0x62>
 800ac50:	6829      	ldr	r1, [r5, #0]
 800ac52:	291d      	cmp	r1, #29
 800ac54:	d82b      	bhi.n	800acae <__sflush_r+0xb2>
 800ac56:	4a2a      	ldr	r2, [pc, #168]	@ (800ad00 <__sflush_r+0x104>)
 800ac58:	410a      	asrs	r2, r1
 800ac5a:	07d6      	lsls	r6, r2, #31
 800ac5c:	d427      	bmi.n	800acae <__sflush_r+0xb2>
 800ac5e:	2200      	movs	r2, #0
 800ac60:	6062      	str	r2, [r4, #4]
 800ac62:	04d9      	lsls	r1, r3, #19
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	6022      	str	r2, [r4, #0]
 800ac68:	d504      	bpl.n	800ac74 <__sflush_r+0x78>
 800ac6a:	1c42      	adds	r2, r0, #1
 800ac6c:	d101      	bne.n	800ac72 <__sflush_r+0x76>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b903      	cbnz	r3, 800ac74 <__sflush_r+0x78>
 800ac72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac76:	602f      	str	r7, [r5, #0]
 800ac78:	b1b9      	cbz	r1, 800acaa <__sflush_r+0xae>
 800ac7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac7e:	4299      	cmp	r1, r3
 800ac80:	d002      	beq.n	800ac88 <__sflush_r+0x8c>
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7fe fae0 	bl	8009248 <_free_r>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac8c:	e00d      	b.n	800acaa <__sflush_r+0xae>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4628      	mov	r0, r5
 800ac92:	47b0      	blx	r6
 800ac94:	4602      	mov	r2, r0
 800ac96:	1c50      	adds	r0, r2, #1
 800ac98:	d1c9      	bne.n	800ac2e <__sflush_r+0x32>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0c6      	beq.n	800ac2e <__sflush_r+0x32>
 800aca0:	2b1d      	cmp	r3, #29
 800aca2:	d001      	beq.n	800aca8 <__sflush_r+0xac>
 800aca4:	2b16      	cmp	r3, #22
 800aca6:	d11e      	bne.n	800ace6 <__sflush_r+0xea>
 800aca8:	602f      	str	r7, [r5, #0]
 800acaa:	2000      	movs	r0, #0
 800acac:	e022      	b.n	800acf4 <__sflush_r+0xf8>
 800acae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	e01b      	b.n	800acee <__sflush_r+0xf2>
 800acb6:	690f      	ldr	r7, [r1, #16]
 800acb8:	2f00      	cmp	r7, #0
 800acba:	d0f6      	beq.n	800acaa <__sflush_r+0xae>
 800acbc:	0793      	lsls	r3, r2, #30
 800acbe:	680e      	ldr	r6, [r1, #0]
 800acc0:	bf08      	it	eq
 800acc2:	694b      	ldreq	r3, [r1, #20]
 800acc4:	600f      	str	r7, [r1, #0]
 800acc6:	bf18      	it	ne
 800acc8:	2300      	movne	r3, #0
 800acca:	eba6 0807 	sub.w	r8, r6, r7
 800acce:	608b      	str	r3, [r1, #8]
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	dde9      	ble.n	800acaa <__sflush_r+0xae>
 800acd6:	6a21      	ldr	r1, [r4, #32]
 800acd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acda:	4643      	mov	r3, r8
 800acdc:	463a      	mov	r2, r7
 800acde:	4628      	mov	r0, r5
 800ace0:	47b0      	blx	r6
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dc08      	bgt.n	800acf8 <__sflush_r+0xfc>
 800ace6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295
 800acf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf8:	4407      	add	r7, r0
 800acfa:	eba8 0800 	sub.w	r8, r8, r0
 800acfe:	e7e7      	b.n	800acd0 <__sflush_r+0xd4>
 800ad00:	dfbffffe 	.word	0xdfbffffe

0800ad04 <_fflush_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	690b      	ldr	r3, [r1, #16]
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b913      	cbnz	r3, 800ad14 <_fflush_r+0x10>
 800ad0e:	2500      	movs	r5, #0
 800ad10:	4628      	mov	r0, r5
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	b118      	cbz	r0, 800ad1e <_fflush_r+0x1a>
 800ad16:	6a03      	ldr	r3, [r0, #32]
 800ad18:	b90b      	cbnz	r3, 800ad1e <_fflush_r+0x1a>
 800ad1a:	f7fd fb19 	bl	8008350 <__sinit>
 800ad1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f3      	beq.n	800ad0e <_fflush_r+0xa>
 800ad26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad28:	07d0      	lsls	r0, r2, #31
 800ad2a:	d404      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad2c:	0599      	lsls	r1, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad32:	f7fd fc34 	bl	800859e <__retarget_lock_acquire_recursive>
 800ad36:	4628      	mov	r0, r5
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f7ff ff5f 	bl	800abfc <__sflush_r>
 800ad3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad40:	07da      	lsls	r2, r3, #31
 800ad42:	4605      	mov	r5, r0
 800ad44:	d4e4      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	059b      	lsls	r3, r3, #22
 800ad4a:	d4e1      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad4e:	f7fd fc27 	bl	80085a0 <__retarget_lock_release_recursive>
 800ad52:	e7dd      	b.n	800ad10 <_fflush_r+0xc>

0800ad54 <memmove>:
 800ad54:	4288      	cmp	r0, r1
 800ad56:	b510      	push	{r4, lr}
 800ad58:	eb01 0402 	add.w	r4, r1, r2
 800ad5c:	d902      	bls.n	800ad64 <memmove+0x10>
 800ad5e:	4284      	cmp	r4, r0
 800ad60:	4623      	mov	r3, r4
 800ad62:	d807      	bhi.n	800ad74 <memmove+0x20>
 800ad64:	1e43      	subs	r3, r0, #1
 800ad66:	42a1      	cmp	r1, r4
 800ad68:	d008      	beq.n	800ad7c <memmove+0x28>
 800ad6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad72:	e7f8      	b.n	800ad66 <memmove+0x12>
 800ad74:	4402      	add	r2, r0
 800ad76:	4601      	mov	r1, r0
 800ad78:	428a      	cmp	r2, r1
 800ad7a:	d100      	bne.n	800ad7e <memmove+0x2a>
 800ad7c:	bd10      	pop	{r4, pc}
 800ad7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad86:	e7f7      	b.n	800ad78 <memmove+0x24>

0800ad88 <strncmp>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	b16a      	cbz	r2, 800ada8 <strncmp+0x20>
 800ad8c:	3901      	subs	r1, #1
 800ad8e:	1884      	adds	r4, r0, r2
 800ad90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d103      	bne.n	800ada4 <strncmp+0x1c>
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d001      	beq.n	800ada4 <strncmp+0x1c>
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	d1f5      	bne.n	800ad90 <strncmp+0x8>
 800ada4:	1ad0      	subs	r0, r2, r3
 800ada6:	bd10      	pop	{r4, pc}
 800ada8:	4610      	mov	r0, r2
 800adaa:	e7fc      	b.n	800ada6 <strncmp+0x1e>

0800adac <memcpy>:
 800adac:	440a      	add	r2, r1
 800adae:	4291      	cmp	r1, r2
 800adb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800adb4:	d100      	bne.n	800adb8 <memcpy+0xc>
 800adb6:	4770      	bx	lr
 800adb8:	b510      	push	{r4, lr}
 800adba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adc2:	4291      	cmp	r1, r2
 800adc4:	d1f9      	bne.n	800adba <memcpy+0xe>
 800adc6:	bd10      	pop	{r4, pc}

0800adc8 <nan>:
 800adc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800add0 <nan+0x8>
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	00000000 	.word	0x00000000
 800add4:	7ff80000 	.word	0x7ff80000

0800add8 <__assert_func>:
 800add8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adda:	4614      	mov	r4, r2
 800addc:	461a      	mov	r2, r3
 800adde:	4b09      	ldr	r3, [pc, #36]	@ (800ae04 <__assert_func+0x2c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4605      	mov	r5, r0
 800ade4:	68d8      	ldr	r0, [r3, #12]
 800ade6:	b954      	cbnz	r4, 800adfe <__assert_func+0x26>
 800ade8:	4b07      	ldr	r3, [pc, #28]	@ (800ae08 <__assert_func+0x30>)
 800adea:	461c      	mov	r4, r3
 800adec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adf0:	9100      	str	r1, [sp, #0]
 800adf2:	462b      	mov	r3, r5
 800adf4:	4905      	ldr	r1, [pc, #20]	@ (800ae0c <__assert_func+0x34>)
 800adf6:	f000 fb93 	bl	800b520 <fiprintf>
 800adfa:	f000 fba3 	bl	800b544 <abort>
 800adfe:	4b04      	ldr	r3, [pc, #16]	@ (800ae10 <__assert_func+0x38>)
 800ae00:	e7f4      	b.n	800adec <__assert_func+0x14>
 800ae02:	bf00      	nop
 800ae04:	2000002c 	.word	0x2000002c
 800ae08:	0800bed5 	.word	0x0800bed5
 800ae0c:	0800bea7 	.word	0x0800bea7
 800ae10:	0800be9a 	.word	0x0800be9a

0800ae14 <rshift>:
 800ae14:	6903      	ldr	r3, [r0, #16]
 800ae16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae22:	f100 0414 	add.w	r4, r0, #20
 800ae26:	dd45      	ble.n	800aeb4 <rshift+0xa0>
 800ae28:	f011 011f 	ands.w	r1, r1, #31
 800ae2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae34:	d10c      	bne.n	800ae50 <rshift+0x3c>
 800ae36:	f100 0710 	add.w	r7, r0, #16
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	42b1      	cmp	r1, r6
 800ae3e:	d334      	bcc.n	800aeaa <rshift+0x96>
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	1eea      	subs	r2, r5, #3
 800ae46:	4296      	cmp	r6, r2
 800ae48:	bf38      	it	cc
 800ae4a:	2300      	movcc	r3, #0
 800ae4c:	4423      	add	r3, r4
 800ae4e:	e015      	b.n	800ae7c <rshift+0x68>
 800ae50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae54:	f1c1 0820 	rsb	r8, r1, #32
 800ae58:	40cf      	lsrs	r7, r1
 800ae5a:	f105 0e04 	add.w	lr, r5, #4
 800ae5e:	46a1      	mov	r9, r4
 800ae60:	4576      	cmp	r6, lr
 800ae62:	46f4      	mov	ip, lr
 800ae64:	d815      	bhi.n	800ae92 <rshift+0x7e>
 800ae66:	1a9a      	subs	r2, r3, r2
 800ae68:	0092      	lsls	r2, r2, #2
 800ae6a:	3a04      	subs	r2, #4
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	42ae      	cmp	r6, r5
 800ae70:	bf38      	it	cc
 800ae72:	2200      	movcc	r2, #0
 800ae74:	18a3      	adds	r3, r4, r2
 800ae76:	50a7      	str	r7, [r4, r2]
 800ae78:	b107      	cbz	r7, 800ae7c <rshift+0x68>
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	1b1a      	subs	r2, r3, r4
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae84:	bf08      	it	eq
 800ae86:	2300      	moveq	r3, #0
 800ae88:	6102      	str	r2, [r0, #16]
 800ae8a:	bf08      	it	eq
 800ae8c:	6143      	streq	r3, [r0, #20]
 800ae8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae92:	f8dc c000 	ldr.w	ip, [ip]
 800ae96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ae9e:	f849 7b04 	str.w	r7, [r9], #4
 800aea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aea6:	40cf      	lsrs	r7, r1
 800aea8:	e7da      	b.n	800ae60 <rshift+0x4c>
 800aeaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800aeae:	f847 cf04 	str.w	ip, [r7, #4]!
 800aeb2:	e7c3      	b.n	800ae3c <rshift+0x28>
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	e7e1      	b.n	800ae7c <rshift+0x68>

0800aeb8 <__hexdig_fun>:
 800aeb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d802      	bhi.n	800aec6 <__hexdig_fun+0xe>
 800aec0:	3820      	subs	r0, #32
 800aec2:	b2c0      	uxtb	r0, r0
 800aec4:	4770      	bx	lr
 800aec6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aeca:	2b05      	cmp	r3, #5
 800aecc:	d801      	bhi.n	800aed2 <__hexdig_fun+0x1a>
 800aece:	3847      	subs	r0, #71	@ 0x47
 800aed0:	e7f7      	b.n	800aec2 <__hexdig_fun+0xa>
 800aed2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	d801      	bhi.n	800aede <__hexdig_fun+0x26>
 800aeda:	3827      	subs	r0, #39	@ 0x27
 800aedc:	e7f1      	b.n	800aec2 <__hexdig_fun+0xa>
 800aede:	2000      	movs	r0, #0
 800aee0:	4770      	bx	lr
	...

0800aee4 <__gethex>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	b085      	sub	sp, #20
 800aeea:	468a      	mov	sl, r1
 800aeec:	9302      	str	r3, [sp, #8]
 800aeee:	680b      	ldr	r3, [r1, #0]
 800aef0:	9001      	str	r0, [sp, #4]
 800aef2:	4690      	mov	r8, r2
 800aef4:	1c9c      	adds	r4, r3, #2
 800aef6:	46a1      	mov	r9, r4
 800aef8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aefc:	2830      	cmp	r0, #48	@ 0x30
 800aefe:	d0fa      	beq.n	800aef6 <__gethex+0x12>
 800af00:	eba9 0303 	sub.w	r3, r9, r3
 800af04:	f1a3 0b02 	sub.w	fp, r3, #2
 800af08:	f7ff ffd6 	bl	800aeb8 <__hexdig_fun>
 800af0c:	4605      	mov	r5, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	d168      	bne.n	800afe4 <__gethex+0x100>
 800af12:	49a0      	ldr	r1, [pc, #640]	@ (800b194 <__gethex+0x2b0>)
 800af14:	2201      	movs	r2, #1
 800af16:	4648      	mov	r0, r9
 800af18:	f7ff ff36 	bl	800ad88 <strncmp>
 800af1c:	4607      	mov	r7, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d167      	bne.n	800aff2 <__gethex+0x10e>
 800af22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800af26:	4626      	mov	r6, r4
 800af28:	f7ff ffc6 	bl	800aeb8 <__hexdig_fun>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d062      	beq.n	800aff6 <__gethex+0x112>
 800af30:	4623      	mov	r3, r4
 800af32:	7818      	ldrb	r0, [r3, #0]
 800af34:	2830      	cmp	r0, #48	@ 0x30
 800af36:	4699      	mov	r9, r3
 800af38:	f103 0301 	add.w	r3, r3, #1
 800af3c:	d0f9      	beq.n	800af32 <__gethex+0x4e>
 800af3e:	f7ff ffbb 	bl	800aeb8 <__hexdig_fun>
 800af42:	fab0 f580 	clz	r5, r0
 800af46:	096d      	lsrs	r5, r5, #5
 800af48:	f04f 0b01 	mov.w	fp, #1
 800af4c:	464a      	mov	r2, r9
 800af4e:	4616      	mov	r6, r2
 800af50:	3201      	adds	r2, #1
 800af52:	7830      	ldrb	r0, [r6, #0]
 800af54:	f7ff ffb0 	bl	800aeb8 <__hexdig_fun>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1f8      	bne.n	800af4e <__gethex+0x6a>
 800af5c:	498d      	ldr	r1, [pc, #564]	@ (800b194 <__gethex+0x2b0>)
 800af5e:	2201      	movs	r2, #1
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ff11 	bl	800ad88 <strncmp>
 800af66:	2800      	cmp	r0, #0
 800af68:	d13f      	bne.n	800afea <__gethex+0x106>
 800af6a:	b944      	cbnz	r4, 800af7e <__gethex+0x9a>
 800af6c:	1c74      	adds	r4, r6, #1
 800af6e:	4622      	mov	r2, r4
 800af70:	4616      	mov	r6, r2
 800af72:	3201      	adds	r2, #1
 800af74:	7830      	ldrb	r0, [r6, #0]
 800af76:	f7ff ff9f 	bl	800aeb8 <__hexdig_fun>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d1f8      	bne.n	800af70 <__gethex+0x8c>
 800af7e:	1ba4      	subs	r4, r4, r6
 800af80:	00a7      	lsls	r7, r4, #2
 800af82:	7833      	ldrb	r3, [r6, #0]
 800af84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800af88:	2b50      	cmp	r3, #80	@ 0x50
 800af8a:	d13e      	bne.n	800b00a <__gethex+0x126>
 800af8c:	7873      	ldrb	r3, [r6, #1]
 800af8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800af90:	d033      	beq.n	800affa <__gethex+0x116>
 800af92:	2b2d      	cmp	r3, #45	@ 0x2d
 800af94:	d034      	beq.n	800b000 <__gethex+0x11c>
 800af96:	1c71      	adds	r1, r6, #1
 800af98:	2400      	movs	r4, #0
 800af9a:	7808      	ldrb	r0, [r1, #0]
 800af9c:	f7ff ff8c 	bl	800aeb8 <__hexdig_fun>
 800afa0:	1e43      	subs	r3, r0, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b18      	cmp	r3, #24
 800afa6:	d830      	bhi.n	800b00a <__gethex+0x126>
 800afa8:	f1a0 0210 	sub.w	r2, r0, #16
 800afac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afb0:	f7ff ff82 	bl	800aeb8 <__hexdig_fun>
 800afb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800afb8:	fa5f fc8c 	uxtb.w	ip, ip
 800afbc:	f1bc 0f18 	cmp.w	ip, #24
 800afc0:	f04f 030a 	mov.w	r3, #10
 800afc4:	d91e      	bls.n	800b004 <__gethex+0x120>
 800afc6:	b104      	cbz	r4, 800afca <__gethex+0xe6>
 800afc8:	4252      	negs	r2, r2
 800afca:	4417      	add	r7, r2
 800afcc:	f8ca 1000 	str.w	r1, [sl]
 800afd0:	b1ed      	cbz	r5, 800b00e <__gethex+0x12a>
 800afd2:	f1bb 0f00 	cmp.w	fp, #0
 800afd6:	bf0c      	ite	eq
 800afd8:	2506      	moveq	r5, #6
 800afda:	2500      	movne	r5, #0
 800afdc:	4628      	mov	r0, r5
 800afde:	b005      	add	sp, #20
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	2500      	movs	r5, #0
 800afe6:	462c      	mov	r4, r5
 800afe8:	e7b0      	b.n	800af4c <__gethex+0x68>
 800afea:	2c00      	cmp	r4, #0
 800afec:	d1c7      	bne.n	800af7e <__gethex+0x9a>
 800afee:	4627      	mov	r7, r4
 800aff0:	e7c7      	b.n	800af82 <__gethex+0x9e>
 800aff2:	464e      	mov	r6, r9
 800aff4:	462f      	mov	r7, r5
 800aff6:	2501      	movs	r5, #1
 800aff8:	e7c3      	b.n	800af82 <__gethex+0x9e>
 800affa:	2400      	movs	r4, #0
 800affc:	1cb1      	adds	r1, r6, #2
 800affe:	e7cc      	b.n	800af9a <__gethex+0xb6>
 800b000:	2401      	movs	r4, #1
 800b002:	e7fb      	b.n	800affc <__gethex+0x118>
 800b004:	fb03 0002 	mla	r0, r3, r2, r0
 800b008:	e7ce      	b.n	800afa8 <__gethex+0xc4>
 800b00a:	4631      	mov	r1, r6
 800b00c:	e7de      	b.n	800afcc <__gethex+0xe8>
 800b00e:	eba6 0309 	sub.w	r3, r6, r9
 800b012:	3b01      	subs	r3, #1
 800b014:	4629      	mov	r1, r5
 800b016:	2b07      	cmp	r3, #7
 800b018:	dc0a      	bgt.n	800b030 <__gethex+0x14c>
 800b01a:	9801      	ldr	r0, [sp, #4]
 800b01c:	f7fe f95e 	bl	80092dc <_Balloc>
 800b020:	4604      	mov	r4, r0
 800b022:	b940      	cbnz	r0, 800b036 <__gethex+0x152>
 800b024:	4b5c      	ldr	r3, [pc, #368]	@ (800b198 <__gethex+0x2b4>)
 800b026:	4602      	mov	r2, r0
 800b028:	21e4      	movs	r1, #228	@ 0xe4
 800b02a:	485c      	ldr	r0, [pc, #368]	@ (800b19c <__gethex+0x2b8>)
 800b02c:	f7ff fed4 	bl	800add8 <__assert_func>
 800b030:	3101      	adds	r1, #1
 800b032:	105b      	asrs	r3, r3, #1
 800b034:	e7ef      	b.n	800b016 <__gethex+0x132>
 800b036:	f100 0a14 	add.w	sl, r0, #20
 800b03a:	2300      	movs	r3, #0
 800b03c:	4655      	mov	r5, sl
 800b03e:	469b      	mov	fp, r3
 800b040:	45b1      	cmp	r9, r6
 800b042:	d337      	bcc.n	800b0b4 <__gethex+0x1d0>
 800b044:	f845 bb04 	str.w	fp, [r5], #4
 800b048:	eba5 050a 	sub.w	r5, r5, sl
 800b04c:	10ad      	asrs	r5, r5, #2
 800b04e:	6125      	str	r5, [r4, #16]
 800b050:	4658      	mov	r0, fp
 800b052:	f7fe fa35 	bl	80094c0 <__hi0bits>
 800b056:	016d      	lsls	r5, r5, #5
 800b058:	f8d8 6000 	ldr.w	r6, [r8]
 800b05c:	1a2d      	subs	r5, r5, r0
 800b05e:	42b5      	cmp	r5, r6
 800b060:	dd54      	ble.n	800b10c <__gethex+0x228>
 800b062:	1bad      	subs	r5, r5, r6
 800b064:	4629      	mov	r1, r5
 800b066:	4620      	mov	r0, r4
 800b068:	f7fe fdc9 	bl	8009bfe <__any_on>
 800b06c:	4681      	mov	r9, r0
 800b06e:	b178      	cbz	r0, 800b090 <__gethex+0x1ac>
 800b070:	1e6b      	subs	r3, r5, #1
 800b072:	1159      	asrs	r1, r3, #5
 800b074:	f003 021f 	and.w	r2, r3, #31
 800b078:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b07c:	f04f 0901 	mov.w	r9, #1
 800b080:	fa09 f202 	lsl.w	r2, r9, r2
 800b084:	420a      	tst	r2, r1
 800b086:	d003      	beq.n	800b090 <__gethex+0x1ac>
 800b088:	454b      	cmp	r3, r9
 800b08a:	dc36      	bgt.n	800b0fa <__gethex+0x216>
 800b08c:	f04f 0902 	mov.w	r9, #2
 800b090:	4629      	mov	r1, r5
 800b092:	4620      	mov	r0, r4
 800b094:	f7ff febe 	bl	800ae14 <rshift>
 800b098:	442f      	add	r7, r5
 800b09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b09e:	42bb      	cmp	r3, r7
 800b0a0:	da42      	bge.n	800b128 <__gethex+0x244>
 800b0a2:	9801      	ldr	r0, [sp, #4]
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	f7fe f959 	bl	800935c <_Bfree>
 800b0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	25a3      	movs	r5, #163	@ 0xa3
 800b0b2:	e793      	b.n	800afdc <__gethex+0xf8>
 800b0b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b0b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b0ba:	d012      	beq.n	800b0e2 <__gethex+0x1fe>
 800b0bc:	2b20      	cmp	r3, #32
 800b0be:	d104      	bne.n	800b0ca <__gethex+0x1e6>
 800b0c0:	f845 bb04 	str.w	fp, [r5], #4
 800b0c4:	f04f 0b00 	mov.w	fp, #0
 800b0c8:	465b      	mov	r3, fp
 800b0ca:	7830      	ldrb	r0, [r6, #0]
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	f7ff fef3 	bl	800aeb8 <__hexdig_fun>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	f000 000f 	and.w	r0, r0, #15
 800b0d8:	4098      	lsls	r0, r3
 800b0da:	ea4b 0b00 	orr.w	fp, fp, r0
 800b0de:	3304      	adds	r3, #4
 800b0e0:	e7ae      	b.n	800b040 <__gethex+0x15c>
 800b0e2:	45b1      	cmp	r9, r6
 800b0e4:	d8ea      	bhi.n	800b0bc <__gethex+0x1d8>
 800b0e6:	492b      	ldr	r1, [pc, #172]	@ (800b194 <__gethex+0x2b0>)
 800b0e8:	9303      	str	r3, [sp, #12]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff fe4b 	bl	800ad88 <strncmp>
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d1e1      	bne.n	800b0bc <__gethex+0x1d8>
 800b0f8:	e7a2      	b.n	800b040 <__gethex+0x15c>
 800b0fa:	1ea9      	subs	r1, r5, #2
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f7fe fd7e 	bl	8009bfe <__any_on>
 800b102:	2800      	cmp	r0, #0
 800b104:	d0c2      	beq.n	800b08c <__gethex+0x1a8>
 800b106:	f04f 0903 	mov.w	r9, #3
 800b10a:	e7c1      	b.n	800b090 <__gethex+0x1ac>
 800b10c:	da09      	bge.n	800b122 <__gethex+0x23e>
 800b10e:	1b75      	subs	r5, r6, r5
 800b110:	4621      	mov	r1, r4
 800b112:	9801      	ldr	r0, [sp, #4]
 800b114:	462a      	mov	r2, r5
 800b116:	f7fe fb39 	bl	800978c <__lshift>
 800b11a:	1b7f      	subs	r7, r7, r5
 800b11c:	4604      	mov	r4, r0
 800b11e:	f100 0a14 	add.w	sl, r0, #20
 800b122:	f04f 0900 	mov.w	r9, #0
 800b126:	e7b8      	b.n	800b09a <__gethex+0x1b6>
 800b128:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b12c:	42bd      	cmp	r5, r7
 800b12e:	dd6f      	ble.n	800b210 <__gethex+0x32c>
 800b130:	1bed      	subs	r5, r5, r7
 800b132:	42ae      	cmp	r6, r5
 800b134:	dc34      	bgt.n	800b1a0 <__gethex+0x2bc>
 800b136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d022      	beq.n	800b184 <__gethex+0x2a0>
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d024      	beq.n	800b18c <__gethex+0x2a8>
 800b142:	2b01      	cmp	r3, #1
 800b144:	d115      	bne.n	800b172 <__gethex+0x28e>
 800b146:	42ae      	cmp	r6, r5
 800b148:	d113      	bne.n	800b172 <__gethex+0x28e>
 800b14a:	2e01      	cmp	r6, #1
 800b14c:	d10b      	bne.n	800b166 <__gethex+0x282>
 800b14e:	9a02      	ldr	r2, [sp, #8]
 800b150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	2301      	movs	r3, #1
 800b158:	6123      	str	r3, [r4, #16]
 800b15a:	f8ca 3000 	str.w	r3, [sl]
 800b15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b160:	2562      	movs	r5, #98	@ 0x62
 800b162:	601c      	str	r4, [r3, #0]
 800b164:	e73a      	b.n	800afdc <__gethex+0xf8>
 800b166:	1e71      	subs	r1, r6, #1
 800b168:	4620      	mov	r0, r4
 800b16a:	f7fe fd48 	bl	8009bfe <__any_on>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d1ed      	bne.n	800b14e <__gethex+0x26a>
 800b172:	9801      	ldr	r0, [sp, #4]
 800b174:	4621      	mov	r1, r4
 800b176:	f7fe f8f1 	bl	800935c <_Bfree>
 800b17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b17c:	2300      	movs	r3, #0
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	2550      	movs	r5, #80	@ 0x50
 800b182:	e72b      	b.n	800afdc <__gethex+0xf8>
 800b184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1f3      	bne.n	800b172 <__gethex+0x28e>
 800b18a:	e7e0      	b.n	800b14e <__gethex+0x26a>
 800b18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1dd      	bne.n	800b14e <__gethex+0x26a>
 800b192:	e7ee      	b.n	800b172 <__gethex+0x28e>
 800b194:	0800bd28 	.word	0x0800bd28
 800b198:	0800bbc1 	.word	0x0800bbc1
 800b19c:	0800bed6 	.word	0x0800bed6
 800b1a0:	1e6f      	subs	r7, r5, #1
 800b1a2:	f1b9 0f00 	cmp.w	r9, #0
 800b1a6:	d130      	bne.n	800b20a <__gethex+0x326>
 800b1a8:	b127      	cbz	r7, 800b1b4 <__gethex+0x2d0>
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7fe fd26 	bl	8009bfe <__any_on>
 800b1b2:	4681      	mov	r9, r0
 800b1b4:	117a      	asrs	r2, r7, #5
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b1bc:	f007 071f 	and.w	r7, r7, #31
 800b1c0:	40bb      	lsls	r3, r7
 800b1c2:	4213      	tst	r3, r2
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	bf18      	it	ne
 800b1ca:	f049 0902 	orrne.w	r9, r9, #2
 800b1ce:	f7ff fe21 	bl	800ae14 <rshift>
 800b1d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b1d6:	1b76      	subs	r6, r6, r5
 800b1d8:	2502      	movs	r5, #2
 800b1da:	f1b9 0f00 	cmp.w	r9, #0
 800b1de:	d047      	beq.n	800b270 <__gethex+0x38c>
 800b1e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d015      	beq.n	800b214 <__gethex+0x330>
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d017      	beq.n	800b21c <__gethex+0x338>
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d109      	bne.n	800b204 <__gethex+0x320>
 800b1f0:	f019 0f02 	tst.w	r9, #2
 800b1f4:	d006      	beq.n	800b204 <__gethex+0x320>
 800b1f6:	f8da 3000 	ldr.w	r3, [sl]
 800b1fa:	ea49 0903 	orr.w	r9, r9, r3
 800b1fe:	f019 0f01 	tst.w	r9, #1
 800b202:	d10e      	bne.n	800b222 <__gethex+0x33e>
 800b204:	f045 0510 	orr.w	r5, r5, #16
 800b208:	e032      	b.n	800b270 <__gethex+0x38c>
 800b20a:	f04f 0901 	mov.w	r9, #1
 800b20e:	e7d1      	b.n	800b1b4 <__gethex+0x2d0>
 800b210:	2501      	movs	r5, #1
 800b212:	e7e2      	b.n	800b1da <__gethex+0x2f6>
 800b214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b216:	f1c3 0301 	rsb	r3, r3, #1
 800b21a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0f0      	beq.n	800b204 <__gethex+0x320>
 800b222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b226:	f104 0314 	add.w	r3, r4, #20
 800b22a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b22e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b232:	f04f 0c00 	mov.w	ip, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f853 2b04 	ldr.w	r2, [r3], #4
 800b23c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b240:	d01b      	beq.n	800b27a <__gethex+0x396>
 800b242:	3201      	adds	r2, #1
 800b244:	6002      	str	r2, [r0, #0]
 800b246:	2d02      	cmp	r5, #2
 800b248:	f104 0314 	add.w	r3, r4, #20
 800b24c:	d13c      	bne.n	800b2c8 <__gethex+0x3e4>
 800b24e:	f8d8 2000 	ldr.w	r2, [r8]
 800b252:	3a01      	subs	r2, #1
 800b254:	42b2      	cmp	r2, r6
 800b256:	d109      	bne.n	800b26c <__gethex+0x388>
 800b258:	1171      	asrs	r1, r6, #5
 800b25a:	2201      	movs	r2, #1
 800b25c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b260:	f006 061f 	and.w	r6, r6, #31
 800b264:	fa02 f606 	lsl.w	r6, r2, r6
 800b268:	421e      	tst	r6, r3
 800b26a:	d13a      	bne.n	800b2e2 <__gethex+0x3fe>
 800b26c:	f045 0520 	orr.w	r5, r5, #32
 800b270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b272:	601c      	str	r4, [r3, #0]
 800b274:	9b02      	ldr	r3, [sp, #8]
 800b276:	601f      	str	r7, [r3, #0]
 800b278:	e6b0      	b.n	800afdc <__gethex+0xf8>
 800b27a:	4299      	cmp	r1, r3
 800b27c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b280:	d8d9      	bhi.n	800b236 <__gethex+0x352>
 800b282:	68a3      	ldr	r3, [r4, #8]
 800b284:	459b      	cmp	fp, r3
 800b286:	db17      	blt.n	800b2b8 <__gethex+0x3d4>
 800b288:	6861      	ldr	r1, [r4, #4]
 800b28a:	9801      	ldr	r0, [sp, #4]
 800b28c:	3101      	adds	r1, #1
 800b28e:	f7fe f825 	bl	80092dc <_Balloc>
 800b292:	4681      	mov	r9, r0
 800b294:	b918      	cbnz	r0, 800b29e <__gethex+0x3ba>
 800b296:	4b1a      	ldr	r3, [pc, #104]	@ (800b300 <__gethex+0x41c>)
 800b298:	4602      	mov	r2, r0
 800b29a:	2184      	movs	r1, #132	@ 0x84
 800b29c:	e6c5      	b.n	800b02a <__gethex+0x146>
 800b29e:	6922      	ldr	r2, [r4, #16]
 800b2a0:	3202      	adds	r2, #2
 800b2a2:	f104 010c 	add.w	r1, r4, #12
 800b2a6:	0092      	lsls	r2, r2, #2
 800b2a8:	300c      	adds	r0, #12
 800b2aa:	f7ff fd7f 	bl	800adac <memcpy>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	9801      	ldr	r0, [sp, #4]
 800b2b2:	f7fe f853 	bl	800935c <_Bfree>
 800b2b6:	464c      	mov	r4, r9
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2c0:	6122      	str	r2, [r4, #16]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	615a      	str	r2, [r3, #20]
 800b2c6:	e7be      	b.n	800b246 <__gethex+0x362>
 800b2c8:	6922      	ldr	r2, [r4, #16]
 800b2ca:	455a      	cmp	r2, fp
 800b2cc:	dd0b      	ble.n	800b2e6 <__gethex+0x402>
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f7ff fd9f 	bl	800ae14 <rshift>
 800b2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2da:	3701      	adds	r7, #1
 800b2dc:	42bb      	cmp	r3, r7
 800b2de:	f6ff aee0 	blt.w	800b0a2 <__gethex+0x1be>
 800b2e2:	2501      	movs	r5, #1
 800b2e4:	e7c2      	b.n	800b26c <__gethex+0x388>
 800b2e6:	f016 061f 	ands.w	r6, r6, #31
 800b2ea:	d0fa      	beq.n	800b2e2 <__gethex+0x3fe>
 800b2ec:	4453      	add	r3, sl
 800b2ee:	f1c6 0620 	rsb	r6, r6, #32
 800b2f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b2f6:	f7fe f8e3 	bl	80094c0 <__hi0bits>
 800b2fa:	42b0      	cmp	r0, r6
 800b2fc:	dbe7      	blt.n	800b2ce <__gethex+0x3ea>
 800b2fe:	e7f0      	b.n	800b2e2 <__gethex+0x3fe>
 800b300:	0800bbc1 	.word	0x0800bbc1

0800b304 <L_shift>:
 800b304:	f1c2 0208 	rsb	r2, r2, #8
 800b308:	0092      	lsls	r2, r2, #2
 800b30a:	b570      	push	{r4, r5, r6, lr}
 800b30c:	f1c2 0620 	rsb	r6, r2, #32
 800b310:	6843      	ldr	r3, [r0, #4]
 800b312:	6804      	ldr	r4, [r0, #0]
 800b314:	fa03 f506 	lsl.w	r5, r3, r6
 800b318:	432c      	orrs	r4, r5
 800b31a:	40d3      	lsrs	r3, r2
 800b31c:	6004      	str	r4, [r0, #0]
 800b31e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b322:	4288      	cmp	r0, r1
 800b324:	d3f4      	bcc.n	800b310 <L_shift+0xc>
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <__match>:
 800b328:	b530      	push	{r4, r5, lr}
 800b32a:	6803      	ldr	r3, [r0, #0]
 800b32c:	3301      	adds	r3, #1
 800b32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b332:	b914      	cbnz	r4, 800b33a <__match+0x12>
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	2001      	movs	r0, #1
 800b338:	bd30      	pop	{r4, r5, pc}
 800b33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b33e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b342:	2d19      	cmp	r5, #25
 800b344:	bf98      	it	ls
 800b346:	3220      	addls	r2, #32
 800b348:	42a2      	cmp	r2, r4
 800b34a:	d0f0      	beq.n	800b32e <__match+0x6>
 800b34c:	2000      	movs	r0, #0
 800b34e:	e7f3      	b.n	800b338 <__match+0x10>

0800b350 <__hexnan>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	680b      	ldr	r3, [r1, #0]
 800b356:	6801      	ldr	r1, [r0, #0]
 800b358:	115e      	asrs	r6, r3, #5
 800b35a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b35e:	f013 031f 	ands.w	r3, r3, #31
 800b362:	b087      	sub	sp, #28
 800b364:	bf18      	it	ne
 800b366:	3604      	addne	r6, #4
 800b368:	2500      	movs	r5, #0
 800b36a:	1f37      	subs	r7, r6, #4
 800b36c:	4682      	mov	sl, r0
 800b36e:	4690      	mov	r8, r2
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	f846 5c04 	str.w	r5, [r6, #-4]
 800b376:	46b9      	mov	r9, r7
 800b378:	463c      	mov	r4, r7
 800b37a:	9502      	str	r5, [sp, #8]
 800b37c:	46ab      	mov	fp, r5
 800b37e:	784a      	ldrb	r2, [r1, #1]
 800b380:	1c4b      	adds	r3, r1, #1
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	b342      	cbz	r2, 800b3d8 <__hexnan+0x88>
 800b386:	4610      	mov	r0, r2
 800b388:	9105      	str	r1, [sp, #20]
 800b38a:	9204      	str	r2, [sp, #16]
 800b38c:	f7ff fd94 	bl	800aeb8 <__hexdig_fun>
 800b390:	2800      	cmp	r0, #0
 800b392:	d151      	bne.n	800b438 <__hexnan+0xe8>
 800b394:	9a04      	ldr	r2, [sp, #16]
 800b396:	9905      	ldr	r1, [sp, #20]
 800b398:	2a20      	cmp	r2, #32
 800b39a:	d818      	bhi.n	800b3ce <__hexnan+0x7e>
 800b39c:	9b02      	ldr	r3, [sp, #8]
 800b39e:	459b      	cmp	fp, r3
 800b3a0:	dd13      	ble.n	800b3ca <__hexnan+0x7a>
 800b3a2:	454c      	cmp	r4, r9
 800b3a4:	d206      	bcs.n	800b3b4 <__hexnan+0x64>
 800b3a6:	2d07      	cmp	r5, #7
 800b3a8:	dc04      	bgt.n	800b3b4 <__hexnan+0x64>
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff ffa8 	bl	800b304 <L_shift>
 800b3b4:	4544      	cmp	r4, r8
 800b3b6:	d952      	bls.n	800b45e <__hexnan+0x10e>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f1a4 0904 	sub.w	r9, r4, #4
 800b3be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b3c6:	464c      	mov	r4, r9
 800b3c8:	461d      	mov	r5, r3
 800b3ca:	9903      	ldr	r1, [sp, #12]
 800b3cc:	e7d7      	b.n	800b37e <__hexnan+0x2e>
 800b3ce:	2a29      	cmp	r2, #41	@ 0x29
 800b3d0:	d157      	bne.n	800b482 <__hexnan+0x132>
 800b3d2:	3102      	adds	r1, #2
 800b3d4:	f8ca 1000 	str.w	r1, [sl]
 800b3d8:	f1bb 0f00 	cmp.w	fp, #0
 800b3dc:	d051      	beq.n	800b482 <__hexnan+0x132>
 800b3de:	454c      	cmp	r4, r9
 800b3e0:	d206      	bcs.n	800b3f0 <__hexnan+0xa0>
 800b3e2:	2d07      	cmp	r5, #7
 800b3e4:	dc04      	bgt.n	800b3f0 <__hexnan+0xa0>
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff ff8a 	bl	800b304 <L_shift>
 800b3f0:	4544      	cmp	r4, r8
 800b3f2:	d936      	bls.n	800b462 <__hexnan+0x112>
 800b3f4:	f1a8 0204 	sub.w	r2, r8, #4
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800b402:	429f      	cmp	r7, r3
 800b404:	d2f9      	bcs.n	800b3fa <__hexnan+0xaa>
 800b406:	1b3b      	subs	r3, r7, r4
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	3304      	adds	r3, #4
 800b40e:	3401      	adds	r4, #1
 800b410:	3e03      	subs	r6, #3
 800b412:	42b4      	cmp	r4, r6
 800b414:	bf88      	it	hi
 800b416:	2304      	movhi	r3, #4
 800b418:	4443      	add	r3, r8
 800b41a:	2200      	movs	r2, #0
 800b41c:	f843 2b04 	str.w	r2, [r3], #4
 800b420:	429f      	cmp	r7, r3
 800b422:	d2fb      	bcs.n	800b41c <__hexnan+0xcc>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	b91b      	cbnz	r3, 800b430 <__hexnan+0xe0>
 800b428:	4547      	cmp	r7, r8
 800b42a:	d128      	bne.n	800b47e <__hexnan+0x12e>
 800b42c:	2301      	movs	r3, #1
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	2005      	movs	r0, #5
 800b432:	b007      	add	sp, #28
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	3501      	adds	r5, #1
 800b43a:	2d08      	cmp	r5, #8
 800b43c:	f10b 0b01 	add.w	fp, fp, #1
 800b440:	dd06      	ble.n	800b450 <__hexnan+0x100>
 800b442:	4544      	cmp	r4, r8
 800b444:	d9c1      	bls.n	800b3ca <__hexnan+0x7a>
 800b446:	2300      	movs	r3, #0
 800b448:	f844 3c04 	str.w	r3, [r4, #-4]
 800b44c:	2501      	movs	r5, #1
 800b44e:	3c04      	subs	r4, #4
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	f000 000f 	and.w	r0, r0, #15
 800b456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b45a:	6020      	str	r0, [r4, #0]
 800b45c:	e7b5      	b.n	800b3ca <__hexnan+0x7a>
 800b45e:	2508      	movs	r5, #8
 800b460:	e7b3      	b.n	800b3ca <__hexnan+0x7a>
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0dd      	beq.n	800b424 <__hexnan+0xd4>
 800b468:	f1c3 0320 	rsb	r3, r3, #32
 800b46c:	f04f 32ff 	mov.w	r2, #4294967295
 800b470:	40da      	lsrs	r2, r3
 800b472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b476:	4013      	ands	r3, r2
 800b478:	f846 3c04 	str.w	r3, [r6, #-4]
 800b47c:	e7d2      	b.n	800b424 <__hexnan+0xd4>
 800b47e:	3f04      	subs	r7, #4
 800b480:	e7d0      	b.n	800b424 <__hexnan+0xd4>
 800b482:	2004      	movs	r0, #4
 800b484:	e7d5      	b.n	800b432 <__hexnan+0xe2>

0800b486 <__ascii_mbtowc>:
 800b486:	b082      	sub	sp, #8
 800b488:	b901      	cbnz	r1, 800b48c <__ascii_mbtowc+0x6>
 800b48a:	a901      	add	r1, sp, #4
 800b48c:	b142      	cbz	r2, 800b4a0 <__ascii_mbtowc+0x1a>
 800b48e:	b14b      	cbz	r3, 800b4a4 <__ascii_mbtowc+0x1e>
 800b490:	7813      	ldrb	r3, [r2, #0]
 800b492:	600b      	str	r3, [r1, #0]
 800b494:	7812      	ldrb	r2, [r2, #0]
 800b496:	1e10      	subs	r0, r2, #0
 800b498:	bf18      	it	ne
 800b49a:	2001      	movne	r0, #1
 800b49c:	b002      	add	sp, #8
 800b49e:	4770      	bx	lr
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	e7fb      	b.n	800b49c <__ascii_mbtowc+0x16>
 800b4a4:	f06f 0001 	mvn.w	r0, #1
 800b4a8:	e7f8      	b.n	800b49c <__ascii_mbtowc+0x16>

0800b4aa <_realloc_r>:
 800b4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4615      	mov	r5, r2
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	b921      	cbnz	r1, 800b4c0 <_realloc_r+0x16>
 800b4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	f7fb bfc4 	b.w	8007448 <_malloc_r>
 800b4c0:	b92a      	cbnz	r2, 800b4ce <_realloc_r+0x24>
 800b4c2:	f7fd fec1 	bl	8009248 <_free_r>
 800b4c6:	2400      	movs	r4, #0
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ce:	f000 f840 	bl	800b552 <_malloc_usable_size_r>
 800b4d2:	4285      	cmp	r5, r0
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	d802      	bhi.n	800b4de <_realloc_r+0x34>
 800b4d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b4dc:	d8f4      	bhi.n	800b4c8 <_realloc_r+0x1e>
 800b4de:	4629      	mov	r1, r5
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	f7fb ffb1 	bl	8007448 <_malloc_r>
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d0ec      	beq.n	800b4c6 <_realloc_r+0x1c>
 800b4ec:	42b5      	cmp	r5, r6
 800b4ee:	462a      	mov	r2, r5
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	bf28      	it	cs
 800b4f4:	4632      	movcs	r2, r6
 800b4f6:	f7ff fc59 	bl	800adac <memcpy>
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	f7fd fea3 	bl	8009248 <_free_r>
 800b502:	463c      	mov	r4, r7
 800b504:	e7e0      	b.n	800b4c8 <_realloc_r+0x1e>

0800b506 <__ascii_wctomb>:
 800b506:	4603      	mov	r3, r0
 800b508:	4608      	mov	r0, r1
 800b50a:	b141      	cbz	r1, 800b51e <__ascii_wctomb+0x18>
 800b50c:	2aff      	cmp	r2, #255	@ 0xff
 800b50e:	d904      	bls.n	800b51a <__ascii_wctomb+0x14>
 800b510:	228a      	movs	r2, #138	@ 0x8a
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	4770      	bx	lr
 800b51a:	700a      	strb	r2, [r1, #0]
 800b51c:	2001      	movs	r0, #1
 800b51e:	4770      	bx	lr

0800b520 <fiprintf>:
 800b520:	b40e      	push	{r1, r2, r3}
 800b522:	b503      	push	{r0, r1, lr}
 800b524:	4601      	mov	r1, r0
 800b526:	ab03      	add	r3, sp, #12
 800b528:	4805      	ldr	r0, [pc, #20]	@ (800b540 <fiprintf+0x20>)
 800b52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b52e:	6800      	ldr	r0, [r0, #0]
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	f000 f83f 	bl	800b5b4 <_vfiprintf_r>
 800b536:	b002      	add	sp, #8
 800b538:	f85d eb04 	ldr.w	lr, [sp], #4
 800b53c:	b003      	add	sp, #12
 800b53e:	4770      	bx	lr
 800b540:	2000002c 	.word	0x2000002c

0800b544 <abort>:
 800b544:	b508      	push	{r3, lr}
 800b546:	2006      	movs	r0, #6
 800b548:	f000 fa08 	bl	800b95c <raise>
 800b54c:	2001      	movs	r0, #1
 800b54e:	f7f6 fee1 	bl	8002314 <_exit>

0800b552 <_malloc_usable_size_r>:
 800b552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b556:	1f18      	subs	r0, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bfbc      	itt	lt
 800b55c:	580b      	ldrlt	r3, [r1, r0]
 800b55e:	18c0      	addlt	r0, r0, r3
 800b560:	4770      	bx	lr

0800b562 <__sfputc_r>:
 800b562:	6893      	ldr	r3, [r2, #8]
 800b564:	3b01      	subs	r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	b410      	push	{r4}
 800b56a:	6093      	str	r3, [r2, #8]
 800b56c:	da08      	bge.n	800b580 <__sfputc_r+0x1e>
 800b56e:	6994      	ldr	r4, [r2, #24]
 800b570:	42a3      	cmp	r3, r4
 800b572:	db01      	blt.n	800b578 <__sfputc_r+0x16>
 800b574:	290a      	cmp	r1, #10
 800b576:	d103      	bne.n	800b580 <__sfputc_r+0x1e>
 800b578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b57c:	f000 b932 	b.w	800b7e4 <__swbuf_r>
 800b580:	6813      	ldr	r3, [r2, #0]
 800b582:	1c58      	adds	r0, r3, #1
 800b584:	6010      	str	r0, [r2, #0]
 800b586:	7019      	strb	r1, [r3, #0]
 800b588:	4608      	mov	r0, r1
 800b58a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <__sfputs_r>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	4614      	mov	r4, r2
 800b598:	18d5      	adds	r5, r2, r3
 800b59a:	42ac      	cmp	r4, r5
 800b59c:	d101      	bne.n	800b5a2 <__sfputs_r+0x12>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e007      	b.n	800b5b2 <__sfputs_r+0x22>
 800b5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff ffda 	bl	800b562 <__sfputc_r>
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	d1f3      	bne.n	800b59a <__sfputs_r+0xa>
 800b5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5b4 <_vfiprintf_r>:
 800b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	460d      	mov	r5, r1
 800b5ba:	b09d      	sub	sp, #116	@ 0x74
 800b5bc:	4614      	mov	r4, r2
 800b5be:	4698      	mov	r8, r3
 800b5c0:	4606      	mov	r6, r0
 800b5c2:	b118      	cbz	r0, 800b5cc <_vfiprintf_r+0x18>
 800b5c4:	6a03      	ldr	r3, [r0, #32]
 800b5c6:	b90b      	cbnz	r3, 800b5cc <_vfiprintf_r+0x18>
 800b5c8:	f7fc fec2 	bl	8008350 <__sinit>
 800b5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5ce:	07d9      	lsls	r1, r3, #31
 800b5d0:	d405      	bmi.n	800b5de <_vfiprintf_r+0x2a>
 800b5d2:	89ab      	ldrh	r3, [r5, #12]
 800b5d4:	059a      	lsls	r2, r3, #22
 800b5d6:	d402      	bmi.n	800b5de <_vfiprintf_r+0x2a>
 800b5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5da:	f7fc ffe0 	bl	800859e <__retarget_lock_acquire_recursive>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	071b      	lsls	r3, r3, #28
 800b5e2:	d501      	bpl.n	800b5e8 <_vfiprintf_r+0x34>
 800b5e4:	692b      	ldr	r3, [r5, #16]
 800b5e6:	b99b      	cbnz	r3, 800b610 <_vfiprintf_r+0x5c>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f000 f938 	bl	800b860 <__swsetup_r>
 800b5f0:	b170      	cbz	r0, 800b610 <_vfiprintf_r+0x5c>
 800b5f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5f4:	07dc      	lsls	r4, r3, #31
 800b5f6:	d504      	bpl.n	800b602 <_vfiprintf_r+0x4e>
 800b5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fc:	b01d      	add	sp, #116	@ 0x74
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	0598      	lsls	r0, r3, #22
 800b606:	d4f7      	bmi.n	800b5f8 <_vfiprintf_r+0x44>
 800b608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b60a:	f7fc ffc9 	bl	80085a0 <__retarget_lock_release_recursive>
 800b60e:	e7f3      	b.n	800b5f8 <_vfiprintf_r+0x44>
 800b610:	2300      	movs	r3, #0
 800b612:	9309      	str	r3, [sp, #36]	@ 0x24
 800b614:	2320      	movs	r3, #32
 800b616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b61e:	2330      	movs	r3, #48	@ 0x30
 800b620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7d0 <_vfiprintf_r+0x21c>
 800b624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b628:	f04f 0901 	mov.w	r9, #1
 800b62c:	4623      	mov	r3, r4
 800b62e:	469a      	mov	sl, r3
 800b630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b634:	b10a      	cbz	r2, 800b63a <_vfiprintf_r+0x86>
 800b636:	2a25      	cmp	r2, #37	@ 0x25
 800b638:	d1f9      	bne.n	800b62e <_vfiprintf_r+0x7a>
 800b63a:	ebba 0b04 	subs.w	fp, sl, r4
 800b63e:	d00b      	beq.n	800b658 <_vfiprintf_r+0xa4>
 800b640:	465b      	mov	r3, fp
 800b642:	4622      	mov	r2, r4
 800b644:	4629      	mov	r1, r5
 800b646:	4630      	mov	r0, r6
 800b648:	f7ff ffa2 	bl	800b590 <__sfputs_r>
 800b64c:	3001      	adds	r0, #1
 800b64e:	f000 80a7 	beq.w	800b7a0 <_vfiprintf_r+0x1ec>
 800b652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b654:	445a      	add	r2, fp
 800b656:	9209      	str	r2, [sp, #36]	@ 0x24
 800b658:	f89a 3000 	ldrb.w	r3, [sl]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 809f 	beq.w	800b7a0 <_vfiprintf_r+0x1ec>
 800b662:	2300      	movs	r3, #0
 800b664:	f04f 32ff 	mov.w	r2, #4294967295
 800b668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b66c:	f10a 0a01 	add.w	sl, sl, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	9307      	str	r3, [sp, #28]
 800b674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b678:	931a      	str	r3, [sp, #104]	@ 0x68
 800b67a:	4654      	mov	r4, sl
 800b67c:	2205      	movs	r2, #5
 800b67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b682:	4853      	ldr	r0, [pc, #332]	@ (800b7d0 <_vfiprintf_r+0x21c>)
 800b684:	f7f4 fdb4 	bl	80001f0 <memchr>
 800b688:	9a04      	ldr	r2, [sp, #16]
 800b68a:	b9d8      	cbnz	r0, 800b6c4 <_vfiprintf_r+0x110>
 800b68c:	06d1      	lsls	r1, r2, #27
 800b68e:	bf44      	itt	mi
 800b690:	2320      	movmi	r3, #32
 800b692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b696:	0713      	lsls	r3, r2, #28
 800b698:	bf44      	itt	mi
 800b69a:	232b      	movmi	r3, #43	@ 0x2b
 800b69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6a6:	d015      	beq.n	800b6d4 <_vfiprintf_r+0x120>
 800b6a8:	9a07      	ldr	r2, [sp, #28]
 800b6aa:	4654      	mov	r4, sl
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	f04f 0c0a 	mov.w	ip, #10
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b8:	3b30      	subs	r3, #48	@ 0x30
 800b6ba:	2b09      	cmp	r3, #9
 800b6bc:	d94b      	bls.n	800b756 <_vfiprintf_r+0x1a2>
 800b6be:	b1b0      	cbz	r0, 800b6ee <_vfiprintf_r+0x13a>
 800b6c0:	9207      	str	r2, [sp, #28]
 800b6c2:	e014      	b.n	800b6ee <_vfiprintf_r+0x13a>
 800b6c4:	eba0 0308 	sub.w	r3, r0, r8
 800b6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	46a2      	mov	sl, r4
 800b6d2:	e7d2      	b.n	800b67a <_vfiprintf_r+0xc6>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	1d19      	adds	r1, r3, #4
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	9103      	str	r1, [sp, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfbb      	ittet	lt
 800b6e0:	425b      	neglt	r3, r3
 800b6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e6:	9307      	strge	r3, [sp, #28]
 800b6e8:	9307      	strlt	r3, [sp, #28]
 800b6ea:	bfb8      	it	lt
 800b6ec:	9204      	strlt	r2, [sp, #16]
 800b6ee:	7823      	ldrb	r3, [r4, #0]
 800b6f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6f2:	d10a      	bne.n	800b70a <_vfiprintf_r+0x156>
 800b6f4:	7863      	ldrb	r3, [r4, #1]
 800b6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6f8:	d132      	bne.n	800b760 <_vfiprintf_r+0x1ac>
 800b6fa:	9b03      	ldr	r3, [sp, #12]
 800b6fc:	1d1a      	adds	r2, r3, #4
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	9203      	str	r2, [sp, #12]
 800b702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b706:	3402      	adds	r4, #2
 800b708:	9305      	str	r3, [sp, #20]
 800b70a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7e0 <_vfiprintf_r+0x22c>
 800b70e:	7821      	ldrb	r1, [r4, #0]
 800b710:	2203      	movs	r2, #3
 800b712:	4650      	mov	r0, sl
 800b714:	f7f4 fd6c 	bl	80001f0 <memchr>
 800b718:	b138      	cbz	r0, 800b72a <_vfiprintf_r+0x176>
 800b71a:	9b04      	ldr	r3, [sp, #16]
 800b71c:	eba0 000a 	sub.w	r0, r0, sl
 800b720:	2240      	movs	r2, #64	@ 0x40
 800b722:	4082      	lsls	r2, r0
 800b724:	4313      	orrs	r3, r2
 800b726:	3401      	adds	r4, #1
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72e:	4829      	ldr	r0, [pc, #164]	@ (800b7d4 <_vfiprintf_r+0x220>)
 800b730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b734:	2206      	movs	r2, #6
 800b736:	f7f4 fd5b 	bl	80001f0 <memchr>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d03f      	beq.n	800b7be <_vfiprintf_r+0x20a>
 800b73e:	4b26      	ldr	r3, [pc, #152]	@ (800b7d8 <_vfiprintf_r+0x224>)
 800b740:	bb1b      	cbnz	r3, 800b78a <_vfiprintf_r+0x1d6>
 800b742:	9b03      	ldr	r3, [sp, #12]
 800b744:	3307      	adds	r3, #7
 800b746:	f023 0307 	bic.w	r3, r3, #7
 800b74a:	3308      	adds	r3, #8
 800b74c:	9303      	str	r3, [sp, #12]
 800b74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b750:	443b      	add	r3, r7
 800b752:	9309      	str	r3, [sp, #36]	@ 0x24
 800b754:	e76a      	b.n	800b62c <_vfiprintf_r+0x78>
 800b756:	fb0c 3202 	mla	r2, ip, r2, r3
 800b75a:	460c      	mov	r4, r1
 800b75c:	2001      	movs	r0, #1
 800b75e:	e7a8      	b.n	800b6b2 <_vfiprintf_r+0xfe>
 800b760:	2300      	movs	r3, #0
 800b762:	3401      	adds	r4, #1
 800b764:	9305      	str	r3, [sp, #20]
 800b766:	4619      	mov	r1, r3
 800b768:	f04f 0c0a 	mov.w	ip, #10
 800b76c:	4620      	mov	r0, r4
 800b76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b772:	3a30      	subs	r2, #48	@ 0x30
 800b774:	2a09      	cmp	r2, #9
 800b776:	d903      	bls.n	800b780 <_vfiprintf_r+0x1cc>
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d0c6      	beq.n	800b70a <_vfiprintf_r+0x156>
 800b77c:	9105      	str	r1, [sp, #20]
 800b77e:	e7c4      	b.n	800b70a <_vfiprintf_r+0x156>
 800b780:	fb0c 2101 	mla	r1, ip, r1, r2
 800b784:	4604      	mov	r4, r0
 800b786:	2301      	movs	r3, #1
 800b788:	e7f0      	b.n	800b76c <_vfiprintf_r+0x1b8>
 800b78a:	ab03      	add	r3, sp, #12
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	462a      	mov	r2, r5
 800b790:	4b12      	ldr	r3, [pc, #72]	@ (800b7dc <_vfiprintf_r+0x228>)
 800b792:	a904      	add	r1, sp, #16
 800b794:	4630      	mov	r0, r6
 800b796:	f7fb ff83 	bl	80076a0 <_printf_float>
 800b79a:	4607      	mov	r7, r0
 800b79c:	1c78      	adds	r0, r7, #1
 800b79e:	d1d6      	bne.n	800b74e <_vfiprintf_r+0x19a>
 800b7a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7a2:	07d9      	lsls	r1, r3, #31
 800b7a4:	d405      	bmi.n	800b7b2 <_vfiprintf_r+0x1fe>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	059a      	lsls	r2, r3, #22
 800b7aa:	d402      	bmi.n	800b7b2 <_vfiprintf_r+0x1fe>
 800b7ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7ae:	f7fc fef7 	bl	80085a0 <__retarget_lock_release_recursive>
 800b7b2:	89ab      	ldrh	r3, [r5, #12]
 800b7b4:	065b      	lsls	r3, r3, #25
 800b7b6:	f53f af1f 	bmi.w	800b5f8 <_vfiprintf_r+0x44>
 800b7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7bc:	e71e      	b.n	800b5fc <_vfiprintf_r+0x48>
 800b7be:	ab03      	add	r3, sp, #12
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	462a      	mov	r2, r5
 800b7c4:	4b05      	ldr	r3, [pc, #20]	@ (800b7dc <_vfiprintf_r+0x228>)
 800b7c6:	a904      	add	r1, sp, #16
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7fc fa01 	bl	8007bd0 <_printf_i>
 800b7ce:	e7e4      	b.n	800b79a <_vfiprintf_r+0x1e6>
 800b7d0:	0800be81 	.word	0x0800be81
 800b7d4:	0800be8b 	.word	0x0800be8b
 800b7d8:	080076a1 	.word	0x080076a1
 800b7dc:	0800b591 	.word	0x0800b591
 800b7e0:	0800be87 	.word	0x0800be87

0800b7e4 <__swbuf_r>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	460e      	mov	r6, r1
 800b7e8:	4614      	mov	r4, r2
 800b7ea:	4605      	mov	r5, r0
 800b7ec:	b118      	cbz	r0, 800b7f6 <__swbuf_r+0x12>
 800b7ee:	6a03      	ldr	r3, [r0, #32]
 800b7f0:	b90b      	cbnz	r3, 800b7f6 <__swbuf_r+0x12>
 800b7f2:	f7fc fdad 	bl	8008350 <__sinit>
 800b7f6:	69a3      	ldr	r3, [r4, #24]
 800b7f8:	60a3      	str	r3, [r4, #8]
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	071a      	lsls	r2, r3, #28
 800b7fe:	d501      	bpl.n	800b804 <__swbuf_r+0x20>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	b943      	cbnz	r3, 800b816 <__swbuf_r+0x32>
 800b804:	4621      	mov	r1, r4
 800b806:	4628      	mov	r0, r5
 800b808:	f000 f82a 	bl	800b860 <__swsetup_r>
 800b80c:	b118      	cbz	r0, 800b816 <__swbuf_r+0x32>
 800b80e:	f04f 37ff 	mov.w	r7, #4294967295
 800b812:	4638      	mov	r0, r7
 800b814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	6922      	ldr	r2, [r4, #16]
 800b81a:	1a98      	subs	r0, r3, r2
 800b81c:	6963      	ldr	r3, [r4, #20]
 800b81e:	b2f6      	uxtb	r6, r6
 800b820:	4283      	cmp	r3, r0
 800b822:	4637      	mov	r7, r6
 800b824:	dc05      	bgt.n	800b832 <__swbuf_r+0x4e>
 800b826:	4621      	mov	r1, r4
 800b828:	4628      	mov	r0, r5
 800b82a:	f7ff fa6b 	bl	800ad04 <_fflush_r>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d1ed      	bne.n	800b80e <__swbuf_r+0x2a>
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	3b01      	subs	r3, #1
 800b836:	60a3      	str	r3, [r4, #8]
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	6022      	str	r2, [r4, #0]
 800b83e:	701e      	strb	r6, [r3, #0]
 800b840:	6962      	ldr	r2, [r4, #20]
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	429a      	cmp	r2, r3
 800b846:	d004      	beq.n	800b852 <__swbuf_r+0x6e>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	07db      	lsls	r3, r3, #31
 800b84c:	d5e1      	bpl.n	800b812 <__swbuf_r+0x2e>
 800b84e:	2e0a      	cmp	r6, #10
 800b850:	d1df      	bne.n	800b812 <__swbuf_r+0x2e>
 800b852:	4621      	mov	r1, r4
 800b854:	4628      	mov	r0, r5
 800b856:	f7ff fa55 	bl	800ad04 <_fflush_r>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d0d9      	beq.n	800b812 <__swbuf_r+0x2e>
 800b85e:	e7d6      	b.n	800b80e <__swbuf_r+0x2a>

0800b860 <__swsetup_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4b29      	ldr	r3, [pc, #164]	@ (800b908 <__swsetup_r+0xa8>)
 800b864:	4605      	mov	r5, r0
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	460c      	mov	r4, r1
 800b86a:	b118      	cbz	r0, 800b874 <__swsetup_r+0x14>
 800b86c:	6a03      	ldr	r3, [r0, #32]
 800b86e:	b90b      	cbnz	r3, 800b874 <__swsetup_r+0x14>
 800b870:	f7fc fd6e 	bl	8008350 <__sinit>
 800b874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b878:	0719      	lsls	r1, r3, #28
 800b87a:	d422      	bmi.n	800b8c2 <__swsetup_r+0x62>
 800b87c:	06da      	lsls	r2, r3, #27
 800b87e:	d407      	bmi.n	800b890 <__swsetup_r+0x30>
 800b880:	2209      	movs	r2, #9
 800b882:	602a      	str	r2, [r5, #0]
 800b884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b888:	81a3      	strh	r3, [r4, #12]
 800b88a:	f04f 30ff 	mov.w	r0, #4294967295
 800b88e:	e033      	b.n	800b8f8 <__swsetup_r+0x98>
 800b890:	0758      	lsls	r0, r3, #29
 800b892:	d512      	bpl.n	800b8ba <__swsetup_r+0x5a>
 800b894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b896:	b141      	cbz	r1, 800b8aa <__swsetup_r+0x4a>
 800b898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b89c:	4299      	cmp	r1, r3
 800b89e:	d002      	beq.n	800b8a6 <__swsetup_r+0x46>
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f7fd fcd1 	bl	8009248 <_free_r>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8aa:	89a3      	ldrh	r3, [r4, #12]
 800b8ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8b0:	81a3      	strh	r3, [r4, #12]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	6063      	str	r3, [r4, #4]
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	f043 0308 	orr.w	r3, r3, #8
 800b8c0:	81a3      	strh	r3, [r4, #12]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	b94b      	cbnz	r3, 800b8da <__swsetup_r+0x7a>
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8d0:	d003      	beq.n	800b8da <__swsetup_r+0x7a>
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 f883 	bl	800b9e0 <__smakebuf_r>
 800b8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8de:	f013 0201 	ands.w	r2, r3, #1
 800b8e2:	d00a      	beq.n	800b8fa <__swsetup_r+0x9a>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	60a2      	str	r2, [r4, #8]
 800b8e8:	6962      	ldr	r2, [r4, #20]
 800b8ea:	4252      	negs	r2, r2
 800b8ec:	61a2      	str	r2, [r4, #24]
 800b8ee:	6922      	ldr	r2, [r4, #16]
 800b8f0:	b942      	cbnz	r2, 800b904 <__swsetup_r+0xa4>
 800b8f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b8f6:	d1c5      	bne.n	800b884 <__swsetup_r+0x24>
 800b8f8:	bd38      	pop	{r3, r4, r5, pc}
 800b8fa:	0799      	lsls	r1, r3, #30
 800b8fc:	bf58      	it	pl
 800b8fe:	6962      	ldrpl	r2, [r4, #20]
 800b900:	60a2      	str	r2, [r4, #8]
 800b902:	e7f4      	b.n	800b8ee <__swsetup_r+0x8e>
 800b904:	2000      	movs	r0, #0
 800b906:	e7f7      	b.n	800b8f8 <__swsetup_r+0x98>
 800b908:	2000002c 	.word	0x2000002c

0800b90c <_raise_r>:
 800b90c:	291f      	cmp	r1, #31
 800b90e:	b538      	push	{r3, r4, r5, lr}
 800b910:	4605      	mov	r5, r0
 800b912:	460c      	mov	r4, r1
 800b914:	d904      	bls.n	800b920 <_raise_r+0x14>
 800b916:	2316      	movs	r3, #22
 800b918:	6003      	str	r3, [r0, #0]
 800b91a:	f04f 30ff 	mov.w	r0, #4294967295
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b922:	b112      	cbz	r2, 800b92a <_raise_r+0x1e>
 800b924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b928:	b94b      	cbnz	r3, 800b93e <_raise_r+0x32>
 800b92a:	4628      	mov	r0, r5
 800b92c:	f000 f830 	bl	800b990 <_getpid_r>
 800b930:	4622      	mov	r2, r4
 800b932:	4601      	mov	r1, r0
 800b934:	4628      	mov	r0, r5
 800b936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b93a:	f000 b817 	b.w	800b96c <_kill_r>
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d00a      	beq.n	800b958 <_raise_r+0x4c>
 800b942:	1c59      	adds	r1, r3, #1
 800b944:	d103      	bne.n	800b94e <_raise_r+0x42>
 800b946:	2316      	movs	r3, #22
 800b948:	6003      	str	r3, [r0, #0]
 800b94a:	2001      	movs	r0, #1
 800b94c:	e7e7      	b.n	800b91e <_raise_r+0x12>
 800b94e:	2100      	movs	r1, #0
 800b950:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b954:	4620      	mov	r0, r4
 800b956:	4798      	blx	r3
 800b958:	2000      	movs	r0, #0
 800b95a:	e7e0      	b.n	800b91e <_raise_r+0x12>

0800b95c <raise>:
 800b95c:	4b02      	ldr	r3, [pc, #8]	@ (800b968 <raise+0xc>)
 800b95e:	4601      	mov	r1, r0
 800b960:	6818      	ldr	r0, [r3, #0]
 800b962:	f7ff bfd3 	b.w	800b90c <_raise_r>
 800b966:	bf00      	nop
 800b968:	2000002c 	.word	0x2000002c

0800b96c <_kill_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d07      	ldr	r5, [pc, #28]	@ (800b98c <_kill_r+0x20>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	602b      	str	r3, [r5, #0]
 800b97a:	f7f6 fcbb 	bl	80022f4 <_kill>
 800b97e:	1c43      	adds	r3, r0, #1
 800b980:	d102      	bne.n	800b988 <_kill_r+0x1c>
 800b982:	682b      	ldr	r3, [r5, #0]
 800b984:	b103      	cbz	r3, 800b988 <_kill_r+0x1c>
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	bd38      	pop	{r3, r4, r5, pc}
 800b98a:	bf00      	nop
 800b98c:	20000590 	.word	0x20000590

0800b990 <_getpid_r>:
 800b990:	f7f6 bca8 	b.w	80022e4 <_getpid>

0800b994 <__swhatbuf_r>:
 800b994:	b570      	push	{r4, r5, r6, lr}
 800b996:	460c      	mov	r4, r1
 800b998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b99c:	2900      	cmp	r1, #0
 800b99e:	b096      	sub	sp, #88	@ 0x58
 800b9a0:	4615      	mov	r5, r2
 800b9a2:	461e      	mov	r6, r3
 800b9a4:	da0d      	bge.n	800b9c2 <__swhatbuf_r+0x2e>
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9ac:	f04f 0100 	mov.w	r1, #0
 800b9b0:	bf14      	ite	ne
 800b9b2:	2340      	movne	r3, #64	@ 0x40
 800b9b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	6031      	str	r1, [r6, #0]
 800b9bc:	602b      	str	r3, [r5, #0]
 800b9be:	b016      	add	sp, #88	@ 0x58
 800b9c0:	bd70      	pop	{r4, r5, r6, pc}
 800b9c2:	466a      	mov	r2, sp
 800b9c4:	f000 f848 	bl	800ba58 <_fstat_r>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	dbec      	blt.n	800b9a6 <__swhatbuf_r+0x12>
 800b9cc:	9901      	ldr	r1, [sp, #4]
 800b9ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9d6:	4259      	negs	r1, r3
 800b9d8:	4159      	adcs	r1, r3
 800b9da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9de:	e7eb      	b.n	800b9b8 <__swhatbuf_r+0x24>

0800b9e0 <__smakebuf_r>:
 800b9e0:	898b      	ldrh	r3, [r1, #12]
 800b9e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9e4:	079d      	lsls	r5, r3, #30
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	d507      	bpl.n	800b9fc <__smakebuf_r+0x1c>
 800b9ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	6123      	str	r3, [r4, #16]
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	6163      	str	r3, [r4, #20]
 800b9f8:	b003      	add	sp, #12
 800b9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9fc:	ab01      	add	r3, sp, #4
 800b9fe:	466a      	mov	r2, sp
 800ba00:	f7ff ffc8 	bl	800b994 <__swhatbuf_r>
 800ba04:	9f00      	ldr	r7, [sp, #0]
 800ba06:	4605      	mov	r5, r0
 800ba08:	4639      	mov	r1, r7
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7fb fd1c 	bl	8007448 <_malloc_r>
 800ba10:	b948      	cbnz	r0, 800ba26 <__smakebuf_r+0x46>
 800ba12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba16:	059a      	lsls	r2, r3, #22
 800ba18:	d4ee      	bmi.n	800b9f8 <__smakebuf_r+0x18>
 800ba1a:	f023 0303 	bic.w	r3, r3, #3
 800ba1e:	f043 0302 	orr.w	r3, r3, #2
 800ba22:	81a3      	strh	r3, [r4, #12]
 800ba24:	e7e2      	b.n	800b9ec <__smakebuf_r+0xc>
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	6020      	str	r0, [r4, #0]
 800ba2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	9b01      	ldr	r3, [sp, #4]
 800ba32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba36:	b15b      	cbz	r3, 800ba50 <__smakebuf_r+0x70>
 800ba38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f000 f81d 	bl	800ba7c <_isatty_r>
 800ba42:	b128      	cbz	r0, 800ba50 <__smakebuf_r+0x70>
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	f023 0303 	bic.w	r3, r3, #3
 800ba4a:	f043 0301 	orr.w	r3, r3, #1
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	431d      	orrs	r5, r3
 800ba54:	81a5      	strh	r5, [r4, #12]
 800ba56:	e7cf      	b.n	800b9f8 <__smakebuf_r+0x18>

0800ba58 <_fstat_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d07      	ldr	r5, [pc, #28]	@ (800ba78 <_fstat_r+0x20>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	4611      	mov	r1, r2
 800ba64:	602b      	str	r3, [r5, #0]
 800ba66:	f7f6 fca5 	bl	80023b4 <_fstat>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	d102      	bne.n	800ba74 <_fstat_r+0x1c>
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	b103      	cbz	r3, 800ba74 <_fstat_r+0x1c>
 800ba72:	6023      	str	r3, [r4, #0]
 800ba74:	bd38      	pop	{r3, r4, r5, pc}
 800ba76:	bf00      	nop
 800ba78:	20000590 	.word	0x20000590

0800ba7c <_isatty_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d06      	ldr	r5, [pc, #24]	@ (800ba98 <_isatty_r+0x1c>)
 800ba80:	2300      	movs	r3, #0
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	602b      	str	r3, [r5, #0]
 800ba88:	f7f6 fca4 	bl	80023d4 <_isatty>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_isatty_r+0x1a>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_isatty_r+0x1a>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	20000590 	.word	0x20000590

0800ba9c <_init>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	bf00      	nop
 800baa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa2:	bc08      	pop	{r3}
 800baa4:	469e      	mov	lr, r3
 800baa6:	4770      	bx	lr

0800baa8 <_fini>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	bf00      	nop
 800baac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baae:	bc08      	pop	{r3}
 800bab0:	469e      	mov	lr, r3
 800bab2:	4770      	bx	lr
