
Home Alarm System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b820  0800b820  0000c820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb0  0800bcb0  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcb0  0800bcb0  0000ccb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcb8  0800bcb8  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcb8  0800bcb8  0000ccb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bcbc  0800bcbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800bcc0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001e8  0800bea4  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  0800bea4  0000d590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145d1  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a99  00000000  00000000  000217e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00024280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9b  00000000  00000000  00025518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e14a  00000000  00000000  000263b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176e7  00000000  00000000  000444fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afca2  00000000  00000000  0005bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b886  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000637c  00000000  00000000  0010b8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00111c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b804 	.word	0x0800b804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b804 	.word	0x0800b804

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <Check_Password>:
	alarm_system->password= "1001";

	user_input = "\0";
}

bool Check_Password(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	if (!strcmp(alarm_system->password, user_input))		return true;
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <Check_Password+0x28>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <Check_Password+0x2c>)
 8000d20:	6812      	ldr	r2, [r2, #0]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa53 	bl	80001d0 <strcmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <Check_Password+0x20>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <Check_Password+0x22>
	return false;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000208 	.word	0x20000208
 8000d40:	20000204 	.word	0x20000204

08000d44 <Lock_System>:

bool Lock_System(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == ready) {
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <Lock_System+0x28>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d105      	bne.n	8000d5e <Lock_System+0x1a>
		alarm_system->state = set;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <Lock_System+0x28>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2201      	movs	r2, #1
 8000d58:	711a      	strb	r2, [r3, #4]
		return true;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <Lock_System+0x1c>
	}
	return false;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000208 	.word	0x20000208

08000d70 <Unlock_System>:

bool Unlock_System(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == set && Check_Password()) {
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <Unlock_System+0x2c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10a      	bne.n	8000d94 <Unlock_System+0x24>
 8000d7e:	f7ff ffc9 	bl	8000d14 <Check_Password>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <Unlock_System+0x24>
		alarm_system->state = ready;
 8000d88:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <Unlock_System+0x2c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	711a      	strb	r2, [r3, #4]
		return true;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <Unlock_System+0x26>
	}
	return false;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000208 	.word	0x20000208

08000da0 <HD44780_Init>:
	0b01010,
	0b00100
};

void HD44780_Init(uint8_t rows)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000daa:	4a38      	ldr	r2, [pc, #224]	@ (8000e8c <HD44780_Init+0xec>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000db0:	4b37      	ldr	r3, [pc, #220]	@ (8000e90 <HD44780_Init+0xf0>)
 8000db2:	2208      	movs	r2, #8
 8000db4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000db6:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <HD44780_Init+0xf4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000dbc:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <HD44780_Init+0xec>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d907      	bls.n	8000dd4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000dc4:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <HD44780_Init+0xf4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <HD44780_Init+0xf4>)
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e006      	b.n	8000de2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HD44780_Init+0xf4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <HD44780_Init+0xf4>)
 8000de0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000de2:	f000 f985 	bl	80010f0 <DelayInit>
  HAL_Delay(50);
 8000de6:	2032      	movs	r0, #50	@ 0x32
 8000de8:	f001 fa9e 	bl	8002328 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000dec:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <HD44780_Init+0xf0>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f943 	bl	800107c <ExpanderWrite>
  HAL_Delay(1000);
 8000df6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dfa:	f001 fa95 	bl	8002328 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000dfe:	2030      	movs	r0, #48	@ 0x30
 8000e00:	f000 f92b 	bl	800105a <Write4Bits>
  DelayUS(4500);
 8000e04:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e08:	f000 f99c 	bl	8001144 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e0c:	2030      	movs	r0, #48	@ 0x30
 8000e0e:	f000 f924 	bl	800105a <Write4Bits>
  DelayUS(4500);
 8000e12:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e16:	f000 f995 	bl	8001144 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e1a:	2030      	movs	r0, #48	@ 0x30
 8000e1c:	f000 f91d 	bl	800105a <Write4Bits>
  DelayUS(4500);
 8000e20:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e24:	f000 f98e 	bl	8001144 <DelayUS>

  Write4Bits(0x02 << 4);
 8000e28:	2020      	movs	r0, #32
 8000e2a:	f000 f916 	bl	800105a <Write4Bits>
  DelayUS(100);
 8000e2e:	2064      	movs	r0, #100	@ 0x64
 8000e30:	f000 f988 	bl	8001144 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HD44780_Init+0xf4>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f8ce 	bl	8000fe0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HD44780_Init+0xf8>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000e4a:	f000 f875 	bl	8000f38 <HD44780_Display>
  HD44780_Clear();
 8000e4e:	f000 f82b 	bl	8000ea8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HD44780_Init+0xfc>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HD44780_Init+0xfc>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f8bc 	bl	8000fe0 <SendCommand>
  DelayUS(4500);
 8000e68:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e6c:	f000 f96a 	bl	8001144 <DelayUS>

  HD44780_CreateSpecialChar(0, up_arrow);
 8000e70:	490b      	ldr	r1, [pc, #44]	@ (8000ea0 <HD44780_Init+0x100>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f876 	bl	8000f64 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, down_arrow);
 8000e78:	490a      	ldr	r1, [pc, #40]	@ (8000ea4 <HD44780_Init+0x104>)
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 f872 	bl	8000f64 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000e80:	f000 f81d 	bl	8000ebe <HD44780_Home>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000020f 	.word	0x2000020f
 8000e90:	20000210 	.word	0x20000210
 8000e94:	2000020c 	.word	0x2000020c
 8000e98:	2000020d 	.word	0x2000020d
 8000e9c:	2000020e 	.word	0x2000020e
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HD44780_Clear>:

void HD44780_Clear()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 f897 	bl	8000fe0 <SendCommand>
  DelayUS(2000);
 8000eb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eb6:	f000 f945 	bl	8001144 <DelayUS>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HD44780_Home>:

void HD44780_Home()
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f000 f88c 	bl	8000fe0 <SendCommand>
  DelayUS(2000);
 8000ec8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ecc:	f000 f93a 	bl	8001144 <DelayUS>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HD44780_SetCursor+0x5c>)
 8000ee6:	f107 0408 	add.w	r4, r7, #8
 8000eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HD44780_SetCursor+0x60>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d303      	bcc.n	8000f02 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HD44780_SetCursor+0x60>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	3318      	adds	r3, #24
 8000f08:	443b      	add	r3, r7
 8000f0a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4413      	add	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f85d 	bl	8000fe0 <SendCommand>
}
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800b820 	.word	0x0800b820
 8000f34:	2000020f 	.word	0x2000020f

08000f38 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HD44780_Display+0x28>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HD44780_Display+0x28>)
 8000f48:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HD44780_Display+0x28>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f843 	bl	8000fe0 <SendCommand>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000020d 	.word	0x2000020d

08000f64 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f82a 	bl	8000fe0 <SendCommand>
  for (int i=0; i<8; i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e009      	b.n	8000fa6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f82e 	bl	8000ffc <SendChar>
  for (int i=0; i<8; i++)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	ddf2      	ble.n	8000f92 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000fbe:	e006      	b.n	8000fce <HD44780_PrintStr+0x18>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f817 	bl	8000ffc <SendChar>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f4      	bne.n	8000fc0 <HD44780_PrintStr+0xa>
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f812 	bl	8001018 <Send>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2101      	movs	r1, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f804 	bl	8001018 <Send>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f023 030f 	bic.w	r3, r3, #15
 800102e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	4313      	orrs	r3, r2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f80b 	bl	800105a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001044:	7bba      	ldrb	r2, [r7, #14]
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4313      	orrs	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f804 	bl	800105a <Write4Bits>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f808 	bl	800107c <ExpanderWrite>
  PulseEnable(value);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f820 	bl	80010b4 <PulseEnable>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <ExpanderWrite+0x30>)
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001092:	f107 020f 	add.w	r2, r7, #15
 8001096:	230a      	movs	r3, #10
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	214e      	movs	r1, #78	@ 0x4e
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <ExpanderWrite+0x34>)
 80010a0:	f002 fb14 	bl	80036cc <HAL_I2C_Master_Transmit>
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000210 	.word	0x20000210
 80010b0:	20000264 	.word	0x20000264

080010b4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffd8 	bl	800107c <ExpanderWrite>
  DelayUS(20);
 80010cc:	2014      	movs	r0, #20
 80010ce:	f000 f839 	bl	8001144 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffce 	bl	800107c <ExpanderWrite>
  DelayUS(20);
 80010e0:	2014      	movs	r0, #20
 80010e2:	f000 f82f 	bl	8001144 <DelayUS>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <DelayInit>:

static void DelayInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <DelayInit+0x4c>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4a10      	ldr	r2, [pc, #64]	@ (800113c <DelayInit+0x4c>)
 80010fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010fe:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <DelayInit+0x4c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <DelayInit+0x4c>)
 8001106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800110a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <DelayInit+0x50>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <DelayInit+0x50>)
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <DelayInit+0x50>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <DelayInit+0x50>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <DelayInit+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800112a:	bf00      	nop
  __ASM volatile ("NOP");
 800112c:	bf00      	nop
  __ASM volatile ("NOP");
 800112e:	bf00      	nop
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000edf0 	.word	0xe000edf0
 8001140:	e0001000 	.word	0xe0001000

08001144 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <DelayUS+0x44>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <DelayUS+0x48>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9a      	lsrs	r2, r3, #18
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <DelayUS+0x4c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <DelayUS+0x4c>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f6      	bhi.n	8001166 <DelayUS+0x22>
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	371c      	adds	r7, #28
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000010 	.word	0x20000010
 800118c:	431bde83 	.word	0x431bde83
 8001190:	e0001000 	.word	0xe0001000

08001194 <AlarmPeripheral_Init>:
void AlarmIO_Test(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AlarmPeripheral_Init(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	// Set up timer 1 PWM and timer 2 and 6 interrupts
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4810      	ldr	r0, [pc, #64]	@ (80011dc <AlarmPeripheral_Init+0x48>)
 800119c:	f004 fb54 	bl	8005848 <HAL_TIM_PWM_Start>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2036      	movs	r0, #54	@ 0x36
 80011a6:	f001 fffa 	bl	800319e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011aa:	2036      	movs	r0, #54	@ 0x36
 80011ac:	f002 f813 	bl	80031d6 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <AlarmPeripheral_Init+0x4c>)
 80011b2:	f004 fa9d 	bl	80056f0 <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	201c      	movs	r0, #28
 80011bc:	f001 ffef 	bl	800319e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c0:	201c      	movs	r0, #28
 80011c2:	f002 f808 	bl	80031d6 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <AlarmPeripheral_Init+0x50>)
 80011c8:	f004 fa92 	bl	80056f0 <HAL_TIM_Base_Start_IT>

	// Set up LCD screen
	HD44780_Init(2);
 80011cc:	2002      	movs	r0, #2
 80011ce:	f7ff fde7 	bl	8000da0 <HD44780_Init>
	HD44780_Clear();
 80011d2:	f7ff fe69 	bl	8000ea8 <HD44780_Clear>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002b8 	.word	0x200002b8
 80011e0:	20000350 	.word	0x20000350
 80011e4:	20000304 	.word	0x20000304

080011e8 <AlarmIO_Test>:

void AlarmIO_Test(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	// Test LCD screen
	HD44780_SetCursor(0, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fe70 	bl	8000ed4 <HD44780_SetCursor>
	HD44780_PrintStr("WELCOME TO");
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <AlarmIO_Test+0xa4>)
 80011f6:	f7ff fede 	bl	8000fb6 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 80011fa:	2101      	movs	r1, #1
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fe69 	bl	8000ed4 <HD44780_SetCursor>
	HD44780_PrintStr("VANDAR SYSTEMS");
 8001202:	4823      	ldr	r0, [pc, #140]	@ (8001290 <AlarmIO_Test+0xa8>)
 8001204:	f7ff fed7 	bl	8000fb6 <HD44780_PrintStr>

	// Test Passive buzzer
	__HAL_TIM_SET_AUTORELOAD(&htim1, ENABLE_BEEP * 2);
 8001208:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <AlarmIO_Test+0xac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <AlarmIO_Test+0xac>)
 8001214:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001218:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ENABLE_BEEP);
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <AlarmIO_Test+0xac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34

	// Test LEDs
	HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2120      	movs	r1, #32
 8001228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122c:	f002 f978 	bl	8003520 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001230:	20fa      	movs	r0, #250	@ 0xfa
 8001232:	f001 f879 	bl	8002328 <HAL_Delay>

	HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f002 f96f 	bl	8003520 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001242:	20fa      	movs	r0, #250	@ 0xfa
 8001244:	f001 f870 	bl	8002328 <HAL_Delay>

	HD44780_Clear();
 8001248:	f7ff fe2e 	bl	8000ea8 <HD44780_Clear>
	__HAL_TIM_SET_AUTORELOAD(&htim1, DISABLE_BEEP * 2);
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <AlarmIO_Test+0xac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <AlarmIO_Test+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, DISABLE_BEEP);
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <AlarmIO_Test+0xac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2120      	movs	r1, #32
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f002 f959 	bl	8003520 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 800126e:	20fa      	movs	r0, #250	@ 0xfa
 8001270:	f001 f85a 	bl	8002328 <HAL_Delay>

	HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2140      	movs	r1, #64	@ 0x40
 8001278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127c:	f002 f950 	bl	8003520 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001280:	20fa      	movs	r0, #250	@ 0xfa
 8001282:	f001 f851 	bl	8002328 <HAL_Delay>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	0800b830 	.word	0x0800b830
 8001290:	0800b83c 	.word	0x0800b83c
 8001294:	200002b8 	.word	0x200002b8

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 ffde 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f814 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 fa56 	bl	8001754 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a8:	f000 f872 	bl	8001390 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012ac:	f000 f8cc 	bl	8001448 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012b0:	f000 f90a 	bl	80014c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012b4:	f000 f998 	bl	80015e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80012b8:	f000 fa1c 	bl	80016f4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012bc:	f000 f9e2 	bl	8001684 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  AlarmPeripheral_Init();
 80012c0:	f7ff ff68 	bl	8001194 <AlarmPeripheral_Init>
  AlarmIO_Test();
 80012c4:	f7ff ff90 	bl	80011e8 <AlarmIO_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <main+0x30>

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09c      	sub	sp, #112	@ 0x70
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012d6:	2228      	movs	r2, #40	@ 0x28
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 ff83 	bl	80081e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2234      	movs	r2, #52	@ 0x34
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 ff75 	bl	80081e6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012fc:	2303      	movs	r3, #3
 80012fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2310      	movs	r3, #16
 8001310:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800131a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001320:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fd9a 	bl	8003e60 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001332:	f000 faa1 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133a:	2302      	movs	r3, #2
 800133c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fdc2 	bl	8004edc <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800135e:	f000 fa8b 	bl	8001878 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8001362:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 8001366:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001374:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	4618      	mov	r0, r3
 800137a:	f003 ffcf 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001384:	f000 fa78 	bl	8001878 <Error_Handler>
  }
}
 8001388:	bf00      	nop
 800138a:	3770      	adds	r7, #112	@ 0x70
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a6:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013ae:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ba:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_ADC1_Init+0xb4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001400:	4810      	ldr	r0, [pc, #64]	@ (8001444 <MX_ADC1_Init+0xb4>)
 8001402:	f000 ffb5 	bl	8002370 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800140c:	f000 fa34 	bl	8001878 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001410:	2301      	movs	r3, #1
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_ADC1_Init+0xb4>)
 800142e:	f001 fa5f 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001438:	f000 fa1e 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000214 	.word	0x20000214

08001448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_I2C1_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <MX_I2C1_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <MX_I2C1_Init+0x7c>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001460:	2201      	movs	r2, #1
 8001462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_I2C1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_I2C1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001482:	480e      	ldr	r0, [pc, #56]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001484:	f002 f887 	bl	8003596 <HAL_I2C_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800148e:	f000 f9f3 	bl	8001878 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <MX_I2C1_Init+0x74>)
 8001496:	f002 fc4b 	bl	8003d30 <HAL_I2CEx_ConfigAnalogFilter>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014a0:	f000 f9ea 	bl	8001878 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_I2C1_Init+0x74>)
 80014a8:	f002 fc8d 	bl	8003dc6 <HAL_I2CEx_ConfigDigitalFilter>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 f9e1 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000264 	.word	0x20000264
 80014c0:	40005400 	.word	0x40005400
 80014c4:	00201d2b 	.word	0x00201d2b

080014c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	@ 0x58
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	222c      	movs	r2, #44	@ 0x2c
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f006 fe76 	bl	80081e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fa:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <MX_TIM1_Init+0x118>)
 80014fc:	4a39      	ldr	r2, [pc, #228]	@ (80015e4 <MX_TIM1_Init+0x11c>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001502:	221e      	movs	r2, #30
 8001504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b36      	ldr	r3, [pc, #216]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3522;
 800150c:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800150e:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001526:	482e      	ldr	r0, [pc, #184]	@ (80015e0 <MX_TIM1_Init+0x118>)
 8001528:	f004 f936 	bl	8005798 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001532:	f000 f9a1 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001542:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001546:	4619      	mov	r1, r3
 8001548:	4825      	ldr	r0, [pc, #148]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800154a:	f005 f955 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001554:	f000 f990 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	@ 0x60
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_TIM1_Init+0x118>)
 800157e:	f004 fb4b 	bl	8005c18 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001588:	f000 f976 	bl	8001878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MX_TIM1_Init+0x118>)
 80015c2:	f005 f97f 	bl	80068c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80015cc:	f000 f954 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MX_TIM1_Init+0x118>)
 80015d2:	f000 fa5b 	bl	8001a8c <HAL_TIM_MspPostInit>

}
 80015d6:	bf00      	nop
 80015d8:	3758      	adds	r7, #88	@ 0x58
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002b8 	.word	0x200002b8
 80015e4:	40012c00 	.word	0x40012c00

080015e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001606:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001608:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800160c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001610:	221e      	movs	r2, #30
 8001612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3522;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_TIM2_Init+0x98>)
 800161c:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_TIM2_Init+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800162e:	4814      	ldr	r0, [pc, #80]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001630:	f004 f806 	bl	8005640 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800163a:	f000 f91d 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_TIM2_Init+0x98>)
 800164c:	f004 fbf8 	bl	8005e40 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001656:	f000 f90f 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <MX_TIM2_Init+0x98>)
 8001668:	f005 f8c6 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001672:	f000 f901 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000304 	.word	0x20000304

08001684 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001694:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_TIM6_Init+0x68>)
 8001696:	4a16      	ldr	r2, [pc, #88]	@ (80016f0 <MX_TIM6_Init+0x6c>)
 8001698:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_TIM6_Init+0x68>)
 800169c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80016a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1799;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016aa:	f240 7207 	movw	r2, #1799	@ 0x707
 80016ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016b8:	f003 ffc2 	bl	8005640 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80016c2:	f000 f8d9 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <MX_TIM6_Init+0x68>)
 80016d4:	f005 f890 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80016de:	f000 f8cb 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000350 	.word	0x20000350
 80016f0:	40001000 	.word	0x40001000

080016f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_USART2_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <MX_USART2_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001700:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_USART2_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_USART2_UART_Init+0x58>)
 8001738:	f005 f95a 	bl	80069f0 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 f899 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000039c 	.word	0x2000039c
 8001750:	40004400 	.word	0x40004400

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176a:	4b40      	ldr	r3, [pc, #256]	@ (800186c <MX_GPIO_Init+0x118>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a3f      	ldr	r2, [pc, #252]	@ (800186c <MX_GPIO_Init+0x118>)
 8001770:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <MX_GPIO_Init+0x118>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <MX_GPIO_Init+0x118>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a39      	ldr	r2, [pc, #228]	@ (800186c <MX_GPIO_Init+0x118>)
 8001788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800178c:	6153      	str	r3, [r2, #20]
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <MX_GPIO_Init+0x118>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <MX_GPIO_Init+0x118>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a33      	ldr	r2, [pc, #204]	@ (800186c <MX_GPIO_Init+0x118>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	6153      	str	r3, [r2, #20]
 80017a6:	4b31      	ldr	r3, [pc, #196]	@ (800186c <MX_GPIO_Init+0x118>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <MX_GPIO_Init+0x118>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a2d      	ldr	r2, [pc, #180]	@ (800186c <MX_GPIO_Init+0x118>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017bc:	6153      	str	r3, [r2, #20]
 80017be:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <MX_GPIO_Init+0x118>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RM_Pin|SM_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2160      	movs	r1, #96	@ 0x60
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d2:	f001 fea5 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NP1_Pin NP2_Pin NP3_Pin NP4_Pin
                           NP5_Pin NP6_Pin NP7_Pin NP8_Pin
                           NP9_Pin NP0_Pin */
  GPIO_InitStruct.Pin = NP1_Pin|NP2_Pin|NP3_Pin|NP4_Pin
 80017d6:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80017da:	617b      	str	r3, [r7, #20]
                          |NP5_Pin|NP6_Pin|NP7_Pin|NP8_Pin
                          |NP9_Pin|NP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	@ (8001870 <MX_GPIO_Init+0x11c>)
 80017ec:	f001 fd0e 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : RM_Pin SM_Pin */
  GPIO_InitStruct.Pin = RM_Pin|SM_Pin;
 80017f0:	2360      	movs	r3, #96	@ 0x60
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180a:	f001 fcff 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : LUB_Pin */
  GPIO_InitStruct.Pin = LUB_Pin;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001818:	2301      	movs	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LUB_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_GPIO_Init+0x120>)
 8001824:	f001 fcf2 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : RPB_Pin */
  GPIO_InitStruct.Pin = RPB_Pin;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPB_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <MX_GPIO_Init+0x120>)
 800183e:	f001 fce5 	bl	800320c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2006      	movs	r0, #6
 8001848:	f001 fca9 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800184c:	2006      	movs	r0, #6
 800184e:	f001 fcc2 	bl	80031d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2007      	movs	r0, #7
 8001858:	f001 fca1 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800185c:	2007      	movs	r0, #7
 800185e:	f001 fcba 	bl	80031d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	48000800 	.word	0x48000800
 8001874:	48000400 	.word	0x48000400

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <Error_Handler+0x8>

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_MspInit+0x44>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a0e      	ldr	r2, [pc, #56]	@ (80018c8 <HAL_MspInit+0x44>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <HAL_MspInit+0x44>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_MspInit+0x44>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a08      	ldr	r2, [pc, #32]	@ (80018c8 <HAL_MspInit+0x44>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_MspInit+0x44>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ec:	d124      	bne.n	8001938 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_ADC_MspInit+0x74>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001934:	f001 fc6a 	bl	800320c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	@ 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a17      	ldr	r2, [pc, #92]	@ (80019c0 <HAL_I2C_MspInit+0x7c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d127      	bne.n	80019b6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001970:	6153      	str	r3, [r2, #20]
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197e:	23c0      	movs	r3, #192	@ 0xc0
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001982:	2312      	movs	r3, #18
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800198e:	2304      	movs	r3, #4
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <HAL_I2C_MspInit+0x84>)
 800199a:	f001 fc37 	bl	800320c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 80019a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_I2C_MspInit+0x80>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	@ 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40005400 	.word	0x40005400
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000400 	.word	0x48000400

080019cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_TIM_PWM_MspInit+0x38>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10b      	bne.n	80019f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1c:	d114      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f001 fbaf 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a40:	201c      	movs	r0, #28
 8001a42:	f001 fbc8 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a46:	e018      	b.n	8001a7a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <HAL_TIM_Base_MspInit+0x7c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d113      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_TIM_Base_MspInit+0x78>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2036      	movs	r0, #54	@ 0x36
 8001a70:	f001 fb95 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a74:	2036      	movs	r0, #54	@ 0x36
 8001a76:	f001 fbae 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40001000 	.word	0x40001000

08001a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <HAL_TIM_MspPostInit+0x64>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d11b      	bne.n	8001ae6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	@ (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001ab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ae2:	f001 fb93 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	48000800 	.word	0x48000800

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_UART_MspInit+0x7c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d128      	bne.n	8001b70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	6153      	str	r3, [r2, #20]
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <HAL_UART_MspInit+0x80>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6c:	f001 fb4e 	bl	800320c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	@ 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40004400 	.word	0x40004400
 8001b7c:	40021000 	.word	0x40021000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <NMI_Handler+0x4>

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <MemManage_Handler+0x4>

08001b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd6:	f000 fb87 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e002      	b.n	8001bf2 <EXTI0_IRQHandler+0x12>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	ddf7      	ble.n	8001bec <EXTI0_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(LUB_GPIO_Port, LUB_Pin)) {
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4829      	ldr	r0, [pc, #164]	@ (8001ca4 <EXTI0_IRQHandler+0xc4>)
 8001c00:	f001 fc76 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d044      	beq.n	8001c94 <EXTI0_IRQHandler+0xb4>
		// If the system cannot be locked, try to unlock the system
		Check_IR_Signal();
 8001c0a:	f000 fa09 	bl	8002020 <Check_IR_Signal>

		user_input = buffer;
 8001c0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <EXTI0_IRQHandler+0xc8>)
 8001c10:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <EXTI0_IRQHandler+0xcc>)
 8001c12:	601a      	str	r2, [r3, #0]
		// The door has to be closed for the system to be able to lock
		if (raw <= 1000.0 || !Lock_System())	{
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <EXTI0_IRQHandler+0xd0>)
 8001c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <EXTI0_IRQHandler+0xd4>)
 8001c20:	f7fe ff76 	bl	8000b10 <__aeabi_dcmple>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d107      	bne.n	8001c3a <EXTI0_IRQHandler+0x5a>
 8001c2a:	f7ff f88b 	bl	8000d44 <Lock_System>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d01b      	beq.n	8001c72 <EXTI0_IRQHandler+0x92>
			if (Unlock_System()) {
 8001c3a:	f7ff f899 	bl	8000d70 <Unlock_System>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00d      	beq.n	8001c60 <EXTI0_IRQHandler+0x80>
				triggered = false;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <EXTI0_IRQHandler+0xd8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
				alarm_rhythm_counter = 0;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <EXTI0_IRQHandler+0xdc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
				user_input = NULL;
 8001c50:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <EXTI0_IRQHandler+0xc8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
				Generate_Tone(false, 0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f9af 	bl	8001fbc <Generate_Tone>
			if (Unlock_System()) {
 8001c5e:	e013      	b.n	8001c88 <EXTI0_IRQHandler+0xa8>
			} else {
				alarm_rhythm_counter = 2;
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <EXTI0_IRQHandler+0xdc>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]
				Generate_Tone(false, OPEN_ON_SET_SILENT_LENGTH);
 8001c66:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f9a6 	bl	8001fbc <Generate_Tone>
			if (Unlock_System()) {
 8001c70:	e00a      	b.n	8001c88 <EXTI0_IRQHandler+0xa8>
			}
		} else {
			setting = true;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <EXTI0_IRQHandler+0xe0>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
			alarm_rhythm_counter = LOCK_COUNTDOWN_COUNT;
 8001c78:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <EXTI0_IRQHandler+0xdc>)
 8001c7a:	2214      	movs	r2, #20
 8001c7c:	701a      	strb	r2, [r3, #0]
			Generate_Tone(true, LOCK_COUNTDOWN_BEEP_LEGNTH);
 8001c7e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 f99a 	bl	8001fbc <Generate_Tone>
		}


		// Reset input from number pad
		buffer[0] = '\0';
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <EXTI0_IRQHandler+0xcc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
		idx = 0;
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <EXTI0_IRQHandler+0xe4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LUB_Pin);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f001 fc5b 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	20000204 	.word	0x20000204
 8001cac:	20000430 	.word	0x20000430
 8001cb0:	20000428 	.word	0x20000428
 8001cb4:	408f4000 	.word	0x408f4000
 8001cb8:	20000439 	.word	0x20000439
 8001cbc:	20000438 	.word	0x20000438
 8001cc0:	2000043a 	.word	0x2000043a
 8001cc4:	20000435 	.word	0x20000435

08001cc8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	e002      	b.n	8001cda <EXTI1_IRQHandler+0x12>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	ddf7      	ble.n	8001cd4 <EXTI1_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(RPB_GPIO_Port, RPB_Pin)) {
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <EXTI1_IRQHandler+0x34>)
 8001ce8:	f001 fc02 	bl	80034f0 <HAL_GPIO_ReadPin>

	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPB_Pin);
 8001cec:	2002      	movs	r0, #2
 8001cee:	f001 fc2f 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	48000400 	.word	0x48000400

08001d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!buzzer_length_counter--) {
 8001d04:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <TIM2_IRQHandler+0xc8>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	b291      	uxth	r1, r2
 8001d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc8 <TIM2_IRQHandler+0xc8>)
 8001d0e:	8011      	strh	r1, [r2, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d153      	bne.n	8001dbc <TIM2_IRQHandler+0xbc>
		if (setting) {
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <TIM2_IRQHandler+0xcc>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01c      	beq.n	8001d56 <TIM2_IRQHandler+0x56>
			alarm_rhythm_counter--;
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d26:	701a      	strb	r2, [r3, #0]

			Generate_Tone(alarm_rhythm_counter % 2 == 0 ? true : false, LOCK_COUNTDOWN_BEEP_LEGNTH);
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	bf0c      	ite	eq
 8001d36:	2301      	moveq	r3, #1
 8001d38:	2300      	movne	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f93b 	bl	8001fbc <Generate_Tone>
			if (alarm_rhythm_counter == 0)		setting = false;
 8001d46:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d136      	bne.n	8001dbc <TIM2_IRQHandler+0xbc>
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <TIM2_IRQHandler+0xcc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	e032      	b.n	8001dbc <TIM2_IRQHandler+0xbc>
		} else if (triggered) {
 8001d56:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <TIM2_IRQHandler+0xd4>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d02a      	beq.n	8001db4 <TIM2_IRQHandler+0xb4>
			alarm_rhythm_counter++;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d68:	701a      	strb	r2, [r3, #0]
			alarm_rhythm_counter %= 6;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <TIM2_IRQHandler+0xd8>)
 8001d70:	fba3 1302 	umull	r1, r3, r3, r2
 8001d74:	0899      	lsrs	r1, r3, #2
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d84:	701a      	strb	r2, [r3, #0]

			Generate_Tone(alarm_rhythm_counter % 2 == 0 ? false : true, alarm_rhythm_counter == 2 ? OPEN_ON_SET_SILENT_LENGTH : OPEN_ON_SET_BEEP_LENGTH);
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <TIM2_IRQHandler+0xd0>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d102      	bne.n	8001da8 <TIM2_IRQHandler+0xa8>
 8001da2:	f240 13c5 	movw	r3, #453	@ 0x1c5
 8001da6:	e000      	b.n	8001daa <TIM2_IRQHandler+0xaa>
 8001da8:	2329      	movs	r3, #41	@ 0x29
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f000 f905 	bl	8001fbc <Generate_Tone>
 8001db2:	e003      	b.n	8001dbc <TIM2_IRQHandler+0xbc>
//				Generate_Tone(false, OPEN_ON_SET_SILENT_LENGTH);
//			} else {
//				Generate_Tone(alarm_rhythm_counter % 2 == 0 ? false : true, OPEN_ON_SET_BEEP_LENGTH);
//			}
		} else {
			Generate_Tone(false, 0);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 f900 	bl	8001fbc <Generate_Tone>
		}
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dbc:	4807      	ldr	r0, [pc, #28]	@ (8001ddc <TIM2_IRQHandler+0xdc>)
 8001dbe:	f003 fe29 	bl	8005a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000436 	.word	0x20000436
 8001dcc:	2000043a 	.word	0x2000043a
 8001dd0:	20000438 	.word	0x20000438
 8001dd4:	20000439 	.word	0x20000439
 8001dd8:	aaaaaaab 	.word	0xaaaaaaab
 8001ddc:	20000304 	.word	0x20000304

08001de0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	// Poll for the value of the IR sensor
	Check_IR_Signal();
 8001de4:	f000 f91c 	bl	8002020 <Check_IR_Signal>

	// At raw < 1000.0, the door has been opened enough to trigger the alarm
	if (raw < 1000.0) {
 8001de8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f64 <TIM6_DAC_IRQHandler+0x184>)
 8001dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f68 <TIM6_DAC_IRQHandler+0x188>)
 8001df4:	f7fe fe82 	bl	8000afc <__aeabi_dcmplt>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d014      	beq.n	8001e28 <TIM6_DAC_IRQHandler+0x48>
		// BEGIN TO SOUND THE ALARM
		if (__GET_SYSTEM_STATE == ready) {
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001f6c <TIM6_DAC_IRQHandler+0x18c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	791b      	ldrb	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <TIM6_DAC_IRQHandler+0x34>
			Generate_Tone(true, OPEN_ON_READY_BEEP_LENGTH);
 8001e08:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f000 f8d5 	bl	8001fbc <Generate_Tone>
 8001e12:	e009      	b.n	8001e28 <TIM6_DAC_IRQHandler+0x48>
		} else {
			triggered = true;
 8001e14:	4b56      	ldr	r3, [pc, #344]	@ (8001f70 <TIM6_DAC_IRQHandler+0x190>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
			alarm_rhythm_counter = 1;
 8001e1a:	4b56      	ldr	r3, [pc, #344]	@ (8001f74 <TIM6_DAC_IRQHandler+0x194>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
			Generate_Tone(true, OPEN_ON_SET_BEEP_LENGTH);
 8001e20:	2129      	movs	r1, #41	@ 0x29
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 f8ca 	bl	8001fbc <Generate_Tone>

		}
	}

	// Poll for the number pad
	if      (!HAL_GPIO_ReadPin(NP0_GPIO_Port, NP0_Pin)) {
 8001e28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e2c:	4852      	ldr	r0, [pc, #328]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001e2e:	f001 fb5f 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <TIM6_DAC_IRQHandler+0x68>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001e38:	2153      	movs	r1, #83	@ 0x53
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f000 f8be 	bl	8001fbc <Generate_Tone>
	    Update_Buffer('0');
 8001e40:	2030      	movs	r0, #48	@ 0x30
 8001e42:	f000 f89d 	bl	8001f80 <Update_Buffer>
 8001e46:	e087      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP1_GPIO_Port, NP1_Pin)) {
 8001e48:	2102      	movs	r1, #2
 8001e4a:	484b      	ldr	r0, [pc, #300]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001e4c:	f001 fb50 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <TIM6_DAC_IRQHandler+0x86>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001e56:	2153      	movs	r1, #83	@ 0x53
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f000 f8af 	bl	8001fbc <Generate_Tone>
		Update_Buffer('1');
 8001e5e:	2031      	movs	r0, #49	@ 0x31
 8001e60:	f000 f88e 	bl	8001f80 <Update_Buffer>
 8001e64:	e078      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP2_GPIO_Port, NP2_Pin)) {
 8001e66:	2104      	movs	r1, #4
 8001e68:	4843      	ldr	r0, [pc, #268]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001e6a:	f001 fb41 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <TIM6_DAC_IRQHandler+0xa4>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001e74:	2153      	movs	r1, #83	@ 0x53
 8001e76:	2001      	movs	r0, #1
 8001e78:	f000 f8a0 	bl	8001fbc <Generate_Tone>
		Update_Buffer('2');
 8001e7c:	2032      	movs	r0, #50	@ 0x32
 8001e7e:	f000 f87f 	bl	8001f80 <Update_Buffer>
 8001e82:	e069      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP3_GPIO_Port, NP3_Pin)) {
 8001e84:	2108      	movs	r1, #8
 8001e86:	483c      	ldr	r0, [pc, #240]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001e88:	f001 fb32 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <TIM6_DAC_IRQHandler+0xc2>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001e92:	2153      	movs	r1, #83	@ 0x53
 8001e94:	2001      	movs	r0, #1
 8001e96:	f000 f891 	bl	8001fbc <Generate_Tone>
		Update_Buffer('3');
 8001e9a:	2033      	movs	r0, #51	@ 0x33
 8001e9c:	f000 f870 	bl	8001f80 <Update_Buffer>
 8001ea0:	e05a      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP4_GPIO_Port, NP4_Pin)) {
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4834      	ldr	r0, [pc, #208]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001ea6:	f001 fb23 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <TIM6_DAC_IRQHandler+0xe0>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001eb0:	2153      	movs	r1, #83	@ 0x53
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f000 f882 	bl	8001fbc <Generate_Tone>
		Update_Buffer('4');
 8001eb8:	2034      	movs	r0, #52	@ 0x34
 8001eba:	f000 f861 	bl	8001f80 <Update_Buffer>
 8001ebe:	e04b      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP5_GPIO_Port, NP5_Pin)) {
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	482d      	ldr	r0, [pc, #180]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001ec4:	f001 fb14 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <TIM6_DAC_IRQHandler+0xfe>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001ece:	2153      	movs	r1, #83	@ 0x53
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f000 f873 	bl	8001fbc <Generate_Tone>
		Update_Buffer('5');
 8001ed6:	2035      	movs	r0, #53	@ 0x35
 8001ed8:	f000 f852 	bl	8001f80 <Update_Buffer>
 8001edc:	e03c      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP6_GPIO_Port, NP6_Pin)) {
 8001ede:	2140      	movs	r1, #64	@ 0x40
 8001ee0:	4825      	ldr	r0, [pc, #148]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001ee2:	f001 fb05 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <TIM6_DAC_IRQHandler+0x11c>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001eec:	2153      	movs	r1, #83	@ 0x53
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f000 f864 	bl	8001fbc <Generate_Tone>
		Update_Buffer('6');
 8001ef4:	2036      	movs	r0, #54	@ 0x36
 8001ef6:	f000 f843 	bl	8001f80 <Update_Buffer>
 8001efa:	e02d      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP7_GPIO_Port, NP7_Pin)) {
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	481e      	ldr	r0, [pc, #120]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001f00:	f001 faf6 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d107      	bne.n	8001f1a <TIM6_DAC_IRQHandler+0x13a>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f0a:	2153      	movs	r1, #83	@ 0x53
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f000 f855 	bl	8001fbc <Generate_Tone>
		Update_Buffer('7');
 8001f12:	2037      	movs	r0, #55	@ 0x37
 8001f14:	f000 f834 	bl	8001f80 <Update_Buffer>
 8001f18:	e01e      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP8_GPIO_Port, NP8_Pin)) {
 8001f1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f1e:	4816      	ldr	r0, [pc, #88]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001f20:	f001 fae6 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d107      	bne.n	8001f3a <TIM6_DAC_IRQHandler+0x15a>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f2a:	2153      	movs	r1, #83	@ 0x53
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f000 f845 	bl	8001fbc <Generate_Tone>
		Update_Buffer('8');
 8001f32:	2038      	movs	r0, #56	@ 0x38
 8001f34:	f000 f824 	bl	8001f80 <Update_Buffer>
 8001f38:	e00e      	b.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
	} else if (!HAL_GPIO_ReadPin(NP9_GPIO_Port, NP9_Pin)) {
 8001f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f3e:	480e      	ldr	r0, [pc, #56]	@ (8001f78 <TIM6_DAC_IRQHandler+0x198>)
 8001f40:	f001 fad6 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <TIM6_DAC_IRQHandler+0x178>
		Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f4a:	2153      	movs	r1, #83	@ 0x53
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f000 f835 	bl	8001fbc <Generate_Tone>
		Update_Buffer('9');
 8001f52:	2039      	movs	r0, #57	@ 0x39
 8001f54:	f000 f814 	bl	8001f80 <Update_Buffer>
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f58:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <TIM6_DAC_IRQHandler+0x19c>)
 8001f5a:	f003 fd5b 	bl	8005a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000428 	.word	0x20000428
 8001f68:	408f4000 	.word	0x408f4000
 8001f6c:	20000208 	.word	0x20000208
 8001f70:	20000439 	.word	0x20000439
 8001f74:	20000438 	.word	0x20000438
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	20000350 	.word	0x20000350

08001f80 <Update_Buffer>:

/* USER CODE BEGIN 1 */
void Update_Buffer(char val) {
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	if (idx < 3)
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <Update_Buffer+0x34>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d809      	bhi.n	8001fa6 <Update_Buffer+0x26>
		buffer[idx++] = val;
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <Update_Buffer+0x34>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	b2d1      	uxtb	r1, r2
 8001f9a:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <Update_Buffer+0x34>)
 8001f9c:	7011      	strb	r1, [r2, #0]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <Update_Buffer+0x38>)
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	5453      	strb	r3, [r2, r1]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000435 	.word	0x20000435
 8001fb8:	20000430 	.word	0x20000430

08001fbc <Generate_Tone>:

void Generate_Tone(bool enable, uint16_t tone_length) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	71fb      	strb	r3, [r7, #7]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	80bb      	strh	r3, [r7, #4]
	if (enable) {
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00e      	beq.n	8001ff0 <Generate_Tone+0x34>
		__HAL_TIM_SET_AUTORELOAD(&htim1, ENABLE_BEEP * 2);
 8001fd2:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <Generate_Tone+0x5c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <Generate_Tone+0x5c>)
 8001fde:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001fe2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ENABLE_BEEP);
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <Generate_Tone+0x5c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fee:	e00a      	b.n	8002006 <Generate_Tone+0x4a>
	} else {
		__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <Generate_Tone+0x5c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ff8:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <Generate_Tone+0x5c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <Generate_Tone+0x5c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	buzzer_length_counter = tone_length;
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <Generate_Tone+0x60>)
 8002008:	88bb      	ldrh	r3, [r7, #4]
 800200a:	8013      	strh	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	200002b8 	.word	0x200002b8
 800201c:	20000436 	.word	0x20000436

08002020 <Check_IR_Signal>:

void Generate_Silenece(int length) {
	buzzer_length_counter = (uint16_t) length;
}

static inline void Check_IR_Signal(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002024:	480a      	ldr	r0, [pc, #40]	@ (8002050 <Check_IR_Signal+0x30>)
 8002026:	f000 fb29 	bl	800267c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800202a:	2164      	movs	r1, #100	@ 0x64
 800202c:	4808      	ldr	r0, [pc, #32]	@ (8002050 <Check_IR_Signal+0x30>)
 800202e:	f000 fb93 	bl	8002758 <HAL_ADC_PollForConversion>
	raw = (double) HAL_ADC_GetValue(&hadc1);
 8002032:	4807      	ldr	r0, [pc, #28]	@ (8002050 <Check_IR_Signal+0x30>)
 8002034:	f000 fc4e 	bl	80028d4 <HAL_ADC_GetValue>
 8002038:	4603      	mov	r3, r0
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa72 	bl	8000524 <__aeabi_ui2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4903      	ldr	r1, [pc, #12]	@ (8002054 <Check_IR_Signal+0x34>)
 8002046:	e9c1 2300 	strd	r2, r3, [r1]
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000214 	.word	0x20000214
 8002054:	20000428 	.word	0x20000428

08002058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return 1;
 800205c:	2301      	movs	r3, #1
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_kill>:

int _kill(int pid, int sig)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002072:	f006 f91b 	bl	80082ac <__errno>
 8002076:	4603      	mov	r3, r0
 8002078:	2216      	movs	r2, #22
 800207a:	601a      	str	r2, [r3, #0]
  return -1;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_exit>:

void _exit (int status)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ffe7 	bl	8002068 <_kill>
  while (1) {}    /* Make sure we hang here */
 800209a:	bf00      	nop
 800209c:	e7fd      	b.n	800209a <_exit+0x12>

0800209e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e00a      	b.n	80020c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b0:	f3af 8000 	nop.w
 80020b4:	4601      	mov	r1, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	60ba      	str	r2, [r7, #8]
 80020bc:	b2ca      	uxtb	r2, r1
 80020be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	dbf0      	blt.n	80020b0 <_read+0x12>
  }

  return len;
 80020ce:	687b      	ldr	r3, [r7, #4]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e009      	b.n	80020fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	60ba      	str	r2, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	dbf1      	blt.n	80020ea <_write+0x12>
  }
  return len;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_close>:

int _close(int file)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002138:	605a      	str	r2, [r3, #4]
  return 0;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_isatty>:

int _isatty(int file)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f006 f880 	bl	80082ac <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20004000 	.word	0x20004000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	2000043c 	.word	0x2000043c
 80021e0:	20000590 	.word	0x20000590

080021e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002240 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800220c:	f7ff ffea 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <LoopForever+0x6>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	@ (8002248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <LoopForever+0xe>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <LoopForever+0x16>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002236:	f006 f83f 	bl	80082b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223a:	f7ff f82d 	bl	8001298 <main>

0800223e <LoopForever>:

LoopForever:
    b LoopForever
 800223e:	e7fe      	b.n	800223e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002240:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800224c:	0800bcc0 	.word	0x0800bcc0
  ldr r2, =_sbss
 8002250:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002254:	20000590 	.word	0x20000590

08002258 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_IRQHandler>
	...

0800225c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_Init+0x28>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	@ (8002284 <HAL_Init+0x28>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 ff8b 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	200f      	movs	r0, #15
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fb04 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000

08002288 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 ffa3 	bl	80031f2 <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 ff6b 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	@ (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000010 	.word	0x20000010
 80022e0:	20000018 	.word	0x20000018
 80022e4:	20000014 	.word	0x20000014

080022e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000018 	.word	0x20000018
 800230c:	20000440 	.word	0x20000440

08002310 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;  
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000440 	.word	0x20000440

08002328 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000018 	.word	0x20000018

08002370 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b09a      	sub	sp, #104	@ 0x68
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e169      	b.n	8002664 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d176      	bne.n	8002490 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d152      	bne.n	8002450 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fa81 	bl	80018cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13b      	bne.n	8002450 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fd9f 	bl	8002f1c <ADC_Disable>
 80023de:	4603      	mov	r3, r0
 80023e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d12f      	bne.n	8002450 <HAL_ADC_Init+0xe0>
 80023f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d12b      	bne.n	8002450 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002400:	f023 0302 	bic.w	r3, r3, #2
 8002404:	f043 0202 	orr.w	r2, r3, #2
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800241a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800242a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800242c:	4b8f      	ldr	r3, [pc, #572]	@ (800266c <HAL_ADC_Init+0x2fc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a8f      	ldr	r2, [pc, #572]	@ (8002670 <HAL_ADC_Init+0x300>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9a      	lsrs	r2, r3, #18
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002442:	e002      	b.n	800244a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3b01      	subs	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f9      	bne.n	8002444 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800246c:	d110      	bne.n	8002490 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f023 0312 	bic.w	r3, r3, #18
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 80d6 	bne.w	800264a <HAL_ADC_Init+0x2da>
 800249e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 80d1 	bne.w	800264a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 80c9 	bne.w	800264a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024c0:	f043 0202 	orr.w	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002674 <HAL_ADC_Init+0x304>)
 80024ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_ADC_Init+0x180>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_Init+0x180>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_ADC_Init+0x182>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11c      	bne.n	8002530 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_ADC_Init+0x1a8>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_Init+0x1a8>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_ADC_Init+0x1aa>
 8002518:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800251e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	431a      	orrs	r2, r3
 800252c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800252e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7e5b      	ldrb	r3, [r3, #25]
 8002534:	035b      	lsls	r3, r3, #13
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800253a:	2a01      	cmp	r2, #1
 800253c:	d002      	beq.n	8002544 <HAL_ADC_Init+0x1d4>
 800253e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002542:	e000      	b.n	8002546 <HAL_ADC_Init+0x1d6>
 8002544:	2200      	movs	r2, #0
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002556:	4313      	orrs	r3, r2
 8002558:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d11b      	bne.n	800259c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7e5b      	ldrb	r3, [r3, #25]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	3b01      	subs	r3, #1
 8002572:	045a      	lsls	r2, r3, #17
 8002574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002576:	4313      	orrs	r3, r2
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	663b      	str	r3, [r7, #96]	@ 0x60
 800257e:	e00d      	b.n	800259c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d007      	beq.n	80025b4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	4313      	orrs	r3, r2
 80025ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025b0:	4313      	orrs	r3, r2
 80025b2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d114      	bne.n	80025ec <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025d0:	f023 0302 	bic.w	r3, r3, #2
 80025d4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7e1b      	ldrb	r3, [r3, #24]
 80025da:	039a      	lsls	r2, r3, #14
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4313      	orrs	r3, r2
 80025e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025e8:	4313      	orrs	r3, r2
 80025ea:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <HAL_ADC_Init+0x308>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80025fc:	430b      	orrs	r3, r1
 80025fe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f023 010f 	bic.w	r1, r3, #15
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020f 	bic.w	r2, r2, #15
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f023 0303 	bic.w	r3, r3, #3
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40
 8002648:	e00a      	b.n	8002660 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f023 0312 	bic.w	r3, r3, #18
 8002652:	f043 0210 	orr.w	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002664:	4618      	mov	r0, r3
 8002666:	3768      	adds	r7, #104	@ 0x68
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000010 	.word	0x20000010
 8002670:	431bde83 	.word	0x431bde83
 8002674:	50000300 	.word	0x50000300
 8002678:	fff0c007 	.word	0xfff0c007

0800267c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d158      	bne.n	8002748 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_Start+0x28>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e054      	b.n	800274e <HAL_ADC_Start+0xd2>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fbd1 	bl	8002e54 <ADC_Enable>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d140      	bne.n	800273e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002706:	d106      	bne.n	8002716 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f023 0206 	bic.w	r2, r3, #6
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	645a      	str	r2, [r3, #68]	@ 0x44
 8002714:	e002      	b.n	800271c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	221c      	movs	r2, #28
 800272a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0204 	orr.w	r2, r2, #4
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e006      	b.n	800274c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002746:	e001      	b.n	800274c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002748:	2302      	movs	r3, #2
 800274a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d102      	bne.n	8002774 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800276e:	2308      	movs	r3, #8
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e02e      	b.n	80027d2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002774:	4b56      	ldr	r3, [pc, #344]	@ (80028d0 <HAL_ADC_PollForConversion+0x178>)
 8002776:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2b00      	cmp	r3, #0
 8002782:	d112      	bne.n	80027aa <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d11d      	bne.n	80027ce <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e08d      	b.n	80028c6 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07b      	b.n	80028c6 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80027ce:	230c      	movs	r3, #12
 80027d0:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80027da:	f7ff fd99 	bl	8002310 <HAL_GetTick>
 80027de:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027e0:	e021      	b.n	8002826 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d01d      	beq.n	8002826 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_ADC_PollForConversion+0xa8>
 80027f0:	f7ff fd8e 	bl	8002310 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d212      	bcs.n	8002826 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10b      	bne.n	8002826 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e04f      	b.n	80028c6 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0d6      	beq.n	80027e2 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800284a:	2b00      	cmp	r3, #0
 800284c:	d131      	bne.n	80028b2 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002854:	2b00      	cmp	r3, #0
 8002856:	d12c      	bne.n	80028b2 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b08      	cmp	r3, #8
 8002864:	d125      	bne.n	80028b2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d112      	bne.n	800289a <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d112      	bne.n	80028b2 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40
 8002898:	e00b      	b.n	80028b2 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	50000300 	.word	0x50000300

080028d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b09b      	sub	sp, #108	@ 0x6c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x22>
 800290e:	2302      	movs	r3, #2
 8002910:	e295      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x54e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f040 8279 	bne.w	8002e1c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b04      	cmp	r3, #4
 8002930:	d81c      	bhi.n	800296c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	461a      	mov	r2, r3
 8002946:	231f      	movs	r3, #31
 8002948:	4093      	lsls	r3, r2
 800294a:	43db      	mvns	r3, r3
 800294c:	4019      	ands	r1, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	631a      	str	r2, [r3, #48]	@ 0x30
 800296a:	e063      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b09      	cmp	r3, #9
 8002972:	d81e      	bhi.n	80029b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	3b1e      	subs	r3, #30
 8002988:	221f      	movs	r2, #31
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	4019      	ands	r1, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80029b0:	e040      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b0e      	cmp	r3, #14
 80029b8:	d81e      	bhi.n	80029f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	3b3c      	subs	r3, #60	@ 0x3c
 80029ce:	221f      	movs	r2, #31
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4019      	ands	r1, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	3b3c      	subs	r3, #60	@ 0x3c
 80029ea:	fa00 f203 	lsl.w	r2, r0, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80029f6:	e01d      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	3b5a      	subs	r3, #90	@ 0x5a
 8002a0c:	221f      	movs	r2, #31
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	4019      	ands	r1, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	3b5a      	subs	r3, #90	@ 0x5a
 8002a28:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 80e5 	bne.w	8002c0e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d91c      	bls.n	8002a86 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6999      	ldr	r1, [r3, #24]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b1e      	subs	r3, #30
 8002a5e:	2207      	movs	r2, #7
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4019      	ands	r1, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6898      	ldr	r0, [r3, #8]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	3b1e      	subs	r3, #30
 8002a78:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	619a      	str	r2, [r3, #24]
 8002a84:	e019      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6959      	ldr	r1, [r3, #20]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	2207      	movs	r2, #7
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4019      	ands	r1, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6898      	ldr	r0, [r3, #8]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d84f      	bhi.n	8002b7c <HAL_ADC_ConfigChannel+0x28c>
 8002adc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae4 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae2:	bf00      	nop
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002b17 	.word	0x08002b17
 8002aec:	08002b39 	.word	0x08002b39
 8002af0:	08002b5b 	.word	0x08002b5b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002afa:	4b97      	ldr	r3, [pc, #604]	@ (8002d58 <HAL_ADC_ConfigChannel+0x468>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	0691      	lsls	r1, r2, #26
 8002b04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b06:	430a      	orrs	r2, r1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b12:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b14:	e07b      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d58 <HAL_ADC_ConfigChannel+0x468>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	0691      	lsls	r1, r2, #26
 8002b26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b34:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b36:	e06a      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b3e:	4b86      	ldr	r3, [pc, #536]	@ (8002d58 <HAL_ADC_ConfigChannel+0x468>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	0691      	lsls	r1, r2, #26
 8002b48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b56:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b58:	e059      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b60:	4b7d      	ldr	r3, [pc, #500]	@ (8002d58 <HAL_ADC_ConfigChannel+0x468>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	0691      	lsls	r1, r2, #26
 8002b6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b78:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b7a:	e048      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d107      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b9e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ba6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bc2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	069b      	lsls	r3, r3, #26
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002be6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	069b      	lsls	r3, r3, #26
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002c0c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d108      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x33e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x33e>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x340>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 80fe 	bne.w	8002e32 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d00f      	beq.n	8002c5e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43da      	mvns	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	400a      	ands	r2, r1
 8002c58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002c5c:	e049      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	d91c      	bls.n	8002cba <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6999      	ldr	r1, [r3, #24]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b1b      	subs	r3, #27
 8002c92:	2207      	movs	r2, #7
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	4019      	ands	r1, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6898      	ldr	r0, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b1b      	subs	r3, #27
 8002cac:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	619a      	str	r2, [r3, #24]
 8002cb8:	e01b      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6959      	ldr	r1, [r3, #20]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	2207      	movs	r2, #7
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	4019      	ands	r1, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6898      	ldr	r0, [r3, #8]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <HAL_ADC_ConfigChannel+0x46c>)
 8002cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d105      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d014      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d0e:	2b11      	cmp	r3, #17
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d22:	2b12      	cmp	r3, #18
 8002d24:	f040 8085 	bne.w	8002e32 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d17e      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10c      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x470>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x470>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e004      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x472>
 8002d58:	83fff000 	.word	0x83fff000
 8002d5c:	50000300 	.word	0x50000300
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d150      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x498>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x498>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x49a>
 8002d88:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d13c      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d11d      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x4e2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d9e:	d118      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002daa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dac:	4b27      	ldr	r3, [pc, #156]	@ (8002e4c <HAL_ADC_ConfigChannel+0x55c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <HAL_ADC_ConfigChannel+0x560>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0c9a      	lsrs	r2, r3, #18
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dc2:	e002      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f9      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dd0:	e02e      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b11      	cmp	r3, #17
 8002dd8:	d10b      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x502>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002de2:	d106      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002df0:	e01e      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b12      	cmp	r3, #18
 8002df8:	d11a      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e04:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e06:	e013      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002e1a:	e00a      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002e2e:	e000      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e30:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	376c      	adds	r7, #108	@ 0x6c
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000010 	.word	0x20000010
 8002e50:	431bde83 	.word	0x431bde83

08002e54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d108      	bne.n	8002e80 <ADC_Enable+0x2c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <ADC_Enable+0x2c>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <ADC_Enable+0x2e>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d143      	bne.n	8002f0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b22      	ldr	r3, [pc, #136]	@ (8002f18 <ADC_Enable+0xc4>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f043 0210 	orr.w	r2, r3, #16
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e02f      	b.n	8002f10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ec0:	f7ff fa26 	bl	8002310 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ec6:	e01b      	b.n	8002f00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ec8:	f7ff fa22 	bl	8002310 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d914      	bls.n	8002f00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d00d      	beq.n	8002f00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f043 0210 	orr.w	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e007      	b.n	8002f10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d1dc      	bne.n	8002ec8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	8000003f 	.word	0x8000003f

08002f1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d108      	bne.n	8002f48 <ADC_Disable+0x2c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <ADC_Disable+0x2c>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <ADC_Disable+0x2e>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d047      	beq.n	8002fde <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030d 	and.w	r3, r3, #13
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10f      	bne.n	8002f7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0202 	orr.w	r2, r2, #2
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2203      	movs	r2, #3
 8002f72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f74:	f7ff f9cc 	bl	8002310 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f7a:	e029      	b.n	8002fd0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e023      	b.n	8002fe0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f98:	f7ff f9ba 	bl	8002310 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d914      	bls.n	8002fd0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10d      	bne.n	8002fd0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e007      	b.n	8002fe0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d0dc      	beq.n	8002f98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	@ (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	@ (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	@ (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	@ 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321a:	e14e      	b.n	80034ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8140 	beq.w	80034b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d005      	beq.n	800324c <HAL_GPIO_Init+0x40>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d130      	bne.n	80032ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003282:	2201      	movs	r2, #1
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 0201 	and.w	r2, r3, #1
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d017      	beq.n	80032ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2203      	movs	r2, #3
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d123      	bne.n	800333e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	08da      	lsrs	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3208      	adds	r2, #8
 80032fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	08da      	lsrs	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3208      	adds	r2, #8
 8003338:	6939      	ldr	r1, [r7, #16]
 800333a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2203      	movs	r2, #3
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0203 	and.w	r2, r3, #3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 809a 	beq.w	80034b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003380:	4b55      	ldr	r3, [pc, #340]	@ (80034d8 <HAL_GPIO_Init+0x2cc>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a54      	ldr	r2, [pc, #336]	@ (80034d8 <HAL_GPIO_Init+0x2cc>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6193      	str	r3, [r2, #24]
 800338c:	4b52      	ldr	r3, [pc, #328]	@ (80034d8 <HAL_GPIO_Init+0x2cc>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003398:	4a50      	ldr	r2, [pc, #320]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	220f      	movs	r2, #15
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033c2:	d013      	beq.n	80033ec <HAL_GPIO_Init+0x1e0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a46      	ldr	r2, [pc, #280]	@ (80034e0 <HAL_GPIO_Init+0x2d4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00d      	beq.n	80033e8 <HAL_GPIO_Init+0x1dc>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a45      	ldr	r2, [pc, #276]	@ (80034e4 <HAL_GPIO_Init+0x2d8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d007      	beq.n	80033e4 <HAL_GPIO_Init+0x1d8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a44      	ldr	r2, [pc, #272]	@ (80034e8 <HAL_GPIO_Init+0x2dc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_GPIO_Init+0x1d4>
 80033dc:	2303      	movs	r3, #3
 80033de:	e006      	b.n	80033ee <HAL_GPIO_Init+0x1e2>
 80033e0:	2305      	movs	r3, #5
 80033e2:	e004      	b.n	80033ee <HAL_GPIO_Init+0x1e2>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e002      	b.n	80033ee <HAL_GPIO_Init+0x1e2>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_GPIO_Init+0x1e2>
 80033ec:	2300      	movs	r3, #0
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	f002 0203 	and.w	r2, r2, #3
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	4093      	lsls	r3, r2
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033fe:	4937      	ldr	r1, [pc, #220]	@ (80034dc <HAL_GPIO_Init+0x2d0>)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340c:	4b37      	ldr	r3, [pc, #220]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003430:	4a2e      	ldr	r2, [pc, #184]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003436:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800345a:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003460:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003484:	4a19      	ldr	r2, [pc, #100]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800348a:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034ae:	4a0f      	ldr	r2, [pc, #60]	@ (80034ec <HAL_GPIO_Init+0x2e0>)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f aea9 	bne.w	800321c <HAL_GPIO_Init+0x10>
  }
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40010000 	.word	0x40010000
 80034e0:	48000400 	.word	0x48000400
 80034e4:	48000800 	.word	0x48000800
 80034e8:	48000c00 	.word	0x48000c00
 80034ec:	40010400 	.word	0x40010400

080034f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e001      	b.n	8003512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800353c:	e002      	b.n	8003544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003566:	4a05      	ldr	r2, [pc, #20]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f806 	bl	8003580 <HAL_GPIO_EXTI_Callback>
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e08d      	b.n	80036c4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fe f9c1 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2224      	movs	r2, #36	@ 0x24
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	e006      	b.n	800361e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800361c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d108      	bne.n	8003638 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	e007      	b.n	8003648 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003646:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800365a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800366a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69d9      	ldr	r1, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	461a      	mov	r2, r3
 80036d8:	460b      	mov	r3, r1
 80036da:	817b      	strh	r3, [r7, #10]
 80036dc:	4613      	mov	r3, r2
 80036de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	f040 80fd 	bne.w	80038e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_I2C_Master_Transmit+0x30>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0f6      	b.n	80038ea <HAL_I2C_Master_Transmit+0x21e>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003704:	f7fe fe04 	bl	8002310 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2319      	movs	r3, #25
 8003710:	2201      	movs	r2, #1
 8003712:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f914 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0e1      	b.n	80038ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2221      	movs	r2, #33	@ 0x21
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2210      	movs	r2, #16
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	893a      	ldrh	r2, [r7, #8]
 8003746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	2bff      	cmp	r3, #255	@ 0xff
 8003756:	d906      	bls.n	8003766 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	22ff      	movs	r2, #255	@ 0xff
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800375e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e007      	b.n	8003776 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003774:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d024      	beq.n	80037c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	8979      	ldrh	r1, [r7, #10]
 80037ba:	4b4e      	ldr	r3, [pc, #312]	@ (80038f4 <HAL_I2C_Master_Transmit+0x228>)
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fa83 	bl	8003ccc <I2C_TransferConfig>
 80037c6:	e066      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	4b48      	ldr	r3, [pc, #288]	@ (80038f4 <HAL_I2C_Master_Transmit+0x228>)
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fa78 	bl	8003ccc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037dc:	e05b      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	6a39      	ldr	r1, [r7, #32]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f907 	bl	80039f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07b      	b.n	80038ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d034      	beq.n	8003896 <HAL_I2C_Master_Transmit+0x1ca>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d130      	bne.n	8003896 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	@ 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f880 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e04d      	b.n	80038ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	2bff      	cmp	r3, #255	@ 0xff
 8003856:	d90e      	bls.n	8003876 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	22ff      	movs	r2, #255	@ 0xff
 800385c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	b2da      	uxtb	r2, r3
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fa2c 	bl	8003ccc <I2C_TransferConfig>
 8003874:	e00f      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	b2da      	uxtb	r2, r3
 8003886:	8979      	ldrh	r1, [r7, #10]
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fa1b 	bl	8003ccc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19e      	bne.n	80037de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	6a39      	ldr	r1, [r7, #32]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f8ed 	bl	8003a84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e01a      	b.n	80038ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2220      	movs	r2, #32
 80038ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <HAL_I2C_Master_Transmit+0x22c>)
 80038c8:	400b      	ands	r3, r1
 80038ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	80002000 	.word	0x80002000
 80038f8:	fe00e800 	.word	0xfe00e800

080038fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d103      	bne.n	800391a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d007      	beq.n	8003938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	619a      	str	r2, [r3, #24]
  }
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003954:	e03b      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f8d6 	bl	8003b0c <I2C_IsErrorOccurred>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e041      	b.n	80039ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d02d      	beq.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe fccd 	bl	8002310 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d122      	bne.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4013      	ands	r3, r2
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d113      	bne.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00f      	b.n	80039ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	bf0c      	ite	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	2300      	movne	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d0b4      	beq.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a02:	e033      	b.n	8003a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f87f 	bl	8003b0c <I2C_IsErrorOccurred>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e031      	b.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d025      	beq.n	8003a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7fe fc76 	bl	8002310 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11a      	bne.n	8003a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d013      	beq.n	8003a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e007      	b.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d1c4      	bne.n	8003a04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a90:	e02f      	b.n	8003af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f838 	bl	8003b0c <I2C_IsErrorOccurred>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e02d      	b.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fc33 	bl	8002310 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11a      	bne.n	8003af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d013      	beq.n	8003af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e007      	b.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d1c8      	bne.n	8003a92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	@ 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d068      	beq.n	8003c0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b40:	e049      	b.n	8003bd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d045      	beq.n	8003bd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fe fbe1 	bl	8002310 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_IsErrorOccurred+0x54>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13a      	bne.n	8003bd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b82:	d121      	bne.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b8a:	d01d      	beq.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d01a      	beq.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ba0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ba2:	f7fe fbb5 	bl	8002310 <HAL_GetTick>
 8003ba6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba8:	e00e      	b.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003baa:	f7fe fbb1 	bl	8002310 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b19      	cmp	r3, #25
 8003bb6:	d907      	bls.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f043 0320 	orr.w	r3, r3, #32
 8003bbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bc6:	e006      	b.n	8003bd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d1e9      	bne.n	8003baa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d003      	beq.n	8003bec <I2C_IsErrorOccurred+0xe0>
 8003be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0aa      	beq.n	8003b42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f043 0308 	orr.w	r3, r3, #8
 8003c44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01c      	beq.n	8003cba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7ff fe3b 	bl	80038fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc8 <I2C_IsErrorOccurred+0x1bc>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3728      	adds	r7, #40	@ 0x28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cde:	897b      	ldrh	r3, [r7, #10]
 8003ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ce4:	7a7b      	ldrb	r3, [r7, #9]
 8003ce6:	041b      	lsls	r3, r3, #16
 8003ce8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cfa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	0d5b      	lsrs	r3, r3, #21
 8003d06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d0a:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <I2C_TransferConfig+0x60>)
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	ea02 0103 	and.w	r1, r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	03ff63ff 	.word	0x03ff63ff

08003d30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d138      	bne.n	8003db8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e032      	b.n	8003dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	@ 0x24
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d139      	bne.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e033      	b.n	8003e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2224      	movs	r2, #36	@ 0x24
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f001 b823 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 817d 	beq.w	8004196 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e9c:	4bbc      	ldr	r3, [pc, #752]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ea8:	4bb9      	ldr	r3, [pc, #740]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d15c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x10e>
 8003eb4:	4bb6      	ldr	r3, [pc, #728]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec0:	d155      	bne.n	8003f6e <HAL_RCC_OscConfig+0x10e>
 8003ec2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ec6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ed6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x94>
 8003eee:	4ba8      	ldr	r3, [pc, #672]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	e015      	b.n	8003f20 <HAL_RCC_OscConfig+0xc0>
 8003ef4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ef8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003f08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f0c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003f10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003f14:	fa93 f3a3 	rbit	r3, r3
 8003f18:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f24:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003f28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003f2c:	fa92 f2a2 	rbit	r2, r2
 8003f30:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003f34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	f002 021f 	and.w	r2, r2, #31
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 811f 	beq.w	8004194 <HAL_RCC_OscConfig+0x334>
 8003f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 8116 	bne.w	8004194 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f000 bfaf 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x12e>
 8003f80:	4b83      	ldr	r3, [pc, #524]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a82      	ldr	r2, [pc, #520]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	e036      	b.n	8003ffc <HAL_RCC_OscConfig+0x19c>
 8003f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x158>
 8003f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a7b      	ldr	r2, [pc, #492]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b79      	ldr	r3, [pc, #484]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a78      	ldr	r2, [pc, #480]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e021      	b.n	8003ffc <HAL_RCC_OscConfig+0x19c>
 8003fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x184>
 8003fca:	4b71      	ldr	r3, [pc, #452]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a70      	ldr	r2, [pc, #448]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6d      	ldr	r2, [pc, #436]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0x19c>
 8003fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a69      	ldr	r2, [pc, #420]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b67      	ldr	r3, [pc, #412]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a66      	ldr	r2, [pc, #408]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ffc:	4b64      	ldr	r3, [pc, #400]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	f023 020f 	bic.w	r2, r3, #15
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	495f      	ldr	r1, [pc, #380]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8004012:	4313      	orrs	r3, r2
 8004014:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d059      	beq.n	80040da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fe f973 	bl	8002310 <HAL_GetTick>
 800402a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe f96e 	bl	8002310 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b64      	cmp	r3, #100	@ 0x64
 800403e:	d902      	bls.n	8004046 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	f000 bf43 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004046:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800404a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800405a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d102      	bne.n	8004078 <HAL_RCC_OscConfig+0x218>
 8004072:	4b47      	ldr	r3, [pc, #284]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	e015      	b.n	80040a4 <HAL_RCC_OscConfig+0x244>
 8004078:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800407c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800408c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004090:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004094:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80040a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040a8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80040ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80040b0:	fa92 f2a2 	rbit	r2, r2
 80040b4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80040b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80040bc:	fab2 f282 	clz	r2, r2
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	f042 0220 	orr.w	r2, r2, #32
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	f002 021f 	and.w	r2, r2, #31
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f202 	lsl.w	r2, r1, r2
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ab      	beq.n	8004030 <HAL_RCC_OscConfig+0x1d0>
 80040d8:	e05d      	b.n	8004196 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fe f919 	bl	8002310 <HAL_GetTick>
 80040de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fe f914 	bl	8002310 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	@ 0x64
 80040f2:	d902      	bls.n	80040fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	f000 bee9 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
 80040fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800410e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_RCC_OscConfig+0x2cc>
 8004126:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e015      	b.n	8004158 <HAL_RCC_OscConfig+0x2f8>
 800412c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004130:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004140:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004144:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004148:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004154:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <HAL_RCC_OscConfig+0x330>)
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800415c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004160:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004164:	fa92 f2a2 	rbit	r2, r2
 8004168:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800416c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004170:	fab2 f282 	clz	r2, r2
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	f042 0220 	orr.w	r2, r2, #32
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	f002 021f 	and.w	r2, r2, #31
 8004180:	2101      	movs	r1, #1
 8004182:	fa01 f202 	lsl.w	r2, r1, r2
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ab      	bne.n	80040e4 <HAL_RCC_OscConfig+0x284>
 800418c:	e003      	b.n	8004196 <HAL_RCC_OscConfig+0x336>
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 817d 	beq.w	80044a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041ac:	4ba6      	ldr	r3, [pc, #664]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041b8:	4ba3      	ldr	r3, [pc, #652]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d172      	bne.n	80042aa <HAL_RCC_OscConfig+0x44a>
 80041c4:	4ba0      	ldr	r3, [pc, #640]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d16c      	bne.n	80042aa <HAL_RCC_OscConfig+0x44a>
 80041d0:	2302      	movs	r3, #2
 80041d2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80041e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_OscConfig+0x3a0>
 80041fa:	4b93      	ldr	r3, [pc, #588]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e013      	b.n	8004228 <HAL_RCC_OscConfig+0x3c8>
 8004200:	2302      	movs	r3, #2
 8004202:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004212:	2302      	movs	r3, #2
 8004214:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004218:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004224:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	2202      	movs	r2, #2
 800422a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800422e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004232:	fa92 f2a2 	rbit	r2, r2
 8004236:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800423a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800423e:	fab2 f282 	clz	r2, r2
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	f042 0220 	orr.w	r2, r2, #32
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	f002 021f 	and.w	r2, r2, #31
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f202 	lsl.w	r2, r1, r2
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCC_OscConfig+0x410>
 800425a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d002      	beq.n	8004270 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f000 be2e 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b75      	ldr	r3, [pc, #468]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	21f8      	movs	r1, #248	@ 0xf8
 8004286:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800428e:	fa91 f1a1 	rbit	r1, r1
 8004292:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004296:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800429a:	fab1 f181 	clz	r1, r1
 800429e:	b2c9      	uxtb	r1, r1
 80042a0:	408b      	lsls	r3, r1
 80042a2:	4969      	ldr	r1, [pc, #420]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a8:	e0fd      	b.n	80044a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8088 	beq.w	80043cc <HAL_RCC_OscConfig+0x56c>
 80042bc:	2301      	movs	r3, #1
 80042be:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80042ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	461a      	mov	r2, r3
 80042e4:	2301      	movs	r3, #1
 80042e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe f812 	bl	8002310 <HAL_GetTick>
 80042ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fe f80d 	bl	8002310 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	f000 bde2 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004308:	2302      	movs	r3, #2
 800430a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800431a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d102      	bne.n	8004338 <HAL_RCC_OscConfig+0x4d8>
 8004332:	4b45      	ldr	r3, [pc, #276]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	e013      	b.n	8004360 <HAL_RCC_OscConfig+0x500>
 8004338:	2302      	movs	r3, #2
 800433a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800434a:	2302      	movs	r3, #2
 800434c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004350:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800435c:	4b3a      	ldr	r3, [pc, #232]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	2202      	movs	r2, #2
 8004362:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004366:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800436a:	fa92 f2a2 	rbit	r2, r2
 800436e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004372:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004376:	fab2 f282 	clz	r2, r2
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	f042 0220 	orr.w	r2, r2, #32
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	f002 021f 	and.w	r2, r2, #31
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f202 	lsl.w	r2, r1, r2
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0af      	beq.n	80042f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	4b2d      	ldr	r3, [pc, #180]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800439a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	21f8      	movs	r1, #248	@ 0xf8
 80043a8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80043b0:	fa91 f1a1 	rbit	r1, r1
 80043b4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80043b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80043bc:	fab1 f181 	clz	r1, r1
 80043c0:	b2c9      	uxtb	r1, r1
 80043c2:	408b      	lsls	r3, r1
 80043c4:	4920      	ldr	r1, [pc, #128]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
 80043ca:	e06c      	b.n	80044a6 <HAL_RCC_OscConfig+0x646>
 80043cc:	2301      	movs	r3, #1
 80043ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80043de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	461a      	mov	r2, r3
 80043f4:	2300      	movs	r3, #0
 80043f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd ff8a 	bl	8002310 <HAL_GetTick>
 80043fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004402:	f7fd ff85 	bl	8002310 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	f000 bd5a 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004418:	2302      	movs	r3, #2
 800441a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800442a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d104      	bne.n	800444c <HAL_RCC_OscConfig+0x5ec>
 8004442:	4b01      	ldr	r3, [pc, #4]	@ (8004448 <HAL_RCC_OscConfig+0x5e8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	e015      	b.n	8004474 <HAL_RCC_OscConfig+0x614>
 8004448:	40021000 	.word	0x40021000
 800444c:	2302      	movs	r3, #2
 800444e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800445e:	2302      	movs	r3, #2
 8004460:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004464:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004470:	4bc8      	ldr	r3, [pc, #800]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	2202      	movs	r2, #2
 8004476:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800447a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800447e:	fa92 f2a2 	rbit	r2, r2
 8004482:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004486:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800448a:	fab2 f282 	clz	r2, r2
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	f042 0220 	orr.w	r2, r2, #32
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f002 021f 	and.w	r2, r2, #31
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f202 	lsl.w	r2, r1, r2
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ad      	bne.n	8004402 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8110 	beq.w	80046dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d079      	beq.n	80045c0 <HAL_RCC_OscConfig+0x760>
 80044cc:	2301      	movs	r3, #1
 80044ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80044de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <HAL_RCC_OscConfig+0x938>)
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	461a      	mov	r2, r3
 80044f2:	2301      	movs	r3, #1
 80044f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f6:	f7fd ff0b 	bl	8002310 <HAL_GetTick>
 80044fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004500:	f7fd ff06 	bl	8002310 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d902      	bls.n	8004516 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	f000 bcdb 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004516:	2302      	movs	r3, #2
 8004518:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004530:	2202      	movs	r2, #2
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004538:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	fa93 f2a3 	rbit	r2, r3
 8004542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004554:	2202      	movs	r2, #2
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	fa93 f2a3 	rbit	r2, r3
 8004566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800456e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004570:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 8004572:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004578:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800457c:	2102      	movs	r1, #2
 800457e:	6019      	str	r1, [r3, #0]
 8004580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004584:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	fa93 f1a3 	rbit	r1, r3
 800458e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004592:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004596:	6019      	str	r1, [r3, #0]
  return result;
 8004598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2101      	movs	r1, #1
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0a0      	beq.n	8004500 <HAL_RCC_OscConfig+0x6a0>
 80045be:	e08d      	b.n	80046dc <HAL_RCC_OscConfig+0x87c>
 80045c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	fa93 f2a3 	rbit	r2, r3
 80045da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80045e2:	601a      	str	r2, [r3, #0]
  return result;
 80045e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80045ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b68      	ldr	r3, [pc, #416]	@ (8004798 <HAL_RCC_OscConfig+0x938>)
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fd fe85 	bl	8002310 <HAL_GetTick>
 8004606:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460a:	e00a      	b.n	8004622 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460c:	f7fd fe80 	bl	8002310 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d902      	bls.n	8004622 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	f000 bc55 	b.w	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004626:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800462a:	2202      	movs	r2, #2
 800462c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004632:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	fa93 f2a3 	rbit	r2, r3
 800463c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004640:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800464e:	2202      	movs	r2, #2
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004656:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fa93 f2a3 	rbit	r2, r3
 8004660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004664:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004672:	2202      	movs	r2, #2
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	fa93 f2a3 	rbit	r2, r3
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800468c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468e:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 8004690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004696:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800469a:	2102      	movs	r1, #2
 800469c:	6019      	str	r1, [r3, #0]
 800469e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	fa93 f1a3 	rbit	r1, r3
 80046ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80046b4:	6019      	str	r1, [r3, #0]
  return result;
 80046b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	fab3 f383 	clz	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d197      	bne.n	800460c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 81a1 	beq.w	8004a34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f8:	4b26      	ldr	r3, [pc, #152]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d116      	bne.n	8004732 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	4b23      	ldr	r3, [pc, #140]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4a22      	ldr	r2, [pc, #136]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470e:	61d3      	str	r3, [r2, #28]
 8004710:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004726:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800472a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <HAL_RCC_OscConfig+0x93c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11a      	bne.n	8004774 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473e:	4b17      	ldr	r3, [pc, #92]	@ (800479c <HAL_RCC_OscConfig+0x93c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a16      	ldr	r2, [pc, #88]	@ (800479c <HAL_RCC_OscConfig+0x93c>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fd fde1 	bl	8002310 <HAL_GetTick>
 800474e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	e009      	b.n	8004768 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fd fddc 	bl	8002310 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b64      	cmp	r3, #100	@ 0x64
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e3b1      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <HAL_RCC_OscConfig+0x93c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ef      	beq.n	8004754 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004778:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d10d      	bne.n	80047a0 <HAL_RCC_OscConfig+0x940>
 8004784:	4b03      	ldr	r3, [pc, #12]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4a02      	ldr	r2, [pc, #8]	@ (8004794 <HAL_RCC_OscConfig+0x934>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6213      	str	r3, [r2, #32]
 8004790:	e03c      	b.n	800480c <HAL_RCC_OscConfig+0x9ac>
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	10908120 	.word	0x10908120
 800479c:	40007000 	.word	0x40007000
 80047a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10c      	bne.n	80047ca <HAL_RCC_OscConfig+0x96a>
 80047b0:	4bc1      	ldr	r3, [pc, #772]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4ac0      	ldr	r2, [pc, #768]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	4bbe      	ldr	r3, [pc, #760]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4abd      	ldr	r2, [pc, #756]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047c2:	f023 0304 	bic.w	r3, r3, #4
 80047c6:	6213      	str	r3, [r2, #32]
 80047c8:	e020      	b.n	800480c <HAL_RCC_OscConfig+0x9ac>
 80047ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x994>
 80047da:	4bb7      	ldr	r3, [pc, #732]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	4ab6      	ldr	r2, [pc, #728]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	6213      	str	r3, [r2, #32]
 80047e6:	4bb4      	ldr	r3, [pc, #720]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4ab3      	ldr	r2, [pc, #716]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	e00b      	b.n	800480c <HAL_RCC_OscConfig+0x9ac>
 80047f4:	4bb0      	ldr	r3, [pc, #704]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4aaf      	ldr	r2, [pc, #700]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	6213      	str	r3, [r2, #32]
 8004800:	4bad      	ldr	r3, [pc, #692]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4aac      	ldr	r2, [pc, #688]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 8004806:	f023 0304 	bic.w	r3, r3, #4
 800480a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8081 	beq.w	8004920 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fd fd77 	bl	8002310 <HAL_GetTick>
 8004822:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd fd72 	bl	8002310 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e345      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004844:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004848:	2202      	movs	r2, #2
 800484a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004850:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	fa93 f2a3 	rbit	r2, r3
 800485a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004868:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800486c:	2202      	movs	r2, #2
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	fa93 f2a3 	rbit	r2, r3
 800487e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004882:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004886:	601a      	str	r2, [r3, #0]
  return result;
 8004888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004890:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d102      	bne.n	80048ac <HAL_RCC_OscConfig+0xa4c>
 80048a6:	4b84      	ldr	r3, [pc, #528]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	e013      	b.n	80048d4 <HAL_RCC_OscConfig+0xa74>
 80048ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80048b4:	2202      	movs	r2, #2
 80048b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	fa93 f2a3 	rbit	r2, r3
 80048c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	4b79      	ldr	r3, [pc, #484]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80048dc:	2102      	movs	r1, #2
 80048de:	6011      	str	r1, [r2, #0]
 80048e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	fa92 f1a2 	rbit	r1, r2
 80048ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80048f6:	6011      	str	r1, [r2, #0]
  return result;
 80048f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048fc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	fab2 f282 	clz	r2, r2
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	f002 021f 	and.w	r2, r2, #31
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f202 	lsl.w	r2, r1, r2
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d084      	beq.n	8004828 <HAL_RCC_OscConfig+0x9c8>
 800491e:	e07f      	b.n	8004a20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004920:	f7fd fcf6 	bl	8002310 <HAL_GetTick>
 8004924:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	e00b      	b.n	8004942 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fd fcf1 	bl	8002310 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e2c4      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800494a:	2202      	movs	r2, #2
 800494c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004952:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f2a3 	rbit	r2, r3
 800495c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004960:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800496e:	2202      	movs	r2, #2
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004976:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	fa93 f2a3 	rbit	r2, r3
 8004980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004984:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004988:	601a      	str	r2, [r3, #0]
  return result;
 800498a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800498e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004992:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d102      	bne.n	80049ae <HAL_RCC_OscConfig+0xb4e>
 80049a8:	4b43      	ldr	r3, [pc, #268]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	e013      	b.n	80049d6 <HAL_RCC_OscConfig+0xb76>
 80049ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80049b6:	2202      	movs	r2, #2
 80049b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	fa93 f2a3 	rbit	r2, r3
 80049c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049cc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	4b39      	ldr	r3, [pc, #228]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049da:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80049de:	2102      	movs	r1, #2
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	fa92 f1a2 	rbit	r1, r2
 80049f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049f4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80049f8:	6011      	str	r1, [r2, #0]
  return result;
 80049fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049fe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	fab2 f282 	clz	r2, r2
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	f002 021f 	and.w	r2, r2, #31
 8004a14:	2101      	movs	r1, #1
 8004a16:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d184      	bne.n	800492a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a20:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b23      	ldr	r3, [pc, #140]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	4a22      	ldr	r2, [pc, #136]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8242 	beq.w	8004eca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a46:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab8 <HAL_RCC_OscConfig+0xc58>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	f000 8213 	beq.w	8004e7a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	f040 8162 	bne.w	8004d2a <HAL_RCC_OscConfig+0xeca>
 8004a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004a6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a78:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	fa93 f2a3 	rbit	r2, r3
 8004a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a86:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004a8a:	601a      	str	r2, [r3, #0]
  return result;
 8004a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a90:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004a94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004aa0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fd fc30 	bl	8002310 <HAL_GetTick>
 8004ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab4:	e00c      	b.n	8004ad0 <HAL_RCC_OscConfig+0xc70>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd fc28 	bl	8002310 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e1fd      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004ad8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fa93 f2a3 	rbit	r2, r3
 8004aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004af4:	601a      	str	r2, [r3, #0]
  return result;
 8004af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004afe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b00:	fab3 f383 	clz	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d102      	bne.n	8004b1a <HAL_RCC_OscConfig+0xcba>
 8004b14:	4bb0      	ldr	r3, [pc, #704]	@ (8004dd8 <HAL_RCC_OscConfig+0xf78>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	e027      	b.n	8004b6a <HAL_RCC_OscConfig+0xd0a>
 8004b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004b22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	fa93 f2a3 	rbit	r2, r3
 8004b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b44:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004b48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b52:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b60:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	4b9c      	ldr	r3, [pc, #624]	@ (8004dd8 <HAL_RCC_OscConfig+0xf78>)
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b6e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004b72:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004b76:	6011      	str	r1, [r2, #0]
 8004b78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b7c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	fa92 f1a2 	rbit	r1, r2
 8004b86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b8a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004b8e:	6011      	str	r1, [r2, #0]
  return result;
 8004b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b94:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	fab2 f282 	clz	r2, r2
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	f042 0220 	orr.w	r2, r2, #32
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	f002 021f 	and.w	r2, r2, #31
 8004baa:	2101      	movs	r1, #1
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d182      	bne.n	8004abc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb6:	4b88      	ldr	r3, [pc, #544]	@ (8004dd8 <HAL_RCC_OscConfig+0xf78>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	497f      	ldr	r1, [pc, #508]	@ (8004dd8 <HAL_RCC_OscConfig+0xf78>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
 8004bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004be6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	fa93 f2a3 	rbit	r2, r3
 8004bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bfe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004c02:	601a      	str	r2, [r3, #0]
  return result;
 8004c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c08:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004c0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004c18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2301      	movs	r3, #1
 8004c22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fd fb74 	bl	8002310 <HAL_GetTick>
 8004c28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c2c:	e009      	b.n	8004c42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2e:	f7fd fb6f 	bl	8002310 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e144      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c46:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004c4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c54:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	fa93 f2a3 	rbit	r2, r3
 8004c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c62:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004c66:	601a      	str	r2, [r3, #0]
  return result;
 8004c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004c70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d102      	bne.n	8004c8c <HAL_RCC_OscConfig+0xe2c>
 8004c86:	4b54      	ldr	r3, [pc, #336]	@ (8004dd8 <HAL_RCC_OscConfig+0xf78>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	e027      	b.n	8004cdc <HAL_RCC_OscConfig+0xe7c>
 8004c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c90:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004c94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c9e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	fa93 f2a3 	rbit	r2, r3
 8004ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004cba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	fa93 f2a3 	rbit	r2, r3
 8004cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd8 <HAL_RCC_OscConfig+0xf78>)
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ce0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ce4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ce8:	6011      	str	r1, [r2, #0]
 8004cea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	fa92 f1a2 	rbit	r1, r2
 8004cf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cfc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004d00:	6011      	str	r1, [r2, #0]
  return result;
 8004d02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d06:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	fab2 f282 	clz	r2, r2
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	f042 0220 	orr.w	r2, r2, #32
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	f002 021f 	and.w	r2, r2, #31
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d082      	beq.n	8004c2e <HAL_RCC_OscConfig+0xdce>
 8004d28:	e0cf      	b.n	8004eca <HAL_RCC_OscConfig+0x106a>
 8004d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d2e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004d32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d3c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	fa93 f2a3 	rbit	r2, r3
 8004d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004d4e:	601a      	str	r2, [r3, #0]
  return result;
 8004d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d54:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004d58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fd face 	bl	8002310 <HAL_GetTick>
 8004d74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d78:	e009      	b.n	8004d8e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fd fac9 	bl	8002310 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e09e      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
 8004d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d92:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004d96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	fa93 f2a3 	rbit	r2, r3
 8004daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004db2:	601a      	str	r2, [r3, #0]
  return result;
 8004db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d104      	bne.n	8004ddc <HAL_RCC_OscConfig+0xf7c>
 8004dd2:	4b01      	ldr	r3, [pc, #4]	@ (8004dd8 <HAL_RCC_OscConfig+0xf78>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	e029      	b.n	8004e2c <HAL_RCC_OscConfig+0xfcc>
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004de4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	fa93 f2a3 	rbit	r2, r3
 8004df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e06:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004e0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e14:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	fa93 f2a3 	rbit	r2, r3
 8004e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e22:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed8 <HAL_RCC_OscConfig+0x1078>)
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e30:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004e34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e3e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	fa92 f1a2 	rbit	r1, r2
 8004e48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e4c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004e50:	6011      	str	r1, [r2, #0]
  return result;
 8004e52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e56:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	fab2 f282 	clz	r2, r2
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	f042 0220 	orr.w	r2, r2, #32
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	f002 021f 	and.w	r2, r2, #31
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d180      	bne.n	8004d7a <HAL_RCC_OscConfig+0xf1a>
 8004e78:	e027      	b.n	8004eca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e01e      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e8e:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <HAL_RCC_OscConfig+0x1078>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004e9a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10b      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004eae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004eb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d001      	beq.n	8004eca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000

08004edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b09e      	sub	sp, #120	@ 0x78
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e162      	b.n	80051ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b90      	ldr	r3, [pc, #576]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d910      	bls.n	8004f24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b8d      	ldr	r3, [pc, #564]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 0207 	bic.w	r2, r3, #7
 8004f0a:	498b      	ldr	r1, [pc, #556]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b89      	ldr	r3, [pc, #548]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e14a      	b.n	80051ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b82      	ldr	r3, [pc, #520]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	497f      	ldr	r1, [pc, #508]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80dc 	beq.w	8005108 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d13c      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xf6>
 8004f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f5c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d102      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xa6>
 8004f7c:	4b6f      	ldr	r3, [pc, #444]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCC_ClockConfig+0xc6>
 8004f82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f8a:	fa93 f3a3 	rbit	r3, r3
 8004f8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f9e:	4b67      	ldr	r3, [pc, #412]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004fa6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004faa:	fa92 f2a2 	rbit	r2, r2
 8004fae:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004fb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fb2:	fab2 f282 	clz	r2, r2
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	f042 0220 	orr.w	r2, r2, #32
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	f002 021f 	and.w	r2, r2, #31
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d17b      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0f3      	b.n	80051ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d13c      	bne.n	8005054 <HAL_RCC_ClockConfig+0x178>
 8004fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_RCC_ClockConfig+0x128>
 8004ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	e00f      	b.n	8005024 <HAL_RCC_ClockConfig+0x148>
 8005004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005008:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800500c:	fa93 f3a3 	rbit	r3, r3
 8005010:	647b      	str	r3, [r7, #68]	@ 0x44
 8005012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005016:	643b      	str	r3, [r7, #64]	@ 0x40
 8005018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005020:	4b46      	ldr	r3, [pc, #280]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005028:	63ba      	str	r2, [r7, #56]	@ 0x38
 800502a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800502c:	fa92 f2a2 	rbit	r2, r2
 8005030:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005034:	fab2 f282 	clz	r2, r2
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	f042 0220 	orr.w	r2, r2, #32
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	f002 021f 	and.w	r2, r2, #31
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f202 	lsl.w	r2, r1, r2
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d13a      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0b2      	b.n	80051ba <HAL_RCC_ClockConfig+0x2de>
 8005054:	2302      	movs	r3, #2
 8005056:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005062:	fab3 f383 	clz	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	d102      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	e00d      	b.n	8005098 <HAL_RCC_ClockConfig+0x1bc>
 800507c:	2302      	movs	r3, #2
 800507e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	fa93 f3a3 	rbit	r3, r3
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
 8005088:	2302      	movs	r3, #2
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	4b29      	ldr	r3, [pc, #164]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	2202      	movs	r2, #2
 800509a:	61ba      	str	r2, [r7, #24]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	fa92 f2a2 	rbit	r2, r2
 80050a2:	617a      	str	r2, [r7, #20]
  return result;
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	fab2 f282 	clz	r2, r2
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	f042 0220 	orr.w	r2, r2, #32
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	f002 021f 	and.w	r2, r2, #31
 80050b6:	2101      	movs	r1, #1
 80050b8:	fa01 f202 	lsl.w	r2, r1, r2
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e079      	b.n	80051ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b1d      	ldr	r3, [pc, #116]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	491a      	ldr	r1, [pc, #104]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d8:	f7fd f91a 	bl	8002310 <HAL_GetTick>
 80050dc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fd f916 	bl	8002310 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e061      	b.n	80051ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	4b11      	ldr	r3, [pc, #68]	@ (800513c <HAL_RCC_ClockConfig+0x260>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 020c 	and.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	429a      	cmp	r2, r3
 8005106:	d1eb      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005108:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d214      	bcs.n	8005140 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 0207 	bic.w	r2, r3, #7
 800511e:	4906      	ldr	r1, [pc, #24]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <HAL_RCC_ClockConfig+0x25c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e040      	b.n	80051ba <HAL_RCC_ClockConfig+0x2de>
 8005138:	40022000 	.word	0x40022000
 800513c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800514c:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <HAL_RCC_ClockConfig+0x2e8>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	491a      	ldr	r1, [pc, #104]	@ (80051c4 <HAL_RCC_ClockConfig+0x2e8>)
 800515a:	4313      	orrs	r3, r2
 800515c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516a:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <HAL_RCC_ClockConfig+0x2e8>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4912      	ldr	r1, [pc, #72]	@ (80051c4 <HAL_RCC_ClockConfig+0x2e8>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800517e:	f000 f829 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8005182:	4601      	mov	r1, r0
 8005184:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <HAL_RCC_ClockConfig+0x2e8>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800518c:	22f0      	movs	r2, #240	@ 0xf0
 800518e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	fa92 f2a2 	rbit	r2, r2
 8005196:	60fa      	str	r2, [r7, #12]
  return result;
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	fab2 f282 	clz	r2, r2
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	40d3      	lsrs	r3, r2
 80051a2:	4a09      	ldr	r2, [pc, #36]	@ (80051c8 <HAL_RCC_ClockConfig+0x2ec>)
 80051a4:	5cd3      	ldrb	r3, [r2, r3]
 80051a6:	fa21 f303 	lsr.w	r3, r1, r3
 80051aa:	4a08      	ldr	r2, [pc, #32]	@ (80051cc <HAL_RCC_ClockConfig+0x2f0>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051ae:	4b08      	ldr	r3, [pc, #32]	@ (80051d0 <HAL_RCC_ClockConfig+0x2f4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd f868 	bl	8002288 <HAL_InitTick>
  
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3778      	adds	r7, #120	@ 0x78
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800b84c 	.word	0x0800b84c
 80051cc:	20000010 	.word	0x20000010
 80051d0:	20000014 	.word	0x20000014

080051d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80051ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x94>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d002      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x30>
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d003      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0x36>
 8005202:	e026      	b.n	8005252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005204:	4b19      	ldr	r3, [pc, #100]	@ (800526c <HAL_RCC_GetSysClockFreq+0x98>)
 8005206:	613b      	str	r3, [r7, #16]
      break;
 8005208:	e026      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	0c9b      	lsrs	r3, r3, #18
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	4a17      	ldr	r2, [pc, #92]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005214:	5cd3      	ldrb	r3, [r2, r3]
 8005216:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005218:	4b13      	ldr	r3, [pc, #76]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x94>)
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	4a14      	ldr	r2, [pc, #80]	@ (8005274 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005222:	5cd3      	ldrb	r3, [r2, r3]
 8005224:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005230:	4a0e      	ldr	r2, [pc, #56]	@ (800526c <HAL_RCC_GetSysClockFreq+0x98>)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	fbb2 f2f3 	udiv	r2, r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e004      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a0c      	ldr	r2, [pc, #48]	@ (8005278 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	613b      	str	r3, [r7, #16]
      break;
 8005250:	e002      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005252:	4b06      	ldr	r3, [pc, #24]	@ (800526c <HAL_RCC_GetSysClockFreq+0x98>)
 8005254:	613b      	str	r3, [r7, #16]
      break;
 8005256:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005258:	693b      	ldr	r3, [r7, #16]
}
 800525a:	4618      	mov	r0, r3
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
 800526c:	007a1200 	.word	0x007a1200
 8005270:	0800b864 	.word	0x0800b864
 8005274:	0800b874 	.word	0x0800b874
 8005278:	003d0900 	.word	0x003d0900

0800527c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005280:	4b03      	ldr	r3, [pc, #12]	@ (8005290 <HAL_RCC_GetHCLKFreq+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000010 	.word	0x20000010

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800529a:	f7ff ffef 	bl	800527c <HAL_RCC_GetHCLKFreq>
 800529e:	4601      	mov	r1, r0
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80052ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	fa92 f2a2 	rbit	r2, r2
 80052b4:	603a      	str	r2, [r7, #0]
  return result;
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	fab2 f282 	clz	r2, r2
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	40d3      	lsrs	r3, r2
 80052c0:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80052c2:	5cd3      	ldrb	r3, [r2, r3]
 80052c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000
 80052d4:	0800b85c 	.word	0x0800b85c

080052d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80052de:	f7ff ffcd 	bl	800527c <HAL_RCC_GetHCLKFreq>
 80052e2:	4601      	mov	r1, r0
 80052e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80052ec:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80052f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	fa92 f2a2 	rbit	r2, r2
 80052f8:	603a      	str	r2, [r7, #0]
  return result;
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	fab2 f282 	clz	r2, r2
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	40d3      	lsrs	r3, r2
 8005304:	4a04      	ldr	r2, [pc, #16]	@ (8005318 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000
 8005318:	0800b85c 	.word	0x0800b85c

0800531c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b092      	sub	sp, #72	@ 0x48
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80d4 	beq.w	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005340:	4b4e      	ldr	r3, [pc, #312]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10e      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534c:	4b4b      	ldr	r3, [pc, #300]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	4a4a      	ldr	r2, [pc, #296]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005356:	61d3      	str	r3, [r2, #28]
 8005358:	4b48      	ldr	r3, [pc, #288]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536a:	4b45      	ldr	r3, [pc, #276]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d118      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005376:	4b42      	ldr	r3, [pc, #264]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a41      	ldr	r2, [pc, #260]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800537c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005380:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005382:	f7fc ffc5 	bl	8002310 <HAL_GetTick>
 8005386:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005388:	e008      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538a:	f7fc ffc1 	bl	8002310 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b64      	cmp	r3, #100	@ 0x64
 8005396:	d901      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e14b      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	4b38      	ldr	r3, [pc, #224]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053a8:	4b34      	ldr	r3, [pc, #208]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8084 	beq.w	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d07c      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053c8:	4b2c      	ldr	r3, [pc, #176]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	fa93 f3a3 	rbit	r3, r3
 80053de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80053e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b26      	ldr	r3, [pc, #152]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	461a      	mov	r2, r3
 80053f2:	2301      	movs	r3, #1
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fe:	fa93 f3a3 	rbit	r3, r3
 8005402:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	461a      	mov	r2, r3
 8005416:	2300      	movs	r3, #0
 8005418:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800541a:	4a18      	ldr	r2, [pc, #96]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d04b      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fc ff71 	bl	8002310 <HAL_GetTick>
 800542e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	e00a      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fc ff6d 	bl	8002310 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e0f5      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005448:	2302      	movs	r3, #2
 800544a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
 8005454:	2302      	movs	r3, #2
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	61fb      	str	r3, [r7, #28]
  return result;
 8005460:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f043 0302 	orr.w	r3, r3, #2
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d108      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005476:	4b01      	ldr	r3, [pc, #4]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	e00d      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800547c:	40021000 	.word	0x40021000
 8005480:	40007000 	.word	0x40007000
 8005484:	10908100 	.word	0x10908100
 8005488:	2302      	movs	r3, #2
 800548a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	4b69      	ldr	r3, [pc, #420]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	2202      	movs	r2, #2
 800549a:	613a      	str	r2, [r7, #16]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	fa92 f2a2 	rbit	r2, r2
 80054a2:	60fa      	str	r2, [r7, #12]
  return result;
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	fab2 f282 	clz	r2, r2
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	f002 021f 	and.w	r2, r2, #31
 80054b6:	2101      	movs	r1, #1
 80054b8:	fa01 f202 	lsl.w	r2, r1, r2
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0b7      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80054c2:	4b5e      	ldr	r3, [pc, #376]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	495b      	ldr	r1, [pc, #364]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054dc:	4b57      	ldr	r3, [pc, #348]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	4a56      	ldr	r2, [pc, #344]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054f4:	4b51      	ldr	r3, [pc, #324]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	f023 0203 	bic.w	r2, r3, #3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	494e      	ldr	r1, [pc, #312]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005502:	4313      	orrs	r3, r2
 8005504:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005512:	4b4a      	ldr	r3, [pc, #296]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	f023 0210 	bic.w	r2, r3, #16
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	4947      	ldr	r1, [pc, #284]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005520:	4313      	orrs	r3, r2
 8005522:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005530:	4b42      	ldr	r3, [pc, #264]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	493f      	ldr	r1, [pc, #252]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800553e:	4313      	orrs	r3, r2
 8005540:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d008      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800554e:	4b3b      	ldr	r3, [pc, #236]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	f023 0220 	bic.w	r2, r3, #32
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	4938      	ldr	r1, [pc, #224]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800555c:	4313      	orrs	r3, r2
 800555e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556c:	4b33      	ldr	r3, [pc, #204]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800556e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005570:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	4930      	ldr	r1, [pc, #192]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800557a:	4313      	orrs	r3, r2
 800557c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005586:	2b00      	cmp	r3, #0
 8005588:	d008      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800558a:	4b2c      	ldr	r3, [pc, #176]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	4929      	ldr	r1, [pc, #164]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005598:	4313      	orrs	r3, r2
 800559a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80055a8:	4b24      	ldr	r3, [pc, #144]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4921      	ldr	r1, [pc, #132]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055c6:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	491a      	ldr	r1, [pc, #104]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80055e4:	4b15      	ldr	r3, [pc, #84]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	4912      	ldr	r1, [pc, #72]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005602:	4b0e      	ldr	r3, [pc, #56]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005606:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	490b      	ldr	r1, [pc, #44]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005610:	4313      	orrs	r3, r2
 8005612:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005620:	4b06      	ldr	r3, [pc, #24]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	4903      	ldr	r1, [pc, #12]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800562e:	4313      	orrs	r3, r2
 8005630:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3748      	adds	r7, #72	@ 0x48
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000

08005640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e049      	b.n	80056e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc f9d0 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fcda 	bl	8006038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d001      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e03b      	b.n	8005780 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a19      	ldr	r2, [pc, #100]	@ (800578c <HAL_TIM_Base_Start_IT+0x9c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_TIM_Base_Start_IT+0x4e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	d004      	beq.n	800573e <HAL_TIM_Base_Start_IT+0x4e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a15      	ldr	r2, [pc, #84]	@ (8005790 <HAL_TIM_Base_Start_IT+0xa0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d115      	bne.n	800576a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <HAL_TIM_Base_Start_IT+0xa4>)
 8005746:	4013      	ands	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d015      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x8c>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005756:	d011      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	e008      	b.n	800577c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e000      	b.n	800577e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40014000 	.word	0x40014000
 8005794:	00010007 	.word	0x00010007

08005798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e049      	b.n	800583e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fc f904 	bl	80019cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f000 fc2e 	bl	8006038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_TIM_PWM_Start+0x24>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e03c      	b.n	80058e6 <HAL_TIM_PWM_Start+0x9e>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d109      	bne.n	8005886 <HAL_TIM_PWM_Start+0x3e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e02f      	b.n	80058e6 <HAL_TIM_PWM_Start+0x9e>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d109      	bne.n	80058a0 <HAL_TIM_PWM_Start+0x58>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e022      	b.n	80058e6 <HAL_TIM_PWM_Start+0x9e>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	d109      	bne.n	80058ba <HAL_TIM_PWM_Start+0x72>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	e015      	b.n	80058e6 <HAL_TIM_PWM_Start+0x9e>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d109      	bne.n	80058d4 <HAL_TIM_PWM_Start+0x8c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	e008      	b.n	80058e6 <HAL_TIM_PWM_Start+0x9e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e083      	b.n	80059f6 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Start+0xb6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058fc:	e023      	b.n	8005946 <HAL_TIM_PWM_Start+0xfe>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b04      	cmp	r3, #4
 8005902:	d104      	bne.n	800590e <HAL_TIM_PWM_Start+0xc6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800590c:	e01b      	b.n	8005946 <HAL_TIM_PWM_Start+0xfe>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b08      	cmp	r3, #8
 8005912:	d104      	bne.n	800591e <HAL_TIM_PWM_Start+0xd6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800591c:	e013      	b.n	8005946 <HAL_TIM_PWM_Start+0xfe>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d104      	bne.n	800592e <HAL_TIM_PWM_Start+0xe6>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800592c:	e00b      	b.n	8005946 <HAL_TIM_PWM_Start+0xfe>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b10      	cmp	r3, #16
 8005932:	d104      	bne.n	800593e <HAL_TIM_PWM_Start+0xf6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800593c:	e003      	b.n	8005946 <HAL_TIM_PWM_Start+0xfe>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2201      	movs	r2, #1
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ff2c 	bl	80067ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a29      	ldr	r2, [pc, #164]	@ (8005a00 <HAL_TIM_PWM_Start+0x1b8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_PWM_Start+0x134>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a28      	ldr	r2, [pc, #160]	@ (8005a04 <HAL_TIM_PWM_Start+0x1bc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_PWM_Start+0x134>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a26      	ldr	r2, [pc, #152]	@ (8005a08 <HAL_TIM_PWM_Start+0x1c0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_PWM_Start+0x134>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a25      	ldr	r2, [pc, #148]	@ (8005a0c <HAL_TIM_PWM_Start+0x1c4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <HAL_TIM_PWM_Start+0x138>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <HAL_TIM_PWM_Start+0x13a>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005994:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a19      	ldr	r2, [pc, #100]	@ (8005a00 <HAL_TIM_PWM_Start+0x1b8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d009      	beq.n	80059b4 <HAL_TIM_PWM_Start+0x16c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a8:	d004      	beq.n	80059b4 <HAL_TIM_PWM_Start+0x16c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a15      	ldr	r2, [pc, #84]	@ (8005a04 <HAL_TIM_PWM_Start+0x1bc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d115      	bne.n	80059e0 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <HAL_TIM_PWM_Start+0x1c8>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d015      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x1aa>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059cc:	d011      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059de:	e008      	b.n	80059f2 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800
 8005a10:	00010007 	.word	0x00010007

08005a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d020      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01b      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0202 	mvn.w	r2, #2
 8005a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 facb 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fabd 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 face 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0204 	mvn.w	r2, #4
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 faa5 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa97 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 faa8 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0208 	mvn.w	r2, #8
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa7f 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa71 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa82 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2208      	movs	r2, #8
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa59 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa4b 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa5c 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00c      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0201 	mvn.w	r2, #1
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa29 	bl	8005fd2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 ff12 	bl	80069c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 ff0a 	bl	80069dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa1b 	bl	8006022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fed2 	bl	80069b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e0ff      	b.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b14      	cmp	r3, #20
 8005c42:	f200 80f0 	bhi.w	8005e26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c46:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005e27 	.word	0x08005e27
 8005c54:	08005e27 	.word	0x08005e27
 8005c58:	08005e27 	.word	0x08005e27
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005e27 	.word	0x08005e27
 8005c64:	08005e27 	.word	0x08005e27
 8005c68:	08005e27 	.word	0x08005e27
 8005c6c:	08005d23 	.word	0x08005d23
 8005c70:	08005e27 	.word	0x08005e27
 8005c74:	08005e27 	.word	0x08005e27
 8005c78:	08005e27 	.word	0x08005e27
 8005c7c:	08005d63 	.word	0x08005d63
 8005c80:	08005e27 	.word	0x08005e27
 8005c84:	08005e27 	.word	0x08005e27
 8005c88:	08005e27 	.word	0x08005e27
 8005c8c:	08005da5 	.word	0x08005da5
 8005c90:	08005e27 	.word	0x08005e27
 8005c94:	08005e27 	.word	0x08005e27
 8005c98:	08005e27 	.word	0x08005e27
 8005c9c:	08005de5 	.word	0x08005de5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fa40 	bl	800612c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0208 	orr.w	r2, r2, #8
 8005cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6999      	ldr	r1, [r3, #24]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	619a      	str	r2, [r3, #24]
      break;
 8005cde:	e0a5      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 faa6 	bl	8006238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	021a      	lsls	r2, r3, #8
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	619a      	str	r2, [r3, #24]
      break;
 8005d20:	e084      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fb05 	bl	8006338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0208 	orr.w	r2, r2, #8
 8005d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0204 	bic.w	r2, r2, #4
 8005d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69d9      	ldr	r1, [r3, #28]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	61da      	str	r2, [r3, #28]
      break;
 8005d60:	e064      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fb63 	bl	8006434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	021a      	lsls	r2, r3, #8
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	61da      	str	r2, [r3, #28]
      break;
 8005da2:	e043      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fba6 	bl	80064fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0208 	orr.w	r2, r2, #8
 8005dbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0204 	bic.w	r2, r2, #4
 8005dce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005de2:	e023      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fbe4 	bl	80065b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dfe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e24:	e002      	b.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e0b6      	b.n	8005fca <HAL_TIM_ConfigClockSource+0x18a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e98:	d03e      	beq.n	8005f18 <HAL_TIM_ConfigClockSource+0xd8>
 8005e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e9e:	f200 8087 	bhi.w	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea6:	f000 8086 	beq.w	8005fb6 <HAL_TIM_ConfigClockSource+0x176>
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eae:	d87f      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005eb0:	2b70      	cmp	r3, #112	@ 0x70
 8005eb2:	d01a      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0xaa>
 8005eb4:	2b70      	cmp	r3, #112	@ 0x70
 8005eb6:	d87b      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005eb8:	2b60      	cmp	r3, #96	@ 0x60
 8005eba:	d050      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x11e>
 8005ebc:	2b60      	cmp	r3, #96	@ 0x60
 8005ebe:	d877      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005ec0:	2b50      	cmp	r3, #80	@ 0x50
 8005ec2:	d03c      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0xfe>
 8005ec4:	2b50      	cmp	r3, #80	@ 0x50
 8005ec6:	d873      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005ec8:	2b40      	cmp	r3, #64	@ 0x40
 8005eca:	d058      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x13e>
 8005ecc:	2b40      	cmp	r3, #64	@ 0x40
 8005ece:	d86f      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005ed0:	2b30      	cmp	r3, #48	@ 0x30
 8005ed2:	d064      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x15e>
 8005ed4:	2b30      	cmp	r3, #48	@ 0x30
 8005ed6:	d86b      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d060      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x15e>
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d867      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d05c      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x15e>
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d05a      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x15e>
 8005ee8:	e062      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005efa:	f000 fc37 	bl	800676c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	609a      	str	r2, [r3, #8]
      break;
 8005f16:	e04f      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f28:	f000 fc20 	bl	800676c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f3a:	609a      	str	r2, [r3, #8]
      break;
 8005f3c:	e03c      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f000 fb94 	bl	8006678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2150      	movs	r1, #80	@ 0x50
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fbed 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005f5c:	e02c      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f000 fbb3 	bl	80066d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2160      	movs	r1, #96	@ 0x60
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fbdd 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e01c      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f000 fb74 	bl	8006678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2140      	movs	r1, #64	@ 0x40
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fbcd 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005f9c:	e00c      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f000 fbc4 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005fae:	e003      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb4:	e000      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a34      	ldr	r2, [pc, #208]	@ (800611c <TIM_Base_SetConfig+0xe4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_Base_SetConfig+0x20>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006056:	d108      	bne.n	800606a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a2b      	ldr	r2, [pc, #172]	@ (800611c <TIM_Base_SetConfig+0xe4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00f      	beq.n	8006092 <TIM_Base_SetConfig+0x5a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006078:	d00b      	beq.n	8006092 <TIM_Base_SetConfig+0x5a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a28      	ldr	r2, [pc, #160]	@ (8006120 <TIM_Base_SetConfig+0xe8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_Base_SetConfig+0x5a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a27      	ldr	r2, [pc, #156]	@ (8006124 <TIM_Base_SetConfig+0xec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_Base_SetConfig+0x5a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a26      	ldr	r2, [pc, #152]	@ (8006128 <TIM_Base_SetConfig+0xf0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a14      	ldr	r2, [pc, #80]	@ (800611c <TIM_Base_SetConfig+0xe4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00b      	beq.n	80060e8 <TIM_Base_SetConfig+0xb0>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a13      	ldr	r2, [pc, #76]	@ (8006120 <TIM_Base_SetConfig+0xe8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d007      	beq.n	80060e8 <TIM_Base_SetConfig+0xb0>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a12      	ldr	r2, [pc, #72]	@ (8006124 <TIM_Base_SetConfig+0xec>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0xb0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a11      	ldr	r2, [pc, #68]	@ (8006128 <TIM_Base_SetConfig+0xf0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f023 0201 	bic.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	611a      	str	r2, [r3, #16]
  }
}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40012c00 	.word	0x40012c00
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800

0800612c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f023 0201 	bic.w	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800615a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0302 	bic.w	r3, r3, #2
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a28      	ldr	r2, [pc, #160]	@ (8006228 <TIM_OC1_SetConfig+0xfc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00b      	beq.n	80061a4 <TIM_OC1_SetConfig+0x78>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a27      	ldr	r2, [pc, #156]	@ (800622c <TIM_OC1_SetConfig+0x100>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <TIM_OC1_SetConfig+0x78>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a26      	ldr	r2, [pc, #152]	@ (8006230 <TIM_OC1_SetConfig+0x104>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_OC1_SetConfig+0x78>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a25      	ldr	r2, [pc, #148]	@ (8006234 <TIM_OC1_SetConfig+0x108>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d10c      	bne.n	80061be <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0308 	bic.w	r3, r3, #8
 80061aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a19      	ldr	r2, [pc, #100]	@ (8006228 <TIM_OC1_SetConfig+0xfc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00b      	beq.n	80061de <TIM_OC1_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a18      	ldr	r2, [pc, #96]	@ (800622c <TIM_OC1_SetConfig+0x100>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d007      	beq.n	80061de <TIM_OC1_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a17      	ldr	r2, [pc, #92]	@ (8006230 <TIM_OC1_SetConfig+0x104>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC1_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a16      	ldr	r2, [pc, #88]	@ (8006234 <TIM_OC1_SetConfig+0x108>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d111      	bne.n	8006202 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	621a      	str	r2, [r3, #32]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f023 0210 	bic.w	r2, r3, #16
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0320 	bic.w	r3, r3, #32
 8006286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a24      	ldr	r2, [pc, #144]	@ (8006328 <TIM_OC2_SetConfig+0xf0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d10d      	bne.n	80062b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006328 <TIM_OC2_SetConfig+0xf0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00b      	beq.n	80062d8 <TIM_OC2_SetConfig+0xa0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	@ (800632c <TIM_OC2_SetConfig+0xf4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <TIM_OC2_SetConfig+0xa0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a19      	ldr	r2, [pc, #100]	@ (8006330 <TIM_OC2_SetConfig+0xf8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_OC2_SetConfig+0xa0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a18      	ldr	r2, [pc, #96]	@ (8006334 <TIM_OC2_SetConfig+0xfc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d113      	bne.n	8006300 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062de:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062e6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40014000 	.word	0x40014000
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800

08006338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a23      	ldr	r2, [pc, #140]	@ (8006424 <TIM_OC3_SetConfig+0xec>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10d      	bne.n	80063b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <TIM_OC3_SetConfig+0xec>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00b      	beq.n	80063d6 <TIM_OC3_SetConfig+0x9e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <TIM_OC3_SetConfig+0xf0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <TIM_OC3_SetConfig+0x9e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a18      	ldr	r2, [pc, #96]	@ (800642c <TIM_OC3_SetConfig+0xf4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_OC3_SetConfig+0x9e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a17      	ldr	r2, [pc, #92]	@ (8006430 <TIM_OC3_SetConfig+0xf8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d113      	bne.n	80063fe <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800

08006434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800646e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	031b      	lsls	r3, r3, #12
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <TIM_OC4_SetConfig+0xb8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_OC4_SetConfig+0x7c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <TIM_OC4_SetConfig+0xbc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_OC4_SetConfig+0x7c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a14      	ldr	r2, [pc, #80]	@ (80064f4 <TIM_OC4_SetConfig+0xc0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_OC4_SetConfig+0x7c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a13      	ldr	r2, [pc, #76]	@ (80064f8 <TIM_OC4_SetConfig+0xc4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d109      	bne.n	80064c4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	019b      	lsls	r3, r3, #6
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40014000 	.word	0x40014000
 80064f4:	40014400 	.word	0x40014400
 80064f8:	40014800 	.word	0x40014800

080064fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800652a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006540:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <TIM_OC5_SetConfig+0xac>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00b      	beq.n	800656e <TIM_OC5_SetConfig+0x72>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <TIM_OC5_SetConfig+0xb0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d007      	beq.n	800656e <TIM_OC5_SetConfig+0x72>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a13      	ldr	r2, [pc, #76]	@ (80065b0 <TIM_OC5_SetConfig+0xb4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <TIM_OC5_SetConfig+0x72>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a12      	ldr	r2, [pc, #72]	@ (80065b4 <TIM_OC5_SetConfig+0xb8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d109      	bne.n	8006582 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006574:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40014400 	.word	0x40014400
 80065b4:	40014800 	.word	0x40014800

080065b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	051b      	lsls	r3, r3, #20
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a16      	ldr	r2, [pc, #88]	@ (8006668 <TIM_OC6_SetConfig+0xb0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_OC6_SetConfig+0x74>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a15      	ldr	r2, [pc, #84]	@ (800666c <TIM_OC6_SetConfig+0xb4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_OC6_SetConfig+0x74>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a14      	ldr	r2, [pc, #80]	@ (8006670 <TIM_OC6_SetConfig+0xb8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC6_SetConfig+0x74>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a13      	ldr	r2, [pc, #76]	@ (8006674 <TIM_OC6_SetConfig+0xbc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d109      	bne.n	8006640 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006632:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	029b      	lsls	r3, r3, #10
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400
 8006674:	40014800 	.word	0x40014800

08006678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f023 0201 	bic.w	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f023 030a 	bic.w	r3, r3, #10
 80066b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b087      	sub	sp, #28
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f023 0210 	bic.w	r2, r3, #16
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006700:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	031b      	lsls	r3, r3, #12
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006712:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	f043 0307 	orr.w	r3, r3, #7
 8006758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	609a      	str	r2, [r3, #8]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	021a      	lsls	r2, r3, #8
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	431a      	orrs	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4313      	orrs	r3, r2
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	609a      	str	r2, [r3, #8]
}
 80067a0:	bf00      	nop
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2201      	movs	r2, #1
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	401a      	ands	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1a      	ldr	r2, [r3, #32]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	fa01 f303 	lsl.w	r3, r1, r3
 80067e4:	431a      	orrs	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
	...

080067f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800680c:	2302      	movs	r3, #2
 800680e:	e04f      	b.n	80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a21      	ldr	r2, [pc, #132]	@ (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d108      	bne.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006840:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a14      	ldr	r2, [pc, #80]	@ (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d004      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a10      	ldr	r2, [pc, #64]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10c      	bne.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800688a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	4313      	orrs	r3, r2
 8006894:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40014000 	.word	0x40014000

080068c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e060      	b.n	80069a2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a14      	ldr	r2, [pc, #80]	@ (80069b0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d115      	bne.n	8006990 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	051b      	lsls	r3, r3, #20
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00

080069b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e040      	b.n	8006a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fb f872 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2224      	movs	r2, #36	@ 0x24
 8006a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f95e 	bl	8006cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f825 	bl	8006a8c <UART_SetConfig>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e01b      	b.n	8006a84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f9dd 	bl	8006e3c <UART_CheckIdleState>
 8006a82:	4603      	mov	r3, r0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8006ce0 <UART_SetConfig+0x254>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a78      	ldr	r2, [pc, #480]	@ (8006ce4 <UART_SetConfig+0x258>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d120      	bne.n	8006b4a <UART_SetConfig+0xbe>
 8006b08:	4b77      	ldr	r3, [pc, #476]	@ (8006ce8 <UART_SetConfig+0x25c>)
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d817      	bhi.n	8006b44 <UART_SetConfig+0xb8>
 8006b14:	a201      	add	r2, pc, #4	@ (adr r2, 8006b1c <UART_SetConfig+0x90>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b39 	.word	0x08006b39
 8006b24:	08006b3f 	.word	0x08006b3f
 8006b28:	08006b33 	.word	0x08006b33
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e01d      	b.n	8006b6e <UART_SetConfig+0xe2>
 8006b32:	2302      	movs	r3, #2
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e01a      	b.n	8006b6e <UART_SetConfig+0xe2>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e017      	b.n	8006b6e <UART_SetConfig+0xe2>
 8006b3e:	2308      	movs	r3, #8
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e014      	b.n	8006b6e <UART_SetConfig+0xe2>
 8006b44:	2310      	movs	r3, #16
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e011      	b.n	8006b6e <UART_SetConfig+0xe2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a67      	ldr	r2, [pc, #412]	@ (8006cec <UART_SetConfig+0x260>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d102      	bne.n	8006b5a <UART_SetConfig+0xce>
 8006b54:	2300      	movs	r3, #0
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e009      	b.n	8006b6e <UART_SetConfig+0xe2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a64      	ldr	r2, [pc, #400]	@ (8006cf0 <UART_SetConfig+0x264>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d102      	bne.n	8006b6a <UART_SetConfig+0xde>
 8006b64:	2300      	movs	r3, #0
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e001      	b.n	8006b6e <UART_SetConfig+0xe2>
 8006b6a:	2310      	movs	r3, #16
 8006b6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b76:	d15a      	bne.n	8006c2e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006b78:	7ffb      	ldrb	r3, [r7, #31]
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d827      	bhi.n	8006bce <UART_SetConfig+0x142>
 8006b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b84 <UART_SetConfig+0xf8>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006ba9 	.word	0x08006ba9
 8006b88:	08006bb1 	.word	0x08006bb1
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	08006bcf 	.word	0x08006bcf
 8006b94:	08006bbf 	.word	0x08006bbf
 8006b98:	08006bcf 	.word	0x08006bcf
 8006b9c:	08006bcf 	.word	0x08006bcf
 8006ba0:	08006bcf 	.word	0x08006bcf
 8006ba4:	08006bc7 	.word	0x08006bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba8:	f7fe fb74 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8006bac:	61b8      	str	r0, [r7, #24]
        break;
 8006bae:	e013      	b.n	8006bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bb0:	f7fe fb92 	bl	80052d8 <HAL_RCC_GetPCLK2Freq>
 8006bb4:	61b8      	str	r0, [r7, #24]
        break;
 8006bb6:	e00f      	b.n	8006bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8006cf4 <UART_SetConfig+0x268>)
 8006bba:	61bb      	str	r3, [r7, #24]
        break;
 8006bbc:	e00c      	b.n	8006bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bbe:	f7fe fb09 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006bc2:	61b8      	str	r0, [r7, #24]
        break;
 8006bc4:	e008      	b.n	8006bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bca:	61bb      	str	r3, [r7, #24]
        break;
 8006bcc:	e004      	b.n	8006bd8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8006bd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d074      	beq.n	8006cc8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	005a      	lsls	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	441a      	add	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b0f      	cmp	r3, #15
 8006bf8:	d916      	bls.n	8006c28 <UART_SetConfig+0x19c>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c00:	d212      	bcs.n	8006c28 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f023 030f 	bic.w	r3, r3, #15
 8006c0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	085b      	lsrs	r3, r3, #1
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	89fb      	ldrh	r3, [r7, #14]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	89fa      	ldrh	r2, [r7, #14]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	e04f      	b.n	8006cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	77bb      	strb	r3, [r7, #30]
 8006c2c:	e04c      	b.n	8006cc8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c2e:	7ffb      	ldrb	r3, [r7, #31]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d828      	bhi.n	8006c86 <UART_SetConfig+0x1fa>
 8006c34:	a201      	add	r2, pc, #4	@ (adr r2, 8006c3c <UART_SetConfig+0x1b0>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c69 	.word	0x08006c69
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006c87 	.word	0x08006c87
 8006c4c:	08006c77 	.word	0x08006c77
 8006c50:	08006c87 	.word	0x08006c87
 8006c54:	08006c87 	.word	0x08006c87
 8006c58:	08006c87 	.word	0x08006c87
 8006c5c:	08006c7f 	.word	0x08006c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fe fb18 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8006c64:	61b8      	str	r0, [r7, #24]
        break;
 8006c66:	e013      	b.n	8006c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c68:	f7fe fb36 	bl	80052d8 <HAL_RCC_GetPCLK2Freq>
 8006c6c:	61b8      	str	r0, [r7, #24]
        break;
 8006c6e:	e00f      	b.n	8006c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c70:	4b20      	ldr	r3, [pc, #128]	@ (8006cf4 <UART_SetConfig+0x268>)
 8006c72:	61bb      	str	r3, [r7, #24]
        break;
 8006c74:	e00c      	b.n	8006c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c76:	f7fe faad 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006c7a:	61b8      	str	r0, [r7, #24]
        break;
 8006c7c:	e008      	b.n	8006c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c82:	61bb      	str	r3, [r7, #24]
        break;
 8006c84:	e004      	b.n	8006c90 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c8e:	bf00      	nop
    }

    if (pclk != 0U)
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d018      	beq.n	8006cc8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	085a      	lsrs	r2, r3, #1
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	441a      	add	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b0f      	cmp	r3, #15
 8006cae:	d909      	bls.n	8006cc4 <UART_SetConfig+0x238>
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb6:	d205      	bcs.n	8006cc4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	e001      	b.n	8006cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3720      	adds	r7, #32
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	efff69f3 	.word	0xefff69f3
 8006ce4:	40013800 	.word	0x40013800
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	40004400 	.word	0x40004400
 8006cf0:	40004800 	.word	0x40004800
 8006cf4:	007a1200 	.word	0x007a1200

08006cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01a      	beq.n	8006e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006df6:	d10a      	bne.n	8006e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	605a      	str	r2, [r3, #4]
  }
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b098      	sub	sp, #96	@ 0x60
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e4c:	f7fb fa60 	bl	8002310 <HAL_GetTick>
 8006e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d12e      	bne.n	8006ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f88c 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d021      	beq.n	8006ebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e062      	b.n	8006f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d149      	bne.n	8006f60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f856 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d03c      	beq.n	8006f60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e6      	bne.n	8006ee6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f38:	61fa      	str	r2, [r7, #28]
 8006f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	69b9      	ldr	r1, [r7, #24]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	617b      	str	r3, [r7, #20]
   return(result);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e011      	b.n	8006f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3758      	adds	r7, #88	@ 0x58
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	e04f      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d04b      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa6:	f7fb f9b3 	bl	8002310 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e04e      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d037      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b80      	cmp	r3, #128	@ 0x80
 8006fd2:	d034      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d031      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d110      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2208      	movs	r2, #8
 8006fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f838 	bl	8007066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e029      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007018:	d111      	bne.n	800703e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f81e 	bl	8007066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e00f      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4013      	ands	r3, r2
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	bf0c      	ite	eq
 800704e:	2301      	moveq	r3, #1
 8007050:	2300      	movne	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	429a      	cmp	r2, r3
 800705a:	d0a0      	beq.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007066:	b480      	push	{r7}
 8007068:	b095      	sub	sp, #84	@ 0x54
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800708c:	643b      	str	r3, [r7, #64]	@ 0x40
 800708e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e6      	bne.n	800706e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3308      	adds	r3, #8
 80070a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d118      	bne.n	800710e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	613b      	str	r3, [r7, #16]
   return(result);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e6      	bne.n	80070dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007122:	bf00      	nop
 8007124:	3754      	adds	r7, #84	@ 0x54
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <_calloc_r>:
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	fba1 5402 	umull	r5, r4, r1, r2
 8007134:	b93c      	cbnz	r4, 8007146 <_calloc_r+0x18>
 8007136:	4629      	mov	r1, r5
 8007138:	f000 f838 	bl	80071ac <_malloc_r>
 800713c:	4606      	mov	r6, r0
 800713e:	b928      	cbnz	r0, 800714c <_calloc_r+0x1e>
 8007140:	2600      	movs	r6, #0
 8007142:	4630      	mov	r0, r6
 8007144:	bd70      	pop	{r4, r5, r6, pc}
 8007146:	220c      	movs	r2, #12
 8007148:	6002      	str	r2, [r0, #0]
 800714a:	e7f9      	b.n	8007140 <_calloc_r+0x12>
 800714c:	462a      	mov	r2, r5
 800714e:	4621      	mov	r1, r4
 8007150:	f001 f849 	bl	80081e6 <memset>
 8007154:	e7f5      	b.n	8007142 <_calloc_r+0x14>
	...

08007158 <malloc>:
 8007158:	4b02      	ldr	r3, [pc, #8]	@ (8007164 <malloc+0xc>)
 800715a:	4601      	mov	r1, r0
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	f000 b825 	b.w	80071ac <_malloc_r>
 8007162:	bf00      	nop
 8007164:	20000028 	.word	0x20000028

08007168 <sbrk_aligned>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4e0f      	ldr	r6, [pc, #60]	@ (80071a8 <sbrk_aligned+0x40>)
 800716c:	460c      	mov	r4, r1
 800716e:	6831      	ldr	r1, [r6, #0]
 8007170:	4605      	mov	r5, r0
 8007172:	b911      	cbnz	r1, 800717a <sbrk_aligned+0x12>
 8007174:	f001 f878 	bl	8008268 <_sbrk_r>
 8007178:	6030      	str	r0, [r6, #0]
 800717a:	4621      	mov	r1, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f001 f873 	bl	8008268 <_sbrk_r>
 8007182:	1c43      	adds	r3, r0, #1
 8007184:	d103      	bne.n	800718e <sbrk_aligned+0x26>
 8007186:	f04f 34ff 	mov.w	r4, #4294967295
 800718a:	4620      	mov	r0, r4
 800718c:	bd70      	pop	{r4, r5, r6, pc}
 800718e:	1cc4      	adds	r4, r0, #3
 8007190:	f024 0403 	bic.w	r4, r4, #3
 8007194:	42a0      	cmp	r0, r4
 8007196:	d0f8      	beq.n	800718a <sbrk_aligned+0x22>
 8007198:	1a21      	subs	r1, r4, r0
 800719a:	4628      	mov	r0, r5
 800719c:	f001 f864 	bl	8008268 <_sbrk_r>
 80071a0:	3001      	adds	r0, #1
 80071a2:	d1f2      	bne.n	800718a <sbrk_aligned+0x22>
 80071a4:	e7ef      	b.n	8007186 <sbrk_aligned+0x1e>
 80071a6:	bf00      	nop
 80071a8:	20000444 	.word	0x20000444

080071ac <_malloc_r>:
 80071ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b0:	1ccd      	adds	r5, r1, #3
 80071b2:	f025 0503 	bic.w	r5, r5, #3
 80071b6:	3508      	adds	r5, #8
 80071b8:	2d0c      	cmp	r5, #12
 80071ba:	bf38      	it	cc
 80071bc:	250c      	movcc	r5, #12
 80071be:	2d00      	cmp	r5, #0
 80071c0:	4606      	mov	r6, r0
 80071c2:	db01      	blt.n	80071c8 <_malloc_r+0x1c>
 80071c4:	42a9      	cmp	r1, r5
 80071c6:	d904      	bls.n	80071d2 <_malloc_r+0x26>
 80071c8:	230c      	movs	r3, #12
 80071ca:	6033      	str	r3, [r6, #0]
 80071cc:	2000      	movs	r0, #0
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072a8 <_malloc_r+0xfc>
 80071d6:	f000 f869 	bl	80072ac <__malloc_lock>
 80071da:	f8d8 3000 	ldr.w	r3, [r8]
 80071de:	461c      	mov	r4, r3
 80071e0:	bb44      	cbnz	r4, 8007234 <_malloc_r+0x88>
 80071e2:	4629      	mov	r1, r5
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7ff ffbf 	bl	8007168 <sbrk_aligned>
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	4604      	mov	r4, r0
 80071ee:	d158      	bne.n	80072a2 <_malloc_r+0xf6>
 80071f0:	f8d8 4000 	ldr.w	r4, [r8]
 80071f4:	4627      	mov	r7, r4
 80071f6:	2f00      	cmp	r7, #0
 80071f8:	d143      	bne.n	8007282 <_malloc_r+0xd6>
 80071fa:	2c00      	cmp	r4, #0
 80071fc:	d04b      	beq.n	8007296 <_malloc_r+0xea>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	4639      	mov	r1, r7
 8007202:	4630      	mov	r0, r6
 8007204:	eb04 0903 	add.w	r9, r4, r3
 8007208:	f001 f82e 	bl	8008268 <_sbrk_r>
 800720c:	4581      	cmp	r9, r0
 800720e:	d142      	bne.n	8007296 <_malloc_r+0xea>
 8007210:	6821      	ldr	r1, [r4, #0]
 8007212:	1a6d      	subs	r5, r5, r1
 8007214:	4629      	mov	r1, r5
 8007216:	4630      	mov	r0, r6
 8007218:	f7ff ffa6 	bl	8007168 <sbrk_aligned>
 800721c:	3001      	adds	r0, #1
 800721e:	d03a      	beq.n	8007296 <_malloc_r+0xea>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	442b      	add	r3, r5
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	f8d8 3000 	ldr.w	r3, [r8]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	bb62      	cbnz	r2, 8007288 <_malloc_r+0xdc>
 800722e:	f8c8 7000 	str.w	r7, [r8]
 8007232:	e00f      	b.n	8007254 <_malloc_r+0xa8>
 8007234:	6822      	ldr	r2, [r4, #0]
 8007236:	1b52      	subs	r2, r2, r5
 8007238:	d420      	bmi.n	800727c <_malloc_r+0xd0>
 800723a:	2a0b      	cmp	r2, #11
 800723c:	d917      	bls.n	800726e <_malloc_r+0xc2>
 800723e:	1961      	adds	r1, r4, r5
 8007240:	42a3      	cmp	r3, r4
 8007242:	6025      	str	r5, [r4, #0]
 8007244:	bf18      	it	ne
 8007246:	6059      	strne	r1, [r3, #4]
 8007248:	6863      	ldr	r3, [r4, #4]
 800724a:	bf08      	it	eq
 800724c:	f8c8 1000 	streq.w	r1, [r8]
 8007250:	5162      	str	r2, [r4, r5]
 8007252:	604b      	str	r3, [r1, #4]
 8007254:	4630      	mov	r0, r6
 8007256:	f000 f82f 	bl	80072b8 <__malloc_unlock>
 800725a:	f104 000b 	add.w	r0, r4, #11
 800725e:	1d23      	adds	r3, r4, #4
 8007260:	f020 0007 	bic.w	r0, r0, #7
 8007264:	1ac2      	subs	r2, r0, r3
 8007266:	bf1c      	itt	ne
 8007268:	1a1b      	subne	r3, r3, r0
 800726a:	50a3      	strne	r3, [r4, r2]
 800726c:	e7af      	b.n	80071ce <_malloc_r+0x22>
 800726e:	6862      	ldr	r2, [r4, #4]
 8007270:	42a3      	cmp	r3, r4
 8007272:	bf0c      	ite	eq
 8007274:	f8c8 2000 	streq.w	r2, [r8]
 8007278:	605a      	strne	r2, [r3, #4]
 800727a:	e7eb      	b.n	8007254 <_malloc_r+0xa8>
 800727c:	4623      	mov	r3, r4
 800727e:	6864      	ldr	r4, [r4, #4]
 8007280:	e7ae      	b.n	80071e0 <_malloc_r+0x34>
 8007282:	463c      	mov	r4, r7
 8007284:	687f      	ldr	r7, [r7, #4]
 8007286:	e7b6      	b.n	80071f6 <_malloc_r+0x4a>
 8007288:	461a      	mov	r2, r3
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	42a3      	cmp	r3, r4
 800728e:	d1fb      	bne.n	8007288 <_malloc_r+0xdc>
 8007290:	2300      	movs	r3, #0
 8007292:	6053      	str	r3, [r2, #4]
 8007294:	e7de      	b.n	8007254 <_malloc_r+0xa8>
 8007296:	230c      	movs	r3, #12
 8007298:	6033      	str	r3, [r6, #0]
 800729a:	4630      	mov	r0, r6
 800729c:	f000 f80c 	bl	80072b8 <__malloc_unlock>
 80072a0:	e794      	b.n	80071cc <_malloc_r+0x20>
 80072a2:	6005      	str	r5, [r0, #0]
 80072a4:	e7d6      	b.n	8007254 <_malloc_r+0xa8>
 80072a6:	bf00      	nop
 80072a8:	20000448 	.word	0x20000448

080072ac <__malloc_lock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	@ (80072b4 <__malloc_lock+0x8>)
 80072ae:	f001 b828 	b.w	8008302 <__retarget_lock_acquire_recursive>
 80072b2:	bf00      	nop
 80072b4:	2000058c 	.word	0x2000058c

080072b8 <__malloc_unlock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	@ (80072c0 <__malloc_unlock+0x8>)
 80072ba:	f001 b823 	b.w	8008304 <__retarget_lock_release_recursive>
 80072be:	bf00      	nop
 80072c0:	2000058c 	.word	0x2000058c

080072c4 <__cvt>:
 80072c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	ec57 6b10 	vmov	r6, r7, d0
 80072cc:	2f00      	cmp	r7, #0
 80072ce:	460c      	mov	r4, r1
 80072d0:	4619      	mov	r1, r3
 80072d2:	463b      	mov	r3, r7
 80072d4:	bfbb      	ittet	lt
 80072d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072da:	461f      	movlt	r7, r3
 80072dc:	2300      	movge	r3, #0
 80072de:	232d      	movlt	r3, #45	@ 0x2d
 80072e0:	700b      	strb	r3, [r1, #0]
 80072e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072e8:	4691      	mov	r9, r2
 80072ea:	f023 0820 	bic.w	r8, r3, #32
 80072ee:	bfbc      	itt	lt
 80072f0:	4632      	movlt	r2, r6
 80072f2:	4616      	movlt	r6, r2
 80072f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072f8:	d005      	beq.n	8007306 <__cvt+0x42>
 80072fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072fe:	d100      	bne.n	8007302 <__cvt+0x3e>
 8007300:	3401      	adds	r4, #1
 8007302:	2102      	movs	r1, #2
 8007304:	e000      	b.n	8007308 <__cvt+0x44>
 8007306:	2103      	movs	r1, #3
 8007308:	ab03      	add	r3, sp, #12
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	ab02      	add	r3, sp, #8
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	ec47 6b10 	vmov	d0, r6, r7
 8007314:	4653      	mov	r3, sl
 8007316:	4622      	mov	r2, r4
 8007318:	f001 f886 	bl	8008428 <_dtoa_r>
 800731c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007320:	4605      	mov	r5, r0
 8007322:	d119      	bne.n	8007358 <__cvt+0x94>
 8007324:	f019 0f01 	tst.w	r9, #1
 8007328:	d00e      	beq.n	8007348 <__cvt+0x84>
 800732a:	eb00 0904 	add.w	r9, r0, r4
 800732e:	2200      	movs	r2, #0
 8007330:	2300      	movs	r3, #0
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f9 fbd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800733a:	b108      	cbz	r0, 8007340 <__cvt+0x7c>
 800733c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007340:	2230      	movs	r2, #48	@ 0x30
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	454b      	cmp	r3, r9
 8007346:	d31e      	bcc.n	8007386 <__cvt+0xc2>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800734c:	1b5b      	subs	r3, r3, r5
 800734e:	4628      	mov	r0, r5
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	b004      	add	sp, #16
 8007354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007358:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800735c:	eb00 0904 	add.w	r9, r0, r4
 8007360:	d1e5      	bne.n	800732e <__cvt+0x6a>
 8007362:	7803      	ldrb	r3, [r0, #0]
 8007364:	2b30      	cmp	r3, #48	@ 0x30
 8007366:	d10a      	bne.n	800737e <__cvt+0xba>
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	4630      	mov	r0, r6
 800736e:	4639      	mov	r1, r7
 8007370:	f7f9 fbba 	bl	8000ae8 <__aeabi_dcmpeq>
 8007374:	b918      	cbnz	r0, 800737e <__cvt+0xba>
 8007376:	f1c4 0401 	rsb	r4, r4, #1
 800737a:	f8ca 4000 	str.w	r4, [sl]
 800737e:	f8da 3000 	ldr.w	r3, [sl]
 8007382:	4499      	add	r9, r3
 8007384:	e7d3      	b.n	800732e <__cvt+0x6a>
 8007386:	1c59      	adds	r1, r3, #1
 8007388:	9103      	str	r1, [sp, #12]
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	e7d9      	b.n	8007342 <__cvt+0x7e>

0800738e <__exponent>:
 800738e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007390:	2900      	cmp	r1, #0
 8007392:	bfba      	itte	lt
 8007394:	4249      	neglt	r1, r1
 8007396:	232d      	movlt	r3, #45	@ 0x2d
 8007398:	232b      	movge	r3, #43	@ 0x2b
 800739a:	2909      	cmp	r1, #9
 800739c:	7002      	strb	r2, [r0, #0]
 800739e:	7043      	strb	r3, [r0, #1]
 80073a0:	dd29      	ble.n	80073f6 <__exponent+0x68>
 80073a2:	f10d 0307 	add.w	r3, sp, #7
 80073a6:	461d      	mov	r5, r3
 80073a8:	270a      	movs	r7, #10
 80073aa:	461a      	mov	r2, r3
 80073ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80073b0:	fb07 1416 	mls	r4, r7, r6, r1
 80073b4:	3430      	adds	r4, #48	@ 0x30
 80073b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073ba:	460c      	mov	r4, r1
 80073bc:	2c63      	cmp	r4, #99	@ 0x63
 80073be:	f103 33ff 	add.w	r3, r3, #4294967295
 80073c2:	4631      	mov	r1, r6
 80073c4:	dcf1      	bgt.n	80073aa <__exponent+0x1c>
 80073c6:	3130      	adds	r1, #48	@ 0x30
 80073c8:	1e94      	subs	r4, r2, #2
 80073ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073ce:	1c41      	adds	r1, r0, #1
 80073d0:	4623      	mov	r3, r4
 80073d2:	42ab      	cmp	r3, r5
 80073d4:	d30a      	bcc.n	80073ec <__exponent+0x5e>
 80073d6:	f10d 0309 	add.w	r3, sp, #9
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	42ac      	cmp	r4, r5
 80073de:	bf88      	it	hi
 80073e0:	2300      	movhi	r3, #0
 80073e2:	3302      	adds	r3, #2
 80073e4:	4403      	add	r3, r0
 80073e6:	1a18      	subs	r0, r3, r0
 80073e8:	b003      	add	sp, #12
 80073ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073f4:	e7ed      	b.n	80073d2 <__exponent+0x44>
 80073f6:	2330      	movs	r3, #48	@ 0x30
 80073f8:	3130      	adds	r1, #48	@ 0x30
 80073fa:	7083      	strb	r3, [r0, #2]
 80073fc:	70c1      	strb	r1, [r0, #3]
 80073fe:	1d03      	adds	r3, r0, #4
 8007400:	e7f1      	b.n	80073e6 <__exponent+0x58>
	...

08007404 <_printf_float>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	b08d      	sub	sp, #52	@ 0x34
 800740a:	460c      	mov	r4, r1
 800740c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007410:	4616      	mov	r6, r2
 8007412:	461f      	mov	r7, r3
 8007414:	4605      	mov	r5, r0
 8007416:	f000 feef 	bl	80081f8 <_localeconv_r>
 800741a:	6803      	ldr	r3, [r0, #0]
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	4618      	mov	r0, r3
 8007420:	f7f8 ff36 	bl	8000290 <strlen>
 8007424:	2300      	movs	r3, #0
 8007426:	930a      	str	r3, [sp, #40]	@ 0x28
 8007428:	f8d8 3000 	ldr.w	r3, [r8]
 800742c:	9005      	str	r0, [sp, #20]
 800742e:	3307      	adds	r3, #7
 8007430:	f023 0307 	bic.w	r3, r3, #7
 8007434:	f103 0208 	add.w	r2, r3, #8
 8007438:	f894 a018 	ldrb.w	sl, [r4, #24]
 800743c:	f8d4 b000 	ldr.w	fp, [r4]
 8007440:	f8c8 2000 	str.w	r2, [r8]
 8007444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007448:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800744c:	9307      	str	r3, [sp, #28]
 800744e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007452:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800745a:	4b9c      	ldr	r3, [pc, #624]	@ (80076cc <_printf_float+0x2c8>)
 800745c:	f04f 32ff 	mov.w	r2, #4294967295
 8007460:	f7f9 fb74 	bl	8000b4c <__aeabi_dcmpun>
 8007464:	bb70      	cbnz	r0, 80074c4 <_printf_float+0xc0>
 8007466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800746a:	4b98      	ldr	r3, [pc, #608]	@ (80076cc <_printf_float+0x2c8>)
 800746c:	f04f 32ff 	mov.w	r2, #4294967295
 8007470:	f7f9 fb4e 	bl	8000b10 <__aeabi_dcmple>
 8007474:	bb30      	cbnz	r0, 80074c4 <_printf_float+0xc0>
 8007476:	2200      	movs	r2, #0
 8007478:	2300      	movs	r3, #0
 800747a:	4640      	mov	r0, r8
 800747c:	4649      	mov	r1, r9
 800747e:	f7f9 fb3d 	bl	8000afc <__aeabi_dcmplt>
 8007482:	b110      	cbz	r0, 800748a <_printf_float+0x86>
 8007484:	232d      	movs	r3, #45	@ 0x2d
 8007486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800748a:	4a91      	ldr	r2, [pc, #580]	@ (80076d0 <_printf_float+0x2cc>)
 800748c:	4b91      	ldr	r3, [pc, #580]	@ (80076d4 <_printf_float+0x2d0>)
 800748e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007492:	bf94      	ite	ls
 8007494:	4690      	movls	r8, r2
 8007496:	4698      	movhi	r8, r3
 8007498:	2303      	movs	r3, #3
 800749a:	6123      	str	r3, [r4, #16]
 800749c:	f02b 0304 	bic.w	r3, fp, #4
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	f04f 0900 	mov.w	r9, #0
 80074a6:	9700      	str	r7, [sp, #0]
 80074a8:	4633      	mov	r3, r6
 80074aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074ac:	4621      	mov	r1, r4
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 f9d2 	bl	8007858 <_printf_common>
 80074b4:	3001      	adds	r0, #1
 80074b6:	f040 808d 	bne.w	80075d4 <_printf_float+0x1d0>
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	b00d      	add	sp, #52	@ 0x34
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	4649      	mov	r1, r9
 80074cc:	f7f9 fb3e 	bl	8000b4c <__aeabi_dcmpun>
 80074d0:	b140      	cbz	r0, 80074e4 <_printf_float+0xe0>
 80074d2:	464b      	mov	r3, r9
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bfbc      	itt	lt
 80074d8:	232d      	movlt	r3, #45	@ 0x2d
 80074da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074de:	4a7e      	ldr	r2, [pc, #504]	@ (80076d8 <_printf_float+0x2d4>)
 80074e0:	4b7e      	ldr	r3, [pc, #504]	@ (80076dc <_printf_float+0x2d8>)
 80074e2:	e7d4      	b.n	800748e <_printf_float+0x8a>
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074ea:	9206      	str	r2, [sp, #24]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	d13b      	bne.n	8007568 <_printf_float+0x164>
 80074f0:	2306      	movs	r3, #6
 80074f2:	6063      	str	r3, [r4, #4]
 80074f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074f8:	2300      	movs	r3, #0
 80074fa:	6022      	str	r2, [r4, #0]
 80074fc:	9303      	str	r3, [sp, #12]
 80074fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8007500:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007504:	ab09      	add	r3, sp, #36	@ 0x24
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	6861      	ldr	r1, [r4, #4]
 800750a:	ec49 8b10 	vmov	d0, r8, r9
 800750e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007512:	4628      	mov	r0, r5
 8007514:	f7ff fed6 	bl	80072c4 <__cvt>
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800751c:	2b47      	cmp	r3, #71	@ 0x47
 800751e:	4680      	mov	r8, r0
 8007520:	d129      	bne.n	8007576 <_printf_float+0x172>
 8007522:	1cc8      	adds	r0, r1, #3
 8007524:	db02      	blt.n	800752c <_printf_float+0x128>
 8007526:	6863      	ldr	r3, [r4, #4]
 8007528:	4299      	cmp	r1, r3
 800752a:	dd41      	ble.n	80075b0 <_printf_float+0x1ac>
 800752c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007530:	fa5f fa8a 	uxtb.w	sl, sl
 8007534:	3901      	subs	r1, #1
 8007536:	4652      	mov	r2, sl
 8007538:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800753c:	9109      	str	r1, [sp, #36]	@ 0x24
 800753e:	f7ff ff26 	bl	800738e <__exponent>
 8007542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007544:	1813      	adds	r3, r2, r0
 8007546:	2a01      	cmp	r2, #1
 8007548:	4681      	mov	r9, r0
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	dc02      	bgt.n	8007554 <_printf_float+0x150>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	07d2      	lsls	r2, r2, #31
 8007552:	d501      	bpl.n	8007558 <_printf_float+0x154>
 8007554:	3301      	adds	r3, #1
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0a2      	beq.n	80074a6 <_printf_float+0xa2>
 8007560:	232d      	movs	r3, #45	@ 0x2d
 8007562:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007566:	e79e      	b.n	80074a6 <_printf_float+0xa2>
 8007568:	9a06      	ldr	r2, [sp, #24]
 800756a:	2a47      	cmp	r2, #71	@ 0x47
 800756c:	d1c2      	bne.n	80074f4 <_printf_float+0xf0>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1c0      	bne.n	80074f4 <_printf_float+0xf0>
 8007572:	2301      	movs	r3, #1
 8007574:	e7bd      	b.n	80074f2 <_printf_float+0xee>
 8007576:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800757a:	d9db      	bls.n	8007534 <_printf_float+0x130>
 800757c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007580:	d118      	bne.n	80075b4 <_printf_float+0x1b0>
 8007582:	2900      	cmp	r1, #0
 8007584:	6863      	ldr	r3, [r4, #4]
 8007586:	dd0b      	ble.n	80075a0 <_printf_float+0x19c>
 8007588:	6121      	str	r1, [r4, #16]
 800758a:	b913      	cbnz	r3, 8007592 <_printf_float+0x18e>
 800758c:	6822      	ldr	r2, [r4, #0]
 800758e:	07d0      	lsls	r0, r2, #31
 8007590:	d502      	bpl.n	8007598 <_printf_float+0x194>
 8007592:	3301      	adds	r3, #1
 8007594:	440b      	add	r3, r1
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	65a1      	str	r1, [r4, #88]	@ 0x58
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	e7db      	b.n	8007558 <_printf_float+0x154>
 80075a0:	b913      	cbnz	r3, 80075a8 <_printf_float+0x1a4>
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	07d2      	lsls	r2, r2, #31
 80075a6:	d501      	bpl.n	80075ac <_printf_float+0x1a8>
 80075a8:	3302      	adds	r3, #2
 80075aa:	e7f4      	b.n	8007596 <_printf_float+0x192>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e7f2      	b.n	8007596 <_printf_float+0x192>
 80075b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075b6:	4299      	cmp	r1, r3
 80075b8:	db05      	blt.n	80075c6 <_printf_float+0x1c2>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	6121      	str	r1, [r4, #16]
 80075be:	07d8      	lsls	r0, r3, #31
 80075c0:	d5ea      	bpl.n	8007598 <_printf_float+0x194>
 80075c2:	1c4b      	adds	r3, r1, #1
 80075c4:	e7e7      	b.n	8007596 <_printf_float+0x192>
 80075c6:	2900      	cmp	r1, #0
 80075c8:	bfd4      	ite	le
 80075ca:	f1c1 0202 	rsble	r2, r1, #2
 80075ce:	2201      	movgt	r2, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	e7e0      	b.n	8007596 <_printf_float+0x192>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	055a      	lsls	r2, r3, #21
 80075d8:	d407      	bmi.n	80075ea <_printf_float+0x1e6>
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	4642      	mov	r2, r8
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	d12b      	bne.n	8007640 <_printf_float+0x23c>
 80075e8:	e767      	b.n	80074ba <_printf_float+0xb6>
 80075ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075ee:	f240 80dd 	bls.w	80077ac <_printf_float+0x3a8>
 80075f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075f6:	2200      	movs	r2, #0
 80075f8:	2300      	movs	r3, #0
 80075fa:	f7f9 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d033      	beq.n	800766a <_printf_float+0x266>
 8007602:	4a37      	ldr	r2, [pc, #220]	@ (80076e0 <_printf_float+0x2dc>)
 8007604:	2301      	movs	r3, #1
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f af54 	beq.w	80074ba <_printf_float+0xb6>
 8007612:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007616:	4543      	cmp	r3, r8
 8007618:	db02      	blt.n	8007620 <_printf_float+0x21c>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	07d8      	lsls	r0, r3, #31
 800761e:	d50f      	bpl.n	8007640 <_printf_float+0x23c>
 8007620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007624:	4631      	mov	r1, r6
 8007626:	4628      	mov	r0, r5
 8007628:	47b8      	blx	r7
 800762a:	3001      	adds	r0, #1
 800762c:	f43f af45 	beq.w	80074ba <_printf_float+0xb6>
 8007630:	f04f 0900 	mov.w	r9, #0
 8007634:	f108 38ff 	add.w	r8, r8, #4294967295
 8007638:	f104 0a1a 	add.w	sl, r4, #26
 800763c:	45c8      	cmp	r8, r9
 800763e:	dc09      	bgt.n	8007654 <_printf_float+0x250>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	079b      	lsls	r3, r3, #30
 8007644:	f100 8103 	bmi.w	800784e <_printf_float+0x44a>
 8007648:	68e0      	ldr	r0, [r4, #12]
 800764a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800764c:	4298      	cmp	r0, r3
 800764e:	bfb8      	it	lt
 8007650:	4618      	movlt	r0, r3
 8007652:	e734      	b.n	80074be <_printf_float+0xba>
 8007654:	2301      	movs	r3, #1
 8007656:	4652      	mov	r2, sl
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	f43f af2b 	beq.w	80074ba <_printf_float+0xb6>
 8007664:	f109 0901 	add.w	r9, r9, #1
 8007668:	e7e8      	b.n	800763c <_printf_float+0x238>
 800766a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800766c:	2b00      	cmp	r3, #0
 800766e:	dc39      	bgt.n	80076e4 <_printf_float+0x2e0>
 8007670:	4a1b      	ldr	r2, [pc, #108]	@ (80076e0 <_printf_float+0x2dc>)
 8007672:	2301      	movs	r3, #1
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af1d 	beq.w	80074ba <_printf_float+0xb6>
 8007680:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007684:	ea59 0303 	orrs.w	r3, r9, r3
 8007688:	d102      	bne.n	8007690 <_printf_float+0x28c>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	07d9      	lsls	r1, r3, #31
 800768e:	d5d7      	bpl.n	8007640 <_printf_float+0x23c>
 8007690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	f43f af0d 	beq.w	80074ba <_printf_float+0xb6>
 80076a0:	f04f 0a00 	mov.w	sl, #0
 80076a4:	f104 0b1a 	add.w	fp, r4, #26
 80076a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076aa:	425b      	negs	r3, r3
 80076ac:	4553      	cmp	r3, sl
 80076ae:	dc01      	bgt.n	80076b4 <_printf_float+0x2b0>
 80076b0:	464b      	mov	r3, r9
 80076b2:	e793      	b.n	80075dc <_printf_float+0x1d8>
 80076b4:	2301      	movs	r3, #1
 80076b6:	465a      	mov	r2, fp
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f aefb 	beq.w	80074ba <_printf_float+0xb6>
 80076c4:	f10a 0a01 	add.w	sl, sl, #1
 80076c8:	e7ee      	b.n	80076a8 <_printf_float+0x2a4>
 80076ca:	bf00      	nop
 80076cc:	7fefffff 	.word	0x7fefffff
 80076d0:	0800b884 	.word	0x0800b884
 80076d4:	0800b888 	.word	0x0800b888
 80076d8:	0800b88c 	.word	0x0800b88c
 80076dc:	0800b890 	.word	0x0800b890
 80076e0:	0800b894 	.word	0x0800b894
 80076e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076ea:	4553      	cmp	r3, sl
 80076ec:	bfa8      	it	ge
 80076ee:	4653      	movge	r3, sl
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	4699      	mov	r9, r3
 80076f4:	dc36      	bgt.n	8007764 <_printf_float+0x360>
 80076f6:	f04f 0b00 	mov.w	fp, #0
 80076fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076fe:	f104 021a 	add.w	r2, r4, #26
 8007702:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007704:	9306      	str	r3, [sp, #24]
 8007706:	eba3 0309 	sub.w	r3, r3, r9
 800770a:	455b      	cmp	r3, fp
 800770c:	dc31      	bgt.n	8007772 <_printf_float+0x36e>
 800770e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007710:	459a      	cmp	sl, r3
 8007712:	dc3a      	bgt.n	800778a <_printf_float+0x386>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	07da      	lsls	r2, r3, #31
 8007718:	d437      	bmi.n	800778a <_printf_float+0x386>
 800771a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771c:	ebaa 0903 	sub.w	r9, sl, r3
 8007720:	9b06      	ldr	r3, [sp, #24]
 8007722:	ebaa 0303 	sub.w	r3, sl, r3
 8007726:	4599      	cmp	r9, r3
 8007728:	bfa8      	it	ge
 800772a:	4699      	movge	r9, r3
 800772c:	f1b9 0f00 	cmp.w	r9, #0
 8007730:	dc33      	bgt.n	800779a <_printf_float+0x396>
 8007732:	f04f 0800 	mov.w	r8, #0
 8007736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773a:	f104 0b1a 	add.w	fp, r4, #26
 800773e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007740:	ebaa 0303 	sub.w	r3, sl, r3
 8007744:	eba3 0309 	sub.w	r3, r3, r9
 8007748:	4543      	cmp	r3, r8
 800774a:	f77f af79 	ble.w	8007640 <_printf_float+0x23c>
 800774e:	2301      	movs	r3, #1
 8007750:	465a      	mov	r2, fp
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f aeae 	beq.w	80074ba <_printf_float+0xb6>
 800775e:	f108 0801 	add.w	r8, r8, #1
 8007762:	e7ec      	b.n	800773e <_printf_float+0x33a>
 8007764:	4642      	mov	r2, r8
 8007766:	4631      	mov	r1, r6
 8007768:	4628      	mov	r0, r5
 800776a:	47b8      	blx	r7
 800776c:	3001      	adds	r0, #1
 800776e:	d1c2      	bne.n	80076f6 <_printf_float+0x2f2>
 8007770:	e6a3      	b.n	80074ba <_printf_float+0xb6>
 8007772:	2301      	movs	r3, #1
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	9206      	str	r2, [sp, #24]
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f ae9c 	beq.w	80074ba <_printf_float+0xb6>
 8007782:	9a06      	ldr	r2, [sp, #24]
 8007784:	f10b 0b01 	add.w	fp, fp, #1
 8007788:	e7bb      	b.n	8007702 <_printf_float+0x2fe>
 800778a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	d1c0      	bne.n	800771a <_printf_float+0x316>
 8007798:	e68f      	b.n	80074ba <_printf_float+0xb6>
 800779a:	9a06      	ldr	r2, [sp, #24]
 800779c:	464b      	mov	r3, r9
 800779e:	4442      	add	r2, r8
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	d1c3      	bne.n	8007732 <_printf_float+0x32e>
 80077aa:	e686      	b.n	80074ba <_printf_float+0xb6>
 80077ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077b0:	f1ba 0f01 	cmp.w	sl, #1
 80077b4:	dc01      	bgt.n	80077ba <_printf_float+0x3b6>
 80077b6:	07db      	lsls	r3, r3, #31
 80077b8:	d536      	bpl.n	8007828 <_printf_float+0x424>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4642      	mov	r2, r8
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	f43f ae78 	beq.w	80074ba <_printf_float+0xb6>
 80077ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f ae70 	beq.w	80074ba <_printf_float+0xb6>
 80077da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077de:	2200      	movs	r2, #0
 80077e0:	2300      	movs	r3, #0
 80077e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077e6:	f7f9 f97f 	bl	8000ae8 <__aeabi_dcmpeq>
 80077ea:	b9c0      	cbnz	r0, 800781e <_printf_float+0x41a>
 80077ec:	4653      	mov	r3, sl
 80077ee:	f108 0201 	add.w	r2, r8, #1
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	d10c      	bne.n	8007816 <_printf_float+0x412>
 80077fc:	e65d      	b.n	80074ba <_printf_float+0xb6>
 80077fe:	2301      	movs	r3, #1
 8007800:	465a      	mov	r2, fp
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f ae56 	beq.w	80074ba <_printf_float+0xb6>
 800780e:	f108 0801 	add.w	r8, r8, #1
 8007812:	45d0      	cmp	r8, sl
 8007814:	dbf3      	blt.n	80077fe <_printf_float+0x3fa>
 8007816:	464b      	mov	r3, r9
 8007818:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800781c:	e6df      	b.n	80075de <_printf_float+0x1da>
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	f104 0b1a 	add.w	fp, r4, #26
 8007826:	e7f4      	b.n	8007812 <_printf_float+0x40e>
 8007828:	2301      	movs	r3, #1
 800782a:	4642      	mov	r2, r8
 800782c:	e7e1      	b.n	80077f2 <_printf_float+0x3ee>
 800782e:	2301      	movs	r3, #1
 8007830:	464a      	mov	r2, r9
 8007832:	4631      	mov	r1, r6
 8007834:	4628      	mov	r0, r5
 8007836:	47b8      	blx	r7
 8007838:	3001      	adds	r0, #1
 800783a:	f43f ae3e 	beq.w	80074ba <_printf_float+0xb6>
 800783e:	f108 0801 	add.w	r8, r8, #1
 8007842:	68e3      	ldr	r3, [r4, #12]
 8007844:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007846:	1a5b      	subs	r3, r3, r1
 8007848:	4543      	cmp	r3, r8
 800784a:	dcf0      	bgt.n	800782e <_printf_float+0x42a>
 800784c:	e6fc      	b.n	8007648 <_printf_float+0x244>
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	f104 0919 	add.w	r9, r4, #25
 8007856:	e7f4      	b.n	8007842 <_printf_float+0x43e>

08007858 <_printf_common>:
 8007858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	4616      	mov	r6, r2
 800785e:	4698      	mov	r8, r3
 8007860:	688a      	ldr	r2, [r1, #8]
 8007862:	690b      	ldr	r3, [r1, #16]
 8007864:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007868:	4293      	cmp	r3, r2
 800786a:	bfb8      	it	lt
 800786c:	4613      	movlt	r3, r2
 800786e:	6033      	str	r3, [r6, #0]
 8007870:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007874:	4607      	mov	r7, r0
 8007876:	460c      	mov	r4, r1
 8007878:	b10a      	cbz	r2, 800787e <_printf_common+0x26>
 800787a:	3301      	adds	r3, #1
 800787c:	6033      	str	r3, [r6, #0]
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	0699      	lsls	r1, r3, #26
 8007882:	bf42      	ittt	mi
 8007884:	6833      	ldrmi	r3, [r6, #0]
 8007886:	3302      	addmi	r3, #2
 8007888:	6033      	strmi	r3, [r6, #0]
 800788a:	6825      	ldr	r5, [r4, #0]
 800788c:	f015 0506 	ands.w	r5, r5, #6
 8007890:	d106      	bne.n	80078a0 <_printf_common+0x48>
 8007892:	f104 0a19 	add.w	sl, r4, #25
 8007896:	68e3      	ldr	r3, [r4, #12]
 8007898:	6832      	ldr	r2, [r6, #0]
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	42ab      	cmp	r3, r5
 800789e:	dc26      	bgt.n	80078ee <_printf_common+0x96>
 80078a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	3b00      	subs	r3, #0
 80078a8:	bf18      	it	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	0692      	lsls	r2, r2, #26
 80078ae:	d42b      	bmi.n	8007908 <_printf_common+0xb0>
 80078b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078b4:	4641      	mov	r1, r8
 80078b6:	4638      	mov	r0, r7
 80078b8:	47c8      	blx	r9
 80078ba:	3001      	adds	r0, #1
 80078bc:	d01e      	beq.n	80078fc <_printf_common+0xa4>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	6922      	ldr	r2, [r4, #16]
 80078c2:	f003 0306 	and.w	r3, r3, #6
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	bf02      	ittt	eq
 80078ca:	68e5      	ldreq	r5, [r4, #12]
 80078cc:	6833      	ldreq	r3, [r6, #0]
 80078ce:	1aed      	subeq	r5, r5, r3
 80078d0:	68a3      	ldr	r3, [r4, #8]
 80078d2:	bf0c      	ite	eq
 80078d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078d8:	2500      	movne	r5, #0
 80078da:	4293      	cmp	r3, r2
 80078dc:	bfc4      	itt	gt
 80078de:	1a9b      	subgt	r3, r3, r2
 80078e0:	18ed      	addgt	r5, r5, r3
 80078e2:	2600      	movs	r6, #0
 80078e4:	341a      	adds	r4, #26
 80078e6:	42b5      	cmp	r5, r6
 80078e8:	d11a      	bne.n	8007920 <_printf_common+0xc8>
 80078ea:	2000      	movs	r0, #0
 80078ec:	e008      	b.n	8007900 <_printf_common+0xa8>
 80078ee:	2301      	movs	r3, #1
 80078f0:	4652      	mov	r2, sl
 80078f2:	4641      	mov	r1, r8
 80078f4:	4638      	mov	r0, r7
 80078f6:	47c8      	blx	r9
 80078f8:	3001      	adds	r0, #1
 80078fa:	d103      	bne.n	8007904 <_printf_common+0xac>
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	3501      	adds	r5, #1
 8007906:	e7c6      	b.n	8007896 <_printf_common+0x3e>
 8007908:	18e1      	adds	r1, r4, r3
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	2030      	movs	r0, #48	@ 0x30
 800790e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007912:	4422      	add	r2, r4
 8007914:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800791c:	3302      	adds	r3, #2
 800791e:	e7c7      	b.n	80078b0 <_printf_common+0x58>
 8007920:	2301      	movs	r3, #1
 8007922:	4622      	mov	r2, r4
 8007924:	4641      	mov	r1, r8
 8007926:	4638      	mov	r0, r7
 8007928:	47c8      	blx	r9
 800792a:	3001      	adds	r0, #1
 800792c:	d0e6      	beq.n	80078fc <_printf_common+0xa4>
 800792e:	3601      	adds	r6, #1
 8007930:	e7d9      	b.n	80078e6 <_printf_common+0x8e>
	...

08007934 <_printf_i>:
 8007934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	7e0f      	ldrb	r7, [r1, #24]
 800793a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800793c:	2f78      	cmp	r7, #120	@ 0x78
 800793e:	4691      	mov	r9, r2
 8007940:	4680      	mov	r8, r0
 8007942:	460c      	mov	r4, r1
 8007944:	469a      	mov	sl, r3
 8007946:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800794a:	d807      	bhi.n	800795c <_printf_i+0x28>
 800794c:	2f62      	cmp	r7, #98	@ 0x62
 800794e:	d80a      	bhi.n	8007966 <_printf_i+0x32>
 8007950:	2f00      	cmp	r7, #0
 8007952:	f000 80d2 	beq.w	8007afa <_printf_i+0x1c6>
 8007956:	2f58      	cmp	r7, #88	@ 0x58
 8007958:	f000 80b9 	beq.w	8007ace <_printf_i+0x19a>
 800795c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007960:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007964:	e03a      	b.n	80079dc <_printf_i+0xa8>
 8007966:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800796a:	2b15      	cmp	r3, #21
 800796c:	d8f6      	bhi.n	800795c <_printf_i+0x28>
 800796e:	a101      	add	r1, pc, #4	@ (adr r1, 8007974 <_printf_i+0x40>)
 8007970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007974:	080079cd 	.word	0x080079cd
 8007978:	080079e1 	.word	0x080079e1
 800797c:	0800795d 	.word	0x0800795d
 8007980:	0800795d 	.word	0x0800795d
 8007984:	0800795d 	.word	0x0800795d
 8007988:	0800795d 	.word	0x0800795d
 800798c:	080079e1 	.word	0x080079e1
 8007990:	0800795d 	.word	0x0800795d
 8007994:	0800795d 	.word	0x0800795d
 8007998:	0800795d 	.word	0x0800795d
 800799c:	0800795d 	.word	0x0800795d
 80079a0:	08007ae1 	.word	0x08007ae1
 80079a4:	08007a0b 	.word	0x08007a0b
 80079a8:	08007a9b 	.word	0x08007a9b
 80079ac:	0800795d 	.word	0x0800795d
 80079b0:	0800795d 	.word	0x0800795d
 80079b4:	08007b03 	.word	0x08007b03
 80079b8:	0800795d 	.word	0x0800795d
 80079bc:	08007a0b 	.word	0x08007a0b
 80079c0:	0800795d 	.word	0x0800795d
 80079c4:	0800795d 	.word	0x0800795d
 80079c8:	08007aa3 	.word	0x08007aa3
 80079cc:	6833      	ldr	r3, [r6, #0]
 80079ce:	1d1a      	adds	r2, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6032      	str	r2, [r6, #0]
 80079d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079dc:	2301      	movs	r3, #1
 80079de:	e09d      	b.n	8007b1c <_printf_i+0x1e8>
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	6820      	ldr	r0, [r4, #0]
 80079e4:	1d19      	adds	r1, r3, #4
 80079e6:	6031      	str	r1, [r6, #0]
 80079e8:	0606      	lsls	r6, r0, #24
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0xbc>
 80079ec:	681d      	ldr	r5, [r3, #0]
 80079ee:	e003      	b.n	80079f8 <_printf_i+0xc4>
 80079f0:	0645      	lsls	r5, r0, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0xb8>
 80079f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079f8:	2d00      	cmp	r5, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xd0>
 80079fc:	232d      	movs	r3, #45	@ 0x2d
 80079fe:	426d      	negs	r5, r5
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a04:	4859      	ldr	r0, [pc, #356]	@ (8007b6c <_printf_i+0x238>)
 8007a06:	230a      	movs	r3, #10
 8007a08:	e011      	b.n	8007a2e <_printf_i+0xfa>
 8007a0a:	6821      	ldr	r1, [r4, #0]
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	0608      	lsls	r0, r1, #24
 8007a10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a14:	d402      	bmi.n	8007a1c <_printf_i+0xe8>
 8007a16:	0649      	lsls	r1, r1, #25
 8007a18:	bf48      	it	mi
 8007a1a:	b2ad      	uxthmi	r5, r5
 8007a1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a1e:	4853      	ldr	r0, [pc, #332]	@ (8007b6c <_printf_i+0x238>)
 8007a20:	6033      	str	r3, [r6, #0]
 8007a22:	bf14      	ite	ne
 8007a24:	230a      	movne	r3, #10
 8007a26:	2308      	moveq	r3, #8
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a2e:	6866      	ldr	r6, [r4, #4]
 8007a30:	60a6      	str	r6, [r4, #8]
 8007a32:	2e00      	cmp	r6, #0
 8007a34:	bfa2      	ittt	ge
 8007a36:	6821      	ldrge	r1, [r4, #0]
 8007a38:	f021 0104 	bicge.w	r1, r1, #4
 8007a3c:	6021      	strge	r1, [r4, #0]
 8007a3e:	b90d      	cbnz	r5, 8007a44 <_printf_i+0x110>
 8007a40:	2e00      	cmp	r6, #0
 8007a42:	d04b      	beq.n	8007adc <_printf_i+0x1a8>
 8007a44:	4616      	mov	r6, r2
 8007a46:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a4a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a4e:	5dc7      	ldrb	r7, [r0, r7]
 8007a50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a54:	462f      	mov	r7, r5
 8007a56:	42bb      	cmp	r3, r7
 8007a58:	460d      	mov	r5, r1
 8007a5a:	d9f4      	bls.n	8007a46 <_printf_i+0x112>
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d10b      	bne.n	8007a78 <_printf_i+0x144>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	07df      	lsls	r7, r3, #31
 8007a64:	d508      	bpl.n	8007a78 <_printf_i+0x144>
 8007a66:	6923      	ldr	r3, [r4, #16]
 8007a68:	6861      	ldr	r1, [r4, #4]
 8007a6a:	4299      	cmp	r1, r3
 8007a6c:	bfde      	ittt	le
 8007a6e:	2330      	movle	r3, #48	@ 0x30
 8007a70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a78:	1b92      	subs	r2, r2, r6
 8007a7a:	6122      	str	r2, [r4, #16]
 8007a7c:	f8cd a000 	str.w	sl, [sp]
 8007a80:	464b      	mov	r3, r9
 8007a82:	aa03      	add	r2, sp, #12
 8007a84:	4621      	mov	r1, r4
 8007a86:	4640      	mov	r0, r8
 8007a88:	f7ff fee6 	bl	8007858 <_printf_common>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d14a      	bne.n	8007b26 <_printf_i+0x1f2>
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	b004      	add	sp, #16
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	f043 0320 	orr.w	r3, r3, #32
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	4833      	ldr	r0, [pc, #204]	@ (8007b70 <_printf_i+0x23c>)
 8007aa4:	2778      	movs	r7, #120	@ 0x78
 8007aa6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	6831      	ldr	r1, [r6, #0]
 8007aae:	061f      	lsls	r7, r3, #24
 8007ab0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ab4:	d402      	bmi.n	8007abc <_printf_i+0x188>
 8007ab6:	065f      	lsls	r7, r3, #25
 8007ab8:	bf48      	it	mi
 8007aba:	b2ad      	uxthmi	r5, r5
 8007abc:	6031      	str	r1, [r6, #0]
 8007abe:	07d9      	lsls	r1, r3, #31
 8007ac0:	bf44      	itt	mi
 8007ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac6:	6023      	strmi	r3, [r4, #0]
 8007ac8:	b11d      	cbz	r5, 8007ad2 <_printf_i+0x19e>
 8007aca:	2310      	movs	r3, #16
 8007acc:	e7ac      	b.n	8007a28 <_printf_i+0xf4>
 8007ace:	4827      	ldr	r0, [pc, #156]	@ (8007b6c <_printf_i+0x238>)
 8007ad0:	e7e9      	b.n	8007aa6 <_printf_i+0x172>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	f023 0320 	bic.w	r3, r3, #32
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	e7f6      	b.n	8007aca <_printf_i+0x196>
 8007adc:	4616      	mov	r6, r2
 8007ade:	e7bd      	b.n	8007a5c <_printf_i+0x128>
 8007ae0:	6833      	ldr	r3, [r6, #0]
 8007ae2:	6825      	ldr	r5, [r4, #0]
 8007ae4:	6961      	ldr	r1, [r4, #20]
 8007ae6:	1d18      	adds	r0, r3, #4
 8007ae8:	6030      	str	r0, [r6, #0]
 8007aea:	062e      	lsls	r6, r5, #24
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	d501      	bpl.n	8007af4 <_printf_i+0x1c0>
 8007af0:	6019      	str	r1, [r3, #0]
 8007af2:	e002      	b.n	8007afa <_printf_i+0x1c6>
 8007af4:	0668      	lsls	r0, r5, #25
 8007af6:	d5fb      	bpl.n	8007af0 <_printf_i+0x1bc>
 8007af8:	8019      	strh	r1, [r3, #0]
 8007afa:	2300      	movs	r3, #0
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	4616      	mov	r6, r2
 8007b00:	e7bc      	b.n	8007a7c <_printf_i+0x148>
 8007b02:	6833      	ldr	r3, [r6, #0]
 8007b04:	1d1a      	adds	r2, r3, #4
 8007b06:	6032      	str	r2, [r6, #0]
 8007b08:	681e      	ldr	r6, [r3, #0]
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7f8 fb6e 	bl	80001f0 <memchr>
 8007b14:	b108      	cbz	r0, 8007b1a <_printf_i+0x1e6>
 8007b16:	1b80      	subs	r0, r0, r6
 8007b18:	6060      	str	r0, [r4, #4]
 8007b1a:	6863      	ldr	r3, [r4, #4]
 8007b1c:	6123      	str	r3, [r4, #16]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b24:	e7aa      	b.n	8007a7c <_printf_i+0x148>
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	4632      	mov	r2, r6
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	47d0      	blx	sl
 8007b30:	3001      	adds	r0, #1
 8007b32:	d0ad      	beq.n	8007a90 <_printf_i+0x15c>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	079b      	lsls	r3, r3, #30
 8007b38:	d413      	bmi.n	8007b62 <_printf_i+0x22e>
 8007b3a:	68e0      	ldr	r0, [r4, #12]
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	4298      	cmp	r0, r3
 8007b40:	bfb8      	it	lt
 8007b42:	4618      	movlt	r0, r3
 8007b44:	e7a6      	b.n	8007a94 <_printf_i+0x160>
 8007b46:	2301      	movs	r3, #1
 8007b48:	4632      	mov	r2, r6
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	47d0      	blx	sl
 8007b50:	3001      	adds	r0, #1
 8007b52:	d09d      	beq.n	8007a90 <_printf_i+0x15c>
 8007b54:	3501      	adds	r5, #1
 8007b56:	68e3      	ldr	r3, [r4, #12]
 8007b58:	9903      	ldr	r1, [sp, #12]
 8007b5a:	1a5b      	subs	r3, r3, r1
 8007b5c:	42ab      	cmp	r3, r5
 8007b5e:	dcf2      	bgt.n	8007b46 <_printf_i+0x212>
 8007b60:	e7eb      	b.n	8007b3a <_printf_i+0x206>
 8007b62:	2500      	movs	r5, #0
 8007b64:	f104 0619 	add.w	r6, r4, #25
 8007b68:	e7f5      	b.n	8007b56 <_printf_i+0x222>
 8007b6a:	bf00      	nop
 8007b6c:	0800b896 	.word	0x0800b896
 8007b70:	0800b8a7 	.word	0x0800b8a7

08007b74 <_scanf_float>:
 8007b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	4617      	mov	r7, r2
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	688b      	ldr	r3, [r1, #8]
 8007b80:	1e5a      	subs	r2, r3, #1
 8007b82:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b86:	bf81      	itttt	hi
 8007b88:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007b8c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007b90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007b94:	608b      	strhi	r3, [r1, #8]
 8007b96:	680b      	ldr	r3, [r1, #0]
 8007b98:	460a      	mov	r2, r1
 8007b9a:	f04f 0500 	mov.w	r5, #0
 8007b9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007ba2:	f842 3b1c 	str.w	r3, [r2], #28
 8007ba6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007baa:	4680      	mov	r8, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	bf98      	it	ls
 8007bb0:	f04f 0b00 	movls.w	fp, #0
 8007bb4:	9201      	str	r2, [sp, #4]
 8007bb6:	4616      	mov	r6, r2
 8007bb8:	46aa      	mov	sl, r5
 8007bba:	46a9      	mov	r9, r5
 8007bbc:	9502      	str	r5, [sp, #8]
 8007bbe:	68a2      	ldr	r2, [r4, #8]
 8007bc0:	b152      	cbz	r2, 8007bd8 <_scanf_float+0x64>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b4e      	cmp	r3, #78	@ 0x4e
 8007bc8:	d864      	bhi.n	8007c94 <_scanf_float+0x120>
 8007bca:	2b40      	cmp	r3, #64	@ 0x40
 8007bcc:	d83c      	bhi.n	8007c48 <_scanf_float+0xd4>
 8007bce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007bd2:	b2c8      	uxtb	r0, r1
 8007bd4:	280e      	cmp	r0, #14
 8007bd6:	d93a      	bls.n	8007c4e <_scanf_float+0xda>
 8007bd8:	f1b9 0f00 	cmp.w	r9, #0
 8007bdc:	d003      	beq.n	8007be6 <_scanf_float+0x72>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bea:	f1ba 0f01 	cmp.w	sl, #1
 8007bee:	f200 8117 	bhi.w	8007e20 <_scanf_float+0x2ac>
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	429e      	cmp	r6, r3
 8007bf6:	f200 8108 	bhi.w	8007e0a <_scanf_float+0x296>
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	b007      	add	sp, #28
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007c06:	2a0d      	cmp	r2, #13
 8007c08:	d8e6      	bhi.n	8007bd8 <_scanf_float+0x64>
 8007c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8007c10 <_scanf_float+0x9c>)
 8007c0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c10:	08007d57 	.word	0x08007d57
 8007c14:	08007bd9 	.word	0x08007bd9
 8007c18:	08007bd9 	.word	0x08007bd9
 8007c1c:	08007bd9 	.word	0x08007bd9
 8007c20:	08007db7 	.word	0x08007db7
 8007c24:	08007d8f 	.word	0x08007d8f
 8007c28:	08007bd9 	.word	0x08007bd9
 8007c2c:	08007bd9 	.word	0x08007bd9
 8007c30:	08007d65 	.word	0x08007d65
 8007c34:	08007bd9 	.word	0x08007bd9
 8007c38:	08007bd9 	.word	0x08007bd9
 8007c3c:	08007bd9 	.word	0x08007bd9
 8007c40:	08007bd9 	.word	0x08007bd9
 8007c44:	08007d1d 	.word	0x08007d1d
 8007c48:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007c4c:	e7db      	b.n	8007c06 <_scanf_float+0x92>
 8007c4e:	290e      	cmp	r1, #14
 8007c50:	d8c2      	bhi.n	8007bd8 <_scanf_float+0x64>
 8007c52:	a001      	add	r0, pc, #4	@ (adr r0, 8007c58 <_scanf_float+0xe4>)
 8007c54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c58:	08007d0d 	.word	0x08007d0d
 8007c5c:	08007bd9 	.word	0x08007bd9
 8007c60:	08007d0d 	.word	0x08007d0d
 8007c64:	08007da3 	.word	0x08007da3
 8007c68:	08007bd9 	.word	0x08007bd9
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007cf3 	.word	0x08007cf3
 8007c74:	08007cf3 	.word	0x08007cf3
 8007c78:	08007cf3 	.word	0x08007cf3
 8007c7c:	08007cf3 	.word	0x08007cf3
 8007c80:	08007cf3 	.word	0x08007cf3
 8007c84:	08007cf3 	.word	0x08007cf3
 8007c88:	08007cf3 	.word	0x08007cf3
 8007c8c:	08007cf3 	.word	0x08007cf3
 8007c90:	08007cf3 	.word	0x08007cf3
 8007c94:	2b6e      	cmp	r3, #110	@ 0x6e
 8007c96:	d809      	bhi.n	8007cac <_scanf_float+0x138>
 8007c98:	2b60      	cmp	r3, #96	@ 0x60
 8007c9a:	d8b2      	bhi.n	8007c02 <_scanf_float+0x8e>
 8007c9c:	2b54      	cmp	r3, #84	@ 0x54
 8007c9e:	d07b      	beq.n	8007d98 <_scanf_float+0x224>
 8007ca0:	2b59      	cmp	r3, #89	@ 0x59
 8007ca2:	d199      	bne.n	8007bd8 <_scanf_float+0x64>
 8007ca4:	2d07      	cmp	r5, #7
 8007ca6:	d197      	bne.n	8007bd8 <_scanf_float+0x64>
 8007ca8:	2508      	movs	r5, #8
 8007caa:	e02c      	b.n	8007d06 <_scanf_float+0x192>
 8007cac:	2b74      	cmp	r3, #116	@ 0x74
 8007cae:	d073      	beq.n	8007d98 <_scanf_float+0x224>
 8007cb0:	2b79      	cmp	r3, #121	@ 0x79
 8007cb2:	e7f6      	b.n	8007ca2 <_scanf_float+0x12e>
 8007cb4:	6821      	ldr	r1, [r4, #0]
 8007cb6:	05c8      	lsls	r0, r1, #23
 8007cb8:	d51b      	bpl.n	8007cf2 <_scanf_float+0x17e>
 8007cba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007cbe:	6021      	str	r1, [r4, #0]
 8007cc0:	f109 0901 	add.w	r9, r9, #1
 8007cc4:	f1bb 0f00 	cmp.w	fp, #0
 8007cc8:	d003      	beq.n	8007cd2 <_scanf_float+0x15e>
 8007cca:	3201      	adds	r2, #1
 8007ccc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cd0:	60a2      	str	r2, [r4, #8]
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	60a3      	str	r3, [r4, #8]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	607b      	str	r3, [r7, #4]
 8007ce6:	f340 8087 	ble.w	8007df8 <_scanf_float+0x284>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	3301      	adds	r3, #1
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	e765      	b.n	8007bbe <_scanf_float+0x4a>
 8007cf2:	eb1a 0105 	adds.w	r1, sl, r5
 8007cf6:	f47f af6f 	bne.w	8007bd8 <_scanf_float+0x64>
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007d00:	6022      	str	r2, [r4, #0]
 8007d02:	460d      	mov	r5, r1
 8007d04:	468a      	mov	sl, r1
 8007d06:	f806 3b01 	strb.w	r3, [r6], #1
 8007d0a:	e7e2      	b.n	8007cd2 <_scanf_float+0x15e>
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	0610      	lsls	r0, r2, #24
 8007d10:	f57f af62 	bpl.w	8007bd8 <_scanf_float+0x64>
 8007d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d18:	6022      	str	r2, [r4, #0]
 8007d1a:	e7f4      	b.n	8007d06 <_scanf_float+0x192>
 8007d1c:	f1ba 0f00 	cmp.w	sl, #0
 8007d20:	d10e      	bne.n	8007d40 <_scanf_float+0x1cc>
 8007d22:	f1b9 0f00 	cmp.w	r9, #0
 8007d26:	d10e      	bne.n	8007d46 <_scanf_float+0x1d2>
 8007d28:	6822      	ldr	r2, [r4, #0]
 8007d2a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d2e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d32:	d108      	bne.n	8007d46 <_scanf_float+0x1d2>
 8007d34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d38:	6022      	str	r2, [r4, #0]
 8007d3a:	f04f 0a01 	mov.w	sl, #1
 8007d3e:	e7e2      	b.n	8007d06 <_scanf_float+0x192>
 8007d40:	f1ba 0f02 	cmp.w	sl, #2
 8007d44:	d055      	beq.n	8007df2 <_scanf_float+0x27e>
 8007d46:	2d01      	cmp	r5, #1
 8007d48:	d002      	beq.n	8007d50 <_scanf_float+0x1dc>
 8007d4a:	2d04      	cmp	r5, #4
 8007d4c:	f47f af44 	bne.w	8007bd8 <_scanf_float+0x64>
 8007d50:	3501      	adds	r5, #1
 8007d52:	b2ed      	uxtb	r5, r5
 8007d54:	e7d7      	b.n	8007d06 <_scanf_float+0x192>
 8007d56:	f1ba 0f01 	cmp.w	sl, #1
 8007d5a:	f47f af3d 	bne.w	8007bd8 <_scanf_float+0x64>
 8007d5e:	f04f 0a02 	mov.w	sl, #2
 8007d62:	e7d0      	b.n	8007d06 <_scanf_float+0x192>
 8007d64:	b97d      	cbnz	r5, 8007d86 <_scanf_float+0x212>
 8007d66:	f1b9 0f00 	cmp.w	r9, #0
 8007d6a:	f47f af38 	bne.w	8007bde <_scanf_float+0x6a>
 8007d6e:	6822      	ldr	r2, [r4, #0]
 8007d70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d78:	f040 8108 	bne.w	8007f8c <_scanf_float+0x418>
 8007d7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d80:	6022      	str	r2, [r4, #0]
 8007d82:	2501      	movs	r5, #1
 8007d84:	e7bf      	b.n	8007d06 <_scanf_float+0x192>
 8007d86:	2d03      	cmp	r5, #3
 8007d88:	d0e2      	beq.n	8007d50 <_scanf_float+0x1dc>
 8007d8a:	2d05      	cmp	r5, #5
 8007d8c:	e7de      	b.n	8007d4c <_scanf_float+0x1d8>
 8007d8e:	2d02      	cmp	r5, #2
 8007d90:	f47f af22 	bne.w	8007bd8 <_scanf_float+0x64>
 8007d94:	2503      	movs	r5, #3
 8007d96:	e7b6      	b.n	8007d06 <_scanf_float+0x192>
 8007d98:	2d06      	cmp	r5, #6
 8007d9a:	f47f af1d 	bne.w	8007bd8 <_scanf_float+0x64>
 8007d9e:	2507      	movs	r5, #7
 8007da0:	e7b1      	b.n	8007d06 <_scanf_float+0x192>
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	0591      	lsls	r1, r2, #22
 8007da6:	f57f af17 	bpl.w	8007bd8 <_scanf_float+0x64>
 8007daa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007dae:	6022      	str	r2, [r4, #0]
 8007db0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007db4:	e7a7      	b.n	8007d06 <_scanf_float+0x192>
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007dbc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007dc0:	d006      	beq.n	8007dd0 <_scanf_float+0x25c>
 8007dc2:	0550      	lsls	r0, r2, #21
 8007dc4:	f57f af08 	bpl.w	8007bd8 <_scanf_float+0x64>
 8007dc8:	f1b9 0f00 	cmp.w	r9, #0
 8007dcc:	f000 80de 	beq.w	8007f8c <_scanf_float+0x418>
 8007dd0:	0591      	lsls	r1, r2, #22
 8007dd2:	bf58      	it	pl
 8007dd4:	9902      	ldrpl	r1, [sp, #8]
 8007dd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007dda:	bf58      	it	pl
 8007ddc:	eba9 0101 	subpl.w	r1, r9, r1
 8007de0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007de4:	bf58      	it	pl
 8007de6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007dea:	6022      	str	r2, [r4, #0]
 8007dec:	f04f 0900 	mov.w	r9, #0
 8007df0:	e789      	b.n	8007d06 <_scanf_float+0x192>
 8007df2:	f04f 0a03 	mov.w	sl, #3
 8007df6:	e786      	b.n	8007d06 <_scanf_float+0x192>
 8007df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4640      	mov	r0, r8
 8007e00:	4798      	blx	r3
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f43f aedb 	beq.w	8007bbe <_scanf_float+0x4a>
 8007e08:	e6e6      	b.n	8007bd8 <_scanf_float+0x64>
 8007e0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e12:	463a      	mov	r2, r7
 8007e14:	4640      	mov	r0, r8
 8007e16:	4798      	blx	r3
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	e6e8      	b.n	8007bf2 <_scanf_float+0x7e>
 8007e20:	1e6b      	subs	r3, r5, #1
 8007e22:	2b06      	cmp	r3, #6
 8007e24:	d824      	bhi.n	8007e70 <_scanf_float+0x2fc>
 8007e26:	2d02      	cmp	r5, #2
 8007e28:	d836      	bhi.n	8007e98 <_scanf_float+0x324>
 8007e2a:	9b01      	ldr	r3, [sp, #4]
 8007e2c:	429e      	cmp	r6, r3
 8007e2e:	f67f aee4 	bls.w	8007bfa <_scanf_float+0x86>
 8007e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	4798      	blx	r3
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	6123      	str	r3, [r4, #16]
 8007e46:	e7f0      	b.n	8007e2a <_scanf_float+0x2b6>
 8007e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e4c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007e50:	463a      	mov	r2, r7
 8007e52:	4640      	mov	r0, r8
 8007e54:	4798      	blx	r3
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e60:	fa5f fa8a 	uxtb.w	sl, sl
 8007e64:	f1ba 0f02 	cmp.w	sl, #2
 8007e68:	d1ee      	bne.n	8007e48 <_scanf_float+0x2d4>
 8007e6a:	3d03      	subs	r5, #3
 8007e6c:	b2ed      	uxtb	r5, r5
 8007e6e:	1b76      	subs	r6, r6, r5
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	05da      	lsls	r2, r3, #23
 8007e74:	d530      	bpl.n	8007ed8 <_scanf_float+0x364>
 8007e76:	055b      	lsls	r3, r3, #21
 8007e78:	d511      	bpl.n	8007e9e <_scanf_float+0x32a>
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	429e      	cmp	r6, r3
 8007e7e:	f67f aebc 	bls.w	8007bfa <_scanf_float+0x86>
 8007e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e8a:	463a      	mov	r2, r7
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4798      	blx	r3
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	e7f0      	b.n	8007e7a <_scanf_float+0x306>
 8007e98:	46aa      	mov	sl, r5
 8007e9a:	46b3      	mov	fp, r6
 8007e9c:	e7de      	b.n	8007e5c <_scanf_float+0x2e8>
 8007e9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ea2:	6923      	ldr	r3, [r4, #16]
 8007ea4:	2965      	cmp	r1, #101	@ 0x65
 8007ea6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007eaa:	f106 35ff 	add.w	r5, r6, #4294967295
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	d00c      	beq.n	8007ecc <_scanf_float+0x358>
 8007eb2:	2945      	cmp	r1, #69	@ 0x45
 8007eb4:	d00a      	beq.n	8007ecc <_scanf_float+0x358>
 8007eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007eba:	463a      	mov	r2, r7
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4798      	blx	r3
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	1eb5      	subs	r5, r6, #2
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4798      	blx	r3
 8007ed6:	462e      	mov	r6, r5
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	f012 0210 	ands.w	r2, r2, #16
 8007ede:	d001      	beq.n	8007ee4 <_scanf_float+0x370>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e68b      	b.n	8007bfc <_scanf_float+0x88>
 8007ee4:	7032      	strb	r2, [r6, #0]
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ef0:	d11c      	bne.n	8007f2c <_scanf_float+0x3b8>
 8007ef2:	9b02      	ldr	r3, [sp, #8]
 8007ef4:	454b      	cmp	r3, r9
 8007ef6:	eba3 0209 	sub.w	r2, r3, r9
 8007efa:	d123      	bne.n	8007f44 <_scanf_float+0x3d0>
 8007efc:	9901      	ldr	r1, [sp, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	4640      	mov	r0, r8
 8007f02:	f002 fb55 	bl	800a5b0 <_strtod_r>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	6821      	ldr	r1, [r4, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f011 0f02 	tst.w	r1, #2
 8007f10:	ec57 6b10 	vmov	r6, r7, d0
 8007f14:	f103 0204 	add.w	r2, r3, #4
 8007f18:	d01f      	beq.n	8007f5a <_scanf_float+0x3e6>
 8007f1a:	9903      	ldr	r1, [sp, #12]
 8007f1c:	600a      	str	r2, [r1, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	e9c3 6700 	strd	r6, r7, [r3]
 8007f24:	68e3      	ldr	r3, [r4, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60e3      	str	r3, [r4, #12]
 8007f2a:	e7d9      	b.n	8007ee0 <_scanf_float+0x36c>
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0e4      	beq.n	8007efc <_scanf_float+0x388>
 8007f32:	9905      	ldr	r1, [sp, #20]
 8007f34:	230a      	movs	r3, #10
 8007f36:	3101      	adds	r1, #1
 8007f38:	4640      	mov	r0, r8
 8007f3a:	f002 fbb9 	bl	800a6b0 <_strtol_r>
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	9e05      	ldr	r6, [sp, #20]
 8007f42:	1ac2      	subs	r2, r0, r3
 8007f44:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007f48:	429e      	cmp	r6, r3
 8007f4a:	bf28      	it	cs
 8007f4c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007f50:	4910      	ldr	r1, [pc, #64]	@ (8007f94 <_scanf_float+0x420>)
 8007f52:	4630      	mov	r0, r6
 8007f54:	f000 f8e4 	bl	8008120 <siprintf>
 8007f58:	e7d0      	b.n	8007efc <_scanf_float+0x388>
 8007f5a:	f011 0f04 	tst.w	r1, #4
 8007f5e:	9903      	ldr	r1, [sp, #12]
 8007f60:	600a      	str	r2, [r1, #0]
 8007f62:	d1dc      	bne.n	8007f1e <_scanf_float+0x3aa>
 8007f64:	681d      	ldr	r5, [r3, #0]
 8007f66:	4632      	mov	r2, r6
 8007f68:	463b      	mov	r3, r7
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fded 	bl	8000b4c <__aeabi_dcmpun>
 8007f72:	b128      	cbz	r0, 8007f80 <_scanf_float+0x40c>
 8007f74:	4808      	ldr	r0, [pc, #32]	@ (8007f98 <_scanf_float+0x424>)
 8007f76:	f000 f9c7 	bl	8008308 <nanf>
 8007f7a:	ed85 0a00 	vstr	s0, [r5]
 8007f7e:	e7d1      	b.n	8007f24 <_scanf_float+0x3b0>
 8007f80:	4630      	mov	r0, r6
 8007f82:	4639      	mov	r1, r7
 8007f84:	f7f8 fe40 	bl	8000c08 <__aeabi_d2f>
 8007f88:	6028      	str	r0, [r5, #0]
 8007f8a:	e7cb      	b.n	8007f24 <_scanf_float+0x3b0>
 8007f8c:	f04f 0900 	mov.w	r9, #0
 8007f90:	e629      	b.n	8007be6 <_scanf_float+0x72>
 8007f92:	bf00      	nop
 8007f94:	0800b8b8 	.word	0x0800b8b8
 8007f98:	0800bc4d 	.word	0x0800bc4d

08007f9c <std>:
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007faa:	6083      	str	r3, [r0, #8]
 8007fac:	8181      	strh	r1, [r0, #12]
 8007fae:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fb0:	81c2      	strh	r2, [r0, #14]
 8007fb2:	6183      	str	r3, [r0, #24]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	305c      	adds	r0, #92	@ 0x5c
 8007fba:	f000 f914 	bl	80081e6 <memset>
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <std+0x58>)
 8007fc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <std+0x5c>)
 8007fc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x60>)
 8007fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <std+0x64>)
 8007fcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <std+0x68>)
 8007fd0:	6224      	str	r4, [r4, #32]
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d006      	beq.n	8007fe4 <std+0x48>
 8007fd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fda:	4294      	cmp	r4, r2
 8007fdc:	d002      	beq.n	8007fe4 <std+0x48>
 8007fde:	33d0      	adds	r3, #208	@ 0xd0
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	d105      	bne.n	8007ff0 <std+0x54>
 8007fe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fec:	f000 b988 	b.w	8008300 <__retarget_lock_init_recursive>
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	bf00      	nop
 8007ff4:	08008161 	.word	0x08008161
 8007ff8:	08008183 	.word	0x08008183
 8007ffc:	080081bb 	.word	0x080081bb
 8008000:	080081df 	.word	0x080081df
 8008004:	2000044c 	.word	0x2000044c

08008008 <stdio_exit_handler>:
 8008008:	4a02      	ldr	r2, [pc, #8]	@ (8008014 <stdio_exit_handler+0xc>)
 800800a:	4903      	ldr	r1, [pc, #12]	@ (8008018 <stdio_exit_handler+0x10>)
 800800c:	4803      	ldr	r0, [pc, #12]	@ (800801c <stdio_exit_handler+0x14>)
 800800e:	f000 b869 	b.w	80080e4 <_fwalk_sglue>
 8008012:	bf00      	nop
 8008014:	2000001c 	.word	0x2000001c
 8008018:	0800aa6d 	.word	0x0800aa6d
 800801c:	2000002c 	.word	0x2000002c

08008020 <cleanup_stdio>:
 8008020:	6841      	ldr	r1, [r0, #4]
 8008022:	4b0c      	ldr	r3, [pc, #48]	@ (8008054 <cleanup_stdio+0x34>)
 8008024:	4299      	cmp	r1, r3
 8008026:	b510      	push	{r4, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	d001      	beq.n	8008030 <cleanup_stdio+0x10>
 800802c:	f002 fd1e 	bl	800aa6c <_fflush_r>
 8008030:	68a1      	ldr	r1, [r4, #8]
 8008032:	4b09      	ldr	r3, [pc, #36]	@ (8008058 <cleanup_stdio+0x38>)
 8008034:	4299      	cmp	r1, r3
 8008036:	d002      	beq.n	800803e <cleanup_stdio+0x1e>
 8008038:	4620      	mov	r0, r4
 800803a:	f002 fd17 	bl	800aa6c <_fflush_r>
 800803e:	68e1      	ldr	r1, [r4, #12]
 8008040:	4b06      	ldr	r3, [pc, #24]	@ (800805c <cleanup_stdio+0x3c>)
 8008042:	4299      	cmp	r1, r3
 8008044:	d004      	beq.n	8008050 <cleanup_stdio+0x30>
 8008046:	4620      	mov	r0, r4
 8008048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804c:	f002 bd0e 	b.w	800aa6c <_fflush_r>
 8008050:	bd10      	pop	{r4, pc}
 8008052:	bf00      	nop
 8008054:	2000044c 	.word	0x2000044c
 8008058:	200004b4 	.word	0x200004b4
 800805c:	2000051c 	.word	0x2000051c

08008060 <global_stdio_init.part.0>:
 8008060:	b510      	push	{r4, lr}
 8008062:	4b0b      	ldr	r3, [pc, #44]	@ (8008090 <global_stdio_init.part.0+0x30>)
 8008064:	4c0b      	ldr	r4, [pc, #44]	@ (8008094 <global_stdio_init.part.0+0x34>)
 8008066:	4a0c      	ldr	r2, [pc, #48]	@ (8008098 <global_stdio_init.part.0+0x38>)
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	4620      	mov	r0, r4
 800806c:	2200      	movs	r2, #0
 800806e:	2104      	movs	r1, #4
 8008070:	f7ff ff94 	bl	8007f9c <std>
 8008074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008078:	2201      	movs	r2, #1
 800807a:	2109      	movs	r1, #9
 800807c:	f7ff ff8e 	bl	8007f9c <std>
 8008080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008084:	2202      	movs	r2, #2
 8008086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800808a:	2112      	movs	r1, #18
 800808c:	f7ff bf86 	b.w	8007f9c <std>
 8008090:	20000584 	.word	0x20000584
 8008094:	2000044c 	.word	0x2000044c
 8008098:	08008009 	.word	0x08008009

0800809c <__sfp_lock_acquire>:
 800809c:	4801      	ldr	r0, [pc, #4]	@ (80080a4 <__sfp_lock_acquire+0x8>)
 800809e:	f000 b930 	b.w	8008302 <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	2000058d 	.word	0x2000058d

080080a8 <__sfp_lock_release>:
 80080a8:	4801      	ldr	r0, [pc, #4]	@ (80080b0 <__sfp_lock_release+0x8>)
 80080aa:	f000 b92b 	b.w	8008304 <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	2000058d 	.word	0x2000058d

080080b4 <__sinit>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	4604      	mov	r4, r0
 80080b8:	f7ff fff0 	bl	800809c <__sfp_lock_acquire>
 80080bc:	6a23      	ldr	r3, [r4, #32]
 80080be:	b11b      	cbz	r3, 80080c8 <__sinit+0x14>
 80080c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c4:	f7ff bff0 	b.w	80080a8 <__sfp_lock_release>
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <__sinit+0x28>)
 80080ca:	6223      	str	r3, [r4, #32]
 80080cc:	4b04      	ldr	r3, [pc, #16]	@ (80080e0 <__sinit+0x2c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f5      	bne.n	80080c0 <__sinit+0xc>
 80080d4:	f7ff ffc4 	bl	8008060 <global_stdio_init.part.0>
 80080d8:	e7f2      	b.n	80080c0 <__sinit+0xc>
 80080da:	bf00      	nop
 80080dc:	08008021 	.word	0x08008021
 80080e0:	20000584 	.word	0x20000584

080080e4 <_fwalk_sglue>:
 80080e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e8:	4607      	mov	r7, r0
 80080ea:	4688      	mov	r8, r1
 80080ec:	4614      	mov	r4, r2
 80080ee:	2600      	movs	r6, #0
 80080f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080f4:	f1b9 0901 	subs.w	r9, r9, #1
 80080f8:	d505      	bpl.n	8008106 <_fwalk_sglue+0x22>
 80080fa:	6824      	ldr	r4, [r4, #0]
 80080fc:	2c00      	cmp	r4, #0
 80080fe:	d1f7      	bne.n	80080f0 <_fwalk_sglue+0xc>
 8008100:	4630      	mov	r0, r6
 8008102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008106:	89ab      	ldrh	r3, [r5, #12]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d907      	bls.n	800811c <_fwalk_sglue+0x38>
 800810c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008110:	3301      	adds	r3, #1
 8008112:	d003      	beq.n	800811c <_fwalk_sglue+0x38>
 8008114:	4629      	mov	r1, r5
 8008116:	4638      	mov	r0, r7
 8008118:	47c0      	blx	r8
 800811a:	4306      	orrs	r6, r0
 800811c:	3568      	adds	r5, #104	@ 0x68
 800811e:	e7e9      	b.n	80080f4 <_fwalk_sglue+0x10>

08008120 <siprintf>:
 8008120:	b40e      	push	{r1, r2, r3}
 8008122:	b500      	push	{lr}
 8008124:	b09c      	sub	sp, #112	@ 0x70
 8008126:	ab1d      	add	r3, sp, #116	@ 0x74
 8008128:	9002      	str	r0, [sp, #8]
 800812a:	9006      	str	r0, [sp, #24]
 800812c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008130:	4809      	ldr	r0, [pc, #36]	@ (8008158 <siprintf+0x38>)
 8008132:	9107      	str	r1, [sp, #28]
 8008134:	9104      	str	r1, [sp, #16]
 8008136:	4909      	ldr	r1, [pc, #36]	@ (800815c <siprintf+0x3c>)
 8008138:	f853 2b04 	ldr.w	r2, [r3], #4
 800813c:	9105      	str	r1, [sp, #20]
 800813e:	6800      	ldr	r0, [r0, #0]
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	a902      	add	r1, sp, #8
 8008144:	f002 fb12 	bl	800a76c <_svfiprintf_r>
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	b01c      	add	sp, #112	@ 0x70
 8008150:	f85d eb04 	ldr.w	lr, [sp], #4
 8008154:	b003      	add	sp, #12
 8008156:	4770      	bx	lr
 8008158:	20000028 	.word	0x20000028
 800815c:	ffff0208 	.word	0xffff0208

08008160 <__sread>:
 8008160:	b510      	push	{r4, lr}
 8008162:	460c      	mov	r4, r1
 8008164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008168:	f000 f86c 	bl	8008244 <_read_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	bfab      	itete	ge
 8008170:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008172:	89a3      	ldrhlt	r3, [r4, #12]
 8008174:	181b      	addge	r3, r3, r0
 8008176:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800817a:	bfac      	ite	ge
 800817c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800817e:	81a3      	strhlt	r3, [r4, #12]
 8008180:	bd10      	pop	{r4, pc}

08008182 <__swrite>:
 8008182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008186:	461f      	mov	r7, r3
 8008188:	898b      	ldrh	r3, [r1, #12]
 800818a:	05db      	lsls	r3, r3, #23
 800818c:	4605      	mov	r5, r0
 800818e:	460c      	mov	r4, r1
 8008190:	4616      	mov	r6, r2
 8008192:	d505      	bpl.n	80081a0 <__swrite+0x1e>
 8008194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008198:	2302      	movs	r3, #2
 800819a:	2200      	movs	r2, #0
 800819c:	f000 f840 	bl	8008220 <_lseek_r>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	4632      	mov	r2, r6
 80081ae:	463b      	mov	r3, r7
 80081b0:	4628      	mov	r0, r5
 80081b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	f000 b867 	b.w	8008288 <_write_r>

080081ba <__sseek>:
 80081ba:	b510      	push	{r4, lr}
 80081bc:	460c      	mov	r4, r1
 80081be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c2:	f000 f82d 	bl	8008220 <_lseek_r>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	bf15      	itete	ne
 80081cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081d6:	81a3      	strheq	r3, [r4, #12]
 80081d8:	bf18      	it	ne
 80081da:	81a3      	strhne	r3, [r4, #12]
 80081dc:	bd10      	pop	{r4, pc}

080081de <__sclose>:
 80081de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e2:	f000 b80d 	b.w	8008200 <_close_r>

080081e6 <memset>:
 80081e6:	4402      	add	r2, r0
 80081e8:	4603      	mov	r3, r0
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d100      	bne.n	80081f0 <memset+0xa>
 80081ee:	4770      	bx	lr
 80081f0:	f803 1b01 	strb.w	r1, [r3], #1
 80081f4:	e7f9      	b.n	80081ea <memset+0x4>
	...

080081f8 <_localeconv_r>:
 80081f8:	4800      	ldr	r0, [pc, #0]	@ (80081fc <_localeconv_r+0x4>)
 80081fa:	4770      	bx	lr
 80081fc:	20000168 	.word	0x20000168

08008200 <_close_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	@ (800821c <_close_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7f9 ff80 	bl	8002110 <_close>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_close_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_close_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000588 	.word	0x20000588

08008220 <_lseek_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	@ (8008240 <_lseek_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f7f9 ff95 	bl	800215e <_lseek>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_lseek_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_lseek_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	20000588 	.word	0x20000588

08008244 <_read_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	@ (8008264 <_read_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7f9 ff23 	bl	800209e <_read>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_read_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_read_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000588 	.word	0x20000588

08008268 <_sbrk_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d06      	ldr	r5, [pc, #24]	@ (8008284 <_sbrk_r+0x1c>)
 800826c:	2300      	movs	r3, #0
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7f9 ff80 	bl	8002178 <_sbrk>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_sbrk_r+0x1a>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_sbrk_r+0x1a>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	20000588 	.word	0x20000588

08008288 <_write_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d07      	ldr	r5, [pc, #28]	@ (80082a8 <_write_r+0x20>)
 800828c:	4604      	mov	r4, r0
 800828e:	4608      	mov	r0, r1
 8008290:	4611      	mov	r1, r2
 8008292:	2200      	movs	r2, #0
 8008294:	602a      	str	r2, [r5, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	f7f9 ff1e 	bl	80020d8 <_write>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d102      	bne.n	80082a6 <_write_r+0x1e>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	b103      	cbz	r3, 80082a6 <_write_r+0x1e>
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	20000588 	.word	0x20000588

080082ac <__errno>:
 80082ac:	4b01      	ldr	r3, [pc, #4]	@ (80082b4 <__errno+0x8>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20000028 	.word	0x20000028

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4d0d      	ldr	r5, [pc, #52]	@ (80082f0 <__libc_init_array+0x38>)
 80082bc:	4c0d      	ldr	r4, [pc, #52]	@ (80082f4 <__libc_init_array+0x3c>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	2600      	movs	r6, #0
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	4d0b      	ldr	r5, [pc, #44]	@ (80082f8 <__libc_init_array+0x40>)
 80082ca:	4c0c      	ldr	r4, [pc, #48]	@ (80082fc <__libc_init_array+0x44>)
 80082cc:	f003 fa9a 	bl	800b804 <_init>
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	2600      	movs	r6, #0
 80082d6:	42a6      	cmp	r6, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e0:	4798      	blx	r3
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ea:	4798      	blx	r3
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	0800bcb8 	.word	0x0800bcb8
 80082f4:	0800bcb8 	.word	0x0800bcb8
 80082f8:	0800bcb8 	.word	0x0800bcb8
 80082fc:	0800bcbc 	.word	0x0800bcbc

08008300 <__retarget_lock_init_recursive>:
 8008300:	4770      	bx	lr

08008302 <__retarget_lock_acquire_recursive>:
 8008302:	4770      	bx	lr

08008304 <__retarget_lock_release_recursive>:
 8008304:	4770      	bx	lr
	...

08008308 <nanf>:
 8008308:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008310 <nanf+0x8>
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	7fc00000 	.word	0x7fc00000

08008314 <quorem>:
 8008314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	6903      	ldr	r3, [r0, #16]
 800831a:	690c      	ldr	r4, [r1, #16]
 800831c:	42a3      	cmp	r3, r4
 800831e:	4607      	mov	r7, r0
 8008320:	db7e      	blt.n	8008420 <quorem+0x10c>
 8008322:	3c01      	subs	r4, #1
 8008324:	f101 0814 	add.w	r8, r1, #20
 8008328:	00a3      	lsls	r3, r4, #2
 800832a:	f100 0514 	add.w	r5, r0, #20
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800833a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800833e:	3301      	adds	r3, #1
 8008340:	429a      	cmp	r2, r3
 8008342:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008346:	fbb2 f6f3 	udiv	r6, r2, r3
 800834a:	d32e      	bcc.n	80083aa <quorem+0x96>
 800834c:	f04f 0a00 	mov.w	sl, #0
 8008350:	46c4      	mov	ip, r8
 8008352:	46ae      	mov	lr, r5
 8008354:	46d3      	mov	fp, sl
 8008356:	f85c 3b04 	ldr.w	r3, [ip], #4
 800835a:	b298      	uxth	r0, r3
 800835c:	fb06 a000 	mla	r0, r6, r0, sl
 8008360:	0c02      	lsrs	r2, r0, #16
 8008362:	0c1b      	lsrs	r3, r3, #16
 8008364:	fb06 2303 	mla	r3, r6, r3, r2
 8008368:	f8de 2000 	ldr.w	r2, [lr]
 800836c:	b280      	uxth	r0, r0
 800836e:	b292      	uxth	r2, r2
 8008370:	1a12      	subs	r2, r2, r0
 8008372:	445a      	add	r2, fp
 8008374:	f8de 0000 	ldr.w	r0, [lr]
 8008378:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800837c:	b29b      	uxth	r3, r3
 800837e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008382:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008386:	b292      	uxth	r2, r2
 8008388:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800838c:	45e1      	cmp	r9, ip
 800838e:	f84e 2b04 	str.w	r2, [lr], #4
 8008392:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008396:	d2de      	bcs.n	8008356 <quorem+0x42>
 8008398:	9b00      	ldr	r3, [sp, #0]
 800839a:	58eb      	ldr	r3, [r5, r3]
 800839c:	b92b      	cbnz	r3, 80083aa <quorem+0x96>
 800839e:	9b01      	ldr	r3, [sp, #4]
 80083a0:	3b04      	subs	r3, #4
 80083a2:	429d      	cmp	r5, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	d32f      	bcc.n	8008408 <quorem+0xf4>
 80083a8:	613c      	str	r4, [r7, #16]
 80083aa:	4638      	mov	r0, r7
 80083ac:	f001 f90e 	bl	80095cc <__mcmp>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	db25      	blt.n	8008400 <quorem+0xec>
 80083b4:	4629      	mov	r1, r5
 80083b6:	2000      	movs	r0, #0
 80083b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80083bc:	f8d1 c000 	ldr.w	ip, [r1]
 80083c0:	fa1f fe82 	uxth.w	lr, r2
 80083c4:	fa1f f38c 	uxth.w	r3, ip
 80083c8:	eba3 030e 	sub.w	r3, r3, lr
 80083cc:	4403      	add	r3, r0
 80083ce:	0c12      	lsrs	r2, r2, #16
 80083d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083d8:	b29b      	uxth	r3, r3
 80083da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083de:	45c1      	cmp	r9, r8
 80083e0:	f841 3b04 	str.w	r3, [r1], #4
 80083e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083e8:	d2e6      	bcs.n	80083b8 <quorem+0xa4>
 80083ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083f2:	b922      	cbnz	r2, 80083fe <quorem+0xea>
 80083f4:	3b04      	subs	r3, #4
 80083f6:	429d      	cmp	r5, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	d30b      	bcc.n	8008414 <quorem+0x100>
 80083fc:	613c      	str	r4, [r7, #16]
 80083fe:	3601      	adds	r6, #1
 8008400:	4630      	mov	r0, r6
 8008402:	b003      	add	sp, #12
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	3b04      	subs	r3, #4
 800840c:	2a00      	cmp	r2, #0
 800840e:	d1cb      	bne.n	80083a8 <quorem+0x94>
 8008410:	3c01      	subs	r4, #1
 8008412:	e7c6      	b.n	80083a2 <quorem+0x8e>
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	3b04      	subs	r3, #4
 8008418:	2a00      	cmp	r2, #0
 800841a:	d1ef      	bne.n	80083fc <quorem+0xe8>
 800841c:	3c01      	subs	r4, #1
 800841e:	e7ea      	b.n	80083f6 <quorem+0xe2>
 8008420:	2000      	movs	r0, #0
 8008422:	e7ee      	b.n	8008402 <quorem+0xee>
 8008424:	0000      	movs	r0, r0
	...

08008428 <_dtoa_r>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	69c7      	ldr	r7, [r0, #28]
 800842e:	b099      	sub	sp, #100	@ 0x64
 8008430:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008434:	ec55 4b10 	vmov	r4, r5, d0
 8008438:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800843a:	9109      	str	r1, [sp, #36]	@ 0x24
 800843c:	4683      	mov	fp, r0
 800843e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008440:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008442:	b97f      	cbnz	r7, 8008464 <_dtoa_r+0x3c>
 8008444:	2010      	movs	r0, #16
 8008446:	f7fe fe87 	bl	8007158 <malloc>
 800844a:	4602      	mov	r2, r0
 800844c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008450:	b920      	cbnz	r0, 800845c <_dtoa_r+0x34>
 8008452:	4ba7      	ldr	r3, [pc, #668]	@ (80086f0 <_dtoa_r+0x2c8>)
 8008454:	21ef      	movs	r1, #239	@ 0xef
 8008456:	48a7      	ldr	r0, [pc, #668]	@ (80086f4 <_dtoa_r+0x2cc>)
 8008458:	f002 fb72 	bl	800ab40 <__assert_func>
 800845c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008460:	6007      	str	r7, [r0, #0]
 8008462:	60c7      	str	r7, [r0, #12]
 8008464:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008468:	6819      	ldr	r1, [r3, #0]
 800846a:	b159      	cbz	r1, 8008484 <_dtoa_r+0x5c>
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	604a      	str	r2, [r1, #4]
 8008470:	2301      	movs	r3, #1
 8008472:	4093      	lsls	r3, r2
 8008474:	608b      	str	r3, [r1, #8]
 8008476:	4658      	mov	r0, fp
 8008478:	f000 fe24 	bl	80090c4 <_Bfree>
 800847c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	1e2b      	subs	r3, r5, #0
 8008486:	bfb9      	ittee	lt
 8008488:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800848c:	9303      	strlt	r3, [sp, #12]
 800848e:	2300      	movge	r3, #0
 8008490:	6033      	strge	r3, [r6, #0]
 8008492:	9f03      	ldr	r7, [sp, #12]
 8008494:	4b98      	ldr	r3, [pc, #608]	@ (80086f8 <_dtoa_r+0x2d0>)
 8008496:	bfbc      	itt	lt
 8008498:	2201      	movlt	r2, #1
 800849a:	6032      	strlt	r2, [r6, #0]
 800849c:	43bb      	bics	r3, r7
 800849e:	d112      	bne.n	80084c6 <_dtoa_r+0x9e>
 80084a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084ac:	4323      	orrs	r3, r4
 80084ae:	f000 854d 	beq.w	8008f4c <_dtoa_r+0xb24>
 80084b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800870c <_dtoa_r+0x2e4>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 854f 	beq.w	8008f5c <_dtoa_r+0xb34>
 80084be:	f10a 0303 	add.w	r3, sl, #3
 80084c2:	f000 bd49 	b.w	8008f58 <_dtoa_r+0xb30>
 80084c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	ec51 0b17 	vmov	r0, r1, d7
 80084d0:	2300      	movs	r3, #0
 80084d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80084d6:	f7f8 fb07 	bl	8000ae8 <__aeabi_dcmpeq>
 80084da:	4680      	mov	r8, r0
 80084dc:	b158      	cbz	r0, 80084f6 <_dtoa_r+0xce>
 80084de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084e0:	2301      	movs	r3, #1
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084e6:	b113      	cbz	r3, 80084ee <_dtoa_r+0xc6>
 80084e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80084ea:	4b84      	ldr	r3, [pc, #528]	@ (80086fc <_dtoa_r+0x2d4>)
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008710 <_dtoa_r+0x2e8>
 80084f2:	f000 bd33 	b.w	8008f5c <_dtoa_r+0xb34>
 80084f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80084fa:	aa16      	add	r2, sp, #88	@ 0x58
 80084fc:	a917      	add	r1, sp, #92	@ 0x5c
 80084fe:	4658      	mov	r0, fp
 8008500:	f001 f984 	bl	800980c <__d2b>
 8008504:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008508:	4681      	mov	r9, r0
 800850a:	2e00      	cmp	r6, #0
 800850c:	d077      	beq.n	80085fe <_dtoa_r+0x1d6>
 800850e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008510:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800851c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008520:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008524:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008528:	4619      	mov	r1, r3
 800852a:	2200      	movs	r2, #0
 800852c:	4b74      	ldr	r3, [pc, #464]	@ (8008700 <_dtoa_r+0x2d8>)
 800852e:	f7f7 febb 	bl	80002a8 <__aeabi_dsub>
 8008532:	a369      	add	r3, pc, #420	@ (adr r3, 80086d8 <_dtoa_r+0x2b0>)
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f7f8 f86e 	bl	8000618 <__aeabi_dmul>
 800853c:	a368      	add	r3, pc, #416	@ (adr r3, 80086e0 <_dtoa_r+0x2b8>)
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f7f7 feb3 	bl	80002ac <__adddf3>
 8008546:	4604      	mov	r4, r0
 8008548:	4630      	mov	r0, r6
 800854a:	460d      	mov	r5, r1
 800854c:	f7f7 fffa 	bl	8000544 <__aeabi_i2d>
 8008550:	a365      	add	r3, pc, #404	@ (adr r3, 80086e8 <_dtoa_r+0x2c0>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f7f8 f85f 	bl	8000618 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f7 fea3 	bl	80002ac <__adddf3>
 8008566:	4604      	mov	r4, r0
 8008568:	460d      	mov	r5, r1
 800856a:	f7f8 fb05 	bl	8000b78 <__aeabi_d2iz>
 800856e:	2200      	movs	r2, #0
 8008570:	4607      	mov	r7, r0
 8008572:	2300      	movs	r3, #0
 8008574:	4620      	mov	r0, r4
 8008576:	4629      	mov	r1, r5
 8008578:	f7f8 fac0 	bl	8000afc <__aeabi_dcmplt>
 800857c:	b140      	cbz	r0, 8008590 <_dtoa_r+0x168>
 800857e:	4638      	mov	r0, r7
 8008580:	f7f7 ffe0 	bl	8000544 <__aeabi_i2d>
 8008584:	4622      	mov	r2, r4
 8008586:	462b      	mov	r3, r5
 8008588:	f7f8 faae 	bl	8000ae8 <__aeabi_dcmpeq>
 800858c:	b900      	cbnz	r0, 8008590 <_dtoa_r+0x168>
 800858e:	3f01      	subs	r7, #1
 8008590:	2f16      	cmp	r7, #22
 8008592:	d851      	bhi.n	8008638 <_dtoa_r+0x210>
 8008594:	4b5b      	ldr	r3, [pc, #364]	@ (8008704 <_dtoa_r+0x2dc>)
 8008596:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085a2:	f7f8 faab 	bl	8000afc <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d048      	beq.n	800863c <_dtoa_r+0x214>
 80085aa:	3f01      	subs	r7, #1
 80085ac:	2300      	movs	r3, #0
 80085ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80085b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085b2:	1b9b      	subs	r3, r3, r6
 80085b4:	1e5a      	subs	r2, r3, #1
 80085b6:	bf44      	itt	mi
 80085b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80085bc:	2300      	movmi	r3, #0
 80085be:	9208      	str	r2, [sp, #32]
 80085c0:	bf54      	ite	pl
 80085c2:	f04f 0800 	movpl.w	r8, #0
 80085c6:	9308      	strmi	r3, [sp, #32]
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	db39      	blt.n	8008640 <_dtoa_r+0x218>
 80085cc:	9b08      	ldr	r3, [sp, #32]
 80085ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80085d0:	443b      	add	r3, r7
 80085d2:	9308      	str	r3, [sp, #32]
 80085d4:	2300      	movs	r3, #0
 80085d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d864      	bhi.n	80086a8 <_dtoa_r+0x280>
 80085de:	2b05      	cmp	r3, #5
 80085e0:	bfc4      	itt	gt
 80085e2:	3b04      	subgt	r3, #4
 80085e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80085e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e8:	f1a3 0302 	sub.w	r3, r3, #2
 80085ec:	bfcc      	ite	gt
 80085ee:	2400      	movgt	r4, #0
 80085f0:	2401      	movle	r4, #1
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d863      	bhi.n	80086be <_dtoa_r+0x296>
 80085f6:	e8df f003 	tbb	[pc, r3]
 80085fa:	372a      	.short	0x372a
 80085fc:	5535      	.short	0x5535
 80085fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008602:	441e      	add	r6, r3
 8008604:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008608:	2b20      	cmp	r3, #32
 800860a:	bfc1      	itttt	gt
 800860c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008610:	409f      	lslgt	r7, r3
 8008612:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008616:	fa24 f303 	lsrgt.w	r3, r4, r3
 800861a:	bfd6      	itet	le
 800861c:	f1c3 0320 	rsble	r3, r3, #32
 8008620:	ea47 0003 	orrgt.w	r0, r7, r3
 8008624:	fa04 f003 	lslle.w	r0, r4, r3
 8008628:	f7f7 ff7c 	bl	8000524 <__aeabi_ui2d>
 800862c:	2201      	movs	r2, #1
 800862e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008632:	3e01      	subs	r6, #1
 8008634:	9214      	str	r2, [sp, #80]	@ 0x50
 8008636:	e777      	b.n	8008528 <_dtoa_r+0x100>
 8008638:	2301      	movs	r3, #1
 800863a:	e7b8      	b.n	80085ae <_dtoa_r+0x186>
 800863c:	9012      	str	r0, [sp, #72]	@ 0x48
 800863e:	e7b7      	b.n	80085b0 <_dtoa_r+0x188>
 8008640:	427b      	negs	r3, r7
 8008642:	930a      	str	r3, [sp, #40]	@ 0x28
 8008644:	2300      	movs	r3, #0
 8008646:	eba8 0807 	sub.w	r8, r8, r7
 800864a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800864c:	e7c4      	b.n	80085d8 <_dtoa_r+0x1b0>
 800864e:	2300      	movs	r3, #0
 8008650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008654:	2b00      	cmp	r3, #0
 8008656:	dc35      	bgt.n	80086c4 <_dtoa_r+0x29c>
 8008658:	2301      	movs	r3, #1
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	9307      	str	r3, [sp, #28]
 800865e:	461a      	mov	r2, r3
 8008660:	920e      	str	r2, [sp, #56]	@ 0x38
 8008662:	e00b      	b.n	800867c <_dtoa_r+0x254>
 8008664:	2301      	movs	r3, #1
 8008666:	e7f3      	b.n	8008650 <_dtoa_r+0x228>
 8008668:	2300      	movs	r3, #0
 800866a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800866c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800866e:	18fb      	adds	r3, r7, r3
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	2b01      	cmp	r3, #1
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	bfb8      	it	lt
 800867a:	2301      	movlt	r3, #1
 800867c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008680:	2100      	movs	r1, #0
 8008682:	2204      	movs	r2, #4
 8008684:	f102 0514 	add.w	r5, r2, #20
 8008688:	429d      	cmp	r5, r3
 800868a:	d91f      	bls.n	80086cc <_dtoa_r+0x2a4>
 800868c:	6041      	str	r1, [r0, #4]
 800868e:	4658      	mov	r0, fp
 8008690:	f000 fcd8 	bl	8009044 <_Balloc>
 8008694:	4682      	mov	sl, r0
 8008696:	2800      	cmp	r0, #0
 8008698:	d13c      	bne.n	8008714 <_dtoa_r+0x2ec>
 800869a:	4b1b      	ldr	r3, [pc, #108]	@ (8008708 <_dtoa_r+0x2e0>)
 800869c:	4602      	mov	r2, r0
 800869e:	f240 11af 	movw	r1, #431	@ 0x1af
 80086a2:	e6d8      	b.n	8008456 <_dtoa_r+0x2e>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e7e0      	b.n	800866a <_dtoa_r+0x242>
 80086a8:	2401      	movs	r4, #1
 80086aa:	2300      	movs	r3, #0
 80086ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	9307      	str	r3, [sp, #28]
 80086b8:	2200      	movs	r2, #0
 80086ba:	2312      	movs	r3, #18
 80086bc:	e7d0      	b.n	8008660 <_dtoa_r+0x238>
 80086be:	2301      	movs	r3, #1
 80086c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086c2:	e7f5      	b.n	80086b0 <_dtoa_r+0x288>
 80086c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	9307      	str	r3, [sp, #28]
 80086ca:	e7d7      	b.n	800867c <_dtoa_r+0x254>
 80086cc:	3101      	adds	r1, #1
 80086ce:	0052      	lsls	r2, r2, #1
 80086d0:	e7d8      	b.n	8008684 <_dtoa_r+0x25c>
 80086d2:	bf00      	nop
 80086d4:	f3af 8000 	nop.w
 80086d8:	636f4361 	.word	0x636f4361
 80086dc:	3fd287a7 	.word	0x3fd287a7
 80086e0:	8b60c8b3 	.word	0x8b60c8b3
 80086e4:	3fc68a28 	.word	0x3fc68a28
 80086e8:	509f79fb 	.word	0x509f79fb
 80086ec:	3fd34413 	.word	0x3fd34413
 80086f0:	0800b8ca 	.word	0x0800b8ca
 80086f4:	0800b8e1 	.word	0x0800b8e1
 80086f8:	7ff00000 	.word	0x7ff00000
 80086fc:	0800b895 	.word	0x0800b895
 8008700:	3ff80000 	.word	0x3ff80000
 8008704:	0800b9d8 	.word	0x0800b9d8
 8008708:	0800b939 	.word	0x0800b939
 800870c:	0800b8c6 	.word	0x0800b8c6
 8008710:	0800b894 	.word	0x0800b894
 8008714:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008718:	6018      	str	r0, [r3, #0]
 800871a:	9b07      	ldr	r3, [sp, #28]
 800871c:	2b0e      	cmp	r3, #14
 800871e:	f200 80a4 	bhi.w	800886a <_dtoa_r+0x442>
 8008722:	2c00      	cmp	r4, #0
 8008724:	f000 80a1 	beq.w	800886a <_dtoa_r+0x442>
 8008728:	2f00      	cmp	r7, #0
 800872a:	dd33      	ble.n	8008794 <_dtoa_r+0x36c>
 800872c:	4bad      	ldr	r3, [pc, #692]	@ (80089e4 <_dtoa_r+0x5bc>)
 800872e:	f007 020f 	and.w	r2, r7, #15
 8008732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008736:	ed93 7b00 	vldr	d7, [r3]
 800873a:	05f8      	lsls	r0, r7, #23
 800873c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008744:	d516      	bpl.n	8008774 <_dtoa_r+0x34c>
 8008746:	4ba8      	ldr	r3, [pc, #672]	@ (80089e8 <_dtoa_r+0x5c0>)
 8008748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800874c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008750:	f7f8 f88c 	bl	800086c <__aeabi_ddiv>
 8008754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008758:	f004 040f 	and.w	r4, r4, #15
 800875c:	2603      	movs	r6, #3
 800875e:	4da2      	ldr	r5, [pc, #648]	@ (80089e8 <_dtoa_r+0x5c0>)
 8008760:	b954      	cbnz	r4, 8008778 <_dtoa_r+0x350>
 8008762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876a:	f7f8 f87f 	bl	800086c <__aeabi_ddiv>
 800876e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008772:	e028      	b.n	80087c6 <_dtoa_r+0x39e>
 8008774:	2602      	movs	r6, #2
 8008776:	e7f2      	b.n	800875e <_dtoa_r+0x336>
 8008778:	07e1      	lsls	r1, r4, #31
 800877a:	d508      	bpl.n	800878e <_dtoa_r+0x366>
 800877c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008784:	f7f7 ff48 	bl	8000618 <__aeabi_dmul>
 8008788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800878c:	3601      	adds	r6, #1
 800878e:	1064      	asrs	r4, r4, #1
 8008790:	3508      	adds	r5, #8
 8008792:	e7e5      	b.n	8008760 <_dtoa_r+0x338>
 8008794:	f000 80d2 	beq.w	800893c <_dtoa_r+0x514>
 8008798:	427c      	negs	r4, r7
 800879a:	4b92      	ldr	r3, [pc, #584]	@ (80089e4 <_dtoa_r+0x5bc>)
 800879c:	4d92      	ldr	r5, [pc, #584]	@ (80089e8 <_dtoa_r+0x5c0>)
 800879e:	f004 020f 	and.w	r2, r4, #15
 80087a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087ae:	f7f7 ff33 	bl	8000618 <__aeabi_dmul>
 80087b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087b6:	1124      	asrs	r4, r4, #4
 80087b8:	2300      	movs	r3, #0
 80087ba:	2602      	movs	r6, #2
 80087bc:	2c00      	cmp	r4, #0
 80087be:	f040 80b2 	bne.w	8008926 <_dtoa_r+0x4fe>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1d3      	bne.n	800876e <_dtoa_r+0x346>
 80087c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80b7 	beq.w	8008940 <_dtoa_r+0x518>
 80087d2:	4b86      	ldr	r3, [pc, #536]	@ (80089ec <_dtoa_r+0x5c4>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	f7f8 f98f 	bl	8000afc <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f000 80ae 	beq.w	8008940 <_dtoa_r+0x518>
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 80aa 	beq.w	8008940 <_dtoa_r+0x518>
 80087ec:	9b00      	ldr	r3, [sp, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd37      	ble.n	8008862 <_dtoa_r+0x43a>
 80087f2:	1e7b      	subs	r3, r7, #1
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	4620      	mov	r0, r4
 80087f8:	4b7d      	ldr	r3, [pc, #500]	@ (80089f0 <_dtoa_r+0x5c8>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7f7 ff0b 	bl	8000618 <__aeabi_dmul>
 8008802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008806:	9c00      	ldr	r4, [sp, #0]
 8008808:	3601      	adds	r6, #1
 800880a:	4630      	mov	r0, r6
 800880c:	f7f7 fe9a 	bl	8000544 <__aeabi_i2d>
 8008810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008814:	f7f7 ff00 	bl	8000618 <__aeabi_dmul>
 8008818:	4b76      	ldr	r3, [pc, #472]	@ (80089f4 <_dtoa_r+0x5cc>)
 800881a:	2200      	movs	r2, #0
 800881c:	f7f7 fd46 	bl	80002ac <__adddf3>
 8008820:	4605      	mov	r5, r0
 8008822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008826:	2c00      	cmp	r4, #0
 8008828:	f040 808d 	bne.w	8008946 <_dtoa_r+0x51e>
 800882c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008830:	4b71      	ldr	r3, [pc, #452]	@ (80089f8 <_dtoa_r+0x5d0>)
 8008832:	2200      	movs	r2, #0
 8008834:	f7f7 fd38 	bl	80002a8 <__aeabi_dsub>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008840:	462a      	mov	r2, r5
 8008842:	4633      	mov	r3, r6
 8008844:	f7f8 f978 	bl	8000b38 <__aeabi_dcmpgt>
 8008848:	2800      	cmp	r0, #0
 800884a:	f040 828b 	bne.w	8008d64 <_dtoa_r+0x93c>
 800884e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008852:	462a      	mov	r2, r5
 8008854:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008858:	f7f8 f950 	bl	8000afc <__aeabi_dcmplt>
 800885c:	2800      	cmp	r0, #0
 800885e:	f040 8128 	bne.w	8008ab2 <_dtoa_r+0x68a>
 8008862:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008866:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800886a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800886c:	2b00      	cmp	r3, #0
 800886e:	f2c0 815a 	blt.w	8008b26 <_dtoa_r+0x6fe>
 8008872:	2f0e      	cmp	r7, #14
 8008874:	f300 8157 	bgt.w	8008b26 <_dtoa_r+0x6fe>
 8008878:	4b5a      	ldr	r3, [pc, #360]	@ (80089e4 <_dtoa_r+0x5bc>)
 800887a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800887e:	ed93 7b00 	vldr	d7, [r3]
 8008882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008884:	2b00      	cmp	r3, #0
 8008886:	ed8d 7b00 	vstr	d7, [sp]
 800888a:	da03      	bge.n	8008894 <_dtoa_r+0x46c>
 800888c:	9b07      	ldr	r3, [sp, #28]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f340 8101 	ble.w	8008a96 <_dtoa_r+0x66e>
 8008894:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008898:	4656      	mov	r6, sl
 800889a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800889e:	4620      	mov	r0, r4
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f7 ffe3 	bl	800086c <__aeabi_ddiv>
 80088a6:	f7f8 f967 	bl	8000b78 <__aeabi_d2iz>
 80088aa:	4680      	mov	r8, r0
 80088ac:	f7f7 fe4a 	bl	8000544 <__aeabi_i2d>
 80088b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088b4:	f7f7 feb0 	bl	8000618 <__aeabi_dmul>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4620      	mov	r0, r4
 80088be:	4629      	mov	r1, r5
 80088c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80088c4:	f7f7 fcf0 	bl	80002a8 <__aeabi_dsub>
 80088c8:	f806 4b01 	strb.w	r4, [r6], #1
 80088cc:	9d07      	ldr	r5, [sp, #28]
 80088ce:	eba6 040a 	sub.w	r4, r6, sl
 80088d2:	42a5      	cmp	r5, r4
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	f040 8117 	bne.w	8008b0a <_dtoa_r+0x6e2>
 80088dc:	f7f7 fce6 	bl	80002ac <__adddf3>
 80088e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088e4:	4604      	mov	r4, r0
 80088e6:	460d      	mov	r5, r1
 80088e8:	f7f8 f926 	bl	8000b38 <__aeabi_dcmpgt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 80f9 	bne.w	8008ae4 <_dtoa_r+0x6bc>
 80088f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f8 f8f5 	bl	8000ae8 <__aeabi_dcmpeq>
 80088fe:	b118      	cbz	r0, 8008908 <_dtoa_r+0x4e0>
 8008900:	f018 0f01 	tst.w	r8, #1
 8008904:	f040 80ee 	bne.w	8008ae4 <_dtoa_r+0x6bc>
 8008908:	4649      	mov	r1, r9
 800890a:	4658      	mov	r0, fp
 800890c:	f000 fbda 	bl	80090c4 <_Bfree>
 8008910:	2300      	movs	r3, #0
 8008912:	7033      	strb	r3, [r6, #0]
 8008914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008916:	3701      	adds	r7, #1
 8008918:	601f      	str	r7, [r3, #0]
 800891a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 831d 	beq.w	8008f5c <_dtoa_r+0xb34>
 8008922:	601e      	str	r6, [r3, #0]
 8008924:	e31a      	b.n	8008f5c <_dtoa_r+0xb34>
 8008926:	07e2      	lsls	r2, r4, #31
 8008928:	d505      	bpl.n	8008936 <_dtoa_r+0x50e>
 800892a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800892e:	f7f7 fe73 	bl	8000618 <__aeabi_dmul>
 8008932:	3601      	adds	r6, #1
 8008934:	2301      	movs	r3, #1
 8008936:	1064      	asrs	r4, r4, #1
 8008938:	3508      	adds	r5, #8
 800893a:	e73f      	b.n	80087bc <_dtoa_r+0x394>
 800893c:	2602      	movs	r6, #2
 800893e:	e742      	b.n	80087c6 <_dtoa_r+0x39e>
 8008940:	9c07      	ldr	r4, [sp, #28]
 8008942:	9704      	str	r7, [sp, #16]
 8008944:	e761      	b.n	800880a <_dtoa_r+0x3e2>
 8008946:	4b27      	ldr	r3, [pc, #156]	@ (80089e4 <_dtoa_r+0x5bc>)
 8008948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800894a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800894e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008952:	4454      	add	r4, sl
 8008954:	2900      	cmp	r1, #0
 8008956:	d053      	beq.n	8008a00 <_dtoa_r+0x5d8>
 8008958:	4928      	ldr	r1, [pc, #160]	@ (80089fc <_dtoa_r+0x5d4>)
 800895a:	2000      	movs	r0, #0
 800895c:	f7f7 ff86 	bl	800086c <__aeabi_ddiv>
 8008960:	4633      	mov	r3, r6
 8008962:	462a      	mov	r2, r5
 8008964:	f7f7 fca0 	bl	80002a8 <__aeabi_dsub>
 8008968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800896c:	4656      	mov	r6, sl
 800896e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008972:	f7f8 f901 	bl	8000b78 <__aeabi_d2iz>
 8008976:	4605      	mov	r5, r0
 8008978:	f7f7 fde4 	bl	8000544 <__aeabi_i2d>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008984:	f7f7 fc90 	bl	80002a8 <__aeabi_dsub>
 8008988:	3530      	adds	r5, #48	@ 0x30
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008992:	f806 5b01 	strb.w	r5, [r6], #1
 8008996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800899a:	f7f8 f8af 	bl	8000afc <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d171      	bne.n	8008a86 <_dtoa_r+0x65e>
 80089a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089a6:	4911      	ldr	r1, [pc, #68]	@ (80089ec <_dtoa_r+0x5c4>)
 80089a8:	2000      	movs	r0, #0
 80089aa:	f7f7 fc7d 	bl	80002a8 <__aeabi_dsub>
 80089ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089b2:	f7f8 f8a3 	bl	8000afc <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f040 8095 	bne.w	8008ae6 <_dtoa_r+0x6be>
 80089bc:	42a6      	cmp	r6, r4
 80089be:	f43f af50 	beq.w	8008862 <_dtoa_r+0x43a>
 80089c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089c6:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <_dtoa_r+0x5c8>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	f7f7 fe25 	bl	8000618 <__aeabi_dmul>
 80089ce:	4b08      	ldr	r3, [pc, #32]	@ (80089f0 <_dtoa_r+0x5c8>)
 80089d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089d4:	2200      	movs	r2, #0
 80089d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089da:	f7f7 fe1d 	bl	8000618 <__aeabi_dmul>
 80089de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e2:	e7c4      	b.n	800896e <_dtoa_r+0x546>
 80089e4:	0800b9d8 	.word	0x0800b9d8
 80089e8:	0800b9b0 	.word	0x0800b9b0
 80089ec:	3ff00000 	.word	0x3ff00000
 80089f0:	40240000 	.word	0x40240000
 80089f4:	401c0000 	.word	0x401c0000
 80089f8:	40140000 	.word	0x40140000
 80089fc:	3fe00000 	.word	0x3fe00000
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7f7 fe08 	bl	8000618 <__aeabi_dmul>
 8008a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a0e:	4656      	mov	r6, sl
 8008a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a14:	f7f8 f8b0 	bl	8000b78 <__aeabi_d2iz>
 8008a18:	4605      	mov	r5, r0
 8008a1a:	f7f7 fd93 	bl	8000544 <__aeabi_i2d>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a26:	f7f7 fc3f 	bl	80002a8 <__aeabi_dsub>
 8008a2a:	3530      	adds	r5, #48	@ 0x30
 8008a2c:	f806 5b01 	strb.w	r5, [r6], #1
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	42a6      	cmp	r6, r4
 8008a36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	d124      	bne.n	8008a8a <_dtoa_r+0x662>
 8008a40:	4bac      	ldr	r3, [pc, #688]	@ (8008cf4 <_dtoa_r+0x8cc>)
 8008a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a46:	f7f7 fc31 	bl	80002ac <__adddf3>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a52:	f7f8 f871 	bl	8000b38 <__aeabi_dcmpgt>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d145      	bne.n	8008ae6 <_dtoa_r+0x6be>
 8008a5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a5e:	49a5      	ldr	r1, [pc, #660]	@ (8008cf4 <_dtoa_r+0x8cc>)
 8008a60:	2000      	movs	r0, #0
 8008a62:	f7f7 fc21 	bl	80002a8 <__aeabi_dsub>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6e:	f7f8 f845 	bl	8000afc <__aeabi_dcmplt>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f43f aef5 	beq.w	8008862 <_dtoa_r+0x43a>
 8008a78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008a7a:	1e73      	subs	r3, r6, #1
 8008a7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a82:	2b30      	cmp	r3, #48	@ 0x30
 8008a84:	d0f8      	beq.n	8008a78 <_dtoa_r+0x650>
 8008a86:	9f04      	ldr	r7, [sp, #16]
 8008a88:	e73e      	b.n	8008908 <_dtoa_r+0x4e0>
 8008a8a:	4b9b      	ldr	r3, [pc, #620]	@ (8008cf8 <_dtoa_r+0x8d0>)
 8008a8c:	f7f7 fdc4 	bl	8000618 <__aeabi_dmul>
 8008a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a94:	e7bc      	b.n	8008a10 <_dtoa_r+0x5e8>
 8008a96:	d10c      	bne.n	8008ab2 <_dtoa_r+0x68a>
 8008a98:	4b98      	ldr	r3, [pc, #608]	@ (8008cfc <_dtoa_r+0x8d4>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aa0:	f7f7 fdba 	bl	8000618 <__aeabi_dmul>
 8008aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aa8:	f7f8 f83c 	bl	8000b24 <__aeabi_dcmpge>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f000 8157 	beq.w	8008d60 <_dtoa_r+0x938>
 8008ab2:	2400      	movs	r4, #0
 8008ab4:	4625      	mov	r5, r4
 8008ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	4656      	mov	r6, sl
 8008abe:	2700      	movs	r7, #0
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4658      	mov	r0, fp
 8008ac4:	f000 fafe 	bl	80090c4 <_Bfree>
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	d0dc      	beq.n	8008a86 <_dtoa_r+0x65e>
 8008acc:	b12f      	cbz	r7, 8008ada <_dtoa_r+0x6b2>
 8008ace:	42af      	cmp	r7, r5
 8008ad0:	d003      	beq.n	8008ada <_dtoa_r+0x6b2>
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	4658      	mov	r0, fp
 8008ad6:	f000 faf5 	bl	80090c4 <_Bfree>
 8008ada:	4629      	mov	r1, r5
 8008adc:	4658      	mov	r0, fp
 8008ade:	f000 faf1 	bl	80090c4 <_Bfree>
 8008ae2:	e7d0      	b.n	8008a86 <_dtoa_r+0x65e>
 8008ae4:	9704      	str	r7, [sp, #16]
 8008ae6:	4633      	mov	r3, r6
 8008ae8:	461e      	mov	r6, r3
 8008aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aee:	2a39      	cmp	r2, #57	@ 0x39
 8008af0:	d107      	bne.n	8008b02 <_dtoa_r+0x6da>
 8008af2:	459a      	cmp	sl, r3
 8008af4:	d1f8      	bne.n	8008ae8 <_dtoa_r+0x6c0>
 8008af6:	9a04      	ldr	r2, [sp, #16]
 8008af8:	3201      	adds	r2, #1
 8008afa:	9204      	str	r2, [sp, #16]
 8008afc:	2230      	movs	r2, #48	@ 0x30
 8008afe:	f88a 2000 	strb.w	r2, [sl]
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	3201      	adds	r2, #1
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	e7bd      	b.n	8008a86 <_dtoa_r+0x65e>
 8008b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8008cf8 <_dtoa_r+0x8d0>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f7f7 fd83 	bl	8000618 <__aeabi_dmul>
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	460d      	mov	r5, r1
 8008b1a:	f7f7 ffe5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f43f aebb 	beq.w	800889a <_dtoa_r+0x472>
 8008b24:	e6f0      	b.n	8008908 <_dtoa_r+0x4e0>
 8008b26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b28:	2a00      	cmp	r2, #0
 8008b2a:	f000 80db 	beq.w	8008ce4 <_dtoa_r+0x8bc>
 8008b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b30:	2a01      	cmp	r2, #1
 8008b32:	f300 80bf 	bgt.w	8008cb4 <_dtoa_r+0x88c>
 8008b36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	f000 80b7 	beq.w	8008cac <_dtoa_r+0x884>
 8008b3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b44:	4646      	mov	r6, r8
 8008b46:	9a08      	ldr	r2, [sp, #32]
 8008b48:	2101      	movs	r1, #1
 8008b4a:	441a      	add	r2, r3
 8008b4c:	4658      	mov	r0, fp
 8008b4e:	4498      	add	r8, r3
 8008b50:	9208      	str	r2, [sp, #32]
 8008b52:	f000 fbb5 	bl	80092c0 <__i2b>
 8008b56:	4605      	mov	r5, r0
 8008b58:	b15e      	cbz	r6, 8008b72 <_dtoa_r+0x74a>
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dd08      	ble.n	8008b72 <_dtoa_r+0x74a>
 8008b60:	42b3      	cmp	r3, r6
 8008b62:	9a08      	ldr	r2, [sp, #32]
 8008b64:	bfa8      	it	ge
 8008b66:	4633      	movge	r3, r6
 8008b68:	eba8 0803 	sub.w	r8, r8, r3
 8008b6c:	1af6      	subs	r6, r6, r3
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	9308      	str	r3, [sp, #32]
 8008b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b74:	b1f3      	cbz	r3, 8008bb4 <_dtoa_r+0x78c>
 8008b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 80b7 	beq.w	8008cec <_dtoa_r+0x8c4>
 8008b7e:	b18c      	cbz	r4, 8008ba4 <_dtoa_r+0x77c>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4622      	mov	r2, r4
 8008b84:	4658      	mov	r0, fp
 8008b86:	f000 fc5b 	bl	8009440 <__pow5mult>
 8008b8a:	464a      	mov	r2, r9
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	4605      	mov	r5, r0
 8008b90:	4658      	mov	r0, fp
 8008b92:	f000 fbab 	bl	80092ec <__multiply>
 8008b96:	4649      	mov	r1, r9
 8008b98:	9004      	str	r0, [sp, #16]
 8008b9a:	4658      	mov	r0, fp
 8008b9c:	f000 fa92 	bl	80090c4 <_Bfree>
 8008ba0:	9b04      	ldr	r3, [sp, #16]
 8008ba2:	4699      	mov	r9, r3
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba6:	1b1a      	subs	r2, r3, r4
 8008ba8:	d004      	beq.n	8008bb4 <_dtoa_r+0x78c>
 8008baa:	4649      	mov	r1, r9
 8008bac:	4658      	mov	r0, fp
 8008bae:	f000 fc47 	bl	8009440 <__pow5mult>
 8008bb2:	4681      	mov	r9, r0
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	f000 fb82 	bl	80092c0 <__i2b>
 8008bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 81cf 	beq.w	8008f64 <_dtoa_r+0xb3c>
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4601      	mov	r1, r0
 8008bca:	4658      	mov	r0, fp
 8008bcc:	f000 fc38 	bl	8009440 <__pow5mult>
 8008bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	f300 8095 	bgt.w	8008d04 <_dtoa_r+0x8dc>
 8008bda:	9b02      	ldr	r3, [sp, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 8087 	bne.w	8008cf0 <_dtoa_r+0x8c8>
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f040 8089 	bne.w	8008d00 <_dtoa_r+0x8d8>
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bf4:	0d1b      	lsrs	r3, r3, #20
 8008bf6:	051b      	lsls	r3, r3, #20
 8008bf8:	b12b      	cbz	r3, 8008c06 <_dtoa_r+0x7de>
 8008bfa:	9b08      	ldr	r3, [sp, #32]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	f108 0801 	add.w	r8, r8, #1
 8008c04:	2301      	movs	r3, #1
 8008c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 81b0 	beq.w	8008f70 <_dtoa_r+0xb48>
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c16:	6918      	ldr	r0, [r3, #16]
 8008c18:	f000 fb06 	bl	8009228 <__hi0bits>
 8008c1c:	f1c0 0020 	rsb	r0, r0, #32
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	4418      	add	r0, r3
 8008c24:	f010 001f 	ands.w	r0, r0, #31
 8008c28:	d077      	beq.n	8008d1a <_dtoa_r+0x8f2>
 8008c2a:	f1c0 0320 	rsb	r3, r0, #32
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	dd6b      	ble.n	8008d0a <_dtoa_r+0x8e2>
 8008c32:	9b08      	ldr	r3, [sp, #32]
 8008c34:	f1c0 001c 	rsb	r0, r0, #28
 8008c38:	4403      	add	r3, r0
 8008c3a:	4480      	add	r8, r0
 8008c3c:	4406      	add	r6, r0
 8008c3e:	9308      	str	r3, [sp, #32]
 8008c40:	f1b8 0f00 	cmp.w	r8, #0
 8008c44:	dd05      	ble.n	8008c52 <_dtoa_r+0x82a>
 8008c46:	4649      	mov	r1, r9
 8008c48:	4642      	mov	r2, r8
 8008c4a:	4658      	mov	r0, fp
 8008c4c:	f000 fc52 	bl	80094f4 <__lshift>
 8008c50:	4681      	mov	r9, r0
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dd05      	ble.n	8008c64 <_dtoa_r+0x83c>
 8008c58:	4621      	mov	r1, r4
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4658      	mov	r0, fp
 8008c5e:	f000 fc49 	bl	80094f4 <__lshift>
 8008c62:	4604      	mov	r4, r0
 8008c64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d059      	beq.n	8008d1e <_dtoa_r+0x8f6>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4648      	mov	r0, r9
 8008c6e:	f000 fcad 	bl	80095cc <__mcmp>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	da53      	bge.n	8008d1e <_dtoa_r+0x8f6>
 8008c76:	1e7b      	subs	r3, r7, #1
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	220a      	movs	r2, #10
 8008c80:	4658      	mov	r0, fp
 8008c82:	f000 fa41 	bl	8009108 <__multadd>
 8008c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c88:	4681      	mov	r9, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 8172 	beq.w	8008f74 <_dtoa_r+0xb4c>
 8008c90:	2300      	movs	r3, #0
 8008c92:	4629      	mov	r1, r5
 8008c94:	220a      	movs	r2, #10
 8008c96:	4658      	mov	r0, fp
 8008c98:	f000 fa36 	bl	8009108 <__multadd>
 8008c9c:	9b00      	ldr	r3, [sp, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	dc67      	bgt.n	8008d74 <_dtoa_r+0x94c>
 8008ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	dc41      	bgt.n	8008d2e <_dtoa_r+0x906>
 8008caa:	e063      	b.n	8008d74 <_dtoa_r+0x94c>
 8008cac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008cb2:	e746      	b.n	8008b42 <_dtoa_r+0x71a>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	1e5c      	subs	r4, r3, #1
 8008cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	bfbf      	itttt	lt
 8008cbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008cc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008cc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008cc4:	1ae3      	sublt	r3, r4, r3
 8008cc6:	bfb4      	ite	lt
 8008cc8:	18d2      	addlt	r2, r2, r3
 8008cca:	1b1c      	subge	r4, r3, r4
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	bfbc      	itt	lt
 8008cd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008cd2:	2400      	movlt	r4, #0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bfb5      	itete	lt
 8008cd8:	eba8 0603 	sublt.w	r6, r8, r3
 8008cdc:	9b07      	ldrge	r3, [sp, #28]
 8008cde:	2300      	movlt	r3, #0
 8008ce0:	4646      	movge	r6, r8
 8008ce2:	e730      	b.n	8008b46 <_dtoa_r+0x71e>
 8008ce4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ce6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ce8:	4646      	mov	r6, r8
 8008cea:	e735      	b.n	8008b58 <_dtoa_r+0x730>
 8008cec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cee:	e75c      	b.n	8008baa <_dtoa_r+0x782>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e788      	b.n	8008c06 <_dtoa_r+0x7de>
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	40240000 	.word	0x40240000
 8008cfc:	40140000 	.word	0x40140000
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	e780      	b.n	8008c06 <_dtoa_r+0x7de>
 8008d04:	2300      	movs	r3, #0
 8008d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d08:	e782      	b.n	8008c10 <_dtoa_r+0x7e8>
 8008d0a:	d099      	beq.n	8008c40 <_dtoa_r+0x818>
 8008d0c:	9a08      	ldr	r2, [sp, #32]
 8008d0e:	331c      	adds	r3, #28
 8008d10:	441a      	add	r2, r3
 8008d12:	4498      	add	r8, r3
 8008d14:	441e      	add	r6, r3
 8008d16:	9208      	str	r2, [sp, #32]
 8008d18:	e792      	b.n	8008c40 <_dtoa_r+0x818>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	e7f6      	b.n	8008d0c <_dtoa_r+0x8e4>
 8008d1e:	9b07      	ldr	r3, [sp, #28]
 8008d20:	9704      	str	r7, [sp, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dc20      	bgt.n	8008d68 <_dtoa_r+0x940>
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	dd1e      	ble.n	8008d6c <_dtoa_r+0x944>
 8008d2e:	9b00      	ldr	r3, [sp, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f47f aec0 	bne.w	8008ab6 <_dtoa_r+0x68e>
 8008d36:	4621      	mov	r1, r4
 8008d38:	2205      	movs	r2, #5
 8008d3a:	4658      	mov	r0, fp
 8008d3c:	f000 f9e4 	bl	8009108 <__multadd>
 8008d40:	4601      	mov	r1, r0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4648      	mov	r0, r9
 8008d46:	f000 fc41 	bl	80095cc <__mcmp>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f77f aeb3 	ble.w	8008ab6 <_dtoa_r+0x68e>
 8008d50:	4656      	mov	r6, sl
 8008d52:	2331      	movs	r3, #49	@ 0x31
 8008d54:	f806 3b01 	strb.w	r3, [r6], #1
 8008d58:	9b04      	ldr	r3, [sp, #16]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	e6ae      	b.n	8008abe <_dtoa_r+0x696>
 8008d60:	9c07      	ldr	r4, [sp, #28]
 8008d62:	9704      	str	r7, [sp, #16]
 8008d64:	4625      	mov	r5, r4
 8008d66:	e7f3      	b.n	8008d50 <_dtoa_r+0x928>
 8008d68:	9b07      	ldr	r3, [sp, #28]
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8104 	beq.w	8008f7c <_dtoa_r+0xb54>
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	dd05      	ble.n	8008d84 <_dtoa_r+0x95c>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	4658      	mov	r0, fp
 8008d7e:	f000 fbb9 	bl	80094f4 <__lshift>
 8008d82:	4605      	mov	r5, r0
 8008d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d05a      	beq.n	8008e40 <_dtoa_r+0xa18>
 8008d8a:	6869      	ldr	r1, [r5, #4]
 8008d8c:	4658      	mov	r0, fp
 8008d8e:	f000 f959 	bl	8009044 <_Balloc>
 8008d92:	4606      	mov	r6, r0
 8008d94:	b928      	cbnz	r0, 8008da2 <_dtoa_r+0x97a>
 8008d96:	4b84      	ldr	r3, [pc, #528]	@ (8008fa8 <_dtoa_r+0xb80>)
 8008d98:	4602      	mov	r2, r0
 8008d9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d9e:	f7ff bb5a 	b.w	8008456 <_dtoa_r+0x2e>
 8008da2:	692a      	ldr	r2, [r5, #16]
 8008da4:	3202      	adds	r2, #2
 8008da6:	0092      	lsls	r2, r2, #2
 8008da8:	f105 010c 	add.w	r1, r5, #12
 8008dac:	300c      	adds	r0, #12
 8008dae:	f001 feb1 	bl	800ab14 <memcpy>
 8008db2:	2201      	movs	r2, #1
 8008db4:	4631      	mov	r1, r6
 8008db6:	4658      	mov	r0, fp
 8008db8:	f000 fb9c 	bl	80094f4 <__lshift>
 8008dbc:	f10a 0301 	add.w	r3, sl, #1
 8008dc0:	9307      	str	r3, [sp, #28]
 8008dc2:	9b00      	ldr	r3, [sp, #0]
 8008dc4:	4453      	add	r3, sl
 8008dc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	462f      	mov	r7, r5
 8008dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	9b07      	ldr	r3, [sp, #28]
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	4648      	mov	r0, r9
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	f7ff fa99 	bl	8008314 <quorem>
 8008de2:	4639      	mov	r1, r7
 8008de4:	9002      	str	r0, [sp, #8]
 8008de6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008dea:	4648      	mov	r0, r9
 8008dec:	f000 fbee 	bl	80095cc <__mcmp>
 8008df0:	462a      	mov	r2, r5
 8008df2:	9008      	str	r0, [sp, #32]
 8008df4:	4621      	mov	r1, r4
 8008df6:	4658      	mov	r0, fp
 8008df8:	f000 fc04 	bl	8009604 <__mdiff>
 8008dfc:	68c2      	ldr	r2, [r0, #12]
 8008dfe:	4606      	mov	r6, r0
 8008e00:	bb02      	cbnz	r2, 8008e44 <_dtoa_r+0xa1c>
 8008e02:	4601      	mov	r1, r0
 8008e04:	4648      	mov	r0, r9
 8008e06:	f000 fbe1 	bl	80095cc <__mcmp>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4658      	mov	r0, fp
 8008e10:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e12:	f000 f957 	bl	80090c4 <_Bfree>
 8008e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e1a:	9e07      	ldr	r6, [sp, #28]
 8008e1c:	ea43 0102 	orr.w	r1, r3, r2
 8008e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e22:	4319      	orrs	r1, r3
 8008e24:	d110      	bne.n	8008e48 <_dtoa_r+0xa20>
 8008e26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e2a:	d029      	beq.n	8008e80 <_dtoa_r+0xa58>
 8008e2c:	9b08      	ldr	r3, [sp, #32]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	dd02      	ble.n	8008e38 <_dtoa_r+0xa10>
 8008e32:	9b02      	ldr	r3, [sp, #8]
 8008e34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	f883 8000 	strb.w	r8, [r3]
 8008e3e:	e63f      	b.n	8008ac0 <_dtoa_r+0x698>
 8008e40:	4628      	mov	r0, r5
 8008e42:	e7bb      	b.n	8008dbc <_dtoa_r+0x994>
 8008e44:	2201      	movs	r2, #1
 8008e46:	e7e1      	b.n	8008e0c <_dtoa_r+0x9e4>
 8008e48:	9b08      	ldr	r3, [sp, #32]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	db04      	blt.n	8008e58 <_dtoa_r+0xa30>
 8008e4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e50:	430b      	orrs	r3, r1
 8008e52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e54:	430b      	orrs	r3, r1
 8008e56:	d120      	bne.n	8008e9a <_dtoa_r+0xa72>
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	dded      	ble.n	8008e38 <_dtoa_r+0xa10>
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4658      	mov	r0, fp
 8008e62:	f000 fb47 	bl	80094f4 <__lshift>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4681      	mov	r9, r0
 8008e6a:	f000 fbaf 	bl	80095cc <__mcmp>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	dc03      	bgt.n	8008e7a <_dtoa_r+0xa52>
 8008e72:	d1e1      	bne.n	8008e38 <_dtoa_r+0xa10>
 8008e74:	f018 0f01 	tst.w	r8, #1
 8008e78:	d0de      	beq.n	8008e38 <_dtoa_r+0xa10>
 8008e7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e7e:	d1d8      	bne.n	8008e32 <_dtoa_r+0xa0a>
 8008e80:	9a00      	ldr	r2, [sp, #0]
 8008e82:	2339      	movs	r3, #57	@ 0x39
 8008e84:	7013      	strb	r3, [r2, #0]
 8008e86:	4633      	mov	r3, r6
 8008e88:	461e      	mov	r6, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e90:	2a39      	cmp	r2, #57	@ 0x39
 8008e92:	d052      	beq.n	8008f3a <_dtoa_r+0xb12>
 8008e94:	3201      	adds	r2, #1
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	e612      	b.n	8008ac0 <_dtoa_r+0x698>
 8008e9a:	2a00      	cmp	r2, #0
 8008e9c:	dd07      	ble.n	8008eae <_dtoa_r+0xa86>
 8008e9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ea2:	d0ed      	beq.n	8008e80 <_dtoa_r+0xa58>
 8008ea4:	9a00      	ldr	r2, [sp, #0]
 8008ea6:	f108 0301 	add.w	r3, r8, #1
 8008eaa:	7013      	strb	r3, [r2, #0]
 8008eac:	e608      	b.n	8008ac0 <_dtoa_r+0x698>
 8008eae:	9b07      	ldr	r3, [sp, #28]
 8008eb0:	9a07      	ldr	r2, [sp, #28]
 8008eb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d028      	beq.n	8008f0e <_dtoa_r+0xae6>
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	220a      	movs	r2, #10
 8008ec2:	4658      	mov	r0, fp
 8008ec4:	f000 f920 	bl	8009108 <__multadd>
 8008ec8:	42af      	cmp	r7, r5
 8008eca:	4681      	mov	r9, r0
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	f04f 020a 	mov.w	r2, #10
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	4658      	mov	r0, fp
 8008ed8:	d107      	bne.n	8008eea <_dtoa_r+0xac2>
 8008eda:	f000 f915 	bl	8009108 <__multadd>
 8008ede:	4607      	mov	r7, r0
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	9b07      	ldr	r3, [sp, #28]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	9307      	str	r3, [sp, #28]
 8008ee8:	e774      	b.n	8008dd4 <_dtoa_r+0x9ac>
 8008eea:	f000 f90d 	bl	8009108 <__multadd>
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	220a      	movs	r2, #10
 8008ef6:	4658      	mov	r0, fp
 8008ef8:	f000 f906 	bl	8009108 <__multadd>
 8008efc:	4605      	mov	r5, r0
 8008efe:	e7f0      	b.n	8008ee2 <_dtoa_r+0xaba>
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	bfcc      	ite	gt
 8008f06:	461e      	movgt	r6, r3
 8008f08:	2601      	movle	r6, #1
 8008f0a:	4456      	add	r6, sl
 8008f0c:	2700      	movs	r7, #0
 8008f0e:	4649      	mov	r1, r9
 8008f10:	2201      	movs	r2, #1
 8008f12:	4658      	mov	r0, fp
 8008f14:	f000 faee 	bl	80094f4 <__lshift>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4681      	mov	r9, r0
 8008f1c:	f000 fb56 	bl	80095cc <__mcmp>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	dcb0      	bgt.n	8008e86 <_dtoa_r+0xa5e>
 8008f24:	d102      	bne.n	8008f2c <_dtoa_r+0xb04>
 8008f26:	f018 0f01 	tst.w	r8, #1
 8008f2a:	d1ac      	bne.n	8008e86 <_dtoa_r+0xa5e>
 8008f2c:	4633      	mov	r3, r6
 8008f2e:	461e      	mov	r6, r3
 8008f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f34:	2a30      	cmp	r2, #48	@ 0x30
 8008f36:	d0fa      	beq.n	8008f2e <_dtoa_r+0xb06>
 8008f38:	e5c2      	b.n	8008ac0 <_dtoa_r+0x698>
 8008f3a:	459a      	cmp	sl, r3
 8008f3c:	d1a4      	bne.n	8008e88 <_dtoa_r+0xa60>
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	3301      	adds	r3, #1
 8008f42:	9304      	str	r3, [sp, #16]
 8008f44:	2331      	movs	r3, #49	@ 0x31
 8008f46:	f88a 3000 	strb.w	r3, [sl]
 8008f4a:	e5b9      	b.n	8008ac0 <_dtoa_r+0x698>
 8008f4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008fac <_dtoa_r+0xb84>
 8008f52:	b11b      	cbz	r3, 8008f5c <_dtoa_r+0xb34>
 8008f54:	f10a 0308 	add.w	r3, sl, #8
 8008f58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	4650      	mov	r0, sl
 8008f5e:	b019      	add	sp, #100	@ 0x64
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	f77f ae37 	ble.w	8008bda <_dtoa_r+0x7b2>
 8008f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f70:	2001      	movs	r0, #1
 8008f72:	e655      	b.n	8008c20 <_dtoa_r+0x7f8>
 8008f74:	9b00      	ldr	r3, [sp, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f77f aed6 	ble.w	8008d28 <_dtoa_r+0x900>
 8008f7c:	4656      	mov	r6, sl
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4648      	mov	r0, r9
 8008f82:	f7ff f9c7 	bl	8008314 <quorem>
 8008f86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f8a:	f806 8b01 	strb.w	r8, [r6], #1
 8008f8e:	9b00      	ldr	r3, [sp, #0]
 8008f90:	eba6 020a 	sub.w	r2, r6, sl
 8008f94:	4293      	cmp	r3, r2
 8008f96:	ddb3      	ble.n	8008f00 <_dtoa_r+0xad8>
 8008f98:	4649      	mov	r1, r9
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	220a      	movs	r2, #10
 8008f9e:	4658      	mov	r0, fp
 8008fa0:	f000 f8b2 	bl	8009108 <__multadd>
 8008fa4:	4681      	mov	r9, r0
 8008fa6:	e7ea      	b.n	8008f7e <_dtoa_r+0xb56>
 8008fa8:	0800b939 	.word	0x0800b939
 8008fac:	0800b8bd 	.word	0x0800b8bd

08008fb0 <_free_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	d041      	beq.n	800903c <_free_r+0x8c>
 8008fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbc:	1f0c      	subs	r4, r1, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfb8      	it	lt
 8008fc2:	18e4      	addlt	r4, r4, r3
 8008fc4:	f7fe f972 	bl	80072ac <__malloc_lock>
 8008fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009040 <_free_r+0x90>)
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	b933      	cbnz	r3, 8008fdc <_free_r+0x2c>
 8008fce:	6063      	str	r3, [r4, #4]
 8008fd0:	6014      	str	r4, [r2, #0]
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd8:	f7fe b96e 	b.w	80072b8 <__malloc_unlock>
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d908      	bls.n	8008ff2 <_free_r+0x42>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	1821      	adds	r1, r4, r0
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf01      	itttt	eq
 8008fe8:	6819      	ldreq	r1, [r3, #0]
 8008fea:	685b      	ldreq	r3, [r3, #4]
 8008fec:	1809      	addeq	r1, r1, r0
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	e7ed      	b.n	8008fce <_free_r+0x1e>
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	b10b      	cbz	r3, 8008ffc <_free_r+0x4c>
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	d9fa      	bls.n	8008ff2 <_free_r+0x42>
 8008ffc:	6811      	ldr	r1, [r2, #0]
 8008ffe:	1850      	adds	r0, r2, r1
 8009000:	42a0      	cmp	r0, r4
 8009002:	d10b      	bne.n	800901c <_free_r+0x6c>
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	4401      	add	r1, r0
 8009008:	1850      	adds	r0, r2, r1
 800900a:	4283      	cmp	r3, r0
 800900c:	6011      	str	r1, [r2, #0]
 800900e:	d1e0      	bne.n	8008fd2 <_free_r+0x22>
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	6053      	str	r3, [r2, #4]
 8009016:	4408      	add	r0, r1
 8009018:	6010      	str	r0, [r2, #0]
 800901a:	e7da      	b.n	8008fd2 <_free_r+0x22>
 800901c:	d902      	bls.n	8009024 <_free_r+0x74>
 800901e:	230c      	movs	r3, #12
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	e7d6      	b.n	8008fd2 <_free_r+0x22>
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	1821      	adds	r1, r4, r0
 8009028:	428b      	cmp	r3, r1
 800902a:	bf04      	itt	eq
 800902c:	6819      	ldreq	r1, [r3, #0]
 800902e:	685b      	ldreq	r3, [r3, #4]
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	bf04      	itt	eq
 8009034:	1809      	addeq	r1, r1, r0
 8009036:	6021      	streq	r1, [r4, #0]
 8009038:	6054      	str	r4, [r2, #4]
 800903a:	e7ca      	b.n	8008fd2 <_free_r+0x22>
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	20000448 	.word	0x20000448

08009044 <_Balloc>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	69c6      	ldr	r6, [r0, #28]
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	b976      	cbnz	r6, 800906c <_Balloc+0x28>
 800904e:	2010      	movs	r0, #16
 8009050:	f7fe f882 	bl	8007158 <malloc>
 8009054:	4602      	mov	r2, r0
 8009056:	61e0      	str	r0, [r4, #28]
 8009058:	b920      	cbnz	r0, 8009064 <_Balloc+0x20>
 800905a:	4b18      	ldr	r3, [pc, #96]	@ (80090bc <_Balloc+0x78>)
 800905c:	4818      	ldr	r0, [pc, #96]	@ (80090c0 <_Balloc+0x7c>)
 800905e:	216b      	movs	r1, #107	@ 0x6b
 8009060:	f001 fd6e 	bl	800ab40 <__assert_func>
 8009064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009068:	6006      	str	r6, [r0, #0]
 800906a:	60c6      	str	r6, [r0, #12]
 800906c:	69e6      	ldr	r6, [r4, #28]
 800906e:	68f3      	ldr	r3, [r6, #12]
 8009070:	b183      	cbz	r3, 8009094 <_Balloc+0x50>
 8009072:	69e3      	ldr	r3, [r4, #28]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800907a:	b9b8      	cbnz	r0, 80090ac <_Balloc+0x68>
 800907c:	2101      	movs	r1, #1
 800907e:	fa01 f605 	lsl.w	r6, r1, r5
 8009082:	1d72      	adds	r2, r6, #5
 8009084:	0092      	lsls	r2, r2, #2
 8009086:	4620      	mov	r0, r4
 8009088:	f7fe f851 	bl	800712e <_calloc_r>
 800908c:	b160      	cbz	r0, 80090a8 <_Balloc+0x64>
 800908e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009092:	e00e      	b.n	80090b2 <_Balloc+0x6e>
 8009094:	2221      	movs	r2, #33	@ 0x21
 8009096:	2104      	movs	r1, #4
 8009098:	4620      	mov	r0, r4
 800909a:	f7fe f848 	bl	800712e <_calloc_r>
 800909e:	69e3      	ldr	r3, [r4, #28]
 80090a0:	60f0      	str	r0, [r6, #12]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e4      	bne.n	8009072 <_Balloc+0x2e>
 80090a8:	2000      	movs	r0, #0
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	6802      	ldr	r2, [r0, #0]
 80090ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090b2:	2300      	movs	r3, #0
 80090b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090b8:	e7f7      	b.n	80090aa <_Balloc+0x66>
 80090ba:	bf00      	nop
 80090bc:	0800b8ca 	.word	0x0800b8ca
 80090c0:	0800b94a 	.word	0x0800b94a

080090c4 <_Bfree>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	69c6      	ldr	r6, [r0, #28]
 80090c8:	4605      	mov	r5, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b976      	cbnz	r6, 80090ec <_Bfree+0x28>
 80090ce:	2010      	movs	r0, #16
 80090d0:	f7fe f842 	bl	8007158 <malloc>
 80090d4:	4602      	mov	r2, r0
 80090d6:	61e8      	str	r0, [r5, #28]
 80090d8:	b920      	cbnz	r0, 80090e4 <_Bfree+0x20>
 80090da:	4b09      	ldr	r3, [pc, #36]	@ (8009100 <_Bfree+0x3c>)
 80090dc:	4809      	ldr	r0, [pc, #36]	@ (8009104 <_Bfree+0x40>)
 80090de:	218f      	movs	r1, #143	@ 0x8f
 80090e0:	f001 fd2e 	bl	800ab40 <__assert_func>
 80090e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090e8:	6006      	str	r6, [r0, #0]
 80090ea:	60c6      	str	r6, [r0, #12]
 80090ec:	b13c      	cbz	r4, 80090fe <_Bfree+0x3a>
 80090ee:	69eb      	ldr	r3, [r5, #28]
 80090f0:	6862      	ldr	r2, [r4, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090f8:	6021      	str	r1, [r4, #0]
 80090fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	0800b8ca 	.word	0x0800b8ca
 8009104:	0800b94a 	.word	0x0800b94a

08009108 <__multadd>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	690d      	ldr	r5, [r1, #16]
 800910e:	4607      	mov	r7, r0
 8009110:	460c      	mov	r4, r1
 8009112:	461e      	mov	r6, r3
 8009114:	f101 0c14 	add.w	ip, r1, #20
 8009118:	2000      	movs	r0, #0
 800911a:	f8dc 3000 	ldr.w	r3, [ip]
 800911e:	b299      	uxth	r1, r3
 8009120:	fb02 6101 	mla	r1, r2, r1, r6
 8009124:	0c1e      	lsrs	r6, r3, #16
 8009126:	0c0b      	lsrs	r3, r1, #16
 8009128:	fb02 3306 	mla	r3, r2, r6, r3
 800912c:	b289      	uxth	r1, r1
 800912e:	3001      	adds	r0, #1
 8009130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009134:	4285      	cmp	r5, r0
 8009136:	f84c 1b04 	str.w	r1, [ip], #4
 800913a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800913e:	dcec      	bgt.n	800911a <__multadd+0x12>
 8009140:	b30e      	cbz	r6, 8009186 <__multadd+0x7e>
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	42ab      	cmp	r3, r5
 8009146:	dc19      	bgt.n	800917c <__multadd+0x74>
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	4638      	mov	r0, r7
 800914c:	3101      	adds	r1, #1
 800914e:	f7ff ff79 	bl	8009044 <_Balloc>
 8009152:	4680      	mov	r8, r0
 8009154:	b928      	cbnz	r0, 8009162 <__multadd+0x5a>
 8009156:	4602      	mov	r2, r0
 8009158:	4b0c      	ldr	r3, [pc, #48]	@ (800918c <__multadd+0x84>)
 800915a:	480d      	ldr	r0, [pc, #52]	@ (8009190 <__multadd+0x88>)
 800915c:	21ba      	movs	r1, #186	@ 0xba
 800915e:	f001 fcef 	bl	800ab40 <__assert_func>
 8009162:	6922      	ldr	r2, [r4, #16]
 8009164:	3202      	adds	r2, #2
 8009166:	f104 010c 	add.w	r1, r4, #12
 800916a:	0092      	lsls	r2, r2, #2
 800916c:	300c      	adds	r0, #12
 800916e:	f001 fcd1 	bl	800ab14 <memcpy>
 8009172:	4621      	mov	r1, r4
 8009174:	4638      	mov	r0, r7
 8009176:	f7ff ffa5 	bl	80090c4 <_Bfree>
 800917a:	4644      	mov	r4, r8
 800917c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009180:	3501      	adds	r5, #1
 8009182:	615e      	str	r6, [r3, #20]
 8009184:	6125      	str	r5, [r4, #16]
 8009186:	4620      	mov	r0, r4
 8009188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800918c:	0800b939 	.word	0x0800b939
 8009190:	0800b94a 	.word	0x0800b94a

08009194 <__s2b>:
 8009194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	4615      	mov	r5, r2
 800919c:	461f      	mov	r7, r3
 800919e:	2209      	movs	r2, #9
 80091a0:	3308      	adds	r3, #8
 80091a2:	4606      	mov	r6, r0
 80091a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80091a8:	2100      	movs	r1, #0
 80091aa:	2201      	movs	r2, #1
 80091ac:	429a      	cmp	r2, r3
 80091ae:	db09      	blt.n	80091c4 <__s2b+0x30>
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff ff47 	bl	8009044 <_Balloc>
 80091b6:	b940      	cbnz	r0, 80091ca <__s2b+0x36>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b19      	ldr	r3, [pc, #100]	@ (8009220 <__s2b+0x8c>)
 80091bc:	4819      	ldr	r0, [pc, #100]	@ (8009224 <__s2b+0x90>)
 80091be:	21d3      	movs	r1, #211	@ 0xd3
 80091c0:	f001 fcbe 	bl	800ab40 <__assert_func>
 80091c4:	0052      	lsls	r2, r2, #1
 80091c6:	3101      	adds	r1, #1
 80091c8:	e7f0      	b.n	80091ac <__s2b+0x18>
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	6143      	str	r3, [r0, #20]
 80091ce:	2d09      	cmp	r5, #9
 80091d0:	f04f 0301 	mov.w	r3, #1
 80091d4:	6103      	str	r3, [r0, #16]
 80091d6:	dd16      	ble.n	8009206 <__s2b+0x72>
 80091d8:	f104 0909 	add.w	r9, r4, #9
 80091dc:	46c8      	mov	r8, r9
 80091de:	442c      	add	r4, r5
 80091e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091e4:	4601      	mov	r1, r0
 80091e6:	3b30      	subs	r3, #48	@ 0x30
 80091e8:	220a      	movs	r2, #10
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7ff ff8c 	bl	8009108 <__multadd>
 80091f0:	45a0      	cmp	r8, r4
 80091f2:	d1f5      	bne.n	80091e0 <__s2b+0x4c>
 80091f4:	f1a5 0408 	sub.w	r4, r5, #8
 80091f8:	444c      	add	r4, r9
 80091fa:	1b2d      	subs	r5, r5, r4
 80091fc:	1963      	adds	r3, r4, r5
 80091fe:	42bb      	cmp	r3, r7
 8009200:	db04      	blt.n	800920c <__s2b+0x78>
 8009202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009206:	340a      	adds	r4, #10
 8009208:	2509      	movs	r5, #9
 800920a:	e7f6      	b.n	80091fa <__s2b+0x66>
 800920c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009210:	4601      	mov	r1, r0
 8009212:	3b30      	subs	r3, #48	@ 0x30
 8009214:	220a      	movs	r2, #10
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ff76 	bl	8009108 <__multadd>
 800921c:	e7ee      	b.n	80091fc <__s2b+0x68>
 800921e:	bf00      	nop
 8009220:	0800b939 	.word	0x0800b939
 8009224:	0800b94a 	.word	0x0800b94a

08009228 <__hi0bits>:
 8009228:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800922c:	4603      	mov	r3, r0
 800922e:	bf36      	itet	cc
 8009230:	0403      	lslcc	r3, r0, #16
 8009232:	2000      	movcs	r0, #0
 8009234:	2010      	movcc	r0, #16
 8009236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800923a:	bf3c      	itt	cc
 800923c:	021b      	lslcc	r3, r3, #8
 800923e:	3008      	addcc	r0, #8
 8009240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009244:	bf3c      	itt	cc
 8009246:	011b      	lslcc	r3, r3, #4
 8009248:	3004      	addcc	r0, #4
 800924a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800924e:	bf3c      	itt	cc
 8009250:	009b      	lslcc	r3, r3, #2
 8009252:	3002      	addcc	r0, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	db05      	blt.n	8009264 <__hi0bits+0x3c>
 8009258:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800925c:	f100 0001 	add.w	r0, r0, #1
 8009260:	bf08      	it	eq
 8009262:	2020      	moveq	r0, #32
 8009264:	4770      	bx	lr

08009266 <__lo0bits>:
 8009266:	6803      	ldr	r3, [r0, #0]
 8009268:	4602      	mov	r2, r0
 800926a:	f013 0007 	ands.w	r0, r3, #7
 800926e:	d00b      	beq.n	8009288 <__lo0bits+0x22>
 8009270:	07d9      	lsls	r1, r3, #31
 8009272:	d421      	bmi.n	80092b8 <__lo0bits+0x52>
 8009274:	0798      	lsls	r0, r3, #30
 8009276:	bf49      	itett	mi
 8009278:	085b      	lsrmi	r3, r3, #1
 800927a:	089b      	lsrpl	r3, r3, #2
 800927c:	2001      	movmi	r0, #1
 800927e:	6013      	strmi	r3, [r2, #0]
 8009280:	bf5c      	itt	pl
 8009282:	6013      	strpl	r3, [r2, #0]
 8009284:	2002      	movpl	r0, #2
 8009286:	4770      	bx	lr
 8009288:	b299      	uxth	r1, r3
 800928a:	b909      	cbnz	r1, 8009290 <__lo0bits+0x2a>
 800928c:	0c1b      	lsrs	r3, r3, #16
 800928e:	2010      	movs	r0, #16
 8009290:	b2d9      	uxtb	r1, r3
 8009292:	b909      	cbnz	r1, 8009298 <__lo0bits+0x32>
 8009294:	3008      	adds	r0, #8
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	0719      	lsls	r1, r3, #28
 800929a:	bf04      	itt	eq
 800929c:	091b      	lsreq	r3, r3, #4
 800929e:	3004      	addeq	r0, #4
 80092a0:	0799      	lsls	r1, r3, #30
 80092a2:	bf04      	itt	eq
 80092a4:	089b      	lsreq	r3, r3, #2
 80092a6:	3002      	addeq	r0, #2
 80092a8:	07d9      	lsls	r1, r3, #31
 80092aa:	d403      	bmi.n	80092b4 <__lo0bits+0x4e>
 80092ac:	085b      	lsrs	r3, r3, #1
 80092ae:	f100 0001 	add.w	r0, r0, #1
 80092b2:	d003      	beq.n	80092bc <__lo0bits+0x56>
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	4770      	bx	lr
 80092b8:	2000      	movs	r0, #0
 80092ba:	4770      	bx	lr
 80092bc:	2020      	movs	r0, #32
 80092be:	4770      	bx	lr

080092c0 <__i2b>:
 80092c0:	b510      	push	{r4, lr}
 80092c2:	460c      	mov	r4, r1
 80092c4:	2101      	movs	r1, #1
 80092c6:	f7ff febd 	bl	8009044 <_Balloc>
 80092ca:	4602      	mov	r2, r0
 80092cc:	b928      	cbnz	r0, 80092da <__i2b+0x1a>
 80092ce:	4b05      	ldr	r3, [pc, #20]	@ (80092e4 <__i2b+0x24>)
 80092d0:	4805      	ldr	r0, [pc, #20]	@ (80092e8 <__i2b+0x28>)
 80092d2:	f240 1145 	movw	r1, #325	@ 0x145
 80092d6:	f001 fc33 	bl	800ab40 <__assert_func>
 80092da:	2301      	movs	r3, #1
 80092dc:	6144      	str	r4, [r0, #20]
 80092de:	6103      	str	r3, [r0, #16]
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	bf00      	nop
 80092e4:	0800b939 	.word	0x0800b939
 80092e8:	0800b94a 	.word	0x0800b94a

080092ec <__multiply>:
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	4614      	mov	r4, r2
 80092f2:	690a      	ldr	r2, [r1, #16]
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	bfa8      	it	ge
 80092fa:	4623      	movge	r3, r4
 80092fc:	460f      	mov	r7, r1
 80092fe:	bfa4      	itt	ge
 8009300:	460c      	movge	r4, r1
 8009302:	461f      	movge	r7, r3
 8009304:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009308:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800930c:	68a3      	ldr	r3, [r4, #8]
 800930e:	6861      	ldr	r1, [r4, #4]
 8009310:	eb0a 0609 	add.w	r6, sl, r9
 8009314:	42b3      	cmp	r3, r6
 8009316:	b085      	sub	sp, #20
 8009318:	bfb8      	it	lt
 800931a:	3101      	addlt	r1, #1
 800931c:	f7ff fe92 	bl	8009044 <_Balloc>
 8009320:	b930      	cbnz	r0, 8009330 <__multiply+0x44>
 8009322:	4602      	mov	r2, r0
 8009324:	4b44      	ldr	r3, [pc, #272]	@ (8009438 <__multiply+0x14c>)
 8009326:	4845      	ldr	r0, [pc, #276]	@ (800943c <__multiply+0x150>)
 8009328:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800932c:	f001 fc08 	bl	800ab40 <__assert_func>
 8009330:	f100 0514 	add.w	r5, r0, #20
 8009334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009338:	462b      	mov	r3, r5
 800933a:	2200      	movs	r2, #0
 800933c:	4543      	cmp	r3, r8
 800933e:	d321      	bcc.n	8009384 <__multiply+0x98>
 8009340:	f107 0114 	add.w	r1, r7, #20
 8009344:	f104 0214 	add.w	r2, r4, #20
 8009348:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800934c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009350:	9302      	str	r3, [sp, #8]
 8009352:	1b13      	subs	r3, r2, r4
 8009354:	3b15      	subs	r3, #21
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	3304      	adds	r3, #4
 800935c:	f104 0715 	add.w	r7, r4, #21
 8009360:	42ba      	cmp	r2, r7
 8009362:	bf38      	it	cc
 8009364:	2304      	movcc	r3, #4
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	9b02      	ldr	r3, [sp, #8]
 800936a:	9103      	str	r1, [sp, #12]
 800936c:	428b      	cmp	r3, r1
 800936e:	d80c      	bhi.n	800938a <__multiply+0x9e>
 8009370:	2e00      	cmp	r6, #0
 8009372:	dd03      	ble.n	800937c <__multiply+0x90>
 8009374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009378:	2b00      	cmp	r3, #0
 800937a:	d05b      	beq.n	8009434 <__multiply+0x148>
 800937c:	6106      	str	r6, [r0, #16]
 800937e:	b005      	add	sp, #20
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	f843 2b04 	str.w	r2, [r3], #4
 8009388:	e7d8      	b.n	800933c <__multiply+0x50>
 800938a:	f8b1 a000 	ldrh.w	sl, [r1]
 800938e:	f1ba 0f00 	cmp.w	sl, #0
 8009392:	d024      	beq.n	80093de <__multiply+0xf2>
 8009394:	f104 0e14 	add.w	lr, r4, #20
 8009398:	46a9      	mov	r9, r5
 800939a:	f04f 0c00 	mov.w	ip, #0
 800939e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093a2:	f8d9 3000 	ldr.w	r3, [r9]
 80093a6:	fa1f fb87 	uxth.w	fp, r7
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80093b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093b4:	f8d9 7000 	ldr.w	r7, [r9]
 80093b8:	4463      	add	r3, ip
 80093ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093be:	fb0a c70b 	mla	r7, sl, fp, ip
 80093c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093cc:	4572      	cmp	r2, lr
 80093ce:	f849 3b04 	str.w	r3, [r9], #4
 80093d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093d6:	d8e2      	bhi.n	800939e <__multiply+0xb2>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	f845 c003 	str.w	ip, [r5, r3]
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093e4:	3104      	adds	r1, #4
 80093e6:	f1b9 0f00 	cmp.w	r9, #0
 80093ea:	d021      	beq.n	8009430 <__multiply+0x144>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	f104 0c14 	add.w	ip, r4, #20
 80093f2:	46ae      	mov	lr, r5
 80093f4:	f04f 0a00 	mov.w	sl, #0
 80093f8:	f8bc b000 	ldrh.w	fp, [ip]
 80093fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009400:	fb09 770b 	mla	r7, r9, fp, r7
 8009404:	4457      	add	r7, sl
 8009406:	b29b      	uxth	r3, r3
 8009408:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800940c:	f84e 3b04 	str.w	r3, [lr], #4
 8009410:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009418:	f8be 3000 	ldrh.w	r3, [lr]
 800941c:	fb09 330a 	mla	r3, r9, sl, r3
 8009420:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009424:	4562      	cmp	r2, ip
 8009426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800942a:	d8e5      	bhi.n	80093f8 <__multiply+0x10c>
 800942c:	9f01      	ldr	r7, [sp, #4]
 800942e:	51eb      	str	r3, [r5, r7]
 8009430:	3504      	adds	r5, #4
 8009432:	e799      	b.n	8009368 <__multiply+0x7c>
 8009434:	3e01      	subs	r6, #1
 8009436:	e79b      	b.n	8009370 <__multiply+0x84>
 8009438:	0800b939 	.word	0x0800b939
 800943c:	0800b94a 	.word	0x0800b94a

08009440 <__pow5mult>:
 8009440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009444:	4615      	mov	r5, r2
 8009446:	f012 0203 	ands.w	r2, r2, #3
 800944a:	4607      	mov	r7, r0
 800944c:	460e      	mov	r6, r1
 800944e:	d007      	beq.n	8009460 <__pow5mult+0x20>
 8009450:	4c25      	ldr	r4, [pc, #148]	@ (80094e8 <__pow5mult+0xa8>)
 8009452:	3a01      	subs	r2, #1
 8009454:	2300      	movs	r3, #0
 8009456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800945a:	f7ff fe55 	bl	8009108 <__multadd>
 800945e:	4606      	mov	r6, r0
 8009460:	10ad      	asrs	r5, r5, #2
 8009462:	d03d      	beq.n	80094e0 <__pow5mult+0xa0>
 8009464:	69fc      	ldr	r4, [r7, #28]
 8009466:	b97c      	cbnz	r4, 8009488 <__pow5mult+0x48>
 8009468:	2010      	movs	r0, #16
 800946a:	f7fd fe75 	bl	8007158 <malloc>
 800946e:	4602      	mov	r2, r0
 8009470:	61f8      	str	r0, [r7, #28]
 8009472:	b928      	cbnz	r0, 8009480 <__pow5mult+0x40>
 8009474:	4b1d      	ldr	r3, [pc, #116]	@ (80094ec <__pow5mult+0xac>)
 8009476:	481e      	ldr	r0, [pc, #120]	@ (80094f0 <__pow5mult+0xb0>)
 8009478:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800947c:	f001 fb60 	bl	800ab40 <__assert_func>
 8009480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009484:	6004      	str	r4, [r0, #0]
 8009486:	60c4      	str	r4, [r0, #12]
 8009488:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800948c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009490:	b94c      	cbnz	r4, 80094a6 <__pow5mult+0x66>
 8009492:	f240 2171 	movw	r1, #625	@ 0x271
 8009496:	4638      	mov	r0, r7
 8009498:	f7ff ff12 	bl	80092c0 <__i2b>
 800949c:	2300      	movs	r3, #0
 800949e:	f8c8 0008 	str.w	r0, [r8, #8]
 80094a2:	4604      	mov	r4, r0
 80094a4:	6003      	str	r3, [r0, #0]
 80094a6:	f04f 0900 	mov.w	r9, #0
 80094aa:	07eb      	lsls	r3, r5, #31
 80094ac:	d50a      	bpl.n	80094c4 <__pow5mult+0x84>
 80094ae:	4631      	mov	r1, r6
 80094b0:	4622      	mov	r2, r4
 80094b2:	4638      	mov	r0, r7
 80094b4:	f7ff ff1a 	bl	80092ec <__multiply>
 80094b8:	4631      	mov	r1, r6
 80094ba:	4680      	mov	r8, r0
 80094bc:	4638      	mov	r0, r7
 80094be:	f7ff fe01 	bl	80090c4 <_Bfree>
 80094c2:	4646      	mov	r6, r8
 80094c4:	106d      	asrs	r5, r5, #1
 80094c6:	d00b      	beq.n	80094e0 <__pow5mult+0xa0>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	b938      	cbnz	r0, 80094dc <__pow5mult+0x9c>
 80094cc:	4622      	mov	r2, r4
 80094ce:	4621      	mov	r1, r4
 80094d0:	4638      	mov	r0, r7
 80094d2:	f7ff ff0b 	bl	80092ec <__multiply>
 80094d6:	6020      	str	r0, [r4, #0]
 80094d8:	f8c0 9000 	str.w	r9, [r0]
 80094dc:	4604      	mov	r4, r0
 80094de:	e7e4      	b.n	80094aa <__pow5mult+0x6a>
 80094e0:	4630      	mov	r0, r6
 80094e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e6:	bf00      	nop
 80094e8:	0800b9a4 	.word	0x0800b9a4
 80094ec:	0800b8ca 	.word	0x0800b8ca
 80094f0:	0800b94a 	.word	0x0800b94a

080094f4 <__lshift>:
 80094f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	460c      	mov	r4, r1
 80094fa:	6849      	ldr	r1, [r1, #4]
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	4607      	mov	r7, r0
 8009506:	4691      	mov	r9, r2
 8009508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800950c:	f108 0601 	add.w	r6, r8, #1
 8009510:	42b3      	cmp	r3, r6
 8009512:	db0b      	blt.n	800952c <__lshift+0x38>
 8009514:	4638      	mov	r0, r7
 8009516:	f7ff fd95 	bl	8009044 <_Balloc>
 800951a:	4605      	mov	r5, r0
 800951c:	b948      	cbnz	r0, 8009532 <__lshift+0x3e>
 800951e:	4602      	mov	r2, r0
 8009520:	4b28      	ldr	r3, [pc, #160]	@ (80095c4 <__lshift+0xd0>)
 8009522:	4829      	ldr	r0, [pc, #164]	@ (80095c8 <__lshift+0xd4>)
 8009524:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009528:	f001 fb0a 	bl	800ab40 <__assert_func>
 800952c:	3101      	adds	r1, #1
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	e7ee      	b.n	8009510 <__lshift+0x1c>
 8009532:	2300      	movs	r3, #0
 8009534:	f100 0114 	add.w	r1, r0, #20
 8009538:	f100 0210 	add.w	r2, r0, #16
 800953c:	4618      	mov	r0, r3
 800953e:	4553      	cmp	r3, sl
 8009540:	db33      	blt.n	80095aa <__lshift+0xb6>
 8009542:	6920      	ldr	r0, [r4, #16]
 8009544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009548:	f104 0314 	add.w	r3, r4, #20
 800954c:	f019 091f 	ands.w	r9, r9, #31
 8009550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009558:	d02b      	beq.n	80095b2 <__lshift+0xbe>
 800955a:	f1c9 0e20 	rsb	lr, r9, #32
 800955e:	468a      	mov	sl, r1
 8009560:	2200      	movs	r2, #0
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	fa00 f009 	lsl.w	r0, r0, r9
 8009568:	4310      	orrs	r0, r2
 800956a:	f84a 0b04 	str.w	r0, [sl], #4
 800956e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009572:	459c      	cmp	ip, r3
 8009574:	fa22 f20e 	lsr.w	r2, r2, lr
 8009578:	d8f3      	bhi.n	8009562 <__lshift+0x6e>
 800957a:	ebac 0304 	sub.w	r3, ip, r4
 800957e:	3b15      	subs	r3, #21
 8009580:	f023 0303 	bic.w	r3, r3, #3
 8009584:	3304      	adds	r3, #4
 8009586:	f104 0015 	add.w	r0, r4, #21
 800958a:	4584      	cmp	ip, r0
 800958c:	bf38      	it	cc
 800958e:	2304      	movcc	r3, #4
 8009590:	50ca      	str	r2, [r1, r3]
 8009592:	b10a      	cbz	r2, 8009598 <__lshift+0xa4>
 8009594:	f108 0602 	add.w	r6, r8, #2
 8009598:	3e01      	subs	r6, #1
 800959a:	4638      	mov	r0, r7
 800959c:	612e      	str	r6, [r5, #16]
 800959e:	4621      	mov	r1, r4
 80095a0:	f7ff fd90 	bl	80090c4 <_Bfree>
 80095a4:	4628      	mov	r0, r5
 80095a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ae:	3301      	adds	r3, #1
 80095b0:	e7c5      	b.n	800953e <__lshift+0x4a>
 80095b2:	3904      	subs	r1, #4
 80095b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095bc:	459c      	cmp	ip, r3
 80095be:	d8f9      	bhi.n	80095b4 <__lshift+0xc0>
 80095c0:	e7ea      	b.n	8009598 <__lshift+0xa4>
 80095c2:	bf00      	nop
 80095c4:	0800b939 	.word	0x0800b939
 80095c8:	0800b94a 	.word	0x0800b94a

080095cc <__mcmp>:
 80095cc:	690a      	ldr	r2, [r1, #16]
 80095ce:	4603      	mov	r3, r0
 80095d0:	6900      	ldr	r0, [r0, #16]
 80095d2:	1a80      	subs	r0, r0, r2
 80095d4:	b530      	push	{r4, r5, lr}
 80095d6:	d10e      	bne.n	80095f6 <__mcmp+0x2a>
 80095d8:	3314      	adds	r3, #20
 80095da:	3114      	adds	r1, #20
 80095dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095ec:	4295      	cmp	r5, r2
 80095ee:	d003      	beq.n	80095f8 <__mcmp+0x2c>
 80095f0:	d205      	bcs.n	80095fe <__mcmp+0x32>
 80095f2:	f04f 30ff 	mov.w	r0, #4294967295
 80095f6:	bd30      	pop	{r4, r5, pc}
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d3f3      	bcc.n	80095e4 <__mcmp+0x18>
 80095fc:	e7fb      	b.n	80095f6 <__mcmp+0x2a>
 80095fe:	2001      	movs	r0, #1
 8009600:	e7f9      	b.n	80095f6 <__mcmp+0x2a>
	...

08009604 <__mdiff>:
 8009604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	4689      	mov	r9, r1
 800960a:	4606      	mov	r6, r0
 800960c:	4611      	mov	r1, r2
 800960e:	4648      	mov	r0, r9
 8009610:	4614      	mov	r4, r2
 8009612:	f7ff ffdb 	bl	80095cc <__mcmp>
 8009616:	1e05      	subs	r5, r0, #0
 8009618:	d112      	bne.n	8009640 <__mdiff+0x3c>
 800961a:	4629      	mov	r1, r5
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff fd11 	bl	8009044 <_Balloc>
 8009622:	4602      	mov	r2, r0
 8009624:	b928      	cbnz	r0, 8009632 <__mdiff+0x2e>
 8009626:	4b3f      	ldr	r3, [pc, #252]	@ (8009724 <__mdiff+0x120>)
 8009628:	f240 2137 	movw	r1, #567	@ 0x237
 800962c:	483e      	ldr	r0, [pc, #248]	@ (8009728 <__mdiff+0x124>)
 800962e:	f001 fa87 	bl	800ab40 <__assert_func>
 8009632:	2301      	movs	r3, #1
 8009634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009638:	4610      	mov	r0, r2
 800963a:	b003      	add	sp, #12
 800963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009640:	bfbc      	itt	lt
 8009642:	464b      	movlt	r3, r9
 8009644:	46a1      	movlt	r9, r4
 8009646:	4630      	mov	r0, r6
 8009648:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800964c:	bfba      	itte	lt
 800964e:	461c      	movlt	r4, r3
 8009650:	2501      	movlt	r5, #1
 8009652:	2500      	movge	r5, #0
 8009654:	f7ff fcf6 	bl	8009044 <_Balloc>
 8009658:	4602      	mov	r2, r0
 800965a:	b918      	cbnz	r0, 8009664 <__mdiff+0x60>
 800965c:	4b31      	ldr	r3, [pc, #196]	@ (8009724 <__mdiff+0x120>)
 800965e:	f240 2145 	movw	r1, #581	@ 0x245
 8009662:	e7e3      	b.n	800962c <__mdiff+0x28>
 8009664:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009668:	6926      	ldr	r6, [r4, #16]
 800966a:	60c5      	str	r5, [r0, #12]
 800966c:	f109 0310 	add.w	r3, r9, #16
 8009670:	f109 0514 	add.w	r5, r9, #20
 8009674:	f104 0e14 	add.w	lr, r4, #20
 8009678:	f100 0b14 	add.w	fp, r0, #20
 800967c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009680:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	46d9      	mov	r9, fp
 8009688:	f04f 0c00 	mov.w	ip, #0
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009692:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	fa1f f38a 	uxth.w	r3, sl
 800969c:	4619      	mov	r1, r3
 800969e:	b283      	uxth	r3, r0
 80096a0:	1acb      	subs	r3, r1, r3
 80096a2:	0c00      	lsrs	r0, r0, #16
 80096a4:	4463      	add	r3, ip
 80096a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096b4:	4576      	cmp	r6, lr
 80096b6:	f849 3b04 	str.w	r3, [r9], #4
 80096ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096be:	d8e5      	bhi.n	800968c <__mdiff+0x88>
 80096c0:	1b33      	subs	r3, r6, r4
 80096c2:	3b15      	subs	r3, #21
 80096c4:	f023 0303 	bic.w	r3, r3, #3
 80096c8:	3415      	adds	r4, #21
 80096ca:	3304      	adds	r3, #4
 80096cc:	42a6      	cmp	r6, r4
 80096ce:	bf38      	it	cc
 80096d0:	2304      	movcc	r3, #4
 80096d2:	441d      	add	r5, r3
 80096d4:	445b      	add	r3, fp
 80096d6:	461e      	mov	r6, r3
 80096d8:	462c      	mov	r4, r5
 80096da:	4544      	cmp	r4, r8
 80096dc:	d30e      	bcc.n	80096fc <__mdiff+0xf8>
 80096de:	f108 0103 	add.w	r1, r8, #3
 80096e2:	1b49      	subs	r1, r1, r5
 80096e4:	f021 0103 	bic.w	r1, r1, #3
 80096e8:	3d03      	subs	r5, #3
 80096ea:	45a8      	cmp	r8, r5
 80096ec:	bf38      	it	cc
 80096ee:	2100      	movcc	r1, #0
 80096f0:	440b      	add	r3, r1
 80096f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096f6:	b191      	cbz	r1, 800971e <__mdiff+0x11a>
 80096f8:	6117      	str	r7, [r2, #16]
 80096fa:	e79d      	b.n	8009638 <__mdiff+0x34>
 80096fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8009700:	46e6      	mov	lr, ip
 8009702:	0c08      	lsrs	r0, r1, #16
 8009704:	fa1c fc81 	uxtah	ip, ip, r1
 8009708:	4471      	add	r1, lr
 800970a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800970e:	b289      	uxth	r1, r1
 8009710:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009714:	f846 1b04 	str.w	r1, [r6], #4
 8009718:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800971c:	e7dd      	b.n	80096da <__mdiff+0xd6>
 800971e:	3f01      	subs	r7, #1
 8009720:	e7e7      	b.n	80096f2 <__mdiff+0xee>
 8009722:	bf00      	nop
 8009724:	0800b939 	.word	0x0800b939
 8009728:	0800b94a 	.word	0x0800b94a

0800972c <__ulp>:
 800972c:	b082      	sub	sp, #8
 800972e:	ed8d 0b00 	vstr	d0, [sp]
 8009732:	9a01      	ldr	r2, [sp, #4]
 8009734:	4b0f      	ldr	r3, [pc, #60]	@ (8009774 <__ulp+0x48>)
 8009736:	4013      	ands	r3, r2
 8009738:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800973c:	2b00      	cmp	r3, #0
 800973e:	dc08      	bgt.n	8009752 <__ulp+0x26>
 8009740:	425b      	negs	r3, r3
 8009742:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009746:	ea4f 5223 	mov.w	r2, r3, asr #20
 800974a:	da04      	bge.n	8009756 <__ulp+0x2a>
 800974c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009750:	4113      	asrs	r3, r2
 8009752:	2200      	movs	r2, #0
 8009754:	e008      	b.n	8009768 <__ulp+0x3c>
 8009756:	f1a2 0314 	sub.w	r3, r2, #20
 800975a:	2b1e      	cmp	r3, #30
 800975c:	bfda      	itte	le
 800975e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009762:	40da      	lsrle	r2, r3
 8009764:	2201      	movgt	r2, #1
 8009766:	2300      	movs	r3, #0
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	ec41 0b10 	vmov	d0, r0, r1
 8009770:	b002      	add	sp, #8
 8009772:	4770      	bx	lr
 8009774:	7ff00000 	.word	0x7ff00000

08009778 <__b2d>:
 8009778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977c:	6906      	ldr	r6, [r0, #16]
 800977e:	f100 0814 	add.w	r8, r0, #20
 8009782:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009786:	1f37      	subs	r7, r6, #4
 8009788:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800978c:	4610      	mov	r0, r2
 800978e:	f7ff fd4b 	bl	8009228 <__hi0bits>
 8009792:	f1c0 0320 	rsb	r3, r0, #32
 8009796:	280a      	cmp	r0, #10
 8009798:	600b      	str	r3, [r1, #0]
 800979a:	491b      	ldr	r1, [pc, #108]	@ (8009808 <__b2d+0x90>)
 800979c:	dc15      	bgt.n	80097ca <__b2d+0x52>
 800979e:	f1c0 0c0b 	rsb	ip, r0, #11
 80097a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80097a6:	45b8      	cmp	r8, r7
 80097a8:	ea43 0501 	orr.w	r5, r3, r1
 80097ac:	bf34      	ite	cc
 80097ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097b2:	2300      	movcs	r3, #0
 80097b4:	3015      	adds	r0, #21
 80097b6:	fa02 f000 	lsl.w	r0, r2, r0
 80097ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80097be:	4303      	orrs	r3, r0
 80097c0:	461c      	mov	r4, r3
 80097c2:	ec45 4b10 	vmov	d0, r4, r5
 80097c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ca:	45b8      	cmp	r8, r7
 80097cc:	bf3a      	itte	cc
 80097ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80097d6:	2300      	movcs	r3, #0
 80097d8:	380b      	subs	r0, #11
 80097da:	d012      	beq.n	8009802 <__b2d+0x8a>
 80097dc:	f1c0 0120 	rsb	r1, r0, #32
 80097e0:	fa23 f401 	lsr.w	r4, r3, r1
 80097e4:	4082      	lsls	r2, r0
 80097e6:	4322      	orrs	r2, r4
 80097e8:	4547      	cmp	r7, r8
 80097ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80097ee:	bf8c      	ite	hi
 80097f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80097f4:	2200      	movls	r2, #0
 80097f6:	4083      	lsls	r3, r0
 80097f8:	40ca      	lsrs	r2, r1
 80097fa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80097fe:	4313      	orrs	r3, r2
 8009800:	e7de      	b.n	80097c0 <__b2d+0x48>
 8009802:	ea42 0501 	orr.w	r5, r2, r1
 8009806:	e7db      	b.n	80097c0 <__b2d+0x48>
 8009808:	3ff00000 	.word	0x3ff00000

0800980c <__d2b>:
 800980c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009810:	460f      	mov	r7, r1
 8009812:	2101      	movs	r1, #1
 8009814:	ec59 8b10 	vmov	r8, r9, d0
 8009818:	4616      	mov	r6, r2
 800981a:	f7ff fc13 	bl	8009044 <_Balloc>
 800981e:	4604      	mov	r4, r0
 8009820:	b930      	cbnz	r0, 8009830 <__d2b+0x24>
 8009822:	4602      	mov	r2, r0
 8009824:	4b23      	ldr	r3, [pc, #140]	@ (80098b4 <__d2b+0xa8>)
 8009826:	4824      	ldr	r0, [pc, #144]	@ (80098b8 <__d2b+0xac>)
 8009828:	f240 310f 	movw	r1, #783	@ 0x30f
 800982c:	f001 f988 	bl	800ab40 <__assert_func>
 8009830:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009834:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009838:	b10d      	cbz	r5, 800983e <__d2b+0x32>
 800983a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	f1b8 0300 	subs.w	r3, r8, #0
 8009844:	d023      	beq.n	800988e <__d2b+0x82>
 8009846:	4668      	mov	r0, sp
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	f7ff fd0c 	bl	8009266 <__lo0bits>
 800984e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009852:	b1d0      	cbz	r0, 800988a <__d2b+0x7e>
 8009854:	f1c0 0320 	rsb	r3, r0, #32
 8009858:	fa02 f303 	lsl.w	r3, r2, r3
 800985c:	430b      	orrs	r3, r1
 800985e:	40c2      	lsrs	r2, r0
 8009860:	6163      	str	r3, [r4, #20]
 8009862:	9201      	str	r2, [sp, #4]
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	61a3      	str	r3, [r4, #24]
 8009868:	2b00      	cmp	r3, #0
 800986a:	bf0c      	ite	eq
 800986c:	2201      	moveq	r2, #1
 800986e:	2202      	movne	r2, #2
 8009870:	6122      	str	r2, [r4, #16]
 8009872:	b1a5      	cbz	r5, 800989e <__d2b+0x92>
 8009874:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009878:	4405      	add	r5, r0
 800987a:	603d      	str	r5, [r7, #0]
 800987c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009880:	6030      	str	r0, [r6, #0]
 8009882:	4620      	mov	r0, r4
 8009884:	b003      	add	sp, #12
 8009886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800988a:	6161      	str	r1, [r4, #20]
 800988c:	e7ea      	b.n	8009864 <__d2b+0x58>
 800988e:	a801      	add	r0, sp, #4
 8009890:	f7ff fce9 	bl	8009266 <__lo0bits>
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	6163      	str	r3, [r4, #20]
 8009898:	3020      	adds	r0, #32
 800989a:	2201      	movs	r2, #1
 800989c:	e7e8      	b.n	8009870 <__d2b+0x64>
 800989e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80098a6:	6038      	str	r0, [r7, #0]
 80098a8:	6918      	ldr	r0, [r3, #16]
 80098aa:	f7ff fcbd 	bl	8009228 <__hi0bits>
 80098ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098b2:	e7e5      	b.n	8009880 <__d2b+0x74>
 80098b4:	0800b939 	.word	0x0800b939
 80098b8:	0800b94a 	.word	0x0800b94a

080098bc <__ratio>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	b085      	sub	sp, #20
 80098c2:	e9cd 1000 	strd	r1, r0, [sp]
 80098c6:	a902      	add	r1, sp, #8
 80098c8:	f7ff ff56 	bl	8009778 <__b2d>
 80098cc:	9800      	ldr	r0, [sp, #0]
 80098ce:	a903      	add	r1, sp, #12
 80098d0:	ec55 4b10 	vmov	r4, r5, d0
 80098d4:	f7ff ff50 	bl	8009778 <__b2d>
 80098d8:	9b01      	ldr	r3, [sp, #4]
 80098da:	6919      	ldr	r1, [r3, #16]
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	1ac9      	subs	r1, r1, r3
 80098e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	ec5b ab10 	vmov	sl, fp, d0
 80098ec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bfce      	itee	gt
 80098f4:	462a      	movgt	r2, r5
 80098f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098fa:	465a      	movle	r2, fp
 80098fc:	462f      	mov	r7, r5
 80098fe:	46d9      	mov	r9, fp
 8009900:	bfcc      	ite	gt
 8009902:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009906:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800990a:	464b      	mov	r3, r9
 800990c:	4652      	mov	r2, sl
 800990e:	4620      	mov	r0, r4
 8009910:	4639      	mov	r1, r7
 8009912:	f7f6 ffab 	bl	800086c <__aeabi_ddiv>
 8009916:	ec41 0b10 	vmov	d0, r0, r1
 800991a:	b005      	add	sp, #20
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009920 <__copybits>:
 8009920:	3901      	subs	r1, #1
 8009922:	b570      	push	{r4, r5, r6, lr}
 8009924:	1149      	asrs	r1, r1, #5
 8009926:	6914      	ldr	r4, [r2, #16]
 8009928:	3101      	adds	r1, #1
 800992a:	f102 0314 	add.w	r3, r2, #20
 800992e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009932:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009936:	1f05      	subs	r5, r0, #4
 8009938:	42a3      	cmp	r3, r4
 800993a:	d30c      	bcc.n	8009956 <__copybits+0x36>
 800993c:	1aa3      	subs	r3, r4, r2
 800993e:	3b11      	subs	r3, #17
 8009940:	f023 0303 	bic.w	r3, r3, #3
 8009944:	3211      	adds	r2, #17
 8009946:	42a2      	cmp	r2, r4
 8009948:	bf88      	it	hi
 800994a:	2300      	movhi	r3, #0
 800994c:	4418      	add	r0, r3
 800994e:	2300      	movs	r3, #0
 8009950:	4288      	cmp	r0, r1
 8009952:	d305      	bcc.n	8009960 <__copybits+0x40>
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	f853 6b04 	ldr.w	r6, [r3], #4
 800995a:	f845 6f04 	str.w	r6, [r5, #4]!
 800995e:	e7eb      	b.n	8009938 <__copybits+0x18>
 8009960:	f840 3b04 	str.w	r3, [r0], #4
 8009964:	e7f4      	b.n	8009950 <__copybits+0x30>

08009966 <__any_on>:
 8009966:	f100 0214 	add.w	r2, r0, #20
 800996a:	6900      	ldr	r0, [r0, #16]
 800996c:	114b      	asrs	r3, r1, #5
 800996e:	4298      	cmp	r0, r3
 8009970:	b510      	push	{r4, lr}
 8009972:	db11      	blt.n	8009998 <__any_on+0x32>
 8009974:	dd0a      	ble.n	800998c <__any_on+0x26>
 8009976:	f011 011f 	ands.w	r1, r1, #31
 800997a:	d007      	beq.n	800998c <__any_on+0x26>
 800997c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009980:	fa24 f001 	lsr.w	r0, r4, r1
 8009984:	fa00 f101 	lsl.w	r1, r0, r1
 8009988:	428c      	cmp	r4, r1
 800998a:	d10b      	bne.n	80099a4 <__any_on+0x3e>
 800998c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009990:	4293      	cmp	r3, r2
 8009992:	d803      	bhi.n	800999c <__any_on+0x36>
 8009994:	2000      	movs	r0, #0
 8009996:	bd10      	pop	{r4, pc}
 8009998:	4603      	mov	r3, r0
 800999a:	e7f7      	b.n	800998c <__any_on+0x26>
 800999c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099a0:	2900      	cmp	r1, #0
 80099a2:	d0f5      	beq.n	8009990 <__any_on+0x2a>
 80099a4:	2001      	movs	r0, #1
 80099a6:	e7f6      	b.n	8009996 <__any_on+0x30>

080099a8 <sulp>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	4604      	mov	r4, r0
 80099ac:	460d      	mov	r5, r1
 80099ae:	ec45 4b10 	vmov	d0, r4, r5
 80099b2:	4616      	mov	r6, r2
 80099b4:	f7ff feba 	bl	800972c <__ulp>
 80099b8:	ec51 0b10 	vmov	r0, r1, d0
 80099bc:	b17e      	cbz	r6, 80099de <sulp+0x36>
 80099be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80099c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dd09      	ble.n	80099de <sulp+0x36>
 80099ca:	051b      	lsls	r3, r3, #20
 80099cc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80099d0:	2400      	movs	r4, #0
 80099d2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80099d6:	4622      	mov	r2, r4
 80099d8:	462b      	mov	r3, r5
 80099da:	f7f6 fe1d 	bl	8000618 <__aeabi_dmul>
 80099de:	ec41 0b10 	vmov	d0, r0, r1
 80099e2:	bd70      	pop	{r4, r5, r6, pc}
 80099e4:	0000      	movs	r0, r0
	...

080099e8 <_strtod_l>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	b09f      	sub	sp, #124	@ 0x7c
 80099ee:	460c      	mov	r4, r1
 80099f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80099f2:	2200      	movs	r2, #0
 80099f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80099f6:	9005      	str	r0, [sp, #20]
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	f04f 0b00 	mov.w	fp, #0
 8009a00:	460a      	mov	r2, r1
 8009a02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a04:	7811      	ldrb	r1, [r2, #0]
 8009a06:	292b      	cmp	r1, #43	@ 0x2b
 8009a08:	d04a      	beq.n	8009aa0 <_strtod_l+0xb8>
 8009a0a:	d838      	bhi.n	8009a7e <_strtod_l+0x96>
 8009a0c:	290d      	cmp	r1, #13
 8009a0e:	d832      	bhi.n	8009a76 <_strtod_l+0x8e>
 8009a10:	2908      	cmp	r1, #8
 8009a12:	d832      	bhi.n	8009a7a <_strtod_l+0x92>
 8009a14:	2900      	cmp	r1, #0
 8009a16:	d03b      	beq.n	8009a90 <_strtod_l+0xa8>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a1e:	782a      	ldrb	r2, [r5, #0]
 8009a20:	2a30      	cmp	r2, #48	@ 0x30
 8009a22:	f040 80b3 	bne.w	8009b8c <_strtod_l+0x1a4>
 8009a26:	786a      	ldrb	r2, [r5, #1]
 8009a28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a2c:	2a58      	cmp	r2, #88	@ 0x58
 8009a2e:	d16e      	bne.n	8009b0e <_strtod_l+0x126>
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4a8e      	ldr	r2, [pc, #568]	@ (8009c74 <_strtod_l+0x28c>)
 8009a3c:	9805      	ldr	r0, [sp, #20]
 8009a3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a40:	a919      	add	r1, sp, #100	@ 0x64
 8009a42:	f001 f903 	bl	800ac4c <__gethex>
 8009a46:	f010 060f 	ands.w	r6, r0, #15
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	d005      	beq.n	8009a5a <_strtod_l+0x72>
 8009a4e:	2e06      	cmp	r6, #6
 8009a50:	d128      	bne.n	8009aa4 <_strtod_l+0xbc>
 8009a52:	3501      	adds	r5, #1
 8009a54:	2300      	movs	r3, #0
 8009a56:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 858e 	bne.w	800a57e <_strtod_l+0xb96>
 8009a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a64:	b1cb      	cbz	r3, 8009a9a <_strtod_l+0xb2>
 8009a66:	4652      	mov	r2, sl
 8009a68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009a6c:	ec43 2b10 	vmov	d0, r2, r3
 8009a70:	b01f      	add	sp, #124	@ 0x7c
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	2920      	cmp	r1, #32
 8009a78:	d1ce      	bne.n	8009a18 <_strtod_l+0x30>
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	e7c1      	b.n	8009a02 <_strtod_l+0x1a>
 8009a7e:	292d      	cmp	r1, #45	@ 0x2d
 8009a80:	d1ca      	bne.n	8009a18 <_strtod_l+0x30>
 8009a82:	2101      	movs	r1, #1
 8009a84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a86:	1c51      	adds	r1, r2, #1
 8009a88:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a8a:	7852      	ldrb	r2, [r2, #1]
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	d1c5      	bne.n	8009a1c <_strtod_l+0x34>
 8009a90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a92:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 8570 	bne.w	800a57a <_strtod_l+0xb92>
 8009a9a:	4652      	mov	r2, sl
 8009a9c:	465b      	mov	r3, fp
 8009a9e:	e7e5      	b.n	8009a6c <_strtod_l+0x84>
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	e7ef      	b.n	8009a84 <_strtod_l+0x9c>
 8009aa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009aa6:	b13a      	cbz	r2, 8009ab8 <_strtod_l+0xd0>
 8009aa8:	2135      	movs	r1, #53	@ 0x35
 8009aaa:	a81c      	add	r0, sp, #112	@ 0x70
 8009aac:	f7ff ff38 	bl	8009920 <__copybits>
 8009ab0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	f7ff fb06 	bl	80090c4 <_Bfree>
 8009ab8:	3e01      	subs	r6, #1
 8009aba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009abc:	2e04      	cmp	r6, #4
 8009abe:	d806      	bhi.n	8009ace <_strtod_l+0xe6>
 8009ac0:	e8df f006 	tbb	[pc, r6]
 8009ac4:	201d0314 	.word	0x201d0314
 8009ac8:	14          	.byte	0x14
 8009ac9:	00          	.byte	0x00
 8009aca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ace:	05e1      	lsls	r1, r4, #23
 8009ad0:	bf48      	it	mi
 8009ad2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ada:	0d1b      	lsrs	r3, r3, #20
 8009adc:	051b      	lsls	r3, r3, #20
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1bb      	bne.n	8009a5a <_strtod_l+0x72>
 8009ae2:	f7fe fbe3 	bl	80082ac <__errno>
 8009ae6:	2322      	movs	r3, #34	@ 0x22
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	e7b6      	b.n	8009a5a <_strtod_l+0x72>
 8009aec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009af0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009af4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009af8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009afc:	e7e7      	b.n	8009ace <_strtod_l+0xe6>
 8009afe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009c7c <_strtod_l+0x294>
 8009b02:	e7e4      	b.n	8009ace <_strtod_l+0xe6>
 8009b04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b08:	f04f 3aff 	mov.w	sl, #4294967295
 8009b0c:	e7df      	b.n	8009ace <_strtod_l+0xe6>
 8009b0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b30      	cmp	r3, #48	@ 0x30
 8009b18:	d0f9      	beq.n	8009b0e <_strtod_l+0x126>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d09d      	beq.n	8009a5a <_strtod_l+0x72>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b24:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b26:	2300      	movs	r3, #0
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b2c:	461f      	mov	r7, r3
 8009b2e:	220a      	movs	r2, #10
 8009b30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b32:	7805      	ldrb	r5, [r0, #0]
 8009b34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b38:	b2d9      	uxtb	r1, r3
 8009b3a:	2909      	cmp	r1, #9
 8009b3c:	d928      	bls.n	8009b90 <_strtod_l+0x1a8>
 8009b3e:	494e      	ldr	r1, [pc, #312]	@ (8009c78 <_strtod_l+0x290>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	f000 ffd5 	bl	800aaf0 <strncmp>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d032      	beq.n	8009bb0 <_strtod_l+0x1c8>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4681      	mov	r9, r0
 8009b50:	463d      	mov	r5, r7
 8009b52:	4603      	mov	r3, r0
 8009b54:	2a65      	cmp	r2, #101	@ 0x65
 8009b56:	d001      	beq.n	8009b5c <_strtod_l+0x174>
 8009b58:	2a45      	cmp	r2, #69	@ 0x45
 8009b5a:	d114      	bne.n	8009b86 <_strtod_l+0x19e>
 8009b5c:	b91d      	cbnz	r5, 8009b66 <_strtod_l+0x17e>
 8009b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b60:	4302      	orrs	r2, r0
 8009b62:	d095      	beq.n	8009a90 <_strtod_l+0xa8>
 8009b64:	2500      	movs	r5, #0
 8009b66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b68:	1c62      	adds	r2, r4, #1
 8009b6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b6c:	7862      	ldrb	r2, [r4, #1]
 8009b6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b70:	d077      	beq.n	8009c62 <_strtod_l+0x27a>
 8009b72:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b74:	d07b      	beq.n	8009c6e <_strtod_l+0x286>
 8009b76:	f04f 0c00 	mov.w	ip, #0
 8009b7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b7e:	2909      	cmp	r1, #9
 8009b80:	f240 8082 	bls.w	8009c88 <_strtod_l+0x2a0>
 8009b84:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b86:	f04f 0800 	mov.w	r8, #0
 8009b8a:	e0a2      	b.n	8009cd2 <_strtod_l+0x2ea>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e7c7      	b.n	8009b20 <_strtod_l+0x138>
 8009b90:	2f08      	cmp	r7, #8
 8009b92:	bfd5      	itete	le
 8009b94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009b96:	9908      	ldrgt	r1, [sp, #32]
 8009b98:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009ba0:	f100 0001 	add.w	r0, r0, #1
 8009ba4:	bfd4      	ite	le
 8009ba6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ba8:	9308      	strgt	r3, [sp, #32]
 8009baa:	3701      	adds	r7, #1
 8009bac:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bae:	e7bf      	b.n	8009b30 <_strtod_l+0x148>
 8009bb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bb6:	785a      	ldrb	r2, [r3, #1]
 8009bb8:	b37f      	cbz	r7, 8009c1a <_strtod_l+0x232>
 8009bba:	4681      	mov	r9, r0
 8009bbc:	463d      	mov	r5, r7
 8009bbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009bc2:	2b09      	cmp	r3, #9
 8009bc4:	d912      	bls.n	8009bec <_strtod_l+0x204>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7c4      	b.n	8009b54 <_strtod_l+0x16c>
 8009bca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bd0:	785a      	ldrb	r2, [r3, #1]
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	2a30      	cmp	r2, #48	@ 0x30
 8009bd6:	d0f8      	beq.n	8009bca <_strtod_l+0x1e2>
 8009bd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	f200 84d3 	bhi.w	800a588 <_strtod_l+0xba0>
 8009be2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009be6:	4681      	mov	r9, r0
 8009be8:	2000      	movs	r0, #0
 8009bea:	4605      	mov	r5, r0
 8009bec:	3a30      	subs	r2, #48	@ 0x30
 8009bee:	f100 0301 	add.w	r3, r0, #1
 8009bf2:	d02a      	beq.n	8009c4a <_strtod_l+0x262>
 8009bf4:	4499      	add	r9, r3
 8009bf6:	eb00 0c05 	add.w	ip, r0, r5
 8009bfa:	462b      	mov	r3, r5
 8009bfc:	210a      	movs	r1, #10
 8009bfe:	4563      	cmp	r3, ip
 8009c00:	d10d      	bne.n	8009c1e <_strtod_l+0x236>
 8009c02:	1c69      	adds	r1, r5, #1
 8009c04:	4401      	add	r1, r0
 8009c06:	4428      	add	r0, r5
 8009c08:	2808      	cmp	r0, #8
 8009c0a:	dc16      	bgt.n	8009c3a <_strtod_l+0x252>
 8009c0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c0e:	230a      	movs	r3, #10
 8009c10:	fb03 2300 	mla	r3, r3, r0, r2
 8009c14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c16:	2300      	movs	r3, #0
 8009c18:	e018      	b.n	8009c4c <_strtod_l+0x264>
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	e7da      	b.n	8009bd4 <_strtod_l+0x1ec>
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	f103 0301 	add.w	r3, r3, #1
 8009c24:	dc03      	bgt.n	8009c2e <_strtod_l+0x246>
 8009c26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c28:	434e      	muls	r6, r1
 8009c2a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c2c:	e7e7      	b.n	8009bfe <_strtod_l+0x216>
 8009c2e:	2b10      	cmp	r3, #16
 8009c30:	bfde      	ittt	le
 8009c32:	9e08      	ldrle	r6, [sp, #32]
 8009c34:	434e      	mulle	r6, r1
 8009c36:	9608      	strle	r6, [sp, #32]
 8009c38:	e7e1      	b.n	8009bfe <_strtod_l+0x216>
 8009c3a:	280f      	cmp	r0, #15
 8009c3c:	dceb      	bgt.n	8009c16 <_strtod_l+0x22e>
 8009c3e:	9808      	ldr	r0, [sp, #32]
 8009c40:	230a      	movs	r3, #10
 8009c42:	fb03 2300 	mla	r3, r3, r0, r2
 8009c46:	9308      	str	r3, [sp, #32]
 8009c48:	e7e5      	b.n	8009c16 <_strtod_l+0x22e>
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c4e:	1c50      	adds	r0, r2, #1
 8009c50:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c52:	7852      	ldrb	r2, [r2, #1]
 8009c54:	4618      	mov	r0, r3
 8009c56:	460d      	mov	r5, r1
 8009c58:	e7b1      	b.n	8009bbe <_strtod_l+0x1d6>
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e77d      	b.n	8009b5e <_strtod_l+0x176>
 8009c62:	f04f 0c00 	mov.w	ip, #0
 8009c66:	1ca2      	adds	r2, r4, #2
 8009c68:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c6a:	78a2      	ldrb	r2, [r4, #2]
 8009c6c:	e785      	b.n	8009b7a <_strtod_l+0x192>
 8009c6e:	f04f 0c01 	mov.w	ip, #1
 8009c72:	e7f8      	b.n	8009c66 <_strtod_l+0x27e>
 8009c74:	0800bab8 	.word	0x0800bab8
 8009c78:	0800baa0 	.word	0x0800baa0
 8009c7c:	7ff00000 	.word	0x7ff00000
 8009c80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c82:	1c51      	adds	r1, r2, #1
 8009c84:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c86:	7852      	ldrb	r2, [r2, #1]
 8009c88:	2a30      	cmp	r2, #48	@ 0x30
 8009c8a:	d0f9      	beq.n	8009c80 <_strtod_l+0x298>
 8009c8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c90:	2908      	cmp	r1, #8
 8009c92:	f63f af78 	bhi.w	8009b86 <_strtod_l+0x19e>
 8009c96:	3a30      	subs	r2, #48	@ 0x30
 8009c98:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c9e:	f04f 080a 	mov.w	r8, #10
 8009ca2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ca4:	1c56      	adds	r6, r2, #1
 8009ca6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ca8:	7852      	ldrb	r2, [r2, #1]
 8009caa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009cae:	f1be 0f09 	cmp.w	lr, #9
 8009cb2:	d939      	bls.n	8009d28 <_strtod_l+0x340>
 8009cb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009cb6:	1a76      	subs	r6, r6, r1
 8009cb8:	2e08      	cmp	r6, #8
 8009cba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009cbe:	dc03      	bgt.n	8009cc8 <_strtod_l+0x2e0>
 8009cc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009cc2:	4588      	cmp	r8, r1
 8009cc4:	bfa8      	it	ge
 8009cc6:	4688      	movge	r8, r1
 8009cc8:	f1bc 0f00 	cmp.w	ip, #0
 8009ccc:	d001      	beq.n	8009cd2 <_strtod_l+0x2ea>
 8009cce:	f1c8 0800 	rsb	r8, r8, #0
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	d14e      	bne.n	8009d74 <_strtod_l+0x38c>
 8009cd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cd8:	4308      	orrs	r0, r1
 8009cda:	f47f aebe 	bne.w	8009a5a <_strtod_l+0x72>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f47f aed6 	bne.w	8009a90 <_strtod_l+0xa8>
 8009ce4:	2a69      	cmp	r2, #105	@ 0x69
 8009ce6:	d028      	beq.n	8009d3a <_strtod_l+0x352>
 8009ce8:	dc25      	bgt.n	8009d36 <_strtod_l+0x34e>
 8009cea:	2a49      	cmp	r2, #73	@ 0x49
 8009cec:	d025      	beq.n	8009d3a <_strtod_l+0x352>
 8009cee:	2a4e      	cmp	r2, #78	@ 0x4e
 8009cf0:	f47f aece 	bne.w	8009a90 <_strtod_l+0xa8>
 8009cf4:	499b      	ldr	r1, [pc, #620]	@ (8009f64 <_strtod_l+0x57c>)
 8009cf6:	a819      	add	r0, sp, #100	@ 0x64
 8009cf8:	f001 f9ca 	bl	800b090 <__match>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f43f aec7 	beq.w	8009a90 <_strtod_l+0xa8>
 8009d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b28      	cmp	r3, #40	@ 0x28
 8009d08:	d12e      	bne.n	8009d68 <_strtod_l+0x380>
 8009d0a:	4997      	ldr	r1, [pc, #604]	@ (8009f68 <_strtod_l+0x580>)
 8009d0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d0e:	a819      	add	r0, sp, #100	@ 0x64
 8009d10:	f001 f9d2 	bl	800b0b8 <__hexnan>
 8009d14:	2805      	cmp	r0, #5
 8009d16:	d127      	bne.n	8009d68 <_strtod_l+0x380>
 8009d18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d26:	e698      	b.n	8009a5a <_strtod_l+0x72>
 8009d28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d2a:	fb08 2101 	mla	r1, r8, r1, r2
 8009d2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d32:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d34:	e7b5      	b.n	8009ca2 <_strtod_l+0x2ba>
 8009d36:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d38:	e7da      	b.n	8009cf0 <_strtod_l+0x308>
 8009d3a:	498c      	ldr	r1, [pc, #560]	@ (8009f6c <_strtod_l+0x584>)
 8009d3c:	a819      	add	r0, sp, #100	@ 0x64
 8009d3e:	f001 f9a7 	bl	800b090 <__match>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f aea4 	beq.w	8009a90 <_strtod_l+0xa8>
 8009d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d4a:	4989      	ldr	r1, [pc, #548]	@ (8009f70 <_strtod_l+0x588>)
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	a819      	add	r0, sp, #100	@ 0x64
 8009d50:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d52:	f001 f99d 	bl	800b090 <__match>
 8009d56:	b910      	cbnz	r0, 8009d5e <_strtod_l+0x376>
 8009d58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009f80 <_strtod_l+0x598>
 8009d62:	f04f 0a00 	mov.w	sl, #0
 8009d66:	e678      	b.n	8009a5a <_strtod_l+0x72>
 8009d68:	4882      	ldr	r0, [pc, #520]	@ (8009f74 <_strtod_l+0x58c>)
 8009d6a:	f000 fee1 	bl	800ab30 <nan>
 8009d6e:	ec5b ab10 	vmov	sl, fp, d0
 8009d72:	e672      	b.n	8009a5a <_strtod_l+0x72>
 8009d74:	eba8 0309 	sub.w	r3, r8, r9
 8009d78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7c:	2f00      	cmp	r7, #0
 8009d7e:	bf08      	it	eq
 8009d80:	462f      	moveq	r7, r5
 8009d82:	2d10      	cmp	r5, #16
 8009d84:	462c      	mov	r4, r5
 8009d86:	bfa8      	it	ge
 8009d88:	2410      	movge	r4, #16
 8009d8a:	f7f6 fbcb 	bl	8000524 <__aeabi_ui2d>
 8009d8e:	2d09      	cmp	r5, #9
 8009d90:	4682      	mov	sl, r0
 8009d92:	468b      	mov	fp, r1
 8009d94:	dc13      	bgt.n	8009dbe <_strtod_l+0x3d6>
 8009d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f43f ae5e 	beq.w	8009a5a <_strtod_l+0x72>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	dd78      	ble.n	8009e94 <_strtod_l+0x4ac>
 8009da2:	2b16      	cmp	r3, #22
 8009da4:	dc5f      	bgt.n	8009e66 <_strtod_l+0x47e>
 8009da6:	4974      	ldr	r1, [pc, #464]	@ (8009f78 <_strtod_l+0x590>)
 8009da8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db0:	4652      	mov	r2, sl
 8009db2:	465b      	mov	r3, fp
 8009db4:	f7f6 fc30 	bl	8000618 <__aeabi_dmul>
 8009db8:	4682      	mov	sl, r0
 8009dba:	468b      	mov	fp, r1
 8009dbc:	e64d      	b.n	8009a5a <_strtod_l+0x72>
 8009dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8009f78 <_strtod_l+0x590>)
 8009dc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009dc8:	f7f6 fc26 	bl	8000618 <__aeabi_dmul>
 8009dcc:	4682      	mov	sl, r0
 8009dce:	9808      	ldr	r0, [sp, #32]
 8009dd0:	468b      	mov	fp, r1
 8009dd2:	f7f6 fba7 	bl	8000524 <__aeabi_ui2d>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4650      	mov	r0, sl
 8009ddc:	4659      	mov	r1, fp
 8009dde:	f7f6 fa65 	bl	80002ac <__adddf3>
 8009de2:	2d0f      	cmp	r5, #15
 8009de4:	4682      	mov	sl, r0
 8009de6:	468b      	mov	fp, r1
 8009de8:	ddd5      	ble.n	8009d96 <_strtod_l+0x3ae>
 8009dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dec:	1b2c      	subs	r4, r5, r4
 8009dee:	441c      	add	r4, r3
 8009df0:	2c00      	cmp	r4, #0
 8009df2:	f340 8096 	ble.w	8009f22 <_strtod_l+0x53a>
 8009df6:	f014 030f 	ands.w	r3, r4, #15
 8009dfa:	d00a      	beq.n	8009e12 <_strtod_l+0x42a>
 8009dfc:	495e      	ldr	r1, [pc, #376]	@ (8009f78 <_strtod_l+0x590>)
 8009dfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0a:	f7f6 fc05 	bl	8000618 <__aeabi_dmul>
 8009e0e:	4682      	mov	sl, r0
 8009e10:	468b      	mov	fp, r1
 8009e12:	f034 040f 	bics.w	r4, r4, #15
 8009e16:	d073      	beq.n	8009f00 <_strtod_l+0x518>
 8009e18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e1c:	dd48      	ble.n	8009eb0 <_strtod_l+0x4c8>
 8009e1e:	2400      	movs	r4, #0
 8009e20:	46a0      	mov	r8, r4
 8009e22:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e24:	46a1      	mov	r9, r4
 8009e26:	9a05      	ldr	r2, [sp, #20]
 8009e28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009f80 <_strtod_l+0x598>
 8009e2c:	2322      	movs	r3, #34	@ 0x22
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	f04f 0a00 	mov.w	sl, #0
 8009e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f43f ae0f 	beq.w	8009a5a <_strtod_l+0x72>
 8009e3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e3e:	9805      	ldr	r0, [sp, #20]
 8009e40:	f7ff f940 	bl	80090c4 <_Bfree>
 8009e44:	9805      	ldr	r0, [sp, #20]
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7ff f93c 	bl	80090c4 <_Bfree>
 8009e4c:	9805      	ldr	r0, [sp, #20]
 8009e4e:	4641      	mov	r1, r8
 8009e50:	f7ff f938 	bl	80090c4 <_Bfree>
 8009e54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e56:	9805      	ldr	r0, [sp, #20]
 8009e58:	f7ff f934 	bl	80090c4 <_Bfree>
 8009e5c:	9805      	ldr	r0, [sp, #20]
 8009e5e:	4621      	mov	r1, r4
 8009e60:	f7ff f930 	bl	80090c4 <_Bfree>
 8009e64:	e5f9      	b.n	8009a5a <_strtod_l+0x72>
 8009e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	dbbc      	blt.n	8009dea <_strtod_l+0x402>
 8009e70:	4c41      	ldr	r4, [pc, #260]	@ (8009f78 <_strtod_l+0x590>)
 8009e72:	f1c5 050f 	rsb	r5, r5, #15
 8009e76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e7a:	4652      	mov	r2, sl
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e82:	f7f6 fbc9 	bl	8000618 <__aeabi_dmul>
 8009e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e88:	1b5d      	subs	r5, r3, r5
 8009e8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e92:	e78f      	b.n	8009db4 <_strtod_l+0x3cc>
 8009e94:	3316      	adds	r3, #22
 8009e96:	dba8      	blt.n	8009dea <_strtod_l+0x402>
 8009e98:	4b37      	ldr	r3, [pc, #220]	@ (8009f78 <_strtod_l+0x590>)
 8009e9a:	eba9 0808 	sub.w	r8, r9, r8
 8009e9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009ea2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	4659      	mov	r1, fp
 8009eaa:	f7f6 fcdf 	bl	800086c <__aeabi_ddiv>
 8009eae:	e783      	b.n	8009db8 <_strtod_l+0x3d0>
 8009eb0:	4b32      	ldr	r3, [pc, #200]	@ (8009f7c <_strtod_l+0x594>)
 8009eb2:	9308      	str	r3, [sp, #32]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	1124      	asrs	r4, r4, #4
 8009eb8:	4650      	mov	r0, sl
 8009eba:	4659      	mov	r1, fp
 8009ebc:	461e      	mov	r6, r3
 8009ebe:	2c01      	cmp	r4, #1
 8009ec0:	dc21      	bgt.n	8009f06 <_strtod_l+0x51e>
 8009ec2:	b10b      	cbz	r3, 8009ec8 <_strtod_l+0x4e0>
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	492c      	ldr	r1, [pc, #176]	@ (8009f7c <_strtod_l+0x594>)
 8009eca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ece:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009ed2:	4652      	mov	r2, sl
 8009ed4:	465b      	mov	r3, fp
 8009ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eda:	f7f6 fb9d 	bl	8000618 <__aeabi_dmul>
 8009ede:	4b28      	ldr	r3, [pc, #160]	@ (8009f80 <_strtod_l+0x598>)
 8009ee0:	460a      	mov	r2, r1
 8009ee2:	400b      	ands	r3, r1
 8009ee4:	4927      	ldr	r1, [pc, #156]	@ (8009f84 <_strtod_l+0x59c>)
 8009ee6:	428b      	cmp	r3, r1
 8009ee8:	4682      	mov	sl, r0
 8009eea:	d898      	bhi.n	8009e1e <_strtod_l+0x436>
 8009eec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	bf86      	itte	hi
 8009ef4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009f88 <_strtod_l+0x5a0>
 8009ef8:	f04f 3aff 	movhi.w	sl, #4294967295
 8009efc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f00:	2300      	movs	r3, #0
 8009f02:	9308      	str	r3, [sp, #32]
 8009f04:	e07a      	b.n	8009ffc <_strtod_l+0x614>
 8009f06:	07e2      	lsls	r2, r4, #31
 8009f08:	d505      	bpl.n	8009f16 <_strtod_l+0x52e>
 8009f0a:	9b08      	ldr	r3, [sp, #32]
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 fb82 	bl	8000618 <__aeabi_dmul>
 8009f14:	2301      	movs	r3, #1
 8009f16:	9a08      	ldr	r2, [sp, #32]
 8009f18:	3208      	adds	r2, #8
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	1064      	asrs	r4, r4, #1
 8009f1e:	9208      	str	r2, [sp, #32]
 8009f20:	e7cd      	b.n	8009ebe <_strtod_l+0x4d6>
 8009f22:	d0ed      	beq.n	8009f00 <_strtod_l+0x518>
 8009f24:	4264      	negs	r4, r4
 8009f26:	f014 020f 	ands.w	r2, r4, #15
 8009f2a:	d00a      	beq.n	8009f42 <_strtod_l+0x55a>
 8009f2c:	4b12      	ldr	r3, [pc, #72]	@ (8009f78 <_strtod_l+0x590>)
 8009f2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f32:	4650      	mov	r0, sl
 8009f34:	4659      	mov	r1, fp
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 fc97 	bl	800086c <__aeabi_ddiv>
 8009f3e:	4682      	mov	sl, r0
 8009f40:	468b      	mov	fp, r1
 8009f42:	1124      	asrs	r4, r4, #4
 8009f44:	d0dc      	beq.n	8009f00 <_strtod_l+0x518>
 8009f46:	2c1f      	cmp	r4, #31
 8009f48:	dd20      	ble.n	8009f8c <_strtod_l+0x5a4>
 8009f4a:	2400      	movs	r4, #0
 8009f4c:	46a0      	mov	r8, r4
 8009f4e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f50:	46a1      	mov	r9, r4
 8009f52:	9a05      	ldr	r2, [sp, #20]
 8009f54:	2322      	movs	r3, #34	@ 0x22
 8009f56:	f04f 0a00 	mov.w	sl, #0
 8009f5a:	f04f 0b00 	mov.w	fp, #0
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	e768      	b.n	8009e34 <_strtod_l+0x44c>
 8009f62:	bf00      	nop
 8009f64:	0800b891 	.word	0x0800b891
 8009f68:	0800baa4 	.word	0x0800baa4
 8009f6c:	0800b889 	.word	0x0800b889
 8009f70:	0800b8c0 	.word	0x0800b8c0
 8009f74:	0800bc4d 	.word	0x0800bc4d
 8009f78:	0800b9d8 	.word	0x0800b9d8
 8009f7c:	0800b9b0 	.word	0x0800b9b0
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	7ca00000 	.word	0x7ca00000
 8009f88:	7fefffff 	.word	0x7fefffff
 8009f8c:	f014 0310 	ands.w	r3, r4, #16
 8009f90:	bf18      	it	ne
 8009f92:	236a      	movne	r3, #106	@ 0x6a
 8009f94:	4ea9      	ldr	r6, [pc, #676]	@ (800a23c <_strtod_l+0x854>)
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	4650      	mov	r0, sl
 8009f9a:	4659      	mov	r1, fp
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	07e2      	lsls	r2, r4, #31
 8009fa0:	d504      	bpl.n	8009fac <_strtod_l+0x5c4>
 8009fa2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa6:	f7f6 fb37 	bl	8000618 <__aeabi_dmul>
 8009faa:	2301      	movs	r3, #1
 8009fac:	1064      	asrs	r4, r4, #1
 8009fae:	f106 0608 	add.w	r6, r6, #8
 8009fb2:	d1f4      	bne.n	8009f9e <_strtod_l+0x5b6>
 8009fb4:	b10b      	cbz	r3, 8009fba <_strtod_l+0x5d2>
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	468b      	mov	fp, r1
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	b1b3      	cbz	r3, 8009fec <_strtod_l+0x604>
 8009fbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009fc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	4659      	mov	r1, fp
 8009fca:	dd0f      	ble.n	8009fec <_strtod_l+0x604>
 8009fcc:	2b1f      	cmp	r3, #31
 8009fce:	dd55      	ble.n	800a07c <_strtod_l+0x694>
 8009fd0:	2b34      	cmp	r3, #52	@ 0x34
 8009fd2:	bfde      	ittt	le
 8009fd4:	f04f 33ff 	movle.w	r3, #4294967295
 8009fd8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009fdc:	4093      	lslle	r3, r2
 8009fde:	f04f 0a00 	mov.w	sl, #0
 8009fe2:	bfcc      	ite	gt
 8009fe4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009fe8:	ea03 0b01 	andle.w	fp, r3, r1
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f7f6 fd78 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1a6      	bne.n	8009f4a <_strtod_l+0x562>
 8009ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a002:	9805      	ldr	r0, [sp, #20]
 800a004:	462b      	mov	r3, r5
 800a006:	463a      	mov	r2, r7
 800a008:	f7ff f8c4 	bl	8009194 <__s2b>
 800a00c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f af05 	beq.w	8009e1e <_strtod_l+0x436>
 800a014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a016:	2a00      	cmp	r2, #0
 800a018:	eba9 0308 	sub.w	r3, r9, r8
 800a01c:	bfa8      	it	ge
 800a01e:	2300      	movge	r3, #0
 800a020:	9312      	str	r3, [sp, #72]	@ 0x48
 800a022:	2400      	movs	r4, #0
 800a024:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a028:	9316      	str	r3, [sp, #88]	@ 0x58
 800a02a:	46a0      	mov	r8, r4
 800a02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a02e:	9805      	ldr	r0, [sp, #20]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	f7ff f807 	bl	8009044 <_Balloc>
 800a036:	4681      	mov	r9, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	f43f aef4 	beq.w	8009e26 <_strtod_l+0x43e>
 800a03e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	3202      	adds	r2, #2
 800a044:	f103 010c 	add.w	r1, r3, #12
 800a048:	0092      	lsls	r2, r2, #2
 800a04a:	300c      	adds	r0, #12
 800a04c:	f000 fd62 	bl	800ab14 <memcpy>
 800a050:	ec4b ab10 	vmov	d0, sl, fp
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	aa1c      	add	r2, sp, #112	@ 0x70
 800a058:	a91b      	add	r1, sp, #108	@ 0x6c
 800a05a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a05e:	f7ff fbd5 	bl	800980c <__d2b>
 800a062:	901a      	str	r0, [sp, #104]	@ 0x68
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f aede 	beq.w	8009e26 <_strtod_l+0x43e>
 800a06a:	9805      	ldr	r0, [sp, #20]
 800a06c:	2101      	movs	r1, #1
 800a06e:	f7ff f927 	bl	80092c0 <__i2b>
 800a072:	4680      	mov	r8, r0
 800a074:	b948      	cbnz	r0, 800a08a <_strtod_l+0x6a2>
 800a076:	f04f 0800 	mov.w	r8, #0
 800a07a:	e6d4      	b.n	8009e26 <_strtod_l+0x43e>
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	ea03 0a0a 	and.w	sl, r3, sl
 800a088:	e7b0      	b.n	8009fec <_strtod_l+0x604>
 800a08a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a08c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a08e:	2d00      	cmp	r5, #0
 800a090:	bfab      	itete	ge
 800a092:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a094:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a096:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a098:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a09a:	bfac      	ite	ge
 800a09c:	18ef      	addge	r7, r5, r3
 800a09e:	1b5e      	sublt	r6, r3, r5
 800a0a0:	9b08      	ldr	r3, [sp, #32]
 800a0a2:	1aed      	subs	r5, r5, r3
 800a0a4:	4415      	add	r5, r2
 800a0a6:	4b66      	ldr	r3, [pc, #408]	@ (800a240 <_strtod_l+0x858>)
 800a0a8:	3d01      	subs	r5, #1
 800a0aa:	429d      	cmp	r5, r3
 800a0ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0b0:	da50      	bge.n	800a154 <_strtod_l+0x76c>
 800a0b2:	1b5b      	subs	r3, r3, r5
 800a0b4:	2b1f      	cmp	r3, #31
 800a0b6:	eba2 0203 	sub.w	r2, r2, r3
 800a0ba:	f04f 0101 	mov.w	r1, #1
 800a0be:	dc3d      	bgt.n	800a13c <_strtod_l+0x754>
 800a0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0ca:	18bd      	adds	r5, r7, r2
 800a0cc:	9b08      	ldr	r3, [sp, #32]
 800a0ce:	42af      	cmp	r7, r5
 800a0d0:	4416      	add	r6, r2
 800a0d2:	441e      	add	r6, r3
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	bfa8      	it	ge
 800a0d8:	462b      	movge	r3, r5
 800a0da:	42b3      	cmp	r3, r6
 800a0dc:	bfa8      	it	ge
 800a0de:	4633      	movge	r3, r6
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfc2      	ittt	gt
 800a0e4:	1aed      	subgt	r5, r5, r3
 800a0e6:	1af6      	subgt	r6, r6, r3
 800a0e8:	1aff      	subgt	r7, r7, r3
 800a0ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd16      	ble.n	800a11e <_strtod_l+0x736>
 800a0f0:	4641      	mov	r1, r8
 800a0f2:	9805      	ldr	r0, [sp, #20]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f7ff f9a3 	bl	8009440 <__pow5mult>
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d0ba      	beq.n	800a076 <_strtod_l+0x68e>
 800a100:	4601      	mov	r1, r0
 800a102:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a104:	9805      	ldr	r0, [sp, #20]
 800a106:	f7ff f8f1 	bl	80092ec <__multiply>
 800a10a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f43f ae8a 	beq.w	8009e26 <_strtod_l+0x43e>
 800a112:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a114:	9805      	ldr	r0, [sp, #20]
 800a116:	f7fe ffd5 	bl	80090c4 <_Bfree>
 800a11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a11e:	2d00      	cmp	r5, #0
 800a120:	dc1d      	bgt.n	800a15e <_strtod_l+0x776>
 800a122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	dd23      	ble.n	800a170 <_strtod_l+0x788>
 800a128:	4649      	mov	r1, r9
 800a12a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a12c:	9805      	ldr	r0, [sp, #20]
 800a12e:	f7ff f987 	bl	8009440 <__pow5mult>
 800a132:	4681      	mov	r9, r0
 800a134:	b9e0      	cbnz	r0, 800a170 <_strtod_l+0x788>
 800a136:	f04f 0900 	mov.w	r9, #0
 800a13a:	e674      	b.n	8009e26 <_strtod_l+0x43e>
 800a13c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a140:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a144:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a148:	35e2      	adds	r5, #226	@ 0xe2
 800a14a:	fa01 f305 	lsl.w	r3, r1, r5
 800a14e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a150:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a152:	e7ba      	b.n	800a0ca <_strtod_l+0x6e2>
 800a154:	2300      	movs	r3, #0
 800a156:	9310      	str	r3, [sp, #64]	@ 0x40
 800a158:	2301      	movs	r3, #1
 800a15a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a15c:	e7b5      	b.n	800a0ca <_strtod_l+0x6e2>
 800a15e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a160:	9805      	ldr	r0, [sp, #20]
 800a162:	462a      	mov	r2, r5
 800a164:	f7ff f9c6 	bl	80094f4 <__lshift>
 800a168:	901a      	str	r0, [sp, #104]	@ 0x68
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d1d9      	bne.n	800a122 <_strtod_l+0x73a>
 800a16e:	e65a      	b.n	8009e26 <_strtod_l+0x43e>
 800a170:	2e00      	cmp	r6, #0
 800a172:	dd07      	ble.n	800a184 <_strtod_l+0x79c>
 800a174:	4649      	mov	r1, r9
 800a176:	9805      	ldr	r0, [sp, #20]
 800a178:	4632      	mov	r2, r6
 800a17a:	f7ff f9bb 	bl	80094f4 <__lshift>
 800a17e:	4681      	mov	r9, r0
 800a180:	2800      	cmp	r0, #0
 800a182:	d0d8      	beq.n	800a136 <_strtod_l+0x74e>
 800a184:	2f00      	cmp	r7, #0
 800a186:	dd08      	ble.n	800a19a <_strtod_l+0x7b2>
 800a188:	4641      	mov	r1, r8
 800a18a:	9805      	ldr	r0, [sp, #20]
 800a18c:	463a      	mov	r2, r7
 800a18e:	f7ff f9b1 	bl	80094f4 <__lshift>
 800a192:	4680      	mov	r8, r0
 800a194:	2800      	cmp	r0, #0
 800a196:	f43f ae46 	beq.w	8009e26 <_strtod_l+0x43e>
 800a19a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a19c:	9805      	ldr	r0, [sp, #20]
 800a19e:	464a      	mov	r2, r9
 800a1a0:	f7ff fa30 	bl	8009604 <__mdiff>
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f43f ae3d 	beq.w	8009e26 <_strtod_l+0x43e>
 800a1ac:	68c3      	ldr	r3, [r0, #12]
 800a1ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60c3      	str	r3, [r0, #12]
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	f7ff fa09 	bl	80095cc <__mcmp>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	da46      	bge.n	800a24c <_strtod_l+0x864>
 800a1be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c0:	ea53 030a 	orrs.w	r3, r3, sl
 800a1c4:	d16c      	bne.n	800a2a0 <_strtod_l+0x8b8>
 800a1c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d168      	bne.n	800a2a0 <_strtod_l+0x8b8>
 800a1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1d2:	0d1b      	lsrs	r3, r3, #20
 800a1d4:	051b      	lsls	r3, r3, #20
 800a1d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1da:	d961      	bls.n	800a2a0 <_strtod_l+0x8b8>
 800a1dc:	6963      	ldr	r3, [r4, #20]
 800a1de:	b913      	cbnz	r3, 800a1e6 <_strtod_l+0x7fe>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	dd5c      	ble.n	800a2a0 <_strtod_l+0x8b8>
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	9805      	ldr	r0, [sp, #20]
 800a1ec:	f7ff f982 	bl	80094f4 <__lshift>
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	f7ff f9ea 	bl	80095cc <__mcmp>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	dd51      	ble.n	800a2a0 <_strtod_l+0x8b8>
 800a1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a200:	9a08      	ldr	r2, [sp, #32]
 800a202:	0d1b      	lsrs	r3, r3, #20
 800a204:	051b      	lsls	r3, r3, #20
 800a206:	2a00      	cmp	r2, #0
 800a208:	d06b      	beq.n	800a2e2 <_strtod_l+0x8fa>
 800a20a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a20e:	d868      	bhi.n	800a2e2 <_strtod_l+0x8fa>
 800a210:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a214:	f67f ae9d 	bls.w	8009f52 <_strtod_l+0x56a>
 800a218:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <_strtod_l+0x85c>)
 800a21a:	4650      	mov	r0, sl
 800a21c:	4659      	mov	r1, fp
 800a21e:	2200      	movs	r2, #0
 800a220:	f7f6 f9fa 	bl	8000618 <__aeabi_dmul>
 800a224:	4b08      	ldr	r3, [pc, #32]	@ (800a248 <_strtod_l+0x860>)
 800a226:	400b      	ands	r3, r1
 800a228:	4682      	mov	sl, r0
 800a22a:	468b      	mov	fp, r1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f47f ae05 	bne.w	8009e3c <_strtod_l+0x454>
 800a232:	9a05      	ldr	r2, [sp, #20]
 800a234:	2322      	movs	r3, #34	@ 0x22
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	e600      	b.n	8009e3c <_strtod_l+0x454>
 800a23a:	bf00      	nop
 800a23c:	0800bad0 	.word	0x0800bad0
 800a240:	fffffc02 	.word	0xfffffc02
 800a244:	39500000 	.word	0x39500000
 800a248:	7ff00000 	.word	0x7ff00000
 800a24c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a250:	d165      	bne.n	800a31e <_strtod_l+0x936>
 800a252:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a254:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a258:	b35a      	cbz	r2, 800a2b2 <_strtod_l+0x8ca>
 800a25a:	4a9f      	ldr	r2, [pc, #636]	@ (800a4d8 <_strtod_l+0xaf0>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d12b      	bne.n	800a2b8 <_strtod_l+0x8d0>
 800a260:	9b08      	ldr	r3, [sp, #32]
 800a262:	4651      	mov	r1, sl
 800a264:	b303      	cbz	r3, 800a2a8 <_strtod_l+0x8c0>
 800a266:	4b9d      	ldr	r3, [pc, #628]	@ (800a4dc <_strtod_l+0xaf4>)
 800a268:	465a      	mov	r2, fp
 800a26a:	4013      	ands	r3, r2
 800a26c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a270:	f04f 32ff 	mov.w	r2, #4294967295
 800a274:	d81b      	bhi.n	800a2ae <_strtod_l+0x8c6>
 800a276:	0d1b      	lsrs	r3, r3, #20
 800a278:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a27c:	fa02 f303 	lsl.w	r3, r2, r3
 800a280:	4299      	cmp	r1, r3
 800a282:	d119      	bne.n	800a2b8 <_strtod_l+0x8d0>
 800a284:	4b96      	ldr	r3, [pc, #600]	@ (800a4e0 <_strtod_l+0xaf8>)
 800a286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a288:	429a      	cmp	r2, r3
 800a28a:	d102      	bne.n	800a292 <_strtod_l+0x8aa>
 800a28c:	3101      	adds	r1, #1
 800a28e:	f43f adca 	beq.w	8009e26 <_strtod_l+0x43e>
 800a292:	4b92      	ldr	r3, [pc, #584]	@ (800a4dc <_strtod_l+0xaf4>)
 800a294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a296:	401a      	ands	r2, r3
 800a298:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a29c:	f04f 0a00 	mov.w	sl, #0
 800a2a0:	9b08      	ldr	r3, [sp, #32]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1b8      	bne.n	800a218 <_strtod_l+0x830>
 800a2a6:	e5c9      	b.n	8009e3c <_strtod_l+0x454>
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	e7e8      	b.n	800a280 <_strtod_l+0x898>
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	e7e6      	b.n	800a280 <_strtod_l+0x898>
 800a2b2:	ea53 030a 	orrs.w	r3, r3, sl
 800a2b6:	d0a1      	beq.n	800a1fc <_strtod_l+0x814>
 800a2b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2ba:	b1db      	cbz	r3, 800a2f4 <_strtod_l+0x90c>
 800a2bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2be:	4213      	tst	r3, r2
 800a2c0:	d0ee      	beq.n	800a2a0 <_strtod_l+0x8b8>
 800a2c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2c4:	9a08      	ldr	r2, [sp, #32]
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	b1bb      	cbz	r3, 800a2fc <_strtod_l+0x914>
 800a2cc:	f7ff fb6c 	bl	80099a8 <sulp>
 800a2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2d4:	ec53 2b10 	vmov	r2, r3, d0
 800a2d8:	f7f5 ffe8 	bl	80002ac <__adddf3>
 800a2dc:	4682      	mov	sl, r0
 800a2de:	468b      	mov	fp, r1
 800a2e0:	e7de      	b.n	800a2a0 <_strtod_l+0x8b8>
 800a2e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a2e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2ee:	f04f 3aff 	mov.w	sl, #4294967295
 800a2f2:	e7d5      	b.n	800a2a0 <_strtod_l+0x8b8>
 800a2f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2f6:	ea13 0f0a 	tst.w	r3, sl
 800a2fa:	e7e1      	b.n	800a2c0 <_strtod_l+0x8d8>
 800a2fc:	f7ff fb54 	bl	80099a8 <sulp>
 800a300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a304:	ec53 2b10 	vmov	r2, r3, d0
 800a308:	f7f5 ffce 	bl	80002a8 <__aeabi_dsub>
 800a30c:	2200      	movs	r2, #0
 800a30e:	2300      	movs	r3, #0
 800a310:	4682      	mov	sl, r0
 800a312:	468b      	mov	fp, r1
 800a314:	f7f6 fbe8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d0c1      	beq.n	800a2a0 <_strtod_l+0x8b8>
 800a31c:	e619      	b.n	8009f52 <_strtod_l+0x56a>
 800a31e:	4641      	mov	r1, r8
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff facb 	bl	80098bc <__ratio>
 800a326:	ec57 6b10 	vmov	r6, r7, d0
 800a32a:	2200      	movs	r2, #0
 800a32c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 fbec 	bl	8000b10 <__aeabi_dcmple>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d06f      	beq.n	800a41c <_strtod_l+0xa34>
 800a33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d17a      	bne.n	800a438 <_strtod_l+0xa50>
 800a342:	f1ba 0f00 	cmp.w	sl, #0
 800a346:	d158      	bne.n	800a3fa <_strtod_l+0xa12>
 800a348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a34a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d15a      	bne.n	800a408 <_strtod_l+0xa20>
 800a352:	4b64      	ldr	r3, [pc, #400]	@ (800a4e4 <_strtod_l+0xafc>)
 800a354:	2200      	movs	r2, #0
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f6 fbcf 	bl	8000afc <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d159      	bne.n	800a416 <_strtod_l+0xa2e>
 800a362:	4630      	mov	r0, r6
 800a364:	4639      	mov	r1, r7
 800a366:	4b60      	ldr	r3, [pc, #384]	@ (800a4e8 <_strtod_l+0xb00>)
 800a368:	2200      	movs	r2, #0
 800a36a:	f7f6 f955 	bl	8000618 <__aeabi_dmul>
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a376:	9606      	str	r6, [sp, #24]
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a37e:	4d57      	ldr	r5, [pc, #348]	@ (800a4dc <_strtod_l+0xaf4>)
 800a380:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a386:	401d      	ands	r5, r3
 800a388:	4b58      	ldr	r3, [pc, #352]	@ (800a4ec <_strtod_l+0xb04>)
 800a38a:	429d      	cmp	r5, r3
 800a38c:	f040 80b2 	bne.w	800a4f4 <_strtod_l+0xb0c>
 800a390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a392:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a396:	ec4b ab10 	vmov	d0, sl, fp
 800a39a:	f7ff f9c7 	bl	800972c <__ulp>
 800a39e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3a2:	ec51 0b10 	vmov	r0, r1, d0
 800a3a6:	f7f6 f937 	bl	8000618 <__aeabi_dmul>
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	f7f5 ff7d 	bl	80002ac <__adddf3>
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4949      	ldr	r1, [pc, #292]	@ (800a4dc <_strtod_l+0xaf4>)
 800a3b6:	4a4e      	ldr	r2, [pc, #312]	@ (800a4f0 <_strtod_l+0xb08>)
 800a3b8:	4019      	ands	r1, r3
 800a3ba:	4291      	cmp	r1, r2
 800a3bc:	4682      	mov	sl, r0
 800a3be:	d942      	bls.n	800a446 <_strtod_l+0xa5e>
 800a3c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3c2:	4b47      	ldr	r3, [pc, #284]	@ (800a4e0 <_strtod_l+0xaf8>)
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d103      	bne.n	800a3d0 <_strtod_l+0x9e8>
 800a3c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	f43f ad2b 	beq.w	8009e26 <_strtod_l+0x43e>
 800a3d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a4e0 <_strtod_l+0xaf8>
 800a3d4:	f04f 3aff 	mov.w	sl, #4294967295
 800a3d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	f7fe fe72 	bl	80090c4 <_Bfree>
 800a3e0:	9805      	ldr	r0, [sp, #20]
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7fe fe6e 	bl	80090c4 <_Bfree>
 800a3e8:	9805      	ldr	r0, [sp, #20]
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	f7fe fe6a 	bl	80090c4 <_Bfree>
 800a3f0:	9805      	ldr	r0, [sp, #20]
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	f7fe fe66 	bl	80090c4 <_Bfree>
 800a3f8:	e618      	b.n	800a02c <_strtod_l+0x644>
 800a3fa:	f1ba 0f01 	cmp.w	sl, #1
 800a3fe:	d103      	bne.n	800a408 <_strtod_l+0xa20>
 800a400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a402:	2b00      	cmp	r3, #0
 800a404:	f43f ada5 	beq.w	8009f52 <_strtod_l+0x56a>
 800a408:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a4b8 <_strtod_l+0xad0>
 800a40c:	4f35      	ldr	r7, [pc, #212]	@ (800a4e4 <_strtod_l+0xafc>)
 800a40e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a412:	2600      	movs	r6, #0
 800a414:	e7b1      	b.n	800a37a <_strtod_l+0x992>
 800a416:	4f34      	ldr	r7, [pc, #208]	@ (800a4e8 <_strtod_l+0xb00>)
 800a418:	2600      	movs	r6, #0
 800a41a:	e7aa      	b.n	800a372 <_strtod_l+0x98a>
 800a41c:	4b32      	ldr	r3, [pc, #200]	@ (800a4e8 <_strtod_l+0xb00>)
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	2200      	movs	r2, #0
 800a424:	f7f6 f8f8 	bl	8000618 <__aeabi_dmul>
 800a428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d09f      	beq.n	800a372 <_strtod_l+0x98a>
 800a432:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a436:	e7a0      	b.n	800a37a <_strtod_l+0x992>
 800a438:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a4c0 <_strtod_l+0xad8>
 800a43c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a440:	ec57 6b17 	vmov	r6, r7, d7
 800a444:	e799      	b.n	800a37a <_strtod_l+0x992>
 800a446:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1c1      	bne.n	800a3d8 <_strtod_l+0x9f0>
 800a454:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a458:	0d1b      	lsrs	r3, r3, #20
 800a45a:	051b      	lsls	r3, r3, #20
 800a45c:	429d      	cmp	r5, r3
 800a45e:	d1bb      	bne.n	800a3d8 <_strtod_l+0x9f0>
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fc20 	bl	8000ca8 <__aeabi_d2lz>
 800a468:	f7f6 f8a8 	bl	80005bc <__aeabi_l2d>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 ff18 	bl	80002a8 <__aeabi_dsub>
 800a478:	460b      	mov	r3, r1
 800a47a:	4602      	mov	r2, r0
 800a47c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a480:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a486:	ea46 060a 	orr.w	r6, r6, sl
 800a48a:	431e      	orrs	r6, r3
 800a48c:	d06f      	beq.n	800a56e <_strtod_l+0xb86>
 800a48e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4c8 <_strtod_l+0xae0>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f6 fb32 	bl	8000afc <__aeabi_dcmplt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	f47f accf 	bne.w	8009e3c <_strtod_l+0x454>
 800a49e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a4d0 <_strtod_l+0xae8>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4a8:	f7f6 fb46 	bl	8000b38 <__aeabi_dcmpgt>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d093      	beq.n	800a3d8 <_strtod_l+0x9f0>
 800a4b0:	e4c4      	b.n	8009e3c <_strtod_l+0x454>
 800a4b2:	bf00      	nop
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	00000000 	.word	0x00000000
 800a4bc:	bff00000 	.word	0xbff00000
 800a4c0:	00000000 	.word	0x00000000
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	94a03595 	.word	0x94a03595
 800a4cc:	3fdfffff 	.word	0x3fdfffff
 800a4d0:	35afe535 	.word	0x35afe535
 800a4d4:	3fe00000 	.word	0x3fe00000
 800a4d8:	000fffff 	.word	0x000fffff
 800a4dc:	7ff00000 	.word	0x7ff00000
 800a4e0:	7fefffff 	.word	0x7fefffff
 800a4e4:	3ff00000 	.word	0x3ff00000
 800a4e8:	3fe00000 	.word	0x3fe00000
 800a4ec:	7fe00000 	.word	0x7fe00000
 800a4f0:	7c9fffff 	.word	0x7c9fffff
 800a4f4:	9b08      	ldr	r3, [sp, #32]
 800a4f6:	b323      	cbz	r3, 800a542 <_strtod_l+0xb5a>
 800a4f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a4fc:	d821      	bhi.n	800a542 <_strtod_l+0xb5a>
 800a4fe:	a328      	add	r3, pc, #160	@ (adr r3, 800a5a0 <_strtod_l+0xbb8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f6 fb02 	bl	8000b10 <__aeabi_dcmple>
 800a50c:	b1a0      	cbz	r0, 800a538 <_strtod_l+0xb50>
 800a50e:	4639      	mov	r1, r7
 800a510:	4630      	mov	r0, r6
 800a512:	f7f6 fb59 	bl	8000bc8 <__aeabi_d2uiz>
 800a516:	2801      	cmp	r0, #1
 800a518:	bf38      	it	cc
 800a51a:	2001      	movcc	r0, #1
 800a51c:	f7f6 f802 	bl	8000524 <__aeabi_ui2d>
 800a520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a522:	4606      	mov	r6, r0
 800a524:	460f      	mov	r7, r1
 800a526:	b9fb      	cbnz	r3, 800a568 <_strtod_l+0xb80>
 800a528:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a52c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a52e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a530:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a534:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a538:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a53a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a53e:	1b5b      	subs	r3, r3, r5
 800a540:	9311      	str	r3, [sp, #68]	@ 0x44
 800a542:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a546:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a54a:	f7ff f8ef 	bl	800972c <__ulp>
 800a54e:	4650      	mov	r0, sl
 800a550:	ec53 2b10 	vmov	r2, r3, d0
 800a554:	4659      	mov	r1, fp
 800a556:	f7f6 f85f 	bl	8000618 <__aeabi_dmul>
 800a55a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a55e:	f7f5 fea5 	bl	80002ac <__adddf3>
 800a562:	4682      	mov	sl, r0
 800a564:	468b      	mov	fp, r1
 800a566:	e770      	b.n	800a44a <_strtod_l+0xa62>
 800a568:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a56c:	e7e0      	b.n	800a530 <_strtod_l+0xb48>
 800a56e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5a8 <_strtod_l+0xbc0>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f6 fac2 	bl	8000afc <__aeabi_dcmplt>
 800a578:	e798      	b.n	800a4ac <_strtod_l+0xac4>
 800a57a:	2300      	movs	r3, #0
 800a57c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a57e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	f7ff ba6d 	b.w	8009a62 <_strtod_l+0x7a>
 800a588:	2a65      	cmp	r2, #101	@ 0x65
 800a58a:	f43f ab66 	beq.w	8009c5a <_strtod_l+0x272>
 800a58e:	2a45      	cmp	r2, #69	@ 0x45
 800a590:	f43f ab63 	beq.w	8009c5a <_strtod_l+0x272>
 800a594:	2301      	movs	r3, #1
 800a596:	f7ff bb9e 	b.w	8009cd6 <_strtod_l+0x2ee>
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w
 800a5a0:	ffc00000 	.word	0xffc00000
 800a5a4:	41dfffff 	.word	0x41dfffff
 800a5a8:	94a03595 	.word	0x94a03595
 800a5ac:	3fcfffff 	.word	0x3fcfffff

0800a5b0 <_strtod_r>:
 800a5b0:	4b01      	ldr	r3, [pc, #4]	@ (800a5b8 <_strtod_r+0x8>)
 800a5b2:	f7ff ba19 	b.w	80099e8 <_strtod_l>
 800a5b6:	bf00      	nop
 800a5b8:	20000078 	.word	0x20000078

0800a5bc <_strtol_l.constprop.0>:
 800a5bc:	2b24      	cmp	r3, #36	@ 0x24
 800a5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c2:	4686      	mov	lr, r0
 800a5c4:	4690      	mov	r8, r2
 800a5c6:	d801      	bhi.n	800a5cc <_strtol_l.constprop.0+0x10>
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d106      	bne.n	800a5da <_strtol_l.constprop.0+0x1e>
 800a5cc:	f7fd fe6e 	bl	80082ac <__errno>
 800a5d0:	2316      	movs	r3, #22
 800a5d2:	6003      	str	r3, [r0, #0]
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	4834      	ldr	r0, [pc, #208]	@ (800a6ac <_strtol_l.constprop.0+0xf0>)
 800a5dc:	460d      	mov	r5, r1
 800a5de:	462a      	mov	r2, r5
 800a5e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5e4:	5d06      	ldrb	r6, [r0, r4]
 800a5e6:	f016 0608 	ands.w	r6, r6, #8
 800a5ea:	d1f8      	bne.n	800a5de <_strtol_l.constprop.0+0x22>
 800a5ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5ee:	d12d      	bne.n	800a64c <_strtol_l.constprop.0+0x90>
 800a5f0:	782c      	ldrb	r4, [r5, #0]
 800a5f2:	2601      	movs	r6, #1
 800a5f4:	1c95      	adds	r5, r2, #2
 800a5f6:	f033 0210 	bics.w	r2, r3, #16
 800a5fa:	d109      	bne.n	800a610 <_strtol_l.constprop.0+0x54>
 800a5fc:	2c30      	cmp	r4, #48	@ 0x30
 800a5fe:	d12a      	bne.n	800a656 <_strtol_l.constprop.0+0x9a>
 800a600:	782a      	ldrb	r2, [r5, #0]
 800a602:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a606:	2a58      	cmp	r2, #88	@ 0x58
 800a608:	d125      	bne.n	800a656 <_strtol_l.constprop.0+0x9a>
 800a60a:	786c      	ldrb	r4, [r5, #1]
 800a60c:	2310      	movs	r3, #16
 800a60e:	3502      	adds	r5, #2
 800a610:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a614:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a618:	2200      	movs	r2, #0
 800a61a:	fbbc f9f3 	udiv	r9, ip, r3
 800a61e:	4610      	mov	r0, r2
 800a620:	fb03 ca19 	mls	sl, r3, r9, ip
 800a624:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a628:	2f09      	cmp	r7, #9
 800a62a:	d81b      	bhi.n	800a664 <_strtol_l.constprop.0+0xa8>
 800a62c:	463c      	mov	r4, r7
 800a62e:	42a3      	cmp	r3, r4
 800a630:	dd27      	ble.n	800a682 <_strtol_l.constprop.0+0xc6>
 800a632:	1c57      	adds	r7, r2, #1
 800a634:	d007      	beq.n	800a646 <_strtol_l.constprop.0+0x8a>
 800a636:	4581      	cmp	r9, r0
 800a638:	d320      	bcc.n	800a67c <_strtol_l.constprop.0+0xc0>
 800a63a:	d101      	bne.n	800a640 <_strtol_l.constprop.0+0x84>
 800a63c:	45a2      	cmp	sl, r4
 800a63e:	db1d      	blt.n	800a67c <_strtol_l.constprop.0+0xc0>
 800a640:	fb00 4003 	mla	r0, r0, r3, r4
 800a644:	2201      	movs	r2, #1
 800a646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a64a:	e7eb      	b.n	800a624 <_strtol_l.constprop.0+0x68>
 800a64c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a64e:	bf04      	itt	eq
 800a650:	782c      	ldrbeq	r4, [r5, #0]
 800a652:	1c95      	addeq	r5, r2, #2
 800a654:	e7cf      	b.n	800a5f6 <_strtol_l.constprop.0+0x3a>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1da      	bne.n	800a610 <_strtol_l.constprop.0+0x54>
 800a65a:	2c30      	cmp	r4, #48	@ 0x30
 800a65c:	bf0c      	ite	eq
 800a65e:	2308      	moveq	r3, #8
 800a660:	230a      	movne	r3, #10
 800a662:	e7d5      	b.n	800a610 <_strtol_l.constprop.0+0x54>
 800a664:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a668:	2f19      	cmp	r7, #25
 800a66a:	d801      	bhi.n	800a670 <_strtol_l.constprop.0+0xb4>
 800a66c:	3c37      	subs	r4, #55	@ 0x37
 800a66e:	e7de      	b.n	800a62e <_strtol_l.constprop.0+0x72>
 800a670:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a674:	2f19      	cmp	r7, #25
 800a676:	d804      	bhi.n	800a682 <_strtol_l.constprop.0+0xc6>
 800a678:	3c57      	subs	r4, #87	@ 0x57
 800a67a:	e7d8      	b.n	800a62e <_strtol_l.constprop.0+0x72>
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	e7e1      	b.n	800a646 <_strtol_l.constprop.0+0x8a>
 800a682:	1c53      	adds	r3, r2, #1
 800a684:	d108      	bne.n	800a698 <_strtol_l.constprop.0+0xdc>
 800a686:	2322      	movs	r3, #34	@ 0x22
 800a688:	f8ce 3000 	str.w	r3, [lr]
 800a68c:	4660      	mov	r0, ip
 800a68e:	f1b8 0f00 	cmp.w	r8, #0
 800a692:	d0a0      	beq.n	800a5d6 <_strtol_l.constprop.0+0x1a>
 800a694:	1e69      	subs	r1, r5, #1
 800a696:	e006      	b.n	800a6a6 <_strtol_l.constprop.0+0xea>
 800a698:	b106      	cbz	r6, 800a69c <_strtol_l.constprop.0+0xe0>
 800a69a:	4240      	negs	r0, r0
 800a69c:	f1b8 0f00 	cmp.w	r8, #0
 800a6a0:	d099      	beq.n	800a5d6 <_strtol_l.constprop.0+0x1a>
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	d1f6      	bne.n	800a694 <_strtol_l.constprop.0+0xd8>
 800a6a6:	f8c8 1000 	str.w	r1, [r8]
 800a6aa:	e794      	b.n	800a5d6 <_strtol_l.constprop.0+0x1a>
 800a6ac:	0800baf9 	.word	0x0800baf9

0800a6b0 <_strtol_r>:
 800a6b0:	f7ff bf84 	b.w	800a5bc <_strtol_l.constprop.0>

0800a6b4 <__ssputs_r>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	688e      	ldr	r6, [r1, #8]
 800a6ba:	461f      	mov	r7, r3
 800a6bc:	42be      	cmp	r6, r7
 800a6be:	680b      	ldr	r3, [r1, #0]
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	d82d      	bhi.n	800a724 <__ssputs_r+0x70>
 800a6c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6d0:	d026      	beq.n	800a720 <__ssputs_r+0x6c>
 800a6d2:	6965      	ldr	r5, [r4, #20]
 800a6d4:	6909      	ldr	r1, [r1, #16]
 800a6d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6da:	eba3 0901 	sub.w	r9, r3, r1
 800a6de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e2:	1c7b      	adds	r3, r7, #1
 800a6e4:	444b      	add	r3, r9
 800a6e6:	106d      	asrs	r5, r5, #1
 800a6e8:	429d      	cmp	r5, r3
 800a6ea:	bf38      	it	cc
 800a6ec:	461d      	movcc	r5, r3
 800a6ee:	0553      	lsls	r3, r2, #21
 800a6f0:	d527      	bpl.n	800a742 <__ssputs_r+0x8e>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	f7fc fd5a 	bl	80071ac <_malloc_r>
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	b360      	cbz	r0, 800a756 <__ssputs_r+0xa2>
 800a6fc:	6921      	ldr	r1, [r4, #16]
 800a6fe:	464a      	mov	r2, r9
 800a700:	f000 fa08 	bl	800ab14 <memcpy>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	6126      	str	r6, [r4, #16]
 800a712:	6165      	str	r5, [r4, #20]
 800a714:	444e      	add	r6, r9
 800a716:	eba5 0509 	sub.w	r5, r5, r9
 800a71a:	6026      	str	r6, [r4, #0]
 800a71c:	60a5      	str	r5, [r4, #8]
 800a71e:	463e      	mov	r6, r7
 800a720:	42be      	cmp	r6, r7
 800a722:	d900      	bls.n	800a726 <__ssputs_r+0x72>
 800a724:	463e      	mov	r6, r7
 800a726:	6820      	ldr	r0, [r4, #0]
 800a728:	4632      	mov	r2, r6
 800a72a:	4641      	mov	r1, r8
 800a72c:	f000 f9c6 	bl	800aabc <memmove>
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	1b9b      	subs	r3, r3, r6
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	4433      	add	r3, r6
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	2000      	movs	r0, #0
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	462a      	mov	r2, r5
 800a744:	f000 fd65 	bl	800b212 <_realloc_r>
 800a748:	4606      	mov	r6, r0
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d1e0      	bne.n	800a710 <__ssputs_r+0x5c>
 800a74e:	6921      	ldr	r1, [r4, #16]
 800a750:	4650      	mov	r0, sl
 800a752:	f7fe fc2d 	bl	8008fb0 <_free_r>
 800a756:	230c      	movs	r3, #12
 800a758:	f8ca 3000 	str.w	r3, [sl]
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e7e9      	b.n	800a73e <__ssputs_r+0x8a>
	...

0800a76c <_svfiprintf_r>:
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	4698      	mov	r8, r3
 800a772:	898b      	ldrh	r3, [r1, #12]
 800a774:	061b      	lsls	r3, r3, #24
 800a776:	b09d      	sub	sp, #116	@ 0x74
 800a778:	4607      	mov	r7, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	d510      	bpl.n	800a7a2 <_svfiprintf_r+0x36>
 800a780:	690b      	ldr	r3, [r1, #16]
 800a782:	b973      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x36>
 800a784:	2140      	movs	r1, #64	@ 0x40
 800a786:	f7fc fd11 	bl	80071ac <_malloc_r>
 800a78a:	6028      	str	r0, [r5, #0]
 800a78c:	6128      	str	r0, [r5, #16]
 800a78e:	b930      	cbnz	r0, 800a79e <_svfiprintf_r+0x32>
 800a790:	230c      	movs	r3, #12
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	b01d      	add	sp, #116	@ 0x74
 800a79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79e:	2340      	movs	r3, #64	@ 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	2330      	movs	r3, #48	@ 0x30
 800a7b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a950 <_svfiprintf_r+0x1e4>
 800a7b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x60>
 800a7c8:	2a25      	cmp	r2, #37	@ 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x54>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7e>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6b 	bl	800a6b4 <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80a7 	beq.w	800a932 <_svfiprintf_r+0x1c6>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 809f 	beq.w	800a932 <_svfiprintf_r+0x1c6>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a80a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	484e      	ldr	r0, [pc, #312]	@ (800a950 <_svfiprintf_r+0x1e4>)
 800a816:	f7f5 fceb 	bl	80001f0 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xea>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	@ 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	@ 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xfa>
 800a83a:	9a07      	ldr	r2, [sp, #28]
 800a83c:	4654      	mov	r4, sl
 800a83e:	2000      	movs	r0, #0
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	@ 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94b      	bls.n	800a8e8 <_svfiprintf_r+0x17c>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x114>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x114>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	46a2      	mov	sl, r4
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0xa0>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	@ 0x2e
 800a884:	d10a      	bne.n	800a89c <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	@ 0x2a
 800a88a:	d132      	bne.n	800a8f2 <_svfiprintf_r+0x186>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a898:	3402      	adds	r4, #2
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a960 <_svfiprintf_r+0x1f4>
 800a8a0:	7821      	ldrb	r1, [r4, #0]
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	4650      	mov	r0, sl
 800a8a6:	f7f5 fca3 	bl	80001f0 <memchr>
 800a8aa:	b138      	cbz	r0, 800a8bc <_svfiprintf_r+0x150>
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	eba0 000a 	sub.w	r0, r0, sl
 800a8b2:	2240      	movs	r2, #64	@ 0x40
 800a8b4:	4082      	lsls	r2, r0
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	3401      	adds	r4, #1
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c0:	4824      	ldr	r0, [pc, #144]	@ (800a954 <_svfiprintf_r+0x1e8>)
 800a8c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8c6:	2206      	movs	r2, #6
 800a8c8:	f7f5 fc92 	bl	80001f0 <memchr>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d036      	beq.n	800a93e <_svfiprintf_r+0x1d2>
 800a8d0:	4b21      	ldr	r3, [pc, #132]	@ (800a958 <_svfiprintf_r+0x1ec>)
 800a8d2:	bb1b      	cbnz	r3, 800a91c <_svfiprintf_r+0x1b0>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	3307      	adds	r3, #7
 800a8d8:	f023 0307 	bic.w	r3, r3, #7
 800a8dc:	3308      	adds	r3, #8
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e2:	4433      	add	r3, r6
 800a8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e6:	e76a      	b.n	800a7be <_svfiprintf_r+0x52>
 800a8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	e7a8      	b.n	800a844 <_svfiprintf_r+0xd8>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	9305      	str	r3, [sp, #20]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4620      	mov	r0, r4
 800a900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a904:	3a30      	subs	r2, #48	@ 0x30
 800a906:	2a09      	cmp	r2, #9
 800a908:	d903      	bls.n	800a912 <_svfiprintf_r+0x1a6>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0c6      	beq.n	800a89c <_svfiprintf_r+0x130>
 800a90e:	9105      	str	r1, [sp, #20]
 800a910:	e7c4      	b.n	800a89c <_svfiprintf_r+0x130>
 800a912:	fb0c 2101 	mla	r1, ip, r1, r2
 800a916:	4604      	mov	r4, r0
 800a918:	2301      	movs	r3, #1
 800a91a:	e7f0      	b.n	800a8fe <_svfiprintf_r+0x192>
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	462a      	mov	r2, r5
 800a922:	4b0e      	ldr	r3, [pc, #56]	@ (800a95c <_svfiprintf_r+0x1f0>)
 800a924:	a904      	add	r1, sp, #16
 800a926:	4638      	mov	r0, r7
 800a928:	f7fc fd6c 	bl	8007404 <_printf_float>
 800a92c:	1c42      	adds	r2, r0, #1
 800a92e:	4606      	mov	r6, r0
 800a930:	d1d6      	bne.n	800a8e0 <_svfiprintf_r+0x174>
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	065b      	lsls	r3, r3, #25
 800a936:	f53f af2d 	bmi.w	800a794 <_svfiprintf_r+0x28>
 800a93a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a93c:	e72c      	b.n	800a798 <_svfiprintf_r+0x2c>
 800a93e:	ab03      	add	r3, sp, #12
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	462a      	mov	r2, r5
 800a944:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <_svfiprintf_r+0x1f0>)
 800a946:	a904      	add	r1, sp, #16
 800a948:	4638      	mov	r0, r7
 800a94a:	f7fc fff3 	bl	8007934 <_printf_i>
 800a94e:	e7ed      	b.n	800a92c <_svfiprintf_r+0x1c0>
 800a950:	0800bbf9 	.word	0x0800bbf9
 800a954:	0800bc03 	.word	0x0800bc03
 800a958:	08007405 	.word	0x08007405
 800a95c:	0800a6b5 	.word	0x0800a6b5
 800a960:	0800bbff 	.word	0x0800bbff

0800a964 <__sflush_r>:
 800a964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	0716      	lsls	r6, r2, #28
 800a96e:	4605      	mov	r5, r0
 800a970:	460c      	mov	r4, r1
 800a972:	d454      	bmi.n	800aa1e <__sflush_r+0xba>
 800a974:	684b      	ldr	r3, [r1, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	dc02      	bgt.n	800a980 <__sflush_r+0x1c>
 800a97a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dd48      	ble.n	800aa12 <__sflush_r+0xae>
 800a980:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a982:	2e00      	cmp	r6, #0
 800a984:	d045      	beq.n	800aa12 <__sflush_r+0xae>
 800a986:	2300      	movs	r3, #0
 800a988:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a98c:	682f      	ldr	r7, [r5, #0]
 800a98e:	6a21      	ldr	r1, [r4, #32]
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	d030      	beq.n	800a9f6 <__sflush_r+0x92>
 800a994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	0759      	lsls	r1, r3, #29
 800a99a:	d505      	bpl.n	800a9a8 <__sflush_r+0x44>
 800a99c:	6863      	ldr	r3, [r4, #4]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9a2:	b10b      	cbz	r3, 800a9a8 <__sflush_r+0x44>
 800a9a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9ac:	6a21      	ldr	r1, [r4, #32]
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	47b0      	blx	r6
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	d106      	bne.n	800a9c6 <__sflush_r+0x62>
 800a9b8:	6829      	ldr	r1, [r5, #0]
 800a9ba:	291d      	cmp	r1, #29
 800a9bc:	d82b      	bhi.n	800aa16 <__sflush_r+0xb2>
 800a9be:	4a2a      	ldr	r2, [pc, #168]	@ (800aa68 <__sflush_r+0x104>)
 800a9c0:	410a      	asrs	r2, r1
 800a9c2:	07d6      	lsls	r6, r2, #31
 800a9c4:	d427      	bmi.n	800aa16 <__sflush_r+0xb2>
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	6062      	str	r2, [r4, #4]
 800a9ca:	04d9      	lsls	r1, r3, #19
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	6022      	str	r2, [r4, #0]
 800a9d0:	d504      	bpl.n	800a9dc <__sflush_r+0x78>
 800a9d2:	1c42      	adds	r2, r0, #1
 800a9d4:	d101      	bne.n	800a9da <__sflush_r+0x76>
 800a9d6:	682b      	ldr	r3, [r5, #0]
 800a9d8:	b903      	cbnz	r3, 800a9dc <__sflush_r+0x78>
 800a9da:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9de:	602f      	str	r7, [r5, #0]
 800a9e0:	b1b9      	cbz	r1, 800aa12 <__sflush_r+0xae>
 800a9e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9e6:	4299      	cmp	r1, r3
 800a9e8:	d002      	beq.n	800a9f0 <__sflush_r+0x8c>
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f7fe fae0 	bl	8008fb0 <_free_r>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9f4:	e00d      	b.n	800aa12 <__sflush_r+0xae>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	47b0      	blx	r6
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	1c50      	adds	r0, r2, #1
 800aa00:	d1c9      	bne.n	800a996 <__sflush_r+0x32>
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0c6      	beq.n	800a996 <__sflush_r+0x32>
 800aa08:	2b1d      	cmp	r3, #29
 800aa0a:	d001      	beq.n	800aa10 <__sflush_r+0xac>
 800aa0c:	2b16      	cmp	r3, #22
 800aa0e:	d11e      	bne.n	800aa4e <__sflush_r+0xea>
 800aa10:	602f      	str	r7, [r5, #0]
 800aa12:	2000      	movs	r0, #0
 800aa14:	e022      	b.n	800aa5c <__sflush_r+0xf8>
 800aa16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa1a:	b21b      	sxth	r3, r3
 800aa1c:	e01b      	b.n	800aa56 <__sflush_r+0xf2>
 800aa1e:	690f      	ldr	r7, [r1, #16]
 800aa20:	2f00      	cmp	r7, #0
 800aa22:	d0f6      	beq.n	800aa12 <__sflush_r+0xae>
 800aa24:	0793      	lsls	r3, r2, #30
 800aa26:	680e      	ldr	r6, [r1, #0]
 800aa28:	bf08      	it	eq
 800aa2a:	694b      	ldreq	r3, [r1, #20]
 800aa2c:	600f      	str	r7, [r1, #0]
 800aa2e:	bf18      	it	ne
 800aa30:	2300      	movne	r3, #0
 800aa32:	eba6 0807 	sub.w	r8, r6, r7
 800aa36:	608b      	str	r3, [r1, #8]
 800aa38:	f1b8 0f00 	cmp.w	r8, #0
 800aa3c:	dde9      	ble.n	800aa12 <__sflush_r+0xae>
 800aa3e:	6a21      	ldr	r1, [r4, #32]
 800aa40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa42:	4643      	mov	r3, r8
 800aa44:	463a      	mov	r2, r7
 800aa46:	4628      	mov	r0, r5
 800aa48:	47b0      	blx	r6
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	dc08      	bgt.n	800aa60 <__sflush_r+0xfc>
 800aa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa56:	81a3      	strh	r3, [r4, #12]
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa60:	4407      	add	r7, r0
 800aa62:	eba8 0800 	sub.w	r8, r8, r0
 800aa66:	e7e7      	b.n	800aa38 <__sflush_r+0xd4>
 800aa68:	dfbffffe 	.word	0xdfbffffe

0800aa6c <_fflush_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	690b      	ldr	r3, [r1, #16]
 800aa70:	4605      	mov	r5, r0
 800aa72:	460c      	mov	r4, r1
 800aa74:	b913      	cbnz	r3, 800aa7c <_fflush_r+0x10>
 800aa76:	2500      	movs	r5, #0
 800aa78:	4628      	mov	r0, r5
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	b118      	cbz	r0, 800aa86 <_fflush_r+0x1a>
 800aa7e:	6a03      	ldr	r3, [r0, #32]
 800aa80:	b90b      	cbnz	r3, 800aa86 <_fflush_r+0x1a>
 800aa82:	f7fd fb17 	bl	80080b4 <__sinit>
 800aa86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f3      	beq.n	800aa76 <_fflush_r+0xa>
 800aa8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa90:	07d0      	lsls	r0, r2, #31
 800aa92:	d404      	bmi.n	800aa9e <_fflush_r+0x32>
 800aa94:	0599      	lsls	r1, r3, #22
 800aa96:	d402      	bmi.n	800aa9e <_fflush_r+0x32>
 800aa98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa9a:	f7fd fc32 	bl	8008302 <__retarget_lock_acquire_recursive>
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f7ff ff5f 	bl	800a964 <__sflush_r>
 800aaa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aaa8:	07da      	lsls	r2, r3, #31
 800aaaa:	4605      	mov	r5, r0
 800aaac:	d4e4      	bmi.n	800aa78 <_fflush_r+0xc>
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	059b      	lsls	r3, r3, #22
 800aab2:	d4e1      	bmi.n	800aa78 <_fflush_r+0xc>
 800aab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aab6:	f7fd fc25 	bl	8008304 <__retarget_lock_release_recursive>
 800aaba:	e7dd      	b.n	800aa78 <_fflush_r+0xc>

0800aabc <memmove>:
 800aabc:	4288      	cmp	r0, r1
 800aabe:	b510      	push	{r4, lr}
 800aac0:	eb01 0402 	add.w	r4, r1, r2
 800aac4:	d902      	bls.n	800aacc <memmove+0x10>
 800aac6:	4284      	cmp	r4, r0
 800aac8:	4623      	mov	r3, r4
 800aaca:	d807      	bhi.n	800aadc <memmove+0x20>
 800aacc:	1e43      	subs	r3, r0, #1
 800aace:	42a1      	cmp	r1, r4
 800aad0:	d008      	beq.n	800aae4 <memmove+0x28>
 800aad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aada:	e7f8      	b.n	800aace <memmove+0x12>
 800aadc:	4402      	add	r2, r0
 800aade:	4601      	mov	r1, r0
 800aae0:	428a      	cmp	r2, r1
 800aae2:	d100      	bne.n	800aae6 <memmove+0x2a>
 800aae4:	bd10      	pop	{r4, pc}
 800aae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaee:	e7f7      	b.n	800aae0 <memmove+0x24>

0800aaf0 <strncmp>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	b16a      	cbz	r2, 800ab10 <strncmp+0x20>
 800aaf4:	3901      	subs	r1, #1
 800aaf6:	1884      	adds	r4, r0, r2
 800aaf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aafc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d103      	bne.n	800ab0c <strncmp+0x1c>
 800ab04:	42a0      	cmp	r0, r4
 800ab06:	d001      	beq.n	800ab0c <strncmp+0x1c>
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d1f5      	bne.n	800aaf8 <strncmp+0x8>
 800ab0c:	1ad0      	subs	r0, r2, r3
 800ab0e:	bd10      	pop	{r4, pc}
 800ab10:	4610      	mov	r0, r2
 800ab12:	e7fc      	b.n	800ab0e <strncmp+0x1e>

0800ab14 <memcpy>:
 800ab14:	440a      	add	r2, r1
 800ab16:	4291      	cmp	r1, r2
 800ab18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab1c:	d100      	bne.n	800ab20 <memcpy+0xc>
 800ab1e:	4770      	bx	lr
 800ab20:	b510      	push	{r4, lr}
 800ab22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab2a:	4291      	cmp	r1, r2
 800ab2c:	d1f9      	bne.n	800ab22 <memcpy+0xe>
 800ab2e:	bd10      	pop	{r4, pc}

0800ab30 <nan>:
 800ab30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab38 <nan+0x8>
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	00000000 	.word	0x00000000
 800ab3c:	7ff80000 	.word	0x7ff80000

0800ab40 <__assert_func>:
 800ab40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab42:	4614      	mov	r4, r2
 800ab44:	461a      	mov	r2, r3
 800ab46:	4b09      	ldr	r3, [pc, #36]	@ (800ab6c <__assert_func+0x2c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	68d8      	ldr	r0, [r3, #12]
 800ab4e:	b954      	cbnz	r4, 800ab66 <__assert_func+0x26>
 800ab50:	4b07      	ldr	r3, [pc, #28]	@ (800ab70 <__assert_func+0x30>)
 800ab52:	461c      	mov	r4, r3
 800ab54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab58:	9100      	str	r1, [sp, #0]
 800ab5a:	462b      	mov	r3, r5
 800ab5c:	4905      	ldr	r1, [pc, #20]	@ (800ab74 <__assert_func+0x34>)
 800ab5e:	f000 fb93 	bl	800b288 <fiprintf>
 800ab62:	f000 fba3 	bl	800b2ac <abort>
 800ab66:	4b04      	ldr	r3, [pc, #16]	@ (800ab78 <__assert_func+0x38>)
 800ab68:	e7f4      	b.n	800ab54 <__assert_func+0x14>
 800ab6a:	bf00      	nop
 800ab6c:	20000028 	.word	0x20000028
 800ab70:	0800bc4d 	.word	0x0800bc4d
 800ab74:	0800bc1f 	.word	0x0800bc1f
 800ab78:	0800bc12 	.word	0x0800bc12

0800ab7c <rshift>:
 800ab7c:	6903      	ldr	r3, [r0, #16]
 800ab7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab8a:	f100 0414 	add.w	r4, r0, #20
 800ab8e:	dd45      	ble.n	800ac1c <rshift+0xa0>
 800ab90:	f011 011f 	ands.w	r1, r1, #31
 800ab94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab9c:	d10c      	bne.n	800abb8 <rshift+0x3c>
 800ab9e:	f100 0710 	add.w	r7, r0, #16
 800aba2:	4629      	mov	r1, r5
 800aba4:	42b1      	cmp	r1, r6
 800aba6:	d334      	bcc.n	800ac12 <rshift+0x96>
 800aba8:	1a9b      	subs	r3, r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	1eea      	subs	r2, r5, #3
 800abae:	4296      	cmp	r6, r2
 800abb0:	bf38      	it	cc
 800abb2:	2300      	movcc	r3, #0
 800abb4:	4423      	add	r3, r4
 800abb6:	e015      	b.n	800abe4 <rshift+0x68>
 800abb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abbc:	f1c1 0820 	rsb	r8, r1, #32
 800abc0:	40cf      	lsrs	r7, r1
 800abc2:	f105 0e04 	add.w	lr, r5, #4
 800abc6:	46a1      	mov	r9, r4
 800abc8:	4576      	cmp	r6, lr
 800abca:	46f4      	mov	ip, lr
 800abcc:	d815      	bhi.n	800abfa <rshift+0x7e>
 800abce:	1a9a      	subs	r2, r3, r2
 800abd0:	0092      	lsls	r2, r2, #2
 800abd2:	3a04      	subs	r2, #4
 800abd4:	3501      	adds	r5, #1
 800abd6:	42ae      	cmp	r6, r5
 800abd8:	bf38      	it	cc
 800abda:	2200      	movcc	r2, #0
 800abdc:	18a3      	adds	r3, r4, r2
 800abde:	50a7      	str	r7, [r4, r2]
 800abe0:	b107      	cbz	r7, 800abe4 <rshift+0x68>
 800abe2:	3304      	adds	r3, #4
 800abe4:	1b1a      	subs	r2, r3, r4
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abec:	bf08      	it	eq
 800abee:	2300      	moveq	r3, #0
 800abf0:	6102      	str	r2, [r0, #16]
 800abf2:	bf08      	it	eq
 800abf4:	6143      	streq	r3, [r0, #20]
 800abf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abfa:	f8dc c000 	ldr.w	ip, [ip]
 800abfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac02:	ea4c 0707 	orr.w	r7, ip, r7
 800ac06:	f849 7b04 	str.w	r7, [r9], #4
 800ac0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac0e:	40cf      	lsrs	r7, r1
 800ac10:	e7da      	b.n	800abc8 <rshift+0x4c>
 800ac12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac1a:	e7c3      	b.n	800aba4 <rshift+0x28>
 800ac1c:	4623      	mov	r3, r4
 800ac1e:	e7e1      	b.n	800abe4 <rshift+0x68>

0800ac20 <__hexdig_fun>:
 800ac20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac24:	2b09      	cmp	r3, #9
 800ac26:	d802      	bhi.n	800ac2e <__hexdig_fun+0xe>
 800ac28:	3820      	subs	r0, #32
 800ac2a:	b2c0      	uxtb	r0, r0
 800ac2c:	4770      	bx	lr
 800ac2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac32:	2b05      	cmp	r3, #5
 800ac34:	d801      	bhi.n	800ac3a <__hexdig_fun+0x1a>
 800ac36:	3847      	subs	r0, #71	@ 0x47
 800ac38:	e7f7      	b.n	800ac2a <__hexdig_fun+0xa>
 800ac3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d801      	bhi.n	800ac46 <__hexdig_fun+0x26>
 800ac42:	3827      	subs	r0, #39	@ 0x27
 800ac44:	e7f1      	b.n	800ac2a <__hexdig_fun+0xa>
 800ac46:	2000      	movs	r0, #0
 800ac48:	4770      	bx	lr
	...

0800ac4c <__gethex>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	b085      	sub	sp, #20
 800ac52:	468a      	mov	sl, r1
 800ac54:	9302      	str	r3, [sp, #8]
 800ac56:	680b      	ldr	r3, [r1, #0]
 800ac58:	9001      	str	r0, [sp, #4]
 800ac5a:	4690      	mov	r8, r2
 800ac5c:	1c9c      	adds	r4, r3, #2
 800ac5e:	46a1      	mov	r9, r4
 800ac60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac64:	2830      	cmp	r0, #48	@ 0x30
 800ac66:	d0fa      	beq.n	800ac5e <__gethex+0x12>
 800ac68:	eba9 0303 	sub.w	r3, r9, r3
 800ac6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac70:	f7ff ffd6 	bl	800ac20 <__hexdig_fun>
 800ac74:	4605      	mov	r5, r0
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d168      	bne.n	800ad4c <__gethex+0x100>
 800ac7a:	49a0      	ldr	r1, [pc, #640]	@ (800aefc <__gethex+0x2b0>)
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	4648      	mov	r0, r9
 800ac80:	f7ff ff36 	bl	800aaf0 <strncmp>
 800ac84:	4607      	mov	r7, r0
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d167      	bne.n	800ad5a <__gethex+0x10e>
 800ac8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac8e:	4626      	mov	r6, r4
 800ac90:	f7ff ffc6 	bl	800ac20 <__hexdig_fun>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d062      	beq.n	800ad5e <__gethex+0x112>
 800ac98:	4623      	mov	r3, r4
 800ac9a:	7818      	ldrb	r0, [r3, #0]
 800ac9c:	2830      	cmp	r0, #48	@ 0x30
 800ac9e:	4699      	mov	r9, r3
 800aca0:	f103 0301 	add.w	r3, r3, #1
 800aca4:	d0f9      	beq.n	800ac9a <__gethex+0x4e>
 800aca6:	f7ff ffbb 	bl	800ac20 <__hexdig_fun>
 800acaa:	fab0 f580 	clz	r5, r0
 800acae:	096d      	lsrs	r5, r5, #5
 800acb0:	f04f 0b01 	mov.w	fp, #1
 800acb4:	464a      	mov	r2, r9
 800acb6:	4616      	mov	r6, r2
 800acb8:	3201      	adds	r2, #1
 800acba:	7830      	ldrb	r0, [r6, #0]
 800acbc:	f7ff ffb0 	bl	800ac20 <__hexdig_fun>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d1f8      	bne.n	800acb6 <__gethex+0x6a>
 800acc4:	498d      	ldr	r1, [pc, #564]	@ (800aefc <__gethex+0x2b0>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff ff11 	bl	800aaf0 <strncmp>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d13f      	bne.n	800ad52 <__gethex+0x106>
 800acd2:	b944      	cbnz	r4, 800ace6 <__gethex+0x9a>
 800acd4:	1c74      	adds	r4, r6, #1
 800acd6:	4622      	mov	r2, r4
 800acd8:	4616      	mov	r6, r2
 800acda:	3201      	adds	r2, #1
 800acdc:	7830      	ldrb	r0, [r6, #0]
 800acde:	f7ff ff9f 	bl	800ac20 <__hexdig_fun>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d1f8      	bne.n	800acd8 <__gethex+0x8c>
 800ace6:	1ba4      	subs	r4, r4, r6
 800ace8:	00a7      	lsls	r7, r4, #2
 800acea:	7833      	ldrb	r3, [r6, #0]
 800acec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acf0:	2b50      	cmp	r3, #80	@ 0x50
 800acf2:	d13e      	bne.n	800ad72 <__gethex+0x126>
 800acf4:	7873      	ldrb	r3, [r6, #1]
 800acf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800acf8:	d033      	beq.n	800ad62 <__gethex+0x116>
 800acfa:	2b2d      	cmp	r3, #45	@ 0x2d
 800acfc:	d034      	beq.n	800ad68 <__gethex+0x11c>
 800acfe:	1c71      	adds	r1, r6, #1
 800ad00:	2400      	movs	r4, #0
 800ad02:	7808      	ldrb	r0, [r1, #0]
 800ad04:	f7ff ff8c 	bl	800ac20 <__hexdig_fun>
 800ad08:	1e43      	subs	r3, r0, #1
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b18      	cmp	r3, #24
 800ad0e:	d830      	bhi.n	800ad72 <__gethex+0x126>
 800ad10:	f1a0 0210 	sub.w	r2, r0, #16
 800ad14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad18:	f7ff ff82 	bl	800ac20 <__hexdig_fun>
 800ad1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad20:	fa5f fc8c 	uxtb.w	ip, ip
 800ad24:	f1bc 0f18 	cmp.w	ip, #24
 800ad28:	f04f 030a 	mov.w	r3, #10
 800ad2c:	d91e      	bls.n	800ad6c <__gethex+0x120>
 800ad2e:	b104      	cbz	r4, 800ad32 <__gethex+0xe6>
 800ad30:	4252      	negs	r2, r2
 800ad32:	4417      	add	r7, r2
 800ad34:	f8ca 1000 	str.w	r1, [sl]
 800ad38:	b1ed      	cbz	r5, 800ad76 <__gethex+0x12a>
 800ad3a:	f1bb 0f00 	cmp.w	fp, #0
 800ad3e:	bf0c      	ite	eq
 800ad40:	2506      	moveq	r5, #6
 800ad42:	2500      	movne	r5, #0
 800ad44:	4628      	mov	r0, r5
 800ad46:	b005      	add	sp, #20
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4c:	2500      	movs	r5, #0
 800ad4e:	462c      	mov	r4, r5
 800ad50:	e7b0      	b.n	800acb4 <__gethex+0x68>
 800ad52:	2c00      	cmp	r4, #0
 800ad54:	d1c7      	bne.n	800ace6 <__gethex+0x9a>
 800ad56:	4627      	mov	r7, r4
 800ad58:	e7c7      	b.n	800acea <__gethex+0x9e>
 800ad5a:	464e      	mov	r6, r9
 800ad5c:	462f      	mov	r7, r5
 800ad5e:	2501      	movs	r5, #1
 800ad60:	e7c3      	b.n	800acea <__gethex+0x9e>
 800ad62:	2400      	movs	r4, #0
 800ad64:	1cb1      	adds	r1, r6, #2
 800ad66:	e7cc      	b.n	800ad02 <__gethex+0xb6>
 800ad68:	2401      	movs	r4, #1
 800ad6a:	e7fb      	b.n	800ad64 <__gethex+0x118>
 800ad6c:	fb03 0002 	mla	r0, r3, r2, r0
 800ad70:	e7ce      	b.n	800ad10 <__gethex+0xc4>
 800ad72:	4631      	mov	r1, r6
 800ad74:	e7de      	b.n	800ad34 <__gethex+0xe8>
 800ad76:	eba6 0309 	sub.w	r3, r6, r9
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	2b07      	cmp	r3, #7
 800ad80:	dc0a      	bgt.n	800ad98 <__gethex+0x14c>
 800ad82:	9801      	ldr	r0, [sp, #4]
 800ad84:	f7fe f95e 	bl	8009044 <_Balloc>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	b940      	cbnz	r0, 800ad9e <__gethex+0x152>
 800ad8c:	4b5c      	ldr	r3, [pc, #368]	@ (800af00 <__gethex+0x2b4>)
 800ad8e:	4602      	mov	r2, r0
 800ad90:	21e4      	movs	r1, #228	@ 0xe4
 800ad92:	485c      	ldr	r0, [pc, #368]	@ (800af04 <__gethex+0x2b8>)
 800ad94:	f7ff fed4 	bl	800ab40 <__assert_func>
 800ad98:	3101      	adds	r1, #1
 800ad9a:	105b      	asrs	r3, r3, #1
 800ad9c:	e7ef      	b.n	800ad7e <__gethex+0x132>
 800ad9e:	f100 0a14 	add.w	sl, r0, #20
 800ada2:	2300      	movs	r3, #0
 800ada4:	4655      	mov	r5, sl
 800ada6:	469b      	mov	fp, r3
 800ada8:	45b1      	cmp	r9, r6
 800adaa:	d337      	bcc.n	800ae1c <__gethex+0x1d0>
 800adac:	f845 bb04 	str.w	fp, [r5], #4
 800adb0:	eba5 050a 	sub.w	r5, r5, sl
 800adb4:	10ad      	asrs	r5, r5, #2
 800adb6:	6125      	str	r5, [r4, #16]
 800adb8:	4658      	mov	r0, fp
 800adba:	f7fe fa35 	bl	8009228 <__hi0bits>
 800adbe:	016d      	lsls	r5, r5, #5
 800adc0:	f8d8 6000 	ldr.w	r6, [r8]
 800adc4:	1a2d      	subs	r5, r5, r0
 800adc6:	42b5      	cmp	r5, r6
 800adc8:	dd54      	ble.n	800ae74 <__gethex+0x228>
 800adca:	1bad      	subs	r5, r5, r6
 800adcc:	4629      	mov	r1, r5
 800adce:	4620      	mov	r0, r4
 800add0:	f7fe fdc9 	bl	8009966 <__any_on>
 800add4:	4681      	mov	r9, r0
 800add6:	b178      	cbz	r0, 800adf8 <__gethex+0x1ac>
 800add8:	1e6b      	subs	r3, r5, #1
 800adda:	1159      	asrs	r1, r3, #5
 800addc:	f003 021f 	and.w	r2, r3, #31
 800ade0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ade4:	f04f 0901 	mov.w	r9, #1
 800ade8:	fa09 f202 	lsl.w	r2, r9, r2
 800adec:	420a      	tst	r2, r1
 800adee:	d003      	beq.n	800adf8 <__gethex+0x1ac>
 800adf0:	454b      	cmp	r3, r9
 800adf2:	dc36      	bgt.n	800ae62 <__gethex+0x216>
 800adf4:	f04f 0902 	mov.w	r9, #2
 800adf8:	4629      	mov	r1, r5
 800adfa:	4620      	mov	r0, r4
 800adfc:	f7ff febe 	bl	800ab7c <rshift>
 800ae00:	442f      	add	r7, r5
 800ae02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae06:	42bb      	cmp	r3, r7
 800ae08:	da42      	bge.n	800ae90 <__gethex+0x244>
 800ae0a:	9801      	ldr	r0, [sp, #4]
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	f7fe f959 	bl	80090c4 <_Bfree>
 800ae12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae14:	2300      	movs	r3, #0
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	25a3      	movs	r5, #163	@ 0xa3
 800ae1a:	e793      	b.n	800ad44 <__gethex+0xf8>
 800ae1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae22:	d012      	beq.n	800ae4a <__gethex+0x1fe>
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d104      	bne.n	800ae32 <__gethex+0x1e6>
 800ae28:	f845 bb04 	str.w	fp, [r5], #4
 800ae2c:	f04f 0b00 	mov.w	fp, #0
 800ae30:	465b      	mov	r3, fp
 800ae32:	7830      	ldrb	r0, [r6, #0]
 800ae34:	9303      	str	r3, [sp, #12]
 800ae36:	f7ff fef3 	bl	800ac20 <__hexdig_fun>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	f000 000f 	and.w	r0, r0, #15
 800ae40:	4098      	lsls	r0, r3
 800ae42:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae46:	3304      	adds	r3, #4
 800ae48:	e7ae      	b.n	800ada8 <__gethex+0x15c>
 800ae4a:	45b1      	cmp	r9, r6
 800ae4c:	d8ea      	bhi.n	800ae24 <__gethex+0x1d8>
 800ae4e:	492b      	ldr	r1, [pc, #172]	@ (800aefc <__gethex+0x2b0>)
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7ff fe4b 	bl	800aaf0 <strncmp>
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d1e1      	bne.n	800ae24 <__gethex+0x1d8>
 800ae60:	e7a2      	b.n	800ada8 <__gethex+0x15c>
 800ae62:	1ea9      	subs	r1, r5, #2
 800ae64:	4620      	mov	r0, r4
 800ae66:	f7fe fd7e 	bl	8009966 <__any_on>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d0c2      	beq.n	800adf4 <__gethex+0x1a8>
 800ae6e:	f04f 0903 	mov.w	r9, #3
 800ae72:	e7c1      	b.n	800adf8 <__gethex+0x1ac>
 800ae74:	da09      	bge.n	800ae8a <__gethex+0x23e>
 800ae76:	1b75      	subs	r5, r6, r5
 800ae78:	4621      	mov	r1, r4
 800ae7a:	9801      	ldr	r0, [sp, #4]
 800ae7c:	462a      	mov	r2, r5
 800ae7e:	f7fe fb39 	bl	80094f4 <__lshift>
 800ae82:	1b7f      	subs	r7, r7, r5
 800ae84:	4604      	mov	r4, r0
 800ae86:	f100 0a14 	add.w	sl, r0, #20
 800ae8a:	f04f 0900 	mov.w	r9, #0
 800ae8e:	e7b8      	b.n	800ae02 <__gethex+0x1b6>
 800ae90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae94:	42bd      	cmp	r5, r7
 800ae96:	dd6f      	ble.n	800af78 <__gethex+0x32c>
 800ae98:	1bed      	subs	r5, r5, r7
 800ae9a:	42ae      	cmp	r6, r5
 800ae9c:	dc34      	bgt.n	800af08 <__gethex+0x2bc>
 800ae9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d022      	beq.n	800aeec <__gethex+0x2a0>
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d024      	beq.n	800aef4 <__gethex+0x2a8>
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d115      	bne.n	800aeda <__gethex+0x28e>
 800aeae:	42ae      	cmp	r6, r5
 800aeb0:	d113      	bne.n	800aeda <__gethex+0x28e>
 800aeb2:	2e01      	cmp	r6, #1
 800aeb4:	d10b      	bne.n	800aece <__gethex+0x282>
 800aeb6:	9a02      	ldr	r2, [sp, #8]
 800aeb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	2301      	movs	r3, #1
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	f8ca 3000 	str.w	r3, [sl]
 800aec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aec8:	2562      	movs	r5, #98	@ 0x62
 800aeca:	601c      	str	r4, [r3, #0]
 800aecc:	e73a      	b.n	800ad44 <__gethex+0xf8>
 800aece:	1e71      	subs	r1, r6, #1
 800aed0:	4620      	mov	r0, r4
 800aed2:	f7fe fd48 	bl	8009966 <__any_on>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1ed      	bne.n	800aeb6 <__gethex+0x26a>
 800aeda:	9801      	ldr	r0, [sp, #4]
 800aedc:	4621      	mov	r1, r4
 800aede:	f7fe f8f1 	bl	80090c4 <_Bfree>
 800aee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aee4:	2300      	movs	r3, #0
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	2550      	movs	r5, #80	@ 0x50
 800aeea:	e72b      	b.n	800ad44 <__gethex+0xf8>
 800aeec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f3      	bne.n	800aeda <__gethex+0x28e>
 800aef2:	e7e0      	b.n	800aeb6 <__gethex+0x26a>
 800aef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1dd      	bne.n	800aeb6 <__gethex+0x26a>
 800aefa:	e7ee      	b.n	800aeda <__gethex+0x28e>
 800aefc:	0800baa0 	.word	0x0800baa0
 800af00:	0800b939 	.word	0x0800b939
 800af04:	0800bc4e 	.word	0x0800bc4e
 800af08:	1e6f      	subs	r7, r5, #1
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	d130      	bne.n	800af72 <__gethex+0x326>
 800af10:	b127      	cbz	r7, 800af1c <__gethex+0x2d0>
 800af12:	4639      	mov	r1, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f7fe fd26 	bl	8009966 <__any_on>
 800af1a:	4681      	mov	r9, r0
 800af1c:	117a      	asrs	r2, r7, #5
 800af1e:	2301      	movs	r3, #1
 800af20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af24:	f007 071f 	and.w	r7, r7, #31
 800af28:	40bb      	lsls	r3, r7
 800af2a:	4213      	tst	r3, r2
 800af2c:	4629      	mov	r1, r5
 800af2e:	4620      	mov	r0, r4
 800af30:	bf18      	it	ne
 800af32:	f049 0902 	orrne.w	r9, r9, #2
 800af36:	f7ff fe21 	bl	800ab7c <rshift>
 800af3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af3e:	1b76      	subs	r6, r6, r5
 800af40:	2502      	movs	r5, #2
 800af42:	f1b9 0f00 	cmp.w	r9, #0
 800af46:	d047      	beq.n	800afd8 <__gethex+0x38c>
 800af48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d015      	beq.n	800af7c <__gethex+0x330>
 800af50:	2b03      	cmp	r3, #3
 800af52:	d017      	beq.n	800af84 <__gethex+0x338>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d109      	bne.n	800af6c <__gethex+0x320>
 800af58:	f019 0f02 	tst.w	r9, #2
 800af5c:	d006      	beq.n	800af6c <__gethex+0x320>
 800af5e:	f8da 3000 	ldr.w	r3, [sl]
 800af62:	ea49 0903 	orr.w	r9, r9, r3
 800af66:	f019 0f01 	tst.w	r9, #1
 800af6a:	d10e      	bne.n	800af8a <__gethex+0x33e>
 800af6c:	f045 0510 	orr.w	r5, r5, #16
 800af70:	e032      	b.n	800afd8 <__gethex+0x38c>
 800af72:	f04f 0901 	mov.w	r9, #1
 800af76:	e7d1      	b.n	800af1c <__gethex+0x2d0>
 800af78:	2501      	movs	r5, #1
 800af7a:	e7e2      	b.n	800af42 <__gethex+0x2f6>
 800af7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af7e:	f1c3 0301 	rsb	r3, r3, #1
 800af82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <__gethex+0x320>
 800af8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af8e:	f104 0314 	add.w	r3, r4, #20
 800af92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af9a:	f04f 0c00 	mov.w	ip, #0
 800af9e:	4618      	mov	r0, r3
 800afa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afa8:	d01b      	beq.n	800afe2 <__gethex+0x396>
 800afaa:	3201      	adds	r2, #1
 800afac:	6002      	str	r2, [r0, #0]
 800afae:	2d02      	cmp	r5, #2
 800afb0:	f104 0314 	add.w	r3, r4, #20
 800afb4:	d13c      	bne.n	800b030 <__gethex+0x3e4>
 800afb6:	f8d8 2000 	ldr.w	r2, [r8]
 800afba:	3a01      	subs	r2, #1
 800afbc:	42b2      	cmp	r2, r6
 800afbe:	d109      	bne.n	800afd4 <__gethex+0x388>
 800afc0:	1171      	asrs	r1, r6, #5
 800afc2:	2201      	movs	r2, #1
 800afc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afc8:	f006 061f 	and.w	r6, r6, #31
 800afcc:	fa02 f606 	lsl.w	r6, r2, r6
 800afd0:	421e      	tst	r6, r3
 800afd2:	d13a      	bne.n	800b04a <__gethex+0x3fe>
 800afd4:	f045 0520 	orr.w	r5, r5, #32
 800afd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afda:	601c      	str	r4, [r3, #0]
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	601f      	str	r7, [r3, #0]
 800afe0:	e6b0      	b.n	800ad44 <__gethex+0xf8>
 800afe2:	4299      	cmp	r1, r3
 800afe4:	f843 cc04 	str.w	ip, [r3, #-4]
 800afe8:	d8d9      	bhi.n	800af9e <__gethex+0x352>
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	459b      	cmp	fp, r3
 800afee:	db17      	blt.n	800b020 <__gethex+0x3d4>
 800aff0:	6861      	ldr	r1, [r4, #4]
 800aff2:	9801      	ldr	r0, [sp, #4]
 800aff4:	3101      	adds	r1, #1
 800aff6:	f7fe f825 	bl	8009044 <_Balloc>
 800affa:	4681      	mov	r9, r0
 800affc:	b918      	cbnz	r0, 800b006 <__gethex+0x3ba>
 800affe:	4b1a      	ldr	r3, [pc, #104]	@ (800b068 <__gethex+0x41c>)
 800b000:	4602      	mov	r2, r0
 800b002:	2184      	movs	r1, #132	@ 0x84
 800b004:	e6c5      	b.n	800ad92 <__gethex+0x146>
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	3202      	adds	r2, #2
 800b00a:	f104 010c 	add.w	r1, r4, #12
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	300c      	adds	r0, #12
 800b012:	f7ff fd7f 	bl	800ab14 <memcpy>
 800b016:	4621      	mov	r1, r4
 800b018:	9801      	ldr	r0, [sp, #4]
 800b01a:	f7fe f853 	bl	80090c4 <_Bfree>
 800b01e:	464c      	mov	r4, r9
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b028:	6122      	str	r2, [r4, #16]
 800b02a:	2201      	movs	r2, #1
 800b02c:	615a      	str	r2, [r3, #20]
 800b02e:	e7be      	b.n	800afae <__gethex+0x362>
 800b030:	6922      	ldr	r2, [r4, #16]
 800b032:	455a      	cmp	r2, fp
 800b034:	dd0b      	ble.n	800b04e <__gethex+0x402>
 800b036:	2101      	movs	r1, #1
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff fd9f 	bl	800ab7c <rshift>
 800b03e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b042:	3701      	adds	r7, #1
 800b044:	42bb      	cmp	r3, r7
 800b046:	f6ff aee0 	blt.w	800ae0a <__gethex+0x1be>
 800b04a:	2501      	movs	r5, #1
 800b04c:	e7c2      	b.n	800afd4 <__gethex+0x388>
 800b04e:	f016 061f 	ands.w	r6, r6, #31
 800b052:	d0fa      	beq.n	800b04a <__gethex+0x3fe>
 800b054:	4453      	add	r3, sl
 800b056:	f1c6 0620 	rsb	r6, r6, #32
 800b05a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b05e:	f7fe f8e3 	bl	8009228 <__hi0bits>
 800b062:	42b0      	cmp	r0, r6
 800b064:	dbe7      	blt.n	800b036 <__gethex+0x3ea>
 800b066:	e7f0      	b.n	800b04a <__gethex+0x3fe>
 800b068:	0800b939 	.word	0x0800b939

0800b06c <L_shift>:
 800b06c:	f1c2 0208 	rsb	r2, r2, #8
 800b070:	0092      	lsls	r2, r2, #2
 800b072:	b570      	push	{r4, r5, r6, lr}
 800b074:	f1c2 0620 	rsb	r6, r2, #32
 800b078:	6843      	ldr	r3, [r0, #4]
 800b07a:	6804      	ldr	r4, [r0, #0]
 800b07c:	fa03 f506 	lsl.w	r5, r3, r6
 800b080:	432c      	orrs	r4, r5
 800b082:	40d3      	lsrs	r3, r2
 800b084:	6004      	str	r4, [r0, #0]
 800b086:	f840 3f04 	str.w	r3, [r0, #4]!
 800b08a:	4288      	cmp	r0, r1
 800b08c:	d3f4      	bcc.n	800b078 <L_shift+0xc>
 800b08e:	bd70      	pop	{r4, r5, r6, pc}

0800b090 <__match>:
 800b090:	b530      	push	{r4, r5, lr}
 800b092:	6803      	ldr	r3, [r0, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09a:	b914      	cbnz	r4, 800b0a2 <__match+0x12>
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	2001      	movs	r0, #1
 800b0a0:	bd30      	pop	{r4, r5, pc}
 800b0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b0aa:	2d19      	cmp	r5, #25
 800b0ac:	bf98      	it	ls
 800b0ae:	3220      	addls	r2, #32
 800b0b0:	42a2      	cmp	r2, r4
 800b0b2:	d0f0      	beq.n	800b096 <__match+0x6>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e7f3      	b.n	800b0a0 <__match+0x10>

0800b0b8 <__hexnan>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	680b      	ldr	r3, [r1, #0]
 800b0be:	6801      	ldr	r1, [r0, #0]
 800b0c0:	115e      	asrs	r6, r3, #5
 800b0c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0c6:	f013 031f 	ands.w	r3, r3, #31
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	bf18      	it	ne
 800b0ce:	3604      	addne	r6, #4
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	1f37      	subs	r7, r6, #4
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	4690      	mov	r8, r2
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0de:	46b9      	mov	r9, r7
 800b0e0:	463c      	mov	r4, r7
 800b0e2:	9502      	str	r5, [sp, #8]
 800b0e4:	46ab      	mov	fp, r5
 800b0e6:	784a      	ldrb	r2, [r1, #1]
 800b0e8:	1c4b      	adds	r3, r1, #1
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	b342      	cbz	r2, 800b140 <__hexnan+0x88>
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	9105      	str	r1, [sp, #20]
 800b0f2:	9204      	str	r2, [sp, #16]
 800b0f4:	f7ff fd94 	bl	800ac20 <__hexdig_fun>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d151      	bne.n	800b1a0 <__hexnan+0xe8>
 800b0fc:	9a04      	ldr	r2, [sp, #16]
 800b0fe:	9905      	ldr	r1, [sp, #20]
 800b100:	2a20      	cmp	r2, #32
 800b102:	d818      	bhi.n	800b136 <__hexnan+0x7e>
 800b104:	9b02      	ldr	r3, [sp, #8]
 800b106:	459b      	cmp	fp, r3
 800b108:	dd13      	ble.n	800b132 <__hexnan+0x7a>
 800b10a:	454c      	cmp	r4, r9
 800b10c:	d206      	bcs.n	800b11c <__hexnan+0x64>
 800b10e:	2d07      	cmp	r5, #7
 800b110:	dc04      	bgt.n	800b11c <__hexnan+0x64>
 800b112:	462a      	mov	r2, r5
 800b114:	4649      	mov	r1, r9
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff ffa8 	bl	800b06c <L_shift>
 800b11c:	4544      	cmp	r4, r8
 800b11e:	d952      	bls.n	800b1c6 <__hexnan+0x10e>
 800b120:	2300      	movs	r3, #0
 800b122:	f1a4 0904 	sub.w	r9, r4, #4
 800b126:	f844 3c04 	str.w	r3, [r4, #-4]
 800b12a:	f8cd b008 	str.w	fp, [sp, #8]
 800b12e:	464c      	mov	r4, r9
 800b130:	461d      	mov	r5, r3
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	e7d7      	b.n	800b0e6 <__hexnan+0x2e>
 800b136:	2a29      	cmp	r2, #41	@ 0x29
 800b138:	d157      	bne.n	800b1ea <__hexnan+0x132>
 800b13a:	3102      	adds	r1, #2
 800b13c:	f8ca 1000 	str.w	r1, [sl]
 800b140:	f1bb 0f00 	cmp.w	fp, #0
 800b144:	d051      	beq.n	800b1ea <__hexnan+0x132>
 800b146:	454c      	cmp	r4, r9
 800b148:	d206      	bcs.n	800b158 <__hexnan+0xa0>
 800b14a:	2d07      	cmp	r5, #7
 800b14c:	dc04      	bgt.n	800b158 <__hexnan+0xa0>
 800b14e:	462a      	mov	r2, r5
 800b150:	4649      	mov	r1, r9
 800b152:	4620      	mov	r0, r4
 800b154:	f7ff ff8a 	bl	800b06c <L_shift>
 800b158:	4544      	cmp	r4, r8
 800b15a:	d936      	bls.n	800b1ca <__hexnan+0x112>
 800b15c:	f1a8 0204 	sub.w	r2, r8, #4
 800b160:	4623      	mov	r3, r4
 800b162:	f853 1b04 	ldr.w	r1, [r3], #4
 800b166:	f842 1f04 	str.w	r1, [r2, #4]!
 800b16a:	429f      	cmp	r7, r3
 800b16c:	d2f9      	bcs.n	800b162 <__hexnan+0xaa>
 800b16e:	1b3b      	subs	r3, r7, r4
 800b170:	f023 0303 	bic.w	r3, r3, #3
 800b174:	3304      	adds	r3, #4
 800b176:	3401      	adds	r4, #1
 800b178:	3e03      	subs	r6, #3
 800b17a:	42b4      	cmp	r4, r6
 800b17c:	bf88      	it	hi
 800b17e:	2304      	movhi	r3, #4
 800b180:	4443      	add	r3, r8
 800b182:	2200      	movs	r2, #0
 800b184:	f843 2b04 	str.w	r2, [r3], #4
 800b188:	429f      	cmp	r7, r3
 800b18a:	d2fb      	bcs.n	800b184 <__hexnan+0xcc>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	b91b      	cbnz	r3, 800b198 <__hexnan+0xe0>
 800b190:	4547      	cmp	r7, r8
 800b192:	d128      	bne.n	800b1e6 <__hexnan+0x12e>
 800b194:	2301      	movs	r3, #1
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	2005      	movs	r0, #5
 800b19a:	b007      	add	sp, #28
 800b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a0:	3501      	adds	r5, #1
 800b1a2:	2d08      	cmp	r5, #8
 800b1a4:	f10b 0b01 	add.w	fp, fp, #1
 800b1a8:	dd06      	ble.n	800b1b8 <__hexnan+0x100>
 800b1aa:	4544      	cmp	r4, r8
 800b1ac:	d9c1      	bls.n	800b132 <__hexnan+0x7a>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1b4:	2501      	movs	r5, #1
 800b1b6:	3c04      	subs	r4, #4
 800b1b8:	6822      	ldr	r2, [r4, #0]
 800b1ba:	f000 000f 	and.w	r0, r0, #15
 800b1be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	e7b5      	b.n	800b132 <__hexnan+0x7a>
 800b1c6:	2508      	movs	r5, #8
 800b1c8:	e7b3      	b.n	800b132 <__hexnan+0x7a>
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0dd      	beq.n	800b18c <__hexnan+0xd4>
 800b1d0:	f1c3 0320 	rsb	r3, r3, #32
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	40da      	lsrs	r2, r3
 800b1da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1e4:	e7d2      	b.n	800b18c <__hexnan+0xd4>
 800b1e6:	3f04      	subs	r7, #4
 800b1e8:	e7d0      	b.n	800b18c <__hexnan+0xd4>
 800b1ea:	2004      	movs	r0, #4
 800b1ec:	e7d5      	b.n	800b19a <__hexnan+0xe2>

0800b1ee <__ascii_mbtowc>:
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	b901      	cbnz	r1, 800b1f4 <__ascii_mbtowc+0x6>
 800b1f2:	a901      	add	r1, sp, #4
 800b1f4:	b142      	cbz	r2, 800b208 <__ascii_mbtowc+0x1a>
 800b1f6:	b14b      	cbz	r3, 800b20c <__ascii_mbtowc+0x1e>
 800b1f8:	7813      	ldrb	r3, [r2, #0]
 800b1fa:	600b      	str	r3, [r1, #0]
 800b1fc:	7812      	ldrb	r2, [r2, #0]
 800b1fe:	1e10      	subs	r0, r2, #0
 800b200:	bf18      	it	ne
 800b202:	2001      	movne	r0, #1
 800b204:	b002      	add	sp, #8
 800b206:	4770      	bx	lr
 800b208:	4610      	mov	r0, r2
 800b20a:	e7fb      	b.n	800b204 <__ascii_mbtowc+0x16>
 800b20c:	f06f 0001 	mvn.w	r0, #1
 800b210:	e7f8      	b.n	800b204 <__ascii_mbtowc+0x16>

0800b212 <_realloc_r>:
 800b212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b216:	4680      	mov	r8, r0
 800b218:	4615      	mov	r5, r2
 800b21a:	460c      	mov	r4, r1
 800b21c:	b921      	cbnz	r1, 800b228 <_realloc_r+0x16>
 800b21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b222:	4611      	mov	r1, r2
 800b224:	f7fb bfc2 	b.w	80071ac <_malloc_r>
 800b228:	b92a      	cbnz	r2, 800b236 <_realloc_r+0x24>
 800b22a:	f7fd fec1 	bl	8008fb0 <_free_r>
 800b22e:	2400      	movs	r4, #0
 800b230:	4620      	mov	r0, r4
 800b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b236:	f000 f840 	bl	800b2ba <_malloc_usable_size_r>
 800b23a:	4285      	cmp	r5, r0
 800b23c:	4606      	mov	r6, r0
 800b23e:	d802      	bhi.n	800b246 <_realloc_r+0x34>
 800b240:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b244:	d8f4      	bhi.n	800b230 <_realloc_r+0x1e>
 800b246:	4629      	mov	r1, r5
 800b248:	4640      	mov	r0, r8
 800b24a:	f7fb ffaf 	bl	80071ac <_malloc_r>
 800b24e:	4607      	mov	r7, r0
 800b250:	2800      	cmp	r0, #0
 800b252:	d0ec      	beq.n	800b22e <_realloc_r+0x1c>
 800b254:	42b5      	cmp	r5, r6
 800b256:	462a      	mov	r2, r5
 800b258:	4621      	mov	r1, r4
 800b25a:	bf28      	it	cs
 800b25c:	4632      	movcs	r2, r6
 800b25e:	f7ff fc59 	bl	800ab14 <memcpy>
 800b262:	4621      	mov	r1, r4
 800b264:	4640      	mov	r0, r8
 800b266:	f7fd fea3 	bl	8008fb0 <_free_r>
 800b26a:	463c      	mov	r4, r7
 800b26c:	e7e0      	b.n	800b230 <_realloc_r+0x1e>

0800b26e <__ascii_wctomb>:
 800b26e:	4603      	mov	r3, r0
 800b270:	4608      	mov	r0, r1
 800b272:	b141      	cbz	r1, 800b286 <__ascii_wctomb+0x18>
 800b274:	2aff      	cmp	r2, #255	@ 0xff
 800b276:	d904      	bls.n	800b282 <__ascii_wctomb+0x14>
 800b278:	228a      	movs	r2, #138	@ 0x8a
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	4770      	bx	lr
 800b282:	700a      	strb	r2, [r1, #0]
 800b284:	2001      	movs	r0, #1
 800b286:	4770      	bx	lr

0800b288 <fiprintf>:
 800b288:	b40e      	push	{r1, r2, r3}
 800b28a:	b503      	push	{r0, r1, lr}
 800b28c:	4601      	mov	r1, r0
 800b28e:	ab03      	add	r3, sp, #12
 800b290:	4805      	ldr	r0, [pc, #20]	@ (800b2a8 <fiprintf+0x20>)
 800b292:	f853 2b04 	ldr.w	r2, [r3], #4
 800b296:	6800      	ldr	r0, [r0, #0]
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	f000 f83f 	bl	800b31c <_vfiprintf_r>
 800b29e:	b002      	add	sp, #8
 800b2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2a4:	b003      	add	sp, #12
 800b2a6:	4770      	bx	lr
 800b2a8:	20000028 	.word	0x20000028

0800b2ac <abort>:
 800b2ac:	b508      	push	{r3, lr}
 800b2ae:	2006      	movs	r0, #6
 800b2b0:	f000 fa08 	bl	800b6c4 <raise>
 800b2b4:	2001      	movs	r0, #1
 800b2b6:	f7f6 fee7 	bl	8002088 <_exit>

0800b2ba <_malloc_usable_size_r>:
 800b2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2be:	1f18      	subs	r0, r3, #4
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	bfbc      	itt	lt
 800b2c4:	580b      	ldrlt	r3, [r1, r0]
 800b2c6:	18c0      	addlt	r0, r0, r3
 800b2c8:	4770      	bx	lr

0800b2ca <__sfputc_r>:
 800b2ca:	6893      	ldr	r3, [r2, #8]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	b410      	push	{r4}
 800b2d2:	6093      	str	r3, [r2, #8]
 800b2d4:	da08      	bge.n	800b2e8 <__sfputc_r+0x1e>
 800b2d6:	6994      	ldr	r4, [r2, #24]
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	db01      	blt.n	800b2e0 <__sfputc_r+0x16>
 800b2dc:	290a      	cmp	r1, #10
 800b2de:	d103      	bne.n	800b2e8 <__sfputc_r+0x1e>
 800b2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e4:	f000 b932 	b.w	800b54c <__swbuf_r>
 800b2e8:	6813      	ldr	r3, [r2, #0]
 800b2ea:	1c58      	adds	r0, r3, #1
 800b2ec:	6010      	str	r0, [r2, #0]
 800b2ee:	7019      	strb	r1, [r3, #0]
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <__sfputs_r>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460f      	mov	r7, r1
 800b2fe:	4614      	mov	r4, r2
 800b300:	18d5      	adds	r5, r2, r3
 800b302:	42ac      	cmp	r4, r5
 800b304:	d101      	bne.n	800b30a <__sfputs_r+0x12>
 800b306:	2000      	movs	r0, #0
 800b308:	e007      	b.n	800b31a <__sfputs_r+0x22>
 800b30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30e:	463a      	mov	r2, r7
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff ffda 	bl	800b2ca <__sfputc_r>
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	d1f3      	bne.n	800b302 <__sfputs_r+0xa>
 800b31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b31c <_vfiprintf_r>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	460d      	mov	r5, r1
 800b322:	b09d      	sub	sp, #116	@ 0x74
 800b324:	4614      	mov	r4, r2
 800b326:	4698      	mov	r8, r3
 800b328:	4606      	mov	r6, r0
 800b32a:	b118      	cbz	r0, 800b334 <_vfiprintf_r+0x18>
 800b32c:	6a03      	ldr	r3, [r0, #32]
 800b32e:	b90b      	cbnz	r3, 800b334 <_vfiprintf_r+0x18>
 800b330:	f7fc fec0 	bl	80080b4 <__sinit>
 800b334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b336:	07d9      	lsls	r1, r3, #31
 800b338:	d405      	bmi.n	800b346 <_vfiprintf_r+0x2a>
 800b33a:	89ab      	ldrh	r3, [r5, #12]
 800b33c:	059a      	lsls	r2, r3, #22
 800b33e:	d402      	bmi.n	800b346 <_vfiprintf_r+0x2a>
 800b340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b342:	f7fc ffde 	bl	8008302 <__retarget_lock_acquire_recursive>
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	071b      	lsls	r3, r3, #28
 800b34a:	d501      	bpl.n	800b350 <_vfiprintf_r+0x34>
 800b34c:	692b      	ldr	r3, [r5, #16]
 800b34e:	b99b      	cbnz	r3, 800b378 <_vfiprintf_r+0x5c>
 800b350:	4629      	mov	r1, r5
 800b352:	4630      	mov	r0, r6
 800b354:	f000 f938 	bl	800b5c8 <__swsetup_r>
 800b358:	b170      	cbz	r0, 800b378 <_vfiprintf_r+0x5c>
 800b35a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b35c:	07dc      	lsls	r4, r3, #31
 800b35e:	d504      	bpl.n	800b36a <_vfiprintf_r+0x4e>
 800b360:	f04f 30ff 	mov.w	r0, #4294967295
 800b364:	b01d      	add	sp, #116	@ 0x74
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	89ab      	ldrh	r3, [r5, #12]
 800b36c:	0598      	lsls	r0, r3, #22
 800b36e:	d4f7      	bmi.n	800b360 <_vfiprintf_r+0x44>
 800b370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b372:	f7fc ffc7 	bl	8008304 <__retarget_lock_release_recursive>
 800b376:	e7f3      	b.n	800b360 <_vfiprintf_r+0x44>
 800b378:	2300      	movs	r3, #0
 800b37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37c:	2320      	movs	r3, #32
 800b37e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b382:	f8cd 800c 	str.w	r8, [sp, #12]
 800b386:	2330      	movs	r3, #48	@ 0x30
 800b388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b538 <_vfiprintf_r+0x21c>
 800b38c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b390:	f04f 0901 	mov.w	r9, #1
 800b394:	4623      	mov	r3, r4
 800b396:	469a      	mov	sl, r3
 800b398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b39c:	b10a      	cbz	r2, 800b3a2 <_vfiprintf_r+0x86>
 800b39e:	2a25      	cmp	r2, #37	@ 0x25
 800b3a0:	d1f9      	bne.n	800b396 <_vfiprintf_r+0x7a>
 800b3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3a6:	d00b      	beq.n	800b3c0 <_vfiprintf_r+0xa4>
 800b3a8:	465b      	mov	r3, fp
 800b3aa:	4622      	mov	r2, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7ff ffa2 	bl	800b2f8 <__sfputs_r>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	f000 80a7 	beq.w	800b508 <_vfiprintf_r+0x1ec>
 800b3ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3bc:	445a      	add	r2, fp
 800b3be:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 809f 	beq.w	800b508 <_vfiprintf_r+0x1ec>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3d4:	f10a 0a01 	add.w	sl, sl, #1
 800b3d8:	9304      	str	r3, [sp, #16]
 800b3da:	9307      	str	r3, [sp, #28]
 800b3dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3e2:	4654      	mov	r4, sl
 800b3e4:	2205      	movs	r2, #5
 800b3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ea:	4853      	ldr	r0, [pc, #332]	@ (800b538 <_vfiprintf_r+0x21c>)
 800b3ec:	f7f4 ff00 	bl	80001f0 <memchr>
 800b3f0:	9a04      	ldr	r2, [sp, #16]
 800b3f2:	b9d8      	cbnz	r0, 800b42c <_vfiprintf_r+0x110>
 800b3f4:	06d1      	lsls	r1, r2, #27
 800b3f6:	bf44      	itt	mi
 800b3f8:	2320      	movmi	r3, #32
 800b3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3fe:	0713      	lsls	r3, r2, #28
 800b400:	bf44      	itt	mi
 800b402:	232b      	movmi	r3, #43	@ 0x2b
 800b404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b408:	f89a 3000 	ldrb.w	r3, [sl]
 800b40c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b40e:	d015      	beq.n	800b43c <_vfiprintf_r+0x120>
 800b410:	9a07      	ldr	r2, [sp, #28]
 800b412:	4654      	mov	r4, sl
 800b414:	2000      	movs	r0, #0
 800b416:	f04f 0c0a 	mov.w	ip, #10
 800b41a:	4621      	mov	r1, r4
 800b41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b420:	3b30      	subs	r3, #48	@ 0x30
 800b422:	2b09      	cmp	r3, #9
 800b424:	d94b      	bls.n	800b4be <_vfiprintf_r+0x1a2>
 800b426:	b1b0      	cbz	r0, 800b456 <_vfiprintf_r+0x13a>
 800b428:	9207      	str	r2, [sp, #28]
 800b42a:	e014      	b.n	800b456 <_vfiprintf_r+0x13a>
 800b42c:	eba0 0308 	sub.w	r3, r0, r8
 800b430:	fa09 f303 	lsl.w	r3, r9, r3
 800b434:	4313      	orrs	r3, r2
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	46a2      	mov	sl, r4
 800b43a:	e7d2      	b.n	800b3e2 <_vfiprintf_r+0xc6>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	1d19      	adds	r1, r3, #4
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	9103      	str	r1, [sp, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	bfbb      	ittet	lt
 800b448:	425b      	neglt	r3, r3
 800b44a:	f042 0202 	orrlt.w	r2, r2, #2
 800b44e:	9307      	strge	r3, [sp, #28]
 800b450:	9307      	strlt	r3, [sp, #28]
 800b452:	bfb8      	it	lt
 800b454:	9204      	strlt	r2, [sp, #16]
 800b456:	7823      	ldrb	r3, [r4, #0]
 800b458:	2b2e      	cmp	r3, #46	@ 0x2e
 800b45a:	d10a      	bne.n	800b472 <_vfiprintf_r+0x156>
 800b45c:	7863      	ldrb	r3, [r4, #1]
 800b45e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b460:	d132      	bne.n	800b4c8 <_vfiprintf_r+0x1ac>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	1d1a      	adds	r2, r3, #4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	9203      	str	r2, [sp, #12]
 800b46a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b46e:	3402      	adds	r4, #2
 800b470:	9305      	str	r3, [sp, #20]
 800b472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b548 <_vfiprintf_r+0x22c>
 800b476:	7821      	ldrb	r1, [r4, #0]
 800b478:	2203      	movs	r2, #3
 800b47a:	4650      	mov	r0, sl
 800b47c:	f7f4 feb8 	bl	80001f0 <memchr>
 800b480:	b138      	cbz	r0, 800b492 <_vfiprintf_r+0x176>
 800b482:	9b04      	ldr	r3, [sp, #16]
 800b484:	eba0 000a 	sub.w	r0, r0, sl
 800b488:	2240      	movs	r2, #64	@ 0x40
 800b48a:	4082      	lsls	r2, r0
 800b48c:	4313      	orrs	r3, r2
 800b48e:	3401      	adds	r4, #1
 800b490:	9304      	str	r3, [sp, #16]
 800b492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b496:	4829      	ldr	r0, [pc, #164]	@ (800b53c <_vfiprintf_r+0x220>)
 800b498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b49c:	2206      	movs	r2, #6
 800b49e:	f7f4 fea7 	bl	80001f0 <memchr>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d03f      	beq.n	800b526 <_vfiprintf_r+0x20a>
 800b4a6:	4b26      	ldr	r3, [pc, #152]	@ (800b540 <_vfiprintf_r+0x224>)
 800b4a8:	bb1b      	cbnz	r3, 800b4f2 <_vfiprintf_r+0x1d6>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	3307      	adds	r3, #7
 800b4ae:	f023 0307 	bic.w	r3, r3, #7
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b8:	443b      	add	r3, r7
 800b4ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4bc:	e76a      	b.n	800b394 <_vfiprintf_r+0x78>
 800b4be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	e7a8      	b.n	800b41a <_vfiprintf_r+0xfe>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	3401      	adds	r4, #1
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f04f 0c0a 	mov.w	ip, #10
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4da:	3a30      	subs	r2, #48	@ 0x30
 800b4dc:	2a09      	cmp	r2, #9
 800b4de:	d903      	bls.n	800b4e8 <_vfiprintf_r+0x1cc>
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d0c6      	beq.n	800b472 <_vfiprintf_r+0x156>
 800b4e4:	9105      	str	r1, [sp, #20]
 800b4e6:	e7c4      	b.n	800b472 <_vfiprintf_r+0x156>
 800b4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e7f0      	b.n	800b4d4 <_vfiprintf_r+0x1b8>
 800b4f2:	ab03      	add	r3, sp, #12
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	4b12      	ldr	r3, [pc, #72]	@ (800b544 <_vfiprintf_r+0x228>)
 800b4fa:	a904      	add	r1, sp, #16
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f7fb ff81 	bl	8007404 <_printf_float>
 800b502:	4607      	mov	r7, r0
 800b504:	1c78      	adds	r0, r7, #1
 800b506:	d1d6      	bne.n	800b4b6 <_vfiprintf_r+0x19a>
 800b508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b50a:	07d9      	lsls	r1, r3, #31
 800b50c:	d405      	bmi.n	800b51a <_vfiprintf_r+0x1fe>
 800b50e:	89ab      	ldrh	r3, [r5, #12]
 800b510:	059a      	lsls	r2, r3, #22
 800b512:	d402      	bmi.n	800b51a <_vfiprintf_r+0x1fe>
 800b514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b516:	f7fc fef5 	bl	8008304 <__retarget_lock_release_recursive>
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	065b      	lsls	r3, r3, #25
 800b51e:	f53f af1f 	bmi.w	800b360 <_vfiprintf_r+0x44>
 800b522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b524:	e71e      	b.n	800b364 <_vfiprintf_r+0x48>
 800b526:	ab03      	add	r3, sp, #12
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	462a      	mov	r2, r5
 800b52c:	4b05      	ldr	r3, [pc, #20]	@ (800b544 <_vfiprintf_r+0x228>)
 800b52e:	a904      	add	r1, sp, #16
 800b530:	4630      	mov	r0, r6
 800b532:	f7fc f9ff 	bl	8007934 <_printf_i>
 800b536:	e7e4      	b.n	800b502 <_vfiprintf_r+0x1e6>
 800b538:	0800bbf9 	.word	0x0800bbf9
 800b53c:	0800bc03 	.word	0x0800bc03
 800b540:	08007405 	.word	0x08007405
 800b544:	0800b2f9 	.word	0x0800b2f9
 800b548:	0800bbff 	.word	0x0800bbff

0800b54c <__swbuf_r>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	460e      	mov	r6, r1
 800b550:	4614      	mov	r4, r2
 800b552:	4605      	mov	r5, r0
 800b554:	b118      	cbz	r0, 800b55e <__swbuf_r+0x12>
 800b556:	6a03      	ldr	r3, [r0, #32]
 800b558:	b90b      	cbnz	r3, 800b55e <__swbuf_r+0x12>
 800b55a:	f7fc fdab 	bl	80080b4 <__sinit>
 800b55e:	69a3      	ldr	r3, [r4, #24]
 800b560:	60a3      	str	r3, [r4, #8]
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	071a      	lsls	r2, r3, #28
 800b566:	d501      	bpl.n	800b56c <__swbuf_r+0x20>
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	b943      	cbnz	r3, 800b57e <__swbuf_r+0x32>
 800b56c:	4621      	mov	r1, r4
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 f82a 	bl	800b5c8 <__swsetup_r>
 800b574:	b118      	cbz	r0, 800b57e <__swbuf_r+0x32>
 800b576:	f04f 37ff 	mov.w	r7, #4294967295
 800b57a:	4638      	mov	r0, r7
 800b57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	1a98      	subs	r0, r3, r2
 800b584:	6963      	ldr	r3, [r4, #20]
 800b586:	b2f6      	uxtb	r6, r6
 800b588:	4283      	cmp	r3, r0
 800b58a:	4637      	mov	r7, r6
 800b58c:	dc05      	bgt.n	800b59a <__swbuf_r+0x4e>
 800b58e:	4621      	mov	r1, r4
 800b590:	4628      	mov	r0, r5
 800b592:	f7ff fa6b 	bl	800aa6c <_fflush_r>
 800b596:	2800      	cmp	r0, #0
 800b598:	d1ed      	bne.n	800b576 <__swbuf_r+0x2a>
 800b59a:	68a3      	ldr	r3, [r4, #8]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	60a3      	str	r3, [r4, #8]
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	6022      	str	r2, [r4, #0]
 800b5a6:	701e      	strb	r6, [r3, #0]
 800b5a8:	6962      	ldr	r2, [r4, #20]
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d004      	beq.n	800b5ba <__swbuf_r+0x6e>
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	07db      	lsls	r3, r3, #31
 800b5b4:	d5e1      	bpl.n	800b57a <__swbuf_r+0x2e>
 800b5b6:	2e0a      	cmp	r6, #10
 800b5b8:	d1df      	bne.n	800b57a <__swbuf_r+0x2e>
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	4628      	mov	r0, r5
 800b5be:	f7ff fa55 	bl	800aa6c <_fflush_r>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0d9      	beq.n	800b57a <__swbuf_r+0x2e>
 800b5c6:	e7d6      	b.n	800b576 <__swbuf_r+0x2a>

0800b5c8 <__swsetup_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4b29      	ldr	r3, [pc, #164]	@ (800b670 <__swsetup_r+0xa8>)
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	b118      	cbz	r0, 800b5dc <__swsetup_r+0x14>
 800b5d4:	6a03      	ldr	r3, [r0, #32]
 800b5d6:	b90b      	cbnz	r3, 800b5dc <__swsetup_r+0x14>
 800b5d8:	f7fc fd6c 	bl	80080b4 <__sinit>
 800b5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e0:	0719      	lsls	r1, r3, #28
 800b5e2:	d422      	bmi.n	800b62a <__swsetup_r+0x62>
 800b5e4:	06da      	lsls	r2, r3, #27
 800b5e6:	d407      	bmi.n	800b5f8 <__swsetup_r+0x30>
 800b5e8:	2209      	movs	r2, #9
 800b5ea:	602a      	str	r2, [r5, #0]
 800b5ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f6:	e033      	b.n	800b660 <__swsetup_r+0x98>
 800b5f8:	0758      	lsls	r0, r3, #29
 800b5fa:	d512      	bpl.n	800b622 <__swsetup_r+0x5a>
 800b5fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5fe:	b141      	cbz	r1, 800b612 <__swsetup_r+0x4a>
 800b600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b604:	4299      	cmp	r1, r3
 800b606:	d002      	beq.n	800b60e <__swsetup_r+0x46>
 800b608:	4628      	mov	r0, r5
 800b60a:	f7fd fcd1 	bl	8008fb0 <_free_r>
 800b60e:	2300      	movs	r3, #0
 800b610:	6363      	str	r3, [r4, #52]	@ 0x34
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	2300      	movs	r3, #0
 800b61c:	6063      	str	r3, [r4, #4]
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	f043 0308 	orr.w	r3, r3, #8
 800b628:	81a3      	strh	r3, [r4, #12]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	b94b      	cbnz	r3, 800b642 <__swsetup_r+0x7a>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b638:	d003      	beq.n	800b642 <__swsetup_r+0x7a>
 800b63a:	4621      	mov	r1, r4
 800b63c:	4628      	mov	r0, r5
 800b63e:	f000 f883 	bl	800b748 <__smakebuf_r>
 800b642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b646:	f013 0201 	ands.w	r2, r3, #1
 800b64a:	d00a      	beq.n	800b662 <__swsetup_r+0x9a>
 800b64c:	2200      	movs	r2, #0
 800b64e:	60a2      	str	r2, [r4, #8]
 800b650:	6962      	ldr	r2, [r4, #20]
 800b652:	4252      	negs	r2, r2
 800b654:	61a2      	str	r2, [r4, #24]
 800b656:	6922      	ldr	r2, [r4, #16]
 800b658:	b942      	cbnz	r2, 800b66c <__swsetup_r+0xa4>
 800b65a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b65e:	d1c5      	bne.n	800b5ec <__swsetup_r+0x24>
 800b660:	bd38      	pop	{r3, r4, r5, pc}
 800b662:	0799      	lsls	r1, r3, #30
 800b664:	bf58      	it	pl
 800b666:	6962      	ldrpl	r2, [r4, #20]
 800b668:	60a2      	str	r2, [r4, #8]
 800b66a:	e7f4      	b.n	800b656 <__swsetup_r+0x8e>
 800b66c:	2000      	movs	r0, #0
 800b66e:	e7f7      	b.n	800b660 <__swsetup_r+0x98>
 800b670:	20000028 	.word	0x20000028

0800b674 <_raise_r>:
 800b674:	291f      	cmp	r1, #31
 800b676:	b538      	push	{r3, r4, r5, lr}
 800b678:	4605      	mov	r5, r0
 800b67a:	460c      	mov	r4, r1
 800b67c:	d904      	bls.n	800b688 <_raise_r+0x14>
 800b67e:	2316      	movs	r3, #22
 800b680:	6003      	str	r3, [r0, #0]
 800b682:	f04f 30ff 	mov.w	r0, #4294967295
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b68a:	b112      	cbz	r2, 800b692 <_raise_r+0x1e>
 800b68c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b690:	b94b      	cbnz	r3, 800b6a6 <_raise_r+0x32>
 800b692:	4628      	mov	r0, r5
 800b694:	f000 f830 	bl	800b6f8 <_getpid_r>
 800b698:	4622      	mov	r2, r4
 800b69a:	4601      	mov	r1, r0
 800b69c:	4628      	mov	r0, r5
 800b69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6a2:	f000 b817 	b.w	800b6d4 <_kill_r>
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d00a      	beq.n	800b6c0 <_raise_r+0x4c>
 800b6aa:	1c59      	adds	r1, r3, #1
 800b6ac:	d103      	bne.n	800b6b6 <_raise_r+0x42>
 800b6ae:	2316      	movs	r3, #22
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	e7e7      	b.n	800b686 <_raise_r+0x12>
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4798      	blx	r3
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7e0      	b.n	800b686 <_raise_r+0x12>

0800b6c4 <raise>:
 800b6c4:	4b02      	ldr	r3, [pc, #8]	@ (800b6d0 <raise+0xc>)
 800b6c6:	4601      	mov	r1, r0
 800b6c8:	6818      	ldr	r0, [r3, #0]
 800b6ca:	f7ff bfd3 	b.w	800b674 <_raise_r>
 800b6ce:	bf00      	nop
 800b6d0:	20000028 	.word	0x20000028

0800b6d4 <_kill_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4d07      	ldr	r5, [pc, #28]	@ (800b6f4 <_kill_r+0x20>)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	4608      	mov	r0, r1
 800b6de:	4611      	mov	r1, r2
 800b6e0:	602b      	str	r3, [r5, #0]
 800b6e2:	f7f6 fcc1 	bl	8002068 <_kill>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d102      	bne.n	800b6f0 <_kill_r+0x1c>
 800b6ea:	682b      	ldr	r3, [r5, #0]
 800b6ec:	b103      	cbz	r3, 800b6f0 <_kill_r+0x1c>
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	bd38      	pop	{r3, r4, r5, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20000588 	.word	0x20000588

0800b6f8 <_getpid_r>:
 800b6f8:	f7f6 bcae 	b.w	8002058 <_getpid>

0800b6fc <__swhatbuf_r>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	460c      	mov	r4, r1
 800b700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b704:	2900      	cmp	r1, #0
 800b706:	b096      	sub	sp, #88	@ 0x58
 800b708:	4615      	mov	r5, r2
 800b70a:	461e      	mov	r6, r3
 800b70c:	da0d      	bge.n	800b72a <__swhatbuf_r+0x2e>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b714:	f04f 0100 	mov.w	r1, #0
 800b718:	bf14      	ite	ne
 800b71a:	2340      	movne	r3, #64	@ 0x40
 800b71c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b720:	2000      	movs	r0, #0
 800b722:	6031      	str	r1, [r6, #0]
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	b016      	add	sp, #88	@ 0x58
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	466a      	mov	r2, sp
 800b72c:	f000 f848 	bl	800b7c0 <_fstat_r>
 800b730:	2800      	cmp	r0, #0
 800b732:	dbec      	blt.n	800b70e <__swhatbuf_r+0x12>
 800b734:	9901      	ldr	r1, [sp, #4]
 800b736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b73a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b73e:	4259      	negs	r1, r3
 800b740:	4159      	adcs	r1, r3
 800b742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b746:	e7eb      	b.n	800b720 <__swhatbuf_r+0x24>

0800b748 <__smakebuf_r>:
 800b748:	898b      	ldrh	r3, [r1, #12]
 800b74a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b74c:	079d      	lsls	r5, r3, #30
 800b74e:	4606      	mov	r6, r0
 800b750:	460c      	mov	r4, r1
 800b752:	d507      	bpl.n	800b764 <__smakebuf_r+0x1c>
 800b754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	2301      	movs	r3, #1
 800b75e:	6163      	str	r3, [r4, #20]
 800b760:	b003      	add	sp, #12
 800b762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b764:	ab01      	add	r3, sp, #4
 800b766:	466a      	mov	r2, sp
 800b768:	f7ff ffc8 	bl	800b6fc <__swhatbuf_r>
 800b76c:	9f00      	ldr	r7, [sp, #0]
 800b76e:	4605      	mov	r5, r0
 800b770:	4639      	mov	r1, r7
 800b772:	4630      	mov	r0, r6
 800b774:	f7fb fd1a 	bl	80071ac <_malloc_r>
 800b778:	b948      	cbnz	r0, 800b78e <__smakebuf_r+0x46>
 800b77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77e:	059a      	lsls	r2, r3, #22
 800b780:	d4ee      	bmi.n	800b760 <__smakebuf_r+0x18>
 800b782:	f023 0303 	bic.w	r3, r3, #3
 800b786:	f043 0302 	orr.w	r3, r3, #2
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	e7e2      	b.n	800b754 <__smakebuf_r+0xc>
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	6020      	str	r0, [r4, #0]
 800b792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b79e:	b15b      	cbz	r3, 800b7b8 <__smakebuf_r+0x70>
 800b7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f000 f81d 	bl	800b7e4 <_isatty_r>
 800b7aa:	b128      	cbz	r0, 800b7b8 <__smakebuf_r+0x70>
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f023 0303 	bic.w	r3, r3, #3
 800b7b2:	f043 0301 	orr.w	r3, r3, #1
 800b7b6:	81a3      	strh	r3, [r4, #12]
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	431d      	orrs	r5, r3
 800b7bc:	81a5      	strh	r5, [r4, #12]
 800b7be:	e7cf      	b.n	800b760 <__smakebuf_r+0x18>

0800b7c0 <_fstat_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d07      	ldr	r5, [pc, #28]	@ (800b7e0 <_fstat_r+0x20>)
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	602b      	str	r3, [r5, #0]
 800b7ce:	f7f6 fcab 	bl	8002128 <_fstat>
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	d102      	bne.n	800b7dc <_fstat_r+0x1c>
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	b103      	cbz	r3, 800b7dc <_fstat_r+0x1c>
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	bd38      	pop	{r3, r4, r5, pc}
 800b7de:	bf00      	nop
 800b7e0:	20000588 	.word	0x20000588

0800b7e4 <_isatty_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	@ (800b800 <_isatty_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f6 fcaa 	bl	8002148 <_isatty>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_isatty_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_isatty_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	20000588 	.word	0x20000588

0800b804 <_init>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	bf00      	nop
 800b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80a:	bc08      	pop	{r3}
 800b80c:	469e      	mov	lr, r3
 800b80e:	4770      	bx	lr

0800b810 <_fini>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr
