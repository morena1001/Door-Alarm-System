
Home Alarm System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800bbf0  0800bbf0  0000cbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c078  0800c078  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c078  0800c078  0000d078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c080  0800c080  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c080  0800c080  0000d080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c084  0800c084  0000d084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c088  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e8  0800c270  0000e1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800c270  0000e5c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a12  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  00022c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00025700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9b  00000000  00000000  00026998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e14a  00000000  00000000  00027833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178d0  00000000  00000000  0004597d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afcd1  00000000  00000000  0005d24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cf1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006398  00000000  00000000  0010cf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001132fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbd4 	.word	0x0800bbd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800bbd4 	.word	0x0800bbd4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <System_Init>:

char* user_input;
// char buffer[5];
system_state* alarm_system;

void System_Init(void) {
 8000d14:	b598      	push	{r3, r4, r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	alarm_system = (system_state*) calloc(1, sizeof(system_state));
 8000d18:	2108      	movs	r1, #8
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f006 fbea 	bl	80074f4 <calloc>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <System_Init+0x4c>)
 8000d26:	601a      	str	r2, [r3, #0]
	alarm_system->password = malloc(sizeof(char) * 5);
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <System_Init+0x4c>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	2005      	movs	r0, #5
 8000d2e:	f006 fbfd 	bl	800752c <malloc>
 8000d32:	4603      	mov	r3, r0
 8000d34:	6023      	str	r3, [r4, #0]
	user_input = malloc(sizeof(char) * 5);
 8000d36:	2005      	movs	r0, #5
 8000d38:	f006 fbf8 	bl	800752c <malloc>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <System_Init+0x50>)
 8000d42:	601a      	str	r2, [r3, #0]

	alarm_system->state = ready;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <System_Init+0x4c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	711a      	strb	r2, [r3, #4]
	alarm_system->password= "1001";
 8000d4c:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <System_Init+0x4c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <System_Init+0x54>)
 8000d52:	601a      	str	r2, [r3, #0]

	user_input = "\0";
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <System_Init+0x50>)
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <System_Init+0x58>)
 8000d58:	601a      	str	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	bd98      	pop	{r3, r4, r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000208 	.word	0x20000208
 8000d64:	20000204 	.word	0x20000204
 8000d68:	0800bbf0 	.word	0x0800bbf0
 8000d6c:	0800bbf8 	.word	0x0800bbf8

08000d70 <Check_Password>:

bool Check_Password(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if (!strcmp(alarm_system->password, user_input))		return true;
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <Check_Password+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <Check_Password+0x2c>)
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fa25 	bl	80001d0 <strcmp>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <Check_Password+0x20>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <Check_Password+0x22>
	return false;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000208 	.word	0x20000208
 8000d9c:	20000204 	.word	0x20000204

08000da0 <Lock_System>:

bool Lock_System(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == ready) {
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <Lock_System+0x28>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d105      	bne.n	8000dba <Lock_System+0x1a>
		alarm_system->state = set;
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <Lock_System+0x28>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	711a      	strb	r2, [r3, #4]
		return true;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <Lock_System+0x1c>
	}
	return false;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000208 	.word	0x20000208

08000dcc <Unlock_System>:

bool Unlock_System(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == set && Check_Password()) {
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <Unlock_System+0x2c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	791b      	ldrb	r3, [r3, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10a      	bne.n	8000df0 <Unlock_System+0x24>
 8000dda:	f7ff ffc9 	bl	8000d70 <Check_Password>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <Unlock_System+0x24>
		alarm_system->state = ready;
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <Unlock_System+0x2c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	711a      	strb	r2, [r3, #4]
		return true;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <Unlock_System+0x26>
	}
	return false;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000208 	.word	0x20000208

08000dfc <HD44780_Init>:
	0b01010,
	0b00100
};

void HD44780_Init(uint8_t rows)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000e06:	4a38      	ldr	r2, [pc, #224]	@ (8000ee8 <HD44780_Init+0xec>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000e0c:	4b37      	ldr	r3, [pc, #220]	@ (8000eec <HD44780_Init+0xf0>)
 8000e0e:	2208      	movs	r2, #8
 8000e10:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000e12:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HD44780_Init+0xec>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d907      	bls.n	8000e30 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000e20:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e006      	b.n	8000e3e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e3c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000e3e:	f000 f985 	bl	800114c <DelayInit>
  HAL_Delay(50);
 8000e42:	2032      	movs	r0, #50	@ 0x32
 8000e44:	f001 fbc8 	bl	80025d8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <HD44780_Init+0xf0>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f943 	bl	80010d8 <ExpanderWrite>
  HAL_Delay(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e56:	f001 fbbf 	bl	80025d8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000e5a:	2030      	movs	r0, #48	@ 0x30
 8000e5c:	f000 f92b 	bl	80010b6 <Write4Bits>
  DelayUS(4500);
 8000e60:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e64:	f000 f99c 	bl	80011a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e68:	2030      	movs	r0, #48	@ 0x30
 8000e6a:	f000 f924 	bl	80010b6 <Write4Bits>
  DelayUS(4500);
 8000e6e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e72:	f000 f995 	bl	80011a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e76:	2030      	movs	r0, #48	@ 0x30
 8000e78:	f000 f91d 	bl	80010b6 <Write4Bits>
  DelayUS(4500);
 8000e7c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e80:	f000 f98e 	bl	80011a0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000e84:	2020      	movs	r0, #32
 8000e86:	f000 f916 	bl	80010b6 <Write4Bits>
  DelayUS(100);
 8000e8a:	2064      	movs	r0, #100	@ 0x64
 8000e8c:	f000 f988 	bl	80011a0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HD44780_Init+0xf4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f8ce 	bl	800103c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <HD44780_Init+0xf8>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000ea6:	f000 f875 	bl	8000f94 <HD44780_Display>
  HD44780_Clear();
 8000eaa:	f000 f82b 	bl	8000f04 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HD44780_Init+0xfc>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HD44780_Init+0xfc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f8bc 	bl	800103c <SendCommand>
  DelayUS(4500);
 8000ec4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ec8:	f000 f96a 	bl	80011a0 <DelayUS>

  HD44780_CreateSpecialChar(0, up_arrow);
 8000ecc:	490b      	ldr	r1, [pc, #44]	@ (8000efc <HD44780_Init+0x100>)
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f876 	bl	8000fc0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, down_arrow);
 8000ed4:	490a      	ldr	r1, [pc, #40]	@ (8000f00 <HD44780_Init+0x104>)
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 f872 	bl	8000fc0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000edc:	f000 f81d 	bl	8000f1a <HD44780_Home>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000020f 	.word	0x2000020f
 8000eec:	20000210 	.word	0x20000210
 8000ef0:	2000020c 	.word	0x2000020c
 8000ef4:	2000020d 	.word	0x2000020d
 8000ef8:	2000020e 	.word	0x2000020e
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008

08000f04 <HD44780_Clear>:

void HD44780_Clear()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f000 f897 	bl	800103c <SendCommand>
  DelayUS(2000);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f12:	f000 f945 	bl	80011a0 <DelayUS>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HD44780_Home>:

void HD44780_Home()
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f000 f88c 	bl	800103c <SendCommand>
  DelayUS(2000);
 8000f24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f28:	f000 f93a 	bl	80011a0 <DelayUS>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HD44780_SetCursor+0x5c>)
 8000f42:	f107 0408 	add.w	r4, r7, #8
 8000f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HD44780_SetCursor+0x60>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d303      	bcc.n	8000f5e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HD44780_SetCursor+0x60>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	3318      	adds	r3, #24
 8000f64:	443b      	add	r3, r7
 8000f66:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f85d 	bl	800103c <SendCommand>
}
 8000f82:	bf00      	nop
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	0800bbfc 	.word	0x0800bbfc
 8000f90:	2000020f 	.word	0x2000020f

08000f94 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HD44780_Display+0x28>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HD44780_Display+0x28>)
 8000fa4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HD44780_Display+0x28>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f843 	bl	800103c <SendCommand>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000020d 	.word	0x2000020d

08000fc0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f82a 	bl	800103c <SendCommand>
  for (int i=0; i<8; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e009      	b.n	8001002 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82e 	bl	8001058 <SendChar>
  for (int i=0; i<8; i++)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2b07      	cmp	r3, #7
 8001006:	ddf2      	ble.n	8000fee <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800101a:	e006      	b.n	800102a <HD44780_PrintStr+0x18>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f817 	bl	8001058 <SendChar>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f4      	bne.n	800101c <HD44780_PrintStr+0xa>
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f812 	bl	8001074 <Send>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f804 	bl	8001074 <Send>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f023 030f 	bic.w	r3, r3, #15
 800108a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	4313      	orrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f80b 	bl	80010b6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80010a0:	7bba      	ldrb	r2, [r7, #14]
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f804 	bl	80010b6 <Write4Bits>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f808 	bl	80010d8 <ExpanderWrite>
  PulseEnable(value);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f820 	bl	8001110 <PulseEnable>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <ExpanderWrite+0x30>)
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80010ee:	f107 020f 	add.w	r2, r7, #15
 80010f2:	230a      	movs	r3, #10
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	214e      	movs	r1, #78	@ 0x4e
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <ExpanderWrite+0x34>)
 80010fc:	f002 fc3e 	bl	800397c <HAL_I2C_Master_Transmit>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000210 	.word	0x20000210
 800110c:	20000264 	.word	0x20000264

08001110 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffd8 	bl	80010d8 <ExpanderWrite>
  DelayUS(20);
 8001128:	2014      	movs	r0, #20
 800112a:	f000 f839 	bl	80011a0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffce 	bl	80010d8 <ExpanderWrite>
  DelayUS(20);
 800113c:	2014      	movs	r0, #20
 800113e:	f000 f82f 	bl	80011a0 <DelayUS>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <DelayInit>:

static void DelayInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <DelayInit+0x4c>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <DelayInit+0x4c>)
 8001156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800115a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <DelayInit+0x4c>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <DelayInit+0x4c>)
 8001162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001166:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <DelayInit+0x50>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <DelayInit+0x50>)
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <DelayInit+0x50>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a08      	ldr	r2, [pc, #32]	@ (800119c <DelayInit+0x50>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <DelayInit+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001186:	bf00      	nop
  __ASM volatile ("NOP");
 8001188:	bf00      	nop
  __ASM volatile ("NOP");
 800118a:	bf00      	nop
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000edf0 	.word	0xe000edf0
 800119c:	e0001000 	.word	0xe0001000

080011a0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <DelayUS+0x44>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <DelayUS+0x48>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0c9a      	lsrs	r2, r3, #18
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <DelayUS+0x4c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <DelayUS+0x4c>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f6      	bhi.n	80011c2 <DelayUS+0x22>
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000014 	.word	0x20000014
 80011e8:	431bde83 	.word	0x431bde83
 80011ec:	e0001000 	.word	0xe0001000

080011f0 <AlarmPeripheral_Init>:
void AlarmIO_Test(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AlarmPeripheral_Init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	// Set up timer 1 PWM and timer 2 and 6 interrupts
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <AlarmPeripheral_Init+0x54>)
 80011f8:	f004 fc7e 	bl	8005af8 <HAL_TIM_PWM_Start>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2036      	movs	r0, #54	@ 0x36
 8001202:	f002 f924 	bl	800344e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001206:	2036      	movs	r0, #54	@ 0x36
 8001208:	f002 f93d 	bl	8003486 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <AlarmPeripheral_Init+0x58>)
 800120e:	f004 fbc7 	bl	80059a0 <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	201c      	movs	r0, #28
 8001218:	f002 f919 	bl	800344e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800121c:	201c      	movs	r0, #28
 800121e:	f002 f932 	bl	8003486 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 8001222:	480a      	ldr	r0, [pc, #40]	@ (800124c <AlarmPeripheral_Init+0x5c>)
 8001224:	f004 fbbc 	bl	80059a0 <HAL_TIM_Base_Start_IT>

	// Set up LCD screen
	HD44780_Init(2);
 8001228:	2002      	movs	r0, #2
 800122a:	f7ff fde7 	bl	8000dfc <HD44780_Init>
	HD44780_Clear();
 800122e:	f7ff fe69 	bl	8000f04 <HD44780_Clear>

	// Set Ready Mode LED
	HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2120      	movs	r1, #32
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f002 fac9 	bl	80037d0 <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200002b8 	.word	0x200002b8
 8001248:	20000350 	.word	0x20000350
 800124c:	20000304 	.word	0x20000304

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f001 f95a 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f814 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 fa56 	bl	800170c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001260:	f000 f872 	bl	8001348 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001264:	f000 f8cc 	bl	8001400 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001268:	f000 f90a 	bl	8001480 <MX_TIM1_Init>
  MX_TIM2_Init();
 800126c:	f000 f998 	bl	80015a0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001270:	f000 fa1c 	bl	80016ac <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001274:	f000 f9e2 	bl	800163c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  AlarmPeripheral_Init();
 8001278:	f7ff ffba 	bl	80011f0 <AlarmPeripheral_Init>
  System_Init();
 800127c:	f7ff fd4a 	bl	8000d14 <System_Init>
//  AlarmIO_Test();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <main+0x30>

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b09c      	sub	sp, #112	@ 0x70
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800128e:	2228      	movs	r2, #40	@ 0x28
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f007 f991 	bl	80085ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2234      	movs	r2, #52	@ 0x34
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 f983 	bl	80085ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012b4:	2303      	movs	r3, #3
 80012b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c2:	2301      	movs	r3, #1
 80012c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c6:	2310      	movs	r3, #16
 80012c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ff16 	bl	8004110 <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012ea:	f000 faa1 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001304:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f003 ff3e 	bl	800518c <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001316:	f000 fa8b 	bl	8001830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 800131a:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 800131e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800132c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4618      	mov	r0, r3
 8001332:	f004 f94b 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800133c:	f000 fa78 	bl	8001830 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3770      	adds	r7, #112	@ 0x70
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001360:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001364:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001366:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136c:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001372:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001378:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800137a:	2200      	movs	r2, #0
 800137c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800138e:	2201      	movs	r2, #1
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_ADC1_Init+0xb4>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_ADC1_Init+0xb4>)
 800139a:	2201      	movs	r2, #1
 800139c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013a8:	2204      	movs	r2, #4
 80013aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b8:	4810      	ldr	r0, [pc, #64]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013ba:	f001 f931 	bl	8002620 <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80013c4:	f000 fa34 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_ADC1_Init+0xb4>)
 80013e6:	f001 fbdb 	bl	8002ba0 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013f0:	f000 fa1e 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000214 	.word	0x20000214

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <MX_I2C1_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <MX_I2C1_Init+0x74>)
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <MX_I2C1_Init+0x7c>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001418:	2201      	movs	r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143a:	480e      	ldr	r0, [pc, #56]	@ (8001474 <MX_I2C1_Init+0x74>)
 800143c:	f002 fa03 	bl	8003846 <HAL_I2C_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001446:	f000 f9f3 	bl	8001830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4809      	ldr	r0, [pc, #36]	@ (8001474 <MX_I2C1_Init+0x74>)
 800144e:	f002 fdc7 	bl	8003fe0 <HAL_I2CEx_ConfigAnalogFilter>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001458:	f000 f9ea 	bl	8001830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001460:	f002 fe09 	bl	8004076 <HAL_I2CEx_ConfigDigitalFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f9e1 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000264 	.word	0x20000264
 8001478:	40005400 	.word	0x40005400
 800147c:	00201d2b 	.word	0x00201d2b

08001480 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b096      	sub	sp, #88	@ 0x58
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001486:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	222c      	movs	r2, #44	@ 0x2c
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f007 f884 	bl	80085ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b2:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014b4:	4a39      	ldr	r2, [pc, #228]	@ (800159c <MX_TIM1_Init+0x11c>)
 80014b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014ba:	221e      	movs	r2, #30
 80014bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3522;
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014c6:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 80014ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014de:	482e      	ldr	r0, [pc, #184]	@ (8001598 <MX_TIM1_Init+0x118>)
 80014e0:	f004 fab2 	bl	8005a48 <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 f9a1 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014fe:	4619      	mov	r1, r3
 8001500:	4825      	ldr	r0, [pc, #148]	@ (8001598 <MX_TIM1_Init+0x118>)
 8001502:	f005 fad1 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800150c:	f000 f990 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001510:	2360      	movs	r3, #96	@ 0x60
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	@ (8001598 <MX_TIM1_Init+0x118>)
 8001536:	f004 fcc7 	bl	8005ec8 <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001540:	f000 f976 	bl	8001830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001566:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4807      	ldr	r0, [pc, #28]	@ (8001598 <MX_TIM1_Init+0x118>)
 800157a:	f005 fafb 	bl	8006b74 <HAL_TIMEx_ConfigBreakDeadTime>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001584:	f000 f954 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001588:	4803      	ldr	r0, [pc, #12]	@ (8001598 <MX_TIM1_Init+0x118>)
 800158a:	f000 fa5b 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 800158e:	bf00      	nop
 8001590:	3758      	adds	r7, #88	@ 0x58
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200002b8 	.word	0x200002b8
 800159c:	40012c00 	.word	0x40012c00

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015c8:	221e      	movs	r2, #30
 80015ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3522;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015d4:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 80015d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e6:	4814      	ldr	r0, [pc, #80]	@ (8001638 <MX_TIM2_Init+0x98>)
 80015e8:	f004 f982 	bl	80058f0 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015f2:	f000 f91d 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <MX_TIM2_Init+0x98>)
 8001604:	f004 fd74 	bl	80060f0 <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800160e:	f000 f90f 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <MX_TIM2_Init+0x98>)
 8001620:	f005 fa42 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 f901 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000304 	.word	0x20000304

0800163c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800164e:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <MX_TIM6_Init+0x6c>)
 8001650:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_TIM6_Init+0x68>)
 8001654:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001658:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1799;
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MX_TIM6_Init+0x68>)
 8001662:	f240 7207 	movw	r2, #1799	@ 0x707
 8001666:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <MX_TIM6_Init+0x68>)
 8001670:	f004 f93e 	bl	80058f0 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800167a:	f000 f8d9 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <MX_TIM6_Init+0x68>)
 800168c:	f005 fa0c 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001696:	f000 f8cb 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000350 	.word	0x20000350
 80016a8:	40001000 	.word	0x40001000

080016ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <MX_USART2_UART_Init+0x5c>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016b8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80016bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_USART2_UART_Init+0x58>)
 80016f0:	f005 fad6 	bl	8006ca0 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016fa:	f000 f899 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000039c 	.word	0x2000039c
 8001708:	40004400 	.word	0x40004400

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001722:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a3f      	ldr	r2, [pc, #252]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001728:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800172c:	6153      	str	r3, [r2, #20]
 800172e:	4b3d      	ldr	r3, [pc, #244]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <MX_GPIO_Init+0x118>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a39      	ldr	r2, [pc, #228]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001740:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001744:	6153      	str	r3, [r2, #20]
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a33      	ldr	r2, [pc, #204]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <MX_GPIO_Init+0x118>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a2d      	ldr	r2, [pc, #180]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <MX_GPIO_Init+0x118>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RM_Pin|SM_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2160      	movs	r1, #96	@ 0x60
 8001786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178a:	f002 f821 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NP1_Pin NP2_Pin NP3_Pin NP4_Pin
                           NP5_Pin NP6_Pin NP7_Pin NP8_Pin
                           NP9_Pin NP0_Pin */
  GPIO_InitStruct.Pin = NP1_Pin|NP2_Pin|NP3_Pin|NP4_Pin
 800178e:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8001792:	617b      	str	r3, [r7, #20]
                          |NP5_Pin|NP6_Pin|NP7_Pin|NP8_Pin
                          |NP9_Pin|NP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4821      	ldr	r0, [pc, #132]	@ (8001828 <MX_GPIO_Init+0x11c>)
 80017a4:	f001 fe8a 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RM_Pin SM_Pin */
  GPIO_InitStruct.Pin = RM_Pin|SM_Pin;
 80017a8:	2360      	movs	r3, #96	@ 0x60
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c2:	f001 fe7b 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LUB_Pin */
  GPIO_InitStruct.Pin = LUB_Pin;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LUB_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4814      	ldr	r0, [pc, #80]	@ (800182c <MX_GPIO_Init+0x120>)
 80017dc:	f001 fe6e 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RPB_Pin */
  GPIO_InitStruct.Pin = RPB_Pin;
 80017e0:	2302      	movs	r3, #2
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPB_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	@ (800182c <MX_GPIO_Init+0x120>)
 80017f6:	f001 fe61 	bl	80034bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2006      	movs	r0, #6
 8001800:	f001 fe25 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001804:	2006      	movs	r0, #6
 8001806:	f001 fe3e 	bl	8003486 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2007      	movs	r0, #7
 8001810:	f001 fe1d 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001814:	2007      	movs	r0, #7
 8001816:	f001 fe36 	bl	8003486 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	48000800 	.word	0x48000800
 800182c:	48000400 	.word	0x48000400

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <Error_Handler+0x8>

0800183c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_MspInit+0x44>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_MspInit+0x44>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_MspInit+0x44>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_MspInit+0x44>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_MspInit+0x44>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_MspInit+0x44>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018a4:	d124      	bne.n	80018f0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_ADC_MspInit+0x74>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d6:	2301      	movs	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f001 fde6 	bl	80034bc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <HAL_I2C_MspInit+0x7c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d127      	bne.n	800196e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a16      	ldr	r2, [pc, #88]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <HAL_I2C_MspInit+0x80>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001936:	23c0      	movs	r3, #192	@ 0xc0
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193a:	2312      	movs	r3, #18
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001946:	2304      	movs	r3, #4
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	480b      	ldr	r0, [pc, #44]	@ (8001980 <HAL_I2C_MspInit+0x84>)
 8001952:	f001 fdb3 	bl	80034bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <HAL_I2C_MspInit+0x80>)
 800195c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_I2C_MspInit+0x80>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40005400 	.word	0x40005400
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400

08001984 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_TIM_PWM_MspInit+0x38>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800199c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d4:	d114      	bne.n	8001a00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a18      	ldr	r2, [pc, #96]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	201c      	movs	r0, #28
 80019f4:	f001 fd2b 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f8:	201c      	movs	r0, #28
 80019fa:	f001 fd44 	bl	8003486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019fe:	e018      	b.n	8001a32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0e      	ldr	r2, [pc, #56]	@ (8001a40 <HAL_TIM_Base_MspInit+0x7c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d113      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_TIM_Base_MspInit+0x78>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2036      	movs	r0, #54	@ 0x36
 8001a28:	f001 fd11 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a2c:	2036      	movs	r0, #54	@ 0x36
 8001a2e:	f001 fd2a 	bl	8003486 <HAL_NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40001000 	.word	0x40001000

08001a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_TIM_MspPostInit+0x64>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d11b      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <HAL_TIM_MspPostInit+0x6c>)
 8001a9a:	f001 fd0f 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000800 	.word	0x48000800

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a17      	ldr	r2, [pc, #92]	@ (8001b30 <HAL_UART_MspInit+0x7c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d128      	bne.n	8001b28 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a16      	ldr	r2, [pc, #88]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af8:	6153      	str	r3, [r2, #20]
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_UART_MspInit+0x80>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b06:	230c      	movs	r3, #12
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b16:	2307      	movs	r3, #7
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b24:	f001 fcca 	bl	80034bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	@ 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40004400 	.word	0x40004400
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8e:	f000 fd03 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	e002      	b.n	8001baa <EXTI0_IRQHandler+0x12>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	ddf7      	ble.n	8001ba4 <EXTI0_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(LUB_GPIO_Port, LUB_Pin)) {
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4836      	ldr	r0, [pc, #216]	@ (8001c90 <EXTI0_IRQHandler+0xf8>)
 8001bb8:	f001 fdf2 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d05f      	beq.n	8001c82 <EXTI0_IRQHandler+0xea>
		// If the system cannot be locked, try to unlock the system
		Check_IR_Signal();
 8001bc2:	f000 fb85 	bl	80022d0 <Check_IR_Signal>

		user_input = buffer;
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <EXTI0_IRQHandler+0xfc>)
 8001bc8:	4a33      	ldr	r2, [pc, #204]	@ (8001c98 <EXTI0_IRQHandler+0x100>)
 8001bca:	601a      	str	r2, [r3, #0]
		// The door has to be closed for the system to be able to lock
		if (raw <= 1000.0 || !Lock_System())	{
 8001bcc:	4b33      	ldr	r3, [pc, #204]	@ (8001c9c <EXTI0_IRQHandler+0x104>)
 8001bce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <EXTI0_IRQHandler+0x108>)
 8001bd8:	f7fe ff9a 	bl	8000b10 <__aeabi_dcmple>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <EXTI0_IRQHandler+0x5a>
 8001be2:	f7ff f8dd 	bl	8000da0 <Lock_System>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d02a      	beq.n	8001c48 <EXTI0_IRQHandler+0xb0>
			if (Unlock_System()) {
 8001bf2:	f7ff f8eb 	bl	8000dcc <Unlock_System>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01c      	beq.n	8001c36 <EXTI0_IRQHandler+0x9e>
				HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2140      	movs	r1, #64	@ 0x40
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c04:	f001 fde4 	bl	80037d0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c10:	f001 fdde 	bl	80037d0 <HAL_GPIO_WritePin>

				setting = false;
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <EXTI0_IRQHandler+0x10c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
				triggered = false;
 8001c1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <EXTI0_IRQHandler+0x110>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
				alarm_rhythm_counter = 0;
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <EXTI0_IRQHandler+0x114>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
				user_input = NULL;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <EXTI0_IRQHandler+0xfc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
				Generate_Tone(false, 0);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 fb1c 	bl	800226c <Generate_Tone>
			if (Unlock_System()) {
 8001c34:	e01f      	b.n	8001c76 <EXTI0_IRQHandler+0xde>
			} else {
				alarm_rhythm_counter = 2;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <EXTI0_IRQHandler+0x114>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
				Generate_Tone(false, OPEN_ON_SET_SILENT_LENGTH);
 8001c3c:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 fb13 	bl	800226c <Generate_Tone>
			if (Unlock_System()) {
 8001c46:	e016      	b.n	8001c76 <EXTI0_IRQHandler+0xde>
			}
		} else {
			HAL_GPIO_WritePin(SM_GPIO_Port, SM_Pin, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2140      	movs	r1, #64	@ 0x40
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c50:	f001 fdbe 	bl	80037d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RM_GPIO_Port, RM_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2120      	movs	r1, #32
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c5c:	f001 fdb8 	bl	80037d0 <HAL_GPIO_WritePin>

			setting = true;
 8001c60:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <EXTI0_IRQHandler+0x10c>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
			alarm_rhythm_counter = LOCK_COUNTDOWN_COUNT;
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <EXTI0_IRQHandler+0x114>)
 8001c68:	2214      	movs	r2, #20
 8001c6a:	701a      	strb	r2, [r3, #0]
			Generate_Tone(true, LOCK_COUNTDOWN_BEEP_LEGNTH);
 8001c6c:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001c70:	2001      	movs	r0, #1
 8001c72:	f000 fafb 	bl	800226c <Generate_Tone>
		}


		// Reset input from number pad
		buffer[0] = '\0';
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <EXTI0_IRQHandler+0x100>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
		idx = 0;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <EXTI0_IRQHandler+0x118>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LUB_Pin);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f001 fdbc 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	48000400 	.word	0x48000400
 8001c94:	20000204 	.word	0x20000204
 8001c98:	20000430 	.word	0x20000430
 8001c9c:	20000428 	.word	0x20000428
 8001ca0:	408f4000 	.word	0x408f4000
 8001ca4:	2000043a 	.word	0x2000043a
 8001ca8:	20000439 	.word	0x20000439
 8001cac:	20000438 	.word	0x20000438
 8001cb0:	20000435 	.word	0x20000435

08001cb4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	e002      	b.n	8001cc6 <EXTI1_IRQHandler+0x12>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	ddf7      	ble.n	8001cc0 <EXTI1_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(RPB_GPIO_Port, RPB_Pin)) {
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <EXTI1_IRQHandler+0x34>)
 8001cd4:	f001 fd64 	bl	80037a0 <HAL_GPIO_ReadPin>
//		buffer[0] = '\0';
//		idx = 0;
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPB_Pin);
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f001 fd91 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	48000400 	.word	0x48000400

08001cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!buzzer_length_counter--) {
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8001dec <TIM2_IRQHandler+0x100>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	b291      	uxth	r1, r2
 8001cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dec <TIM2_IRQHandler+0x100>)
 8001cfa:	8011      	strh	r1, [r2, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d170      	bne.n	8001de2 <TIM2_IRQHandler+0xf6>

		if (setting) {
 8001d00:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <TIM2_IRQHandler+0x56>
			alarm_rhythm_counter--;
 8001d08:	4b3a      	ldr	r3, [pc, #232]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d12:	701a      	strb	r2, [r3, #0]

			Generate_Tone(alarm_rhythm_counter % 2 == 0 ? true : false, LOCK_COUNTDOWN_BEEP_LEGNTH);
 8001d14:	4b37      	ldr	r3, [pc, #220]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fa9d 	bl	800226c <Generate_Tone>
			if (alarm_rhythm_counter == 0)		setting = false;
 8001d32:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d153      	bne.n	8001de2 <TIM2_IRQHandler+0xf6>
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <TIM2_IRQHandler+0x104>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	e04f      	b.n	8001de2 <TIM2_IRQHandler+0xf6>
		} else if (triggered && !overwritten) {
 8001d42:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <TIM2_IRQHandler+0x10c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d031      	beq.n	8001dae <TIM2_IRQHandler+0xc2>
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dfc <TIM2_IRQHandler+0x110>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f083 0301 	eor.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d02a      	beq.n	8001dae <TIM2_IRQHandler+0xc2>
			alarm_rhythm_counter++;
 8001d58:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d62:	701a      	strb	r2, [r3, #0]
			alarm_rhythm_counter %= 6;
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <TIM2_IRQHandler+0x114>)
 8001d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6e:	0899      	lsrs	r1, r3, #2
 8001d70:	460b      	mov	r3, r1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	440b      	add	r3, r1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d7e:	701a      	strb	r2, [r3, #0]

			Generate_Tone(alarm_rhythm_counter % 2 == 0 ? false : true, alarm_rhythm_counter == 2 ? OPEN_ON_SET_SILENT_LENGTH : OPEN_ON_SET_BEEP_LENGTH);
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d102      	bne.n	8001da2 <TIM2_IRQHandler+0xb6>
 8001d9c:	f240 13c5 	movw	r3, #453	@ 0x1c5
 8001da0:	e000      	b.n	8001da4 <TIM2_IRQHandler+0xb8>
 8001da2:	2329      	movs	r3, #41	@ 0x29
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 fa60 	bl	800226c <Generate_Tone>
 8001dac:	e019      	b.n	8001de2 <TIM2_IRQHandler+0xf6>
		} else {
			buzzer_length_counter = 0;
 8001dae:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <TIM2_IRQHandler+0x100>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	801a      	strh	r2, [r3, #0]

			if (overwritten) {
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <TIM2_IRQHandler+0x110>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00e      	beq.n	8001dda <TIM2_IRQHandler+0xee>
				overwritten = false;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <TIM2_IRQHandler+0x110>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
				if (triggered) {
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <TIM2_IRQHandler+0x10c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <TIM2_IRQHandler+0xee>
					alarm_rhythm_counter = 2;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <TIM2_IRQHandler+0x108>)
 8001dcc:	2202      	movs	r2, #2
 8001dce:	701a      	strb	r2, [r3, #0]
					Generate_Tone(false, OPEN_ON_SET_SILENT_LENGTH);
 8001dd0:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 fa49 	bl	800226c <Generate_Tone>
				}
			}

			Generate_Tone(false, 0);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f000 fa45 	bl	800226c <Generate_Tone>
		}
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001de2:	4808      	ldr	r0, [pc, #32]	@ (8001e04 <TIM2_IRQHandler+0x118>)
 8001de4:	f003 ff6e 	bl	8005cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000436 	.word	0x20000436
 8001df0:	2000043a 	.word	0x2000043a
 8001df4:	20000438 	.word	0x20000438
 8001df8:	20000439 	.word	0x20000439
 8001dfc:	2000043c 	.word	0x2000043c
 8001e00:	aaaaaaab 	.word	0xaaaaaaab
 8001e04:	20000304 	.word	0x20000304

08001e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	// Poll for the value of the IR sensor
	Check_IR_Signal();
 8001e0c:	f000 fa60 	bl	80022d0 <Check_IR_Signal>

	sprintf(m, "%f\r\n", raw);
 8001e10:	4bac      	ldr	r3, [pc, #688]	@ (80020c4 <TIM6_DAC_IRQHandler+0x2bc>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	49ac      	ldr	r1, [pc, #688]	@ (80020c8 <TIM6_DAC_IRQHandler+0x2c0>)
 8001e18:	48ac      	ldr	r0, [pc, #688]	@ (80020cc <TIM6_DAC_IRQHandler+0x2c4>)
 8001e1a:	f006 fb6b 	bl	80084f4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) m, 50, 100);
 8001e1e:	2364      	movs	r3, #100	@ 0x64
 8001e20:	2232      	movs	r2, #50	@ 0x32
 8001e22:	49aa      	ldr	r1, [pc, #680]	@ (80020cc <TIM6_DAC_IRQHandler+0x2c4>)
 8001e24:	48aa      	ldr	r0, [pc, #680]	@ (80020d0 <TIM6_DAC_IRQHandler+0x2c8>)
 8001e26:	f004 ff89 	bl	8006d3c <HAL_UART_Transmit>

	// At raw < 1000.0, the door has been opened enough to trigger the alarm
	if (raw < 800.0) {
 8001e2a:	4ba6      	ldr	r3, [pc, #664]	@ (80020c4 <TIM6_DAC_IRQHandler+0x2bc>)
 8001e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	4ba7      	ldr	r3, [pc, #668]	@ (80020d4 <TIM6_DAC_IRQHandler+0x2cc>)
 8001e36:	f7fe fe61 	bl	8000afc <__aeabi_dcmplt>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d02d      	beq.n	8001e9c <TIM6_DAC_IRQHandler+0x94>
		// BEGIN TO SOUND THE ALARM
		if (__GET_SYSTEM_STATE == ready || setting) {
 8001e40:	4ba5      	ldr	r3, [pc, #660]	@ (80020d8 <TIM6_DAC_IRQHandler+0x2d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <TIM6_DAC_IRQHandler+0x4a>
 8001e4a:	4ba4      	ldr	r3, [pc, #656]	@ (80020dc <TIM6_DAC_IRQHandler+0x2d4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00f      	beq.n	8001e72 <TIM6_DAC_IRQHandler+0x6a>
			if (!door_opened) {
 8001e52:	4ba3      	ldr	r3, [pc, #652]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2d8>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <TIM6_DAC_IRQHandler+0x9a>
				Generate_Tone(true, OPEN_ON_READY_BEEP_LENGTH);
 8001e60:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 fa01 	bl	800226c <Generate_Tone>

				door_opened = true;
 8001e6a:	4b9d      	ldr	r3, [pc, #628]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2d8>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
			if (!door_opened) {
 8001e70:	e017      	b.n	8001ea2 <TIM6_DAC_IRQHandler+0x9a>
			}
		} else {
			if (!door_opened) {
 8001e72:	4b9b      	ldr	r3, [pc, #620]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2d8>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <TIM6_DAC_IRQHandler+0x9a>
				triggered = true;
 8001e80:	4b98      	ldr	r3, [pc, #608]	@ (80020e4 <TIM6_DAC_IRQHandler+0x2dc>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
				alarm_rhythm_counter = 1;
 8001e86:	4b98      	ldr	r3, [pc, #608]	@ (80020e8 <TIM6_DAC_IRQHandler+0x2e0>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
				Generate_Tone(true, OPEN_ON_SET_BEEP_LENGTH);
 8001e8c:	2129      	movs	r1, #41	@ 0x29
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f000 f9ec 	bl	800226c <Generate_Tone>

				door_opened = true;
 8001e94:	4b92      	ldr	r3, [pc, #584]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2d8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e002      	b.n	8001ea2 <TIM6_DAC_IRQHandler+0x9a>
			}
		}
	} else {
		door_opened = false;
 8001e9c:	4b90      	ldr	r3, [pc, #576]	@ (80020e0 <TIM6_DAC_IRQHandler+0x2d8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
	}

	// Poll for the number pad
	if        (!HAL_GPIO_ReadPin(NP0_GPIO_Port, NP0_Pin)) {
 8001ea2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ea6:	4891      	ldr	r0, [pc, #580]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8001ea8:	f001 fc7a 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d112      	bne.n	8001ed8 <TIM6_DAC_IRQHandler+0xd0>
		if (button_pressed != 0) {
 8001eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80f4 	beq.w	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 0;
 8001ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001ec2:	4b8c      	ldr	r3, [pc, #560]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001ec8:	2153      	movs	r1, #83	@ 0x53
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 f9ce 	bl	800226c <Generate_Tone>
			Update_Buffer('0');
 8001ed0:	2030      	movs	r0, #48	@ 0x30
 8001ed2:	f000 f9a5 	bl	8002220 <Update_Buffer>
 8001ed6:	e0e5      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP1_GPIO_Port, NP1_Pin)) {
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4884      	ldr	r0, [pc, #528]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8001edc:	f001 fc60 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d112      	bne.n	8001f0c <TIM6_DAC_IRQHandler+0x104>
		if (button_pressed != 1) {
 8001ee6:	4b82      	ldr	r3, [pc, #520]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f000 80da 	beq.w	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 1;
 8001ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001efc:	2153      	movs	r1, #83	@ 0x53
 8001efe:	2001      	movs	r0, #1
 8001f00:	f000 f9b4 	bl	800226c <Generate_Tone>
			Update_Buffer('1');
 8001f04:	2031      	movs	r0, #49	@ 0x31
 8001f06:	f000 f98b 	bl	8002220 <Update_Buffer>
 8001f0a:	e0cb      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP2_GPIO_Port, NP2_Pin)) {
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	4877      	ldr	r0, [pc, #476]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8001f10:	f001 fc46 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <TIM6_DAC_IRQHandler+0x138>
		if (button_pressed != 2) {
 8001f1a:	4b75      	ldr	r3, [pc, #468]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	f000 80c0 	beq.w	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 2;
 8001f24:	4b72      	ldr	r3, [pc, #456]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001f2a:	4b72      	ldr	r3, [pc, #456]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f30:	2153      	movs	r1, #83	@ 0x53
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 f99a 	bl	800226c <Generate_Tone>
			Update_Buffer('2');
 8001f38:	2032      	movs	r0, #50	@ 0x32
 8001f3a:	f000 f971 	bl	8002220 <Update_Buffer>
 8001f3e:	e0b1      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP3_GPIO_Port, NP3_Pin)) {
 8001f40:	2108      	movs	r1, #8
 8001f42:	486a      	ldr	r0, [pc, #424]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8001f44:	f001 fc2c 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d112      	bne.n	8001f74 <TIM6_DAC_IRQHandler+0x16c>
		if (button_pressed != 3) {
 8001f4e:	4b68      	ldr	r3, [pc, #416]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	f000 80a6 	beq.w	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 3;
 8001f58:	4b65      	ldr	r3, [pc, #404]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001f5e:	4b65      	ldr	r3, [pc, #404]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f64:	2153      	movs	r1, #83	@ 0x53
 8001f66:	2001      	movs	r0, #1
 8001f68:	f000 f980 	bl	800226c <Generate_Tone>
			Update_Buffer('3');
 8001f6c:	2033      	movs	r0, #51	@ 0x33
 8001f6e:	f000 f957 	bl	8002220 <Update_Buffer>
 8001f72:	e097      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP4_GPIO_Port, NP4_Pin)) {
 8001f74:	2110      	movs	r1, #16
 8001f76:	485d      	ldr	r0, [pc, #372]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8001f78:	f001 fc12 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d112      	bne.n	8001fa8 <TIM6_DAC_IRQHandler+0x1a0>
		if (button_pressed != 4) {
 8001f82:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	f000 808c 	beq.w	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 4;
 8001f8c:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001f8e:	2204      	movs	r2, #4
 8001f90:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001f92:	4b58      	ldr	r3, [pc, #352]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001f98:	2153      	movs	r1, #83	@ 0x53
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f000 f966 	bl	800226c <Generate_Tone>
			Update_Buffer('4');
 8001fa0:	2034      	movs	r0, #52	@ 0x34
 8001fa2:	f000 f93d 	bl	8002220 <Update_Buffer>
 8001fa6:	e07d      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP5_GPIO_Port, NP5_Pin)) {
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4850      	ldr	r0, [pc, #320]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8001fac:	f001 fbf8 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <TIM6_DAC_IRQHandler+0x1d2>
		if (button_pressed != 5) {
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d072      	beq.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 5;
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001fc0:	2205      	movs	r2, #5
 8001fc2:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001fca:	2153      	movs	r1, #83	@ 0x53
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f000 f94d 	bl	800226c <Generate_Tone>
			Update_Buffer('5');
 8001fd2:	2035      	movs	r0, #53	@ 0x35
 8001fd4:	f000 f924 	bl	8002220 <Update_Buffer>
 8001fd8:	e064      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP6_GPIO_Port, NP6_Pin)) {
 8001fda:	2140      	movs	r1, #64	@ 0x40
 8001fdc:	4843      	ldr	r0, [pc, #268]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8001fde:	f001 fbdf 	bl	80037a0 <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d111      	bne.n	800200c <TIM6_DAC_IRQHandler+0x204>
		if (button_pressed != 6) {
 8001fe8:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b06      	cmp	r3, #6
 8001fee:	d059      	beq.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 6;
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8001ff2:	2206      	movs	r2, #6
 8001ff4:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8001ffc:	2153      	movs	r1, #83	@ 0x53
 8001ffe:	2001      	movs	r0, #1
 8002000:	f000 f934 	bl	800226c <Generate_Tone>
			Update_Buffer('6');
 8002004:	2036      	movs	r0, #54	@ 0x36
 8002006:	f000 f90b 	bl	8002220 <Update_Buffer>
 800200a:	e04b      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP7_GPIO_Port, NP7_Pin)) {
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	4837      	ldr	r0, [pc, #220]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8002010:	f001 fbc6 	bl	80037a0 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d111      	bne.n	800203e <TIM6_DAC_IRQHandler+0x236>
		if (button_pressed != 7) {
 800201a:	4b35      	ldr	r3, [pc, #212]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b07      	cmp	r3, #7
 8002020:	d040      	beq.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 7;
 8002022:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8002024:	2207      	movs	r2, #7
 8002026:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8002028:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 800202e:	2153      	movs	r1, #83	@ 0x53
 8002030:	2001      	movs	r0, #1
 8002032:	f000 f91b 	bl	800226c <Generate_Tone>
			Update_Buffer('7');
 8002036:	2037      	movs	r0, #55	@ 0x37
 8002038:	f000 f8f2 	bl	8002220 <Update_Buffer>
 800203c:	e032      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP8_GPIO_Port, NP8_Pin)) {
 800203e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002042:	482a      	ldr	r0, [pc, #168]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8002044:	f001 fbac 	bl	80037a0 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d111      	bne.n	8002072 <TIM6_DAC_IRQHandler+0x26a>
		if (button_pressed != 8) {
 800204e:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d026      	beq.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 8;
 8002056:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8002058:	2208      	movs	r2, #8
 800205a:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 800205c:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8002062:	2153      	movs	r1, #83	@ 0x53
 8002064:	2001      	movs	r0, #1
 8002066:	f000 f901 	bl	800226c <Generate_Tone>
			Update_Buffer('8');
 800206a:	2038      	movs	r0, #56	@ 0x38
 800206c:	f000 f8d8 	bl	8002220 <Update_Buffer>
 8002070:	e018      	b.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		}
	} else if (!HAL_GPIO_ReadPin(NP9_GPIO_Port, NP9_Pin)) {
 8002072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002076:	481d      	ldr	r0, [pc, #116]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 8002078:	f001 fb92 	bl	80037a0 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d110      	bne.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
		if (button_pressed != 9) {
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b09      	cmp	r3, #9
 8002088:	d00c      	beq.n	80020a4 <TIM6_DAC_IRQHandler+0x29c>
			button_pressed = 9;
 800208a:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 800208c:	2209      	movs	r2, #9
 800208e:	701a      	strb	r2, [r3, #0]
			overwritten = true;
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <TIM6_DAC_IRQHandler+0x2ec>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]

			Generate_Tone(true, INPUT_BEEP_LENGTH);
 8002096:	2153      	movs	r1, #83	@ 0x53
 8002098:	2001      	movs	r0, #1
 800209a:	f000 f8e7 	bl	800226c <Generate_Tone>
			Update_Buffer('9');
 800209e:	2039      	movs	r0, #57	@ 0x39
 80020a0:	f000 f8be 	bl	8002220 <Update_Buffer>





		if      (HAL_GPIO_ReadPin(NP0_GPIO_Port, NP0_Pin) && button_pressed == 0)		button_pressed = 10;
 80020a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020a8:	4810      	ldr	r0, [pc, #64]	@ (80020ec <TIM6_DAC_IRQHandler+0x2e4>)
 80020aa:	f001 fb79 	bl	80037a0 <HAL_GPIO_ReadPin>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d021      	beq.n	80020f8 <TIM6_DAC_IRQHandler+0x2f0>
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11d      	bne.n	80020f8 <TIM6_DAC_IRQHandler+0x2f0>
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <TIM6_DAC_IRQHandler+0x2e8>)
 80020be:	220a      	movs	r2, #10
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e0a1      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
 80020c4:	20000428 	.word	0x20000428
 80020c8:	0800bc0c 	.word	0x0800bc0c
 80020cc:	20000440 	.word	0x20000440
 80020d0:	2000039c 	.word	0x2000039c
 80020d4:	40890000 	.word	0x40890000
 80020d8:	20000208 	.word	0x20000208
 80020dc:	2000043a 	.word	0x2000043a
 80020e0:	2000043b 	.word	0x2000043b
 80020e4:	20000439 	.word	0x20000439
 80020e8:	20000438 	.word	0x20000438
 80020ec:	48000800 	.word	0x48000800
 80020f0:	20000010 	.word	0x20000010
 80020f4:	2000043c 	.word	0x2000043c
		else if (HAL_GPIO_ReadPin(NP1_GPIO_Port, NP1_Pin) && button_pressed == 1) 		button_pressed = 10;
 80020f8:	2102      	movs	r1, #2
 80020fa:	4846      	ldr	r0, [pc, #280]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 80020fc:	f001 fb50 	bl	80037a0 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d007      	beq.n	8002116 <TIM6_DAC_IRQHandler+0x30e>
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d103      	bne.n	8002116 <TIM6_DAC_IRQHandler+0x30e>
 800210e:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002110:	220a      	movs	r2, #10
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e078      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP2_GPIO_Port, NP2_Pin) && button_pressed == 2) 		button_pressed = 10;
 8002116:	2104      	movs	r1, #4
 8002118:	483e      	ldr	r0, [pc, #248]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 800211a:	f001 fb41 	bl	80037a0 <HAL_GPIO_ReadPin>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <TIM6_DAC_IRQHandler+0x32c>
 8002124:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d103      	bne.n	8002134 <TIM6_DAC_IRQHandler+0x32c>
 800212c:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 800212e:	220a      	movs	r2, #10
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e069      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP3_GPIO_Port, NP3_Pin) && button_pressed == 3) 		button_pressed = 10;
 8002134:	2108      	movs	r1, #8
 8002136:	4837      	ldr	r0, [pc, #220]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 8002138:	f001 fb32 	bl	80037a0 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <TIM6_DAC_IRQHandler+0x34a>
 8002142:	4b35      	ldr	r3, [pc, #212]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d103      	bne.n	8002152 <TIM6_DAC_IRQHandler+0x34a>
 800214a:	4b33      	ldr	r3, [pc, #204]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 800214c:	220a      	movs	r2, #10
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e05a      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP4_GPIO_Port, NP4_Pin) && button_pressed == 4) 		button_pressed = 10;
 8002152:	2110      	movs	r1, #16
 8002154:	482f      	ldr	r0, [pc, #188]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 8002156:	f001 fb23 	bl	80037a0 <HAL_GPIO_ReadPin>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <TIM6_DAC_IRQHandler+0x368>
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d103      	bne.n	8002170 <TIM6_DAC_IRQHandler+0x368>
 8002168:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 800216a:	220a      	movs	r2, #10
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e04b      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP5_GPIO_Port, NP5_Pin) && button_pressed == 5) 		button_pressed = 10;
 8002170:	2120      	movs	r1, #32
 8002172:	4828      	ldr	r0, [pc, #160]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 8002174:	f001 fb14 	bl	80037a0 <HAL_GPIO_ReadPin>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <TIM6_DAC_IRQHandler+0x386>
 800217e:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d103      	bne.n	800218e <TIM6_DAC_IRQHandler+0x386>
 8002186:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002188:	220a      	movs	r2, #10
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e03c      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP6_GPIO_Port, NP6_Pin) && button_pressed == 6) 		button_pressed = 10;
 800218e:	2140      	movs	r1, #64	@ 0x40
 8002190:	4820      	ldr	r0, [pc, #128]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 8002192:	f001 fb05 	bl	80037a0 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <TIM6_DAC_IRQHandler+0x3a4>
 800219c:	4b1e      	ldr	r3, [pc, #120]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d103      	bne.n	80021ac <TIM6_DAC_IRQHandler+0x3a4>
 80021a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 80021a6:	220a      	movs	r2, #10
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e02d      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP7_GPIO_Port, NP7_Pin) && button_pressed == 7) 		button_pressed = 10;
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	4819      	ldr	r0, [pc, #100]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 80021b0:	f001 faf6 	bl	80037a0 <HAL_GPIO_ReadPin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <TIM6_DAC_IRQHandler+0x3c2>
 80021ba:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b07      	cmp	r3, #7
 80021c0:	d103      	bne.n	80021ca <TIM6_DAC_IRQHandler+0x3c2>
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 80021c4:	220a      	movs	r2, #10
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e01e      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP8_GPIO_Port, NP8_Pin) && button_pressed == 8)		button_pressed = 10;
 80021ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021ce:	4811      	ldr	r0, [pc, #68]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 80021d0:	f001 fae6 	bl	80037a0 <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <TIM6_DAC_IRQHandler+0x3e2>
 80021da:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d103      	bne.n	80021ea <TIM6_DAC_IRQHandler+0x3e2>
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 80021e4:	220a      	movs	r2, #10
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e00e      	b.n	8002208 <TIM6_DAC_IRQHandler+0x400>
		else if (HAL_GPIO_ReadPin(NP9_GPIO_Port, NP9_Pin) && button_pressed == 9)		button_pressed = 10;
 80021ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ee:	4809      	ldr	r0, [pc, #36]	@ (8002214 <TIM6_DAC_IRQHandler+0x40c>)
 80021f0:	f001 fad6 	bl	80037a0 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <TIM6_DAC_IRQHandler+0x400>
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b09      	cmp	r3, #9
 8002200:	d102      	bne.n	8002208 <TIM6_DAC_IRQHandler+0x400>
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <TIM6_DAC_IRQHandler+0x410>)
 8002204:	220a      	movs	r2, #10
 8002206:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <TIM6_DAC_IRQHandler+0x414>)
 800220a:	f003 fd5b 	bl	8005cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	48000800 	.word	0x48000800
 8002218:	20000010 	.word	0x20000010
 800221c:	20000350 	.word	0x20000350

08002220 <Update_Buffer>:

/* USER CODE BEGIN 1 */
void Update_Buffer(char val) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
	HD44780_SetCursor(idx, 0);
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <Update_Buffer+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fe7d 	bl	8000f30 <HD44780_SetCursor>
	HD44780_PrintStr((char*)&val);
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe feea 	bl	8001012 <HD44780_PrintStr>

	if (idx < 4)
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <Update_Buffer+0x44>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d809      	bhi.n	800225a <Update_Buffer+0x3a>
		buffer[idx++] = val;
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <Update_Buffer+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	b2d1      	uxtb	r1, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <Update_Buffer+0x44>)
 8002250:	7011      	strb	r1, [r2, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	79f9      	ldrb	r1, [r7, #7]
 8002256:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <Update_Buffer+0x48>)
 8002258:	5499      	strb	r1, [r3, r2]
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000435 	.word	0x20000435
 8002268:	20000430 	.word	0x20000430

0800226c <Generate_Tone>:

void Generate_Tone(bool enable, uint16_t tone_length) {
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	4613      	mov	r3, r2
 800227a:	80bb      	strh	r3, [r7, #4]
	if (enable) {
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00e      	beq.n	80022a0 <Generate_Tone+0x34>
		__HAL_TIM_SET_AUTORELOAD(&htim1, ENABLE_BEEP * 2);
 8002282:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <Generate_Tone+0x5c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <Generate_Tone+0x5c>)
 800228e:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8002292:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ENABLE_BEEP);
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <Generate_Tone+0x5c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
 800229e:	e00a      	b.n	80022b6 <Generate_Tone+0x4a>
	} else {
		__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <Generate_Tone+0x5c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2200      	movs	r2, #0
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <Generate_Tone+0x5c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <Generate_Tone+0x5c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	buzzer_length_counter = tone_length;
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <Generate_Tone+0x60>)
 80022b8:	88bb      	ldrh	r3, [r7, #4]
 80022ba:	8013      	strh	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	200002b8 	.word	0x200002b8
 80022cc:	20000436 	.word	0x20000436

080022d0 <Check_IR_Signal>:

void Generate_Silenece(int length) {
	buzzer_length_counter = (uint16_t) length;
}

static inline void Check_IR_Signal(void) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80022d4:	480a      	ldr	r0, [pc, #40]	@ (8002300 <Check_IR_Signal+0x30>)
 80022d6:	f000 fb29 	bl	800292c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80022da:	2164      	movs	r1, #100	@ 0x64
 80022dc:	4808      	ldr	r0, [pc, #32]	@ (8002300 <Check_IR_Signal+0x30>)
 80022de:	f000 fb93 	bl	8002a08 <HAL_ADC_PollForConversion>
	raw = (double) HAL_ADC_GetValue(&hadc1);
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <Check_IR_Signal+0x30>)
 80022e4:	f000 fc4e 	bl	8002b84 <HAL_ADC_GetValue>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f91a 	bl	8000524 <__aeabi_ui2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4903      	ldr	r1, [pc, #12]	@ (8002304 <Check_IR_Signal+0x34>)
 80022f6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000214 	.word	0x20000214
 8002304:	20000428 	.word	0x20000428

08002308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return 1;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_kill>:

int _kill(int pid, int sig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002322:	f006 f9ad 	bl	8008680 <__errno>
 8002326:	4603      	mov	r3, r0
 8002328:	2216      	movs	r2, #22
 800232a:	601a      	str	r2, [r3, #0]
  return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_exit>:

void _exit (int status)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ffe7 	bl	8002318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800234a:	bf00      	nop
 800234c:	e7fd      	b.n	800234a <_exit+0x12>

0800234e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e00a      	b.n	8002376 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002360:	f3af 8000 	nop.w
 8002364:	4601      	mov	r1, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	60ba      	str	r2, [r7, #8]
 800236c:	b2ca      	uxtb	r2, r1
 800236e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3301      	adds	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	dbf0      	blt.n	8002360 <_read+0x12>
  }

  return len;
 800237e:	687b      	ldr	r3, [r7, #4]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e009      	b.n	80023ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	60ba      	str	r2, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbf1      	blt.n	800239a <_write+0x12>
  }
  return len;
 80023b6:	687b      	ldr	r3, [r7, #4]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_close>:

int _close(int file)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e8:	605a      	str	r2, [r3, #4]
  return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_isatty>:

int _isatty(int file)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f006 f912 	bl	8008680 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20004000 	.word	0x20004000
 8002488:	00000400 	.word	0x00000400
 800248c:	20000474 	.word	0x20000474
 8002490:	200005c8 	.word	0x200005c8

08002494 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff ffea 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024c2:	490d      	ldr	r1, [pc, #52]	@ (80024f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c4:	4a0d      	ldr	r2, [pc, #52]	@ (80024fc <LoopForever+0xe>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002504 <LoopForever+0x16>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f006 f8d1 	bl	800868c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ea:	f7fe feb1 	bl	8001250 <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80024fc:	0800c088 	.word	0x0800c088
  ldr r2, =_sbss
 8002500:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002504:	200005c8 	.word	0x200005c8

08002508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_IRQHandler>
	...

0800250c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_Init+0x28>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_Init+0x28>)
 8002516:	f043 0310 	orr.w	r3, r3, #16
 800251a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 ff8b 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	200f      	movs	r0, #15
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff f988 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000

08002538 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 ffa3 	bl	80034a2 <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f000 ff6b 	bl	800344e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	@ (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000014 	.word	0x20000014
 8002590:	2000001c 	.word	0x2000001c
 8002594:	20000018 	.word	0x20000018

08002598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2000001c 	.word	0x2000001c
 80025bc:	20000478 	.word	0x20000478

080025c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000478 	.word	0x20000478

080025d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_Delay+0x44>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000001c 	.word	0x2000001c

08002620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b09a      	sub	sp, #104	@ 0x68
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e169      	b.n	8002914 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d176      	bne.n	8002740 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d152      	bne.n	8002700 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff f905 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d13b      	bne.n	8002700 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fd9f 	bl	80031cc <ADC_Disable>
 800268e:	4603      	mov	r3, r0
 8002690:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d12f      	bne.n	8002700 <HAL_ADC_Init+0xe0>
 80026a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d12b      	bne.n	8002700 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026b0:	f023 0302 	bic.w	r3, r3, #2
 80026b4:	f043 0202 	orr.w	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026dc:	4b8f      	ldr	r3, [pc, #572]	@ (800291c <HAL_ADC_Init+0x2fc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a8f      	ldr	r2, [pc, #572]	@ (8002920 <HAL_ADC_Init+0x300>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0c9a      	lsrs	r2, r3, #18
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026f2:	e002      	b.n	80026fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f9      	bne.n	80026f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800271c:	d110      	bne.n	8002740 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f023 0312 	bic.w	r3, r3, #18
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 80d6 	bne.w	80028fa <HAL_ADC_Init+0x2da>
 800274e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80d1 	bne.w	80028fa <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 80c9 	bne.w	80028fa <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002770:	f043 0202 	orr.w	r2, r3, #2
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002778:	4b6a      	ldr	r3, [pc, #424]	@ (8002924 <HAL_ADC_Init+0x304>)
 800277a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <HAL_ADC_Init+0x180>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_Init+0x180>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_ADC_Init+0x182>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d11c      	bne.n	80027e0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_ADC_Init+0x1a8>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_Init+0x1a8>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_ADC_Init+0x1aa>
 80027c8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	431a      	orrs	r2, r3
 80027dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027de:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7e5b      	ldrb	r3, [r3, #25]
 80027e4:	035b      	lsls	r3, r3, #13
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027ea:	2a01      	cmp	r2, #1
 80027ec:	d002      	beq.n	80027f4 <HAL_ADC_Init+0x1d4>
 80027ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027f2:	e000      	b.n	80027f6 <HAL_ADC_Init+0x1d6>
 80027f4:	2200      	movs	r2, #0
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002806:	4313      	orrs	r3, r2
 8002808:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d11b      	bne.n	800284c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e5b      	ldrb	r3, [r3, #25]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	3b01      	subs	r3, #1
 8002822:	045a      	lsls	r2, r3, #17
 8002824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002826:	4313      	orrs	r3, r2
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	663b      	str	r3, [r7, #96]	@ 0x60
 800282e:	e00d      	b.n	800284c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	2b01      	cmp	r3, #1
 8002852:	d007      	beq.n	8002864 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	4313      	orrs	r3, r2
 800285e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002860:	4313      	orrs	r3, r2
 8002862:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b00      	cmp	r3, #0
 8002870:	d114      	bne.n	800289c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002880:	f023 0302 	bic.w	r3, r3, #2
 8002884:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7e1b      	ldrb	r3, [r3, #24]
 800288a:	039a      	lsls	r2, r3, #14
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4313      	orrs	r3, r2
 8002896:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002898:	4313      	orrs	r3, r2
 800289a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <HAL_ADC_Init+0x308>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80028ac:	430b      	orrs	r3, r1
 80028ae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10c      	bne.n	80028d2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f023 010f 	bic.w	r1, r3, #15
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80028d0:	e007      	b.n	80028e2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 020f 	bic.w	r2, r2, #15
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f023 0303 	bic.w	r3, r3, #3
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80028f8:	e00a      	b.n	8002910 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f023 0312 	bic.w	r3, r3, #18
 8002902:	f043 0210 	orr.w	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800290a:	2301      	movs	r3, #1
 800290c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002910:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002914:	4618      	mov	r0, r3
 8002916:	3768      	adds	r7, #104	@ 0x68
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000014 	.word	0x20000014
 8002920:	431bde83 	.word	0x431bde83
 8002924:	50000300 	.word	0x50000300
 8002928:	fff0c007 	.word	0xfff0c007

0800292c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d158      	bne.n	80029f8 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_ADC_Start+0x28>
 8002950:	2302      	movs	r3, #2
 8002952:	e054      	b.n	80029fe <HAL_ADC_Start+0xd2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fbd1 	bl	8003104 <ADC_Enable>
 8002962:	4603      	mov	r3, r0
 8002964:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d140      	bne.n	80029ee <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b6:	d106      	bne.n	80029c6 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029bc:	f023 0206 	bic.w	r2, r3, #6
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80029c4:	e002      	b.n	80029cc <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	221c      	movs	r2, #28
 80029da:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0204 	orr.w	r2, r2, #4
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e006      	b.n	80029fc <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80029f6:	e001      	b.n	80029fc <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
 80029fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d102      	bne.n	8002a24 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002a1e:	2308      	movs	r3, #8
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e02e      	b.n	8002a82 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a24:	4b56      	ldr	r3, [pc, #344]	@ (8002b80 <HAL_ADC_PollForConversion+0x178>)
 8002a26:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d112      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d11d      	bne.n	8002a7e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e08d      	b.n	8002b76 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07b      	b.n	8002b76 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002a7e:	230c      	movs	r3, #12
 8002a80:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002a8a:	f7ff fd99 	bl	80025c0 <HAL_GetTick>
 8002a8e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002a90:	e021      	b.n	8002ad6 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d01d      	beq.n	8002ad6 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_ADC_PollForConversion+0xa8>
 8002aa0:	f7ff fd8e 	bl	80025c0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d212      	bcs.n	8002ad6 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10b      	bne.n	8002ad6 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e04f      	b.n	8002b76 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0d6      	beq.n	8002a92 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d131      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d12c      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d125      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d112      	bne.n	8002b4a <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d112      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b48:	e00b      	b.n	8002b62 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d103      	bne.n	8002b74 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	50000300 	.word	0x50000300

08002b84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b09b      	sub	sp, #108	@ 0x6c
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x22>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e295      	b.n	80030ee <HAL_ADC_ConfigChannel+0x54e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 8279 	bne.w	80030cc <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d81c      	bhi.n	8002c1c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	231f      	movs	r3, #31
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	4019      	ands	r1, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c1a:	e063      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	d81e      	bhi.n	8002c62 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	3b1e      	subs	r3, #30
 8002c38:	221f      	movs	r2, #31
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4019      	ands	r1, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	3b1e      	subs	r3, #30
 8002c54:	fa00 f203 	lsl.w	r2, r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c60:	e040      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b0e      	cmp	r3, #14
 8002c68:	d81e      	bhi.n	8002ca8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	3b3c      	subs	r3, #60	@ 0x3c
 8002c7e:	221f      	movs	r2, #31
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4019      	ands	r1, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	3b3c      	subs	r3, #60	@ 0x3c
 8002c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ca6:	e01d      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	3b5a      	subs	r3, #90	@ 0x5a
 8002cbc:	221f      	movs	r2, #31
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	4019      	ands	r1, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	3b5a      	subs	r3, #90	@ 0x5a
 8002cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 80e5 	bne.w	8002ebe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	d91c      	bls.n	8002d36 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6999      	ldr	r1, [r3, #24]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b1e      	subs	r3, #30
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4019      	ands	r1, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6898      	ldr	r0, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	3b1e      	subs	r3, #30
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	619a      	str	r2, [r3, #24]
 8002d34:	e019      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6959      	ldr	r1, [r3, #20]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	2207      	movs	r2, #7
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	4019      	ands	r1, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6898      	ldr	r0, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d84f      	bhi.n	8002e2c <HAL_ADC_ConfigChannel+0x28c>
 8002d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d94 <HAL_ADC_ConfigChannel+0x1f4>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002da5 	.word	0x08002da5
 8002d98:	08002dc7 	.word	0x08002dc7
 8002d9c:	08002de9 	.word	0x08002de9
 8002da0:	08002e0b 	.word	0x08002e0b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002daa:	4b97      	ldr	r3, [pc, #604]	@ (8003008 <HAL_ADC_ConfigChannel+0x468>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	0691      	lsls	r1, r2, #26
 8002db4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002db6:	430a      	orrs	r2, r1
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002dc2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dc4:	e07b      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8003008 <HAL_ADC_ConfigChannel+0x468>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	0691      	lsls	r1, r2, #26
 8002dd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002de4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002de6:	e06a      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002dee:	4b86      	ldr	r3, [pc, #536]	@ (8003008 <HAL_ADC_ConfigChannel+0x468>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	0691      	lsls	r1, r2, #26
 8002df8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e06:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e08:	e059      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e10:	4b7d      	ldr	r3, [pc, #500]	@ (8003008 <HAL_ADC_ConfigChannel+0x468>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	0691      	lsls	r1, r2, #26
 8002e1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e28:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e2a:	e048      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d107      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e4e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	069b      	lsls	r3, r3, #26
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e72:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	069b      	lsls	r3, r3, #26
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e96:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	069b      	lsls	r3, r3, #26
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d107      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002eba:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002ebc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x33e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x33e>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x340>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 80fe 	bne.w	80030e2 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d00f      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43da      	mvns	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	400a      	ands	r2, r1
 8002f08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002f0c:	e049      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	d91c      	bls.n	8002f6a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6999      	ldr	r1, [r3, #24]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b1b      	subs	r3, #27
 8002f42:	2207      	movs	r2, #7
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	4019      	ands	r1, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6898      	ldr	r0, [r3, #8]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b1b      	subs	r3, #27
 8002f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	619a      	str	r2, [r3, #24]
 8002f68:	e01b      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6959      	ldr	r1, [r3, #20]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4019      	ands	r1, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6898      	ldr	r0, [r3, #8]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <HAL_ADC_ConfigChannel+0x46c>)
 8002fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d105      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d014      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fbe:	2b11      	cmp	r3, #17
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002fd2:	2b12      	cmp	r3, #18
 8002fd4:	f040 8085 	bne.w	80030e2 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d17e      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10c      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x470>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x470>
 8003004:	2301      	movs	r3, #1
 8003006:	e004      	b.n	8003012 <HAL_ADC_ConfigChannel+0x472>
 8003008:	83fff000 	.word	0x83fff000
 800300c:	50000300 	.word	0x50000300
 8003010:	2300      	movs	r3, #0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d150      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003016:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x498>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x498>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_ADC_ConfigChannel+0x49a>
 8003038:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800303a:	2b00      	cmp	r3, #0
 800303c:	d13c      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b10      	cmp	r3, #16
 8003044:	d11d      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x4e2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304e:	d118      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800305a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800305c:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <HAL_ADC_ConfigChannel+0x55c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a27      	ldr	r2, [pc, #156]	@ (8003100 <HAL_ADC_ConfigChannel+0x560>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0c9a      	lsrs	r2, r3, #18
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003072:	e002      	b.n	800307a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3b01      	subs	r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f9      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003080:	e02e      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b11      	cmp	r3, #17
 8003088:	d10b      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x502>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003092:	d106      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800309c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030a0:	e01e      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b12      	cmp	r3, #18
 80030a8:	d11a      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80030aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80030b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030b6:	e013      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80030ca:	e00a      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80030de:	e000      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	376c      	adds	r7, #108	@ 0x6c
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000014 	.word	0x20000014
 8003100:	431bde83 	.word	0x431bde83

08003104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d108      	bne.n	8003130 <ADC_Enable+0x2c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <ADC_Enable+0x2c>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <ADC_Enable+0x2e>
 8003130:	2300      	movs	r3, #0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d143      	bne.n	80031be <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <ADC_Enable+0xc4>)
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e02f      	b.n	80031c0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003170:	f7ff fa26 	bl	80025c0 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003176:	e01b      	b.n	80031b0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003178:	f7ff fa22 	bl	80025c0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d914      	bls.n	80031b0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d00d      	beq.n	80031b0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d1dc      	bne.n	8003178 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	8000003f 	.word	0x8000003f

080031cc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d108      	bne.n	80031f8 <ADC_Disable+0x2c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <ADC_Disable+0x2c>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <ADC_Disable+0x2e>
 80031f8:	2300      	movs	r3, #0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d047      	beq.n	800328e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030d 	and.w	r3, r3, #13
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10f      	bne.n	800322c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0202 	orr.w	r2, r2, #2
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2203      	movs	r2, #3
 8003222:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003224:	f7ff f9cc 	bl	80025c0 <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800322a:	e029      	b.n	8003280 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f043 0210 	orr.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e023      	b.n	8003290 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003248:	f7ff f9ba 	bl	80025c0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d914      	bls.n	8003280 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10d      	bne.n	8003280 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e007      	b.n	8003290 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d0dc      	beq.n	8003248 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a8:	4b0c      	ldr	r3, [pc, #48]	@ (80032dc <__NVIC_SetPriorityGrouping+0x44>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b4:	4013      	ands	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ca:	4a04      	ldr	r2, [pc, #16]	@ (80032dc <__NVIC_SetPriorityGrouping+0x44>)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	60d3      	str	r3, [r2, #12]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <__NVIC_GetPriorityGrouping+0x18>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 0307 	and.w	r3, r3, #7
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	2b00      	cmp	r3, #0
 800330c:	db0b      	blt.n	8003326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	4907      	ldr	r1, [pc, #28]	@ (8003334 <__NVIC_EnableIRQ+0x38>)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2001      	movs	r0, #1
 800331e:	fa00 f202 	lsl.w	r2, r0, r2
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000e100 	.word	0xe000e100

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	@ (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	@ (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003404:	d301      	bcc.n	800340a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <SysTick_Config+0x40>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003412:	210f      	movs	r1, #15
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f7ff ff8e 	bl	8003338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <SysTick_Config+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003422:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <SysTick_Config+0x40>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010

08003438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff29 	bl	8003298 <__NVIC_SetPriorityGrouping>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003460:	f7ff ff3e 	bl	80032e0 <__NVIC_GetPriorityGrouping>
 8003464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	6978      	ldr	r0, [r7, #20]
 800346c:	f7ff ff8e 	bl	800338c <NVIC_EncodePriority>
 8003470:	4602      	mov	r2, r0
 8003472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff5d 	bl	8003338 <__NVIC_SetPriority>
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff31 	bl	80032fc <__NVIC_EnableIRQ>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ffa2 	bl	80033f4 <SysTick_Config>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ca:	e14e      	b.n	800376a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8140 	beq.w	8003764 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d005      	beq.n	80034fc <HAL_GPIO_Init+0x40>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d130      	bne.n	800355e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003532:	2201      	movs	r2, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	f003 0201 	and.w	r2, r3, #1
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b03      	cmp	r3, #3
 8003568:	d017      	beq.n	800359a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d123      	bne.n	80035ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	220f      	movs	r2, #15
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	6939      	ldr	r1, [r7, #16]
 80035ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0203 	and.w	r2, r3, #3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 809a 	beq.w	8003764 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003630:	4b55      	ldr	r3, [pc, #340]	@ (8003788 <HAL_GPIO_Init+0x2cc>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	4a54      	ldr	r2, [pc, #336]	@ (8003788 <HAL_GPIO_Init+0x2cc>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6193      	str	r3, [r2, #24]
 800363c:	4b52      	ldr	r3, [pc, #328]	@ (8003788 <HAL_GPIO_Init+0x2cc>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003648:	4a50      	ldr	r2, [pc, #320]	@ (800378c <HAL_GPIO_Init+0x2d0>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3302      	adds	r3, #2
 8003650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	220f      	movs	r2, #15
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003672:	d013      	beq.n	800369c <HAL_GPIO_Init+0x1e0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a46      	ldr	r2, [pc, #280]	@ (8003790 <HAL_GPIO_Init+0x2d4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00d      	beq.n	8003698 <HAL_GPIO_Init+0x1dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a45      	ldr	r2, [pc, #276]	@ (8003794 <HAL_GPIO_Init+0x2d8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <HAL_GPIO_Init+0x1d8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a44      	ldr	r2, [pc, #272]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_GPIO_Init+0x1d4>
 800368c:	2303      	movs	r3, #3
 800368e:	e006      	b.n	800369e <HAL_GPIO_Init+0x1e2>
 8003690:	2305      	movs	r3, #5
 8003692:	e004      	b.n	800369e <HAL_GPIO_Init+0x1e2>
 8003694:	2302      	movs	r3, #2
 8003696:	e002      	b.n	800369e <HAL_GPIO_Init+0x1e2>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_GPIO_Init+0x1e2>
 800369c:	2300      	movs	r3, #0
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	f002 0203 	and.w	r2, r2, #3
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	4093      	lsls	r3, r2
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ae:	4937      	ldr	r1, [pc, #220]	@ (800378c <HAL_GPIO_Init+0x2d0>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	3302      	adds	r3, #2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036bc:	4b37      	ldr	r3, [pc, #220]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036e0:	4a2e      	ldr	r2, [pc, #184]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e6:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800370a:	4a24      	ldr	r2, [pc, #144]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003710:	4b22      	ldr	r3, [pc, #136]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003734:	4a19      	ldr	r2, [pc, #100]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373a:	4b18      	ldr	r3, [pc, #96]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800375e:	4a0f      	ldr	r2, [pc, #60]	@ (800379c <HAL_GPIO_Init+0x2e0>)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3301      	adds	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	f47f aea9 	bne.w	80034cc <HAL_GPIO_Init+0x10>
  }
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40021000 	.word	0x40021000
 800378c:	40010000 	.word	0x40010000
 8003790:	48000400 	.word	0x48000400
 8003794:	48000800 	.word	0x48000800
 8003798:	48000c00 	.word	0x48000c00
 800379c:	40010400 	.word	0x40010400

080037a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	e001      	b.n	80037c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
 80037dc:	4613      	mov	r3, r2
 80037de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e0:	787b      	ldrb	r3, [r7, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037ec:	e002      	b.n	80037f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f806 	bl	8003830 <HAL_GPIO_EXTI_Callback>
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40010400 	.word	0x40010400

08003830 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e08d      	b.n	8003974 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fe f845 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	@ 0x24
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003896:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	e006      	b.n	80038ce <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d108      	bne.n	80038e8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	e007      	b.n	80038f8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800390a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800391a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69d9      	ldr	r1, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	460b      	mov	r3, r1
 800398a:	817b      	strh	r3, [r7, #10]
 800398c:	4613      	mov	r3, r2
 800398e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	f040 80fd 	bne.w	8003b98 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_I2C_Master_Transmit+0x30>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e0f6      	b.n	8003b9a <HAL_I2C_Master_Transmit+0x21e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039b4:	f7fe fe04 	bl	80025c0 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2319      	movs	r3, #25
 80039c0:	2201      	movs	r2, #1
 80039c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f914 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0e1      	b.n	8003b9a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2221      	movs	r2, #33	@ 0x21
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2210      	movs	r2, #16
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	893a      	ldrh	r2, [r7, #8]
 80039f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2bff      	cmp	r3, #255	@ 0xff
 8003a06:	d906      	bls.n	8003a16 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	22ff      	movs	r2, #255	@ 0xff
 8003a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003a0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e007      	b.n	8003a26 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a24:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d024      	beq.n	8003a78 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	8979      	ldrh	r1, [r7, #10]
 8003a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba4 <HAL_I2C_Master_Transmit+0x228>)
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fa83 	bl	8003f7c <I2C_TransferConfig>
 8003a76:	e066      	b.n	8003b46 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	4b48      	ldr	r3, [pc, #288]	@ (8003ba4 <HAL_I2C_Master_Transmit+0x228>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fa78 	bl	8003f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a8c:	e05b      	b.n	8003b46 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	6a39      	ldr	r1, [r7, #32]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f907 	bl	8003ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07b      	b.n	8003b9a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	781a      	ldrb	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d034      	beq.n	8003b46 <HAL_I2C_Master_Transmit+0x1ca>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d130      	bne.n	8003b46 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	2200      	movs	r2, #0
 8003aec:	2180      	movs	r1, #128	@ 0x80
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f880 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e04d      	b.n	8003b9a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2bff      	cmp	r3, #255	@ 0xff
 8003b06:	d90e      	bls.n	8003b26 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	22ff      	movs	r2, #255	@ 0xff
 8003b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	8979      	ldrh	r1, [r7, #10]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fa2c 	bl	8003f7c <I2C_TransferConfig>
 8003b24:	e00f      	b.n	8003b46 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	8979      	ldrh	r1, [r7, #10]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fa1b 	bl	8003f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d19e      	bne.n	8003a8e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	6a39      	ldr	r1, [r7, #32]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f8ed 	bl	8003d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e01a      	b.n	8003b9a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <HAL_I2C_Master_Transmit+0x22c>)
 8003b78:	400b      	ands	r3, r1
 8003b7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	80002000 	.word	0x80002000
 8003ba8:	fe00e800 	.word	0xfe00e800

08003bac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d103      	bne.n	8003bca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d007      	beq.n	8003be8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	619a      	str	r2, [r3, #24]
  }
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c04:	e03b      	b.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f8d6 	bl	8003dbc <I2C_IsErrorOccurred>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d02d      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fe fccd 	bl	80025c0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d122      	bne.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4013      	ands	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d113      	bne.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00f      	b.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4013      	ands	r3, r2
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d0b4      	beq.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb2:	e033      	b.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f87f 	bl	8003dbc <I2C_IsErrorOccurred>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e031      	b.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d025      	beq.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fe fc76 	bl	80025c0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11a      	bne.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d013      	beq.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e007      	b.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d1c4      	bne.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d40:	e02f      	b.n	8003da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f838 	bl	8003dbc <I2C_IsErrorOccurred>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e02d      	b.n	8003db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe fc33 	bl	80025c0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d11a      	bne.n	8003da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d013      	beq.n	8003da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e007      	b.n	8003db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d1c8      	bne.n	8003d42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d068      	beq.n	8003eba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2210      	movs	r2, #16
 8003dee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003df0:	e049      	b.n	8003e86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d045      	beq.n	8003e86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dfa:	f7fe fbe1 	bl	80025c0 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <I2C_IsErrorOccurred+0x54>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d13a      	bne.n	8003e86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e32:	d121      	bne.n	8003e78 <I2C_IsErrorOccurred+0xbc>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3a:	d01d      	beq.n	8003e78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d01a      	beq.n	8003e78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e52:	f7fe fbb5 	bl	80025c0 <HAL_GetTick>
 8003e56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e58:	e00e      	b.n	8003e78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e5a:	f7fe fbb1 	bl	80025c0 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b19      	cmp	r3, #25
 8003e66:	d907      	bls.n	8003e78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f043 0320 	orr.w	r3, r3, #32
 8003e6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e76:	e006      	b.n	8003e86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d1e9      	bne.n	8003e5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d003      	beq.n	8003e9c <I2C_IsErrorOccurred+0xe0>
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0aa      	beq.n	8003df2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f043 0302 	orr.w	r3, r3, #2
 8003f16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff fe3b 	bl	8003bac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <I2C_IsErrorOccurred+0x1bc>)
 8003f42:	400b      	ands	r3, r1
 8003f44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3728      	adds	r7, #40	@ 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	fe00e800 	.word	0xfe00e800

08003f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	817b      	strh	r3, [r7, #10]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f94:	7a7b      	ldrb	r3, [r7, #9]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003faa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	0d5b      	lsrs	r3, r3, #21
 8003fb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003fba:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <I2C_TransferConfig+0x60>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	ea02 0103 	and.w	r1, r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	03ff63ff 	.word	0x03ff63ff

08003fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d138      	bne.n	8004068 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004000:	2302      	movs	r3, #2
 8004002:	e032      	b.n	800406a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	@ 0x24
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004032:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	d139      	bne.n	8004100 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004096:	2302      	movs	r3, #2
 8004098:	e033      	b.n	8004102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2224      	movs	r2, #36	@ 0x24
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004116:	af00      	add	r7, sp, #0
 8004118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004120:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f001 b823 	b.w	800517c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 817d 	beq.w	8004446 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800414c:	4bbc      	ldr	r3, [pc, #752]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b04      	cmp	r3, #4
 8004156:	d00c      	beq.n	8004172 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004158:	4bb9      	ldr	r3, [pc, #740]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b08      	cmp	r3, #8
 8004162:	d15c      	bne.n	800421e <HAL_RCC_OscConfig+0x10e>
 8004164:	4bb6      	ldr	r3, [pc, #728]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004170:	d155      	bne.n	800421e <HAL_RCC_OscConfig+0x10e>
 8004172:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004176:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004186:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0x94>
 800419e:	4ba8      	ldr	r3, [pc, #672]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e015      	b.n	80041d0 <HAL_RCC_OscConfig+0xc0>
 80041a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041a8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80041b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041bc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80041c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80041cc:	4b9c      	ldr	r3, [pc, #624]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041d4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80041d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80041dc:	fa92 f2a2 	rbit	r2, r2
 80041e0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80041e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80041e8:	fab2 f282 	clz	r2, r2
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	f042 0220 	orr.w	r2, r2, #32
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	f002 021f 	and.w	r2, r2, #31
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f202 	lsl.w	r2, r1, r2
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 811f 	beq.w	8004444 <HAL_RCC_OscConfig+0x334>
 8004206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 8116 	bne.w	8004444 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f000 bfaf 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x12e>
 8004230:	4b83      	ldr	r3, [pc, #524]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a82      	ldr	r2, [pc, #520]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e036      	b.n	80042ac <HAL_RCC_OscConfig+0x19c>
 800423e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004242:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x158>
 800424e:	4b7c      	ldr	r3, [pc, #496]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7b      	ldr	r2, [pc, #492]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b79      	ldr	r3, [pc, #484]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a78      	ldr	r2, [pc, #480]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e021      	b.n	80042ac <HAL_RCC_OscConfig+0x19c>
 8004268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x184>
 800427a:	4b71      	ldr	r3, [pc, #452]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a70      	ldr	r2, [pc, #448]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b6e      	ldr	r3, [pc, #440]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6d      	ldr	r2, [pc, #436]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0x19c>
 8004294:	4b6a      	ldr	r3, [pc, #424]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a69      	ldr	r2, [pc, #420]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b67      	ldr	r3, [pc, #412]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a66      	ldr	r2, [pc, #408]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042ac:	4b64      	ldr	r3, [pc, #400]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	f023 020f 	bic.w	r2, r3, #15
 80042b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	495f      	ldr	r1, [pc, #380]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d059      	beq.n	800438a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fe f973 	bl	80025c0 <HAL_GetTick>
 80042da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e0:	f7fe f96e 	bl	80025c0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b64      	cmp	r3, #100	@ 0x64
 80042ee:	d902      	bls.n	80042f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	f000 bf43 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
 80042f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042fa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800430a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_RCC_OscConfig+0x218>
 8004322:	4b47      	ldr	r3, [pc, #284]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	e015      	b.n	8004354 <HAL_RCC_OscConfig+0x244>
 8004328:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800432c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800433c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004340:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004344:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004348:	fa93 f3a3 	rbit	r3, r3
 800434c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004350:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004358:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800435c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004360:	fa92 f2a2 	rbit	r2, r2
 8004364:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004368:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800436c:	fab2 f282 	clz	r2, r2
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	f042 0220 	orr.w	r2, r2, #32
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f002 021f 	and.w	r2, r2, #31
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f202 	lsl.w	r2, r1, r2
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ab      	beq.n	80042e0 <HAL_RCC_OscConfig+0x1d0>
 8004388:	e05d      	b.n	8004446 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fe f919 	bl	80025c0 <HAL_GetTick>
 800438e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004394:	f7fe f914 	bl	80025c0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b64      	cmp	r3, #100	@ 0x64
 80043a2:	d902      	bls.n	80043aa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	f000 bee9 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
 80043aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043ae:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80043be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_OscConfig+0x2cc>
 80043d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	e015      	b.n	8004408 <HAL_RCC_OscConfig+0x2f8>
 80043dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043e0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80043f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043f4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80043f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004404:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <HAL_RCC_OscConfig+0x330>)
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800440c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004410:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004414:	fa92 f2a2 	rbit	r2, r2
 8004418:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800441c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	f042 0220 	orr.w	r2, r2, #32
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	f002 021f 	and.w	r2, r2, #31
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ab      	bne.n	8004394 <HAL_RCC_OscConfig+0x284>
 800443c:	e003      	b.n	8004446 <HAL_RCC_OscConfig+0x336>
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 817d 	beq.w	8004756 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800445c:	4ba6      	ldr	r3, [pc, #664]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004468:	4ba3      	ldr	r3, [pc, #652]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b08      	cmp	r3, #8
 8004472:	d172      	bne.n	800455a <HAL_RCC_OscConfig+0x44a>
 8004474:	4ba0      	ldr	r3, [pc, #640]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d16c      	bne.n	800455a <HAL_RCC_OscConfig+0x44a>
 8004480:	2302      	movs	r3, #2
 8004482:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004492:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d102      	bne.n	80044b0 <HAL_RCC_OscConfig+0x3a0>
 80044aa:	4b93      	ldr	r3, [pc, #588]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	e013      	b.n	80044d8 <HAL_RCC_OscConfig+0x3c8>
 80044b0:	2302      	movs	r3, #2
 80044b2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80044ba:	fa93 f3a3 	rbit	r3, r3
 80044be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80044c2:	2302      	movs	r3, #2
 80044c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80044c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80044d4:	4b88      	ldr	r3, [pc, #544]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	2202      	movs	r2, #2
 80044da:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80044de:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80044e2:	fa92 f2a2 	rbit	r2, r2
 80044e6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80044ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044ee:	fab2 f282 	clz	r2, r2
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	f042 0220 	orr.w	r2, r2, #32
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f002 021f 	and.w	r2, r2, #31
 80044fe:	2101      	movs	r1, #1
 8004500:	fa01 f202 	lsl.w	r2, r1, r2
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCC_OscConfig+0x410>
 800450a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d002      	beq.n	8004520 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f000 be2e 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b75      	ldr	r3, [pc, #468]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	21f8      	movs	r1, #248	@ 0xf8
 8004536:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800453e:	fa91 f1a1 	rbit	r1, r1
 8004542:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004546:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800454a:	fab1 f181 	clz	r1, r1
 800454e:	b2c9      	uxtb	r1, r1
 8004550:	408b      	lsls	r3, r1
 8004552:	4969      	ldr	r1, [pc, #420]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004558:	e0fd      	b.n	8004756 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800455a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8088 	beq.w	800467c <HAL_RCC_OscConfig+0x56c>
 800456c:	2301      	movs	r3, #1
 800456e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800457e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004582:	fab3 f383 	clz	r3, r3
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800458c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	461a      	mov	r2, r3
 8004594:	2301      	movs	r3, #1
 8004596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe f812 	bl	80025c0 <HAL_GetTick>
 800459c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a2:	f7fe f80d 	bl	80025c0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d902      	bls.n	80045b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	f000 bde2 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
 80045b8:	2302      	movs	r3, #2
 80045ba:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80045ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ce:	fab3 f383 	clz	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d102      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4d8>
 80045e2:	4b45      	ldr	r3, [pc, #276]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	e013      	b.n	8004610 <HAL_RCC_OscConfig+0x500>
 80045e8:	2302      	movs	r3, #2
 80045ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80045fa:	2302      	movs	r3, #2
 80045fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004600:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800460c:	4b3a      	ldr	r3, [pc, #232]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	2202      	movs	r2, #2
 8004612:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004616:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800461a:	fa92 f2a2 	rbit	r2, r2
 800461e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004622:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004626:	fab2 f282 	clz	r2, r2
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	f042 0220 	orr.w	r2, r2, #32
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	f002 021f 	and.w	r2, r2, #31
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f202 	lsl.w	r2, r1, r2
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0af      	beq.n	80045a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b2d      	ldr	r3, [pc, #180]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800464a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	21f8      	movs	r1, #248	@ 0xf8
 8004658:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004660:	fa91 f1a1 	rbit	r1, r1
 8004664:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004668:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800466c:	fab1 f181 	clz	r1, r1
 8004670:	b2c9      	uxtb	r1, r1
 8004672:	408b      	lsls	r3, r1
 8004674:	4920      	ldr	r1, [pc, #128]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
 800467a:	e06c      	b.n	8004756 <HAL_RCC_OscConfig+0x646>
 800467c:	2301      	movs	r3, #1
 800467e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800468e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800469c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	461a      	mov	r2, r3
 80046a4:	2300      	movs	r3, #0
 80046a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd ff8a 	bl	80025c0 <HAL_GetTick>
 80046ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fd ff85 	bl	80025c0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d902      	bls.n	80046c8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	f000 bd5a 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80046da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d104      	bne.n	80046fc <HAL_RCC_OscConfig+0x5ec>
 80046f2:	4b01      	ldr	r3, [pc, #4]	@ (80046f8 <HAL_RCC_OscConfig+0x5e8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	e015      	b.n	8004724 <HAL_RCC_OscConfig+0x614>
 80046f8:	40021000 	.word	0x40021000
 80046fc:	2302      	movs	r3, #2
 80046fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800470e:	2302      	movs	r3, #2
 8004710:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004714:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004718:	fa93 f3a3 	rbit	r3, r3
 800471c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004720:	4bc8      	ldr	r3, [pc, #800]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	2202      	movs	r2, #2
 8004726:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800472a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800472e:	fa92 f2a2 	rbit	r2, r2
 8004732:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004736:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800473a:	fab2 f282 	clz	r2, r2
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	f042 0220 	orr.w	r2, r2, #32
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	f002 021f 	and.w	r2, r2, #31
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f202 	lsl.w	r2, r1, r2
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ad      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8110 	beq.w	800498c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800476c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004770:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d079      	beq.n	8004870 <HAL_RCC_OscConfig+0x760>
 800477c:	2301      	movs	r3, #1
 800477e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	4bab      	ldr	r3, [pc, #684]	@ (8004a48 <HAL_RCC_OscConfig+0x938>)
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	461a      	mov	r2, r3
 80047a2:	2301      	movs	r3, #1
 80047a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd ff0b 	bl	80025c0 <HAL_GetTick>
 80047aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fd ff06 	bl	80025c0 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d902      	bls.n	80047c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	f000 bcdb 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
 80047c6:	2302      	movs	r3, #2
 80047c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80047d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047e0:	2202      	movs	r2, #2
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	fa93 f2a3 	rbit	r2, r3
 80047f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004804:	2202      	movs	r2, #2
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	fa93 f2a3 	rbit	r2, r3
 8004816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800481e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004820:	4b88      	ldr	r3, [pc, #544]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 8004822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004828:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800482c:	2102      	movs	r1, #2
 800482e:	6019      	str	r1, [r3, #0]
 8004830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004834:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	fa93 f1a3 	rbit	r1, r3
 800483e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004842:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004846:	6019      	str	r1, [r3, #0]
  return result;
 8004848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2101      	movs	r1, #1
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0a0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x6a0>
 800486e:	e08d      	b.n	800498c <HAL_RCC_OscConfig+0x87c>
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004880:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	fa93 f2a3 	rbit	r2, r3
 800488a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004892:	601a      	str	r2, [r3, #0]
  return result;
 8004894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004898:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800489c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b68      	ldr	r3, [pc, #416]	@ (8004a48 <HAL_RCC_OscConfig+0x938>)
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	461a      	mov	r2, r3
 80048ae:	2300      	movs	r3, #0
 80048b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7fd fe85 	bl	80025c0 <HAL_GetTick>
 80048b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048bc:	f7fd fe80 	bl	80025c0 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d902      	bls.n	80048d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	f000 bc55 	b.w	800517c <HAL_RCC_OscConfig+0x106c>
 80048d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048da:	2202      	movs	r2, #2
 80048dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	fa93 f2a3 	rbit	r2, r3
 80048ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80048fe:	2202      	movs	r2, #2
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004906:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	fa93 f2a3 	rbit	r2, r3
 8004910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004914:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004922:	2202      	movs	r2, #2
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	fa93 f2a3 	rbit	r2, r3
 8004934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004938:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800493c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493e:	4b41      	ldr	r3, [pc, #260]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 8004940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800494a:	2102      	movs	r1, #2
 800494c:	6019      	str	r1, [r3, #0]
 800494e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004952:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f1a3 	rbit	r1, r3
 800495c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004960:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004964:	6019      	str	r1, [r3, #0]
  return result;
 8004966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d197      	bne.n	80048bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800498c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004990:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 81a1 	beq.w	8004ce4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a8:	4b26      	ldr	r3, [pc, #152]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b4:	4b23      	ldr	r3, [pc, #140]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	4a22      	ldr	r2, [pc, #136]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 80049ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049be:	61d3      	str	r3, [r2, #28]
 80049c0:	4b20      	ldr	r3, [pc, #128]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80049c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049cc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80049da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a4c <HAL_RCC_OscConfig+0x93c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11a      	bne.n	8004a24 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ee:	4b17      	ldr	r3, [pc, #92]	@ (8004a4c <HAL_RCC_OscConfig+0x93c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a16      	ldr	r2, [pc, #88]	@ (8004a4c <HAL_RCC_OscConfig+0x93c>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fa:	f7fd fde1 	bl	80025c0 <HAL_GetTick>
 80049fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a02:	e009      	b.n	8004a18 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a04:	f7fd fddc 	bl	80025c0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b64      	cmp	r3, #100	@ 0x64
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e3b1      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <HAL_RCC_OscConfig+0x93c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ef      	beq.n	8004a04 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCC_OscConfig+0x940>
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4a02      	ldr	r2, [pc, #8]	@ (8004a44 <HAL_RCC_OscConfig+0x934>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6213      	str	r3, [r2, #32]
 8004a40:	e03c      	b.n	8004abc <HAL_RCC_OscConfig+0x9ac>
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
 8004a48:	10908120 	.word	0x10908120
 8004a4c:	40007000 	.word	0x40007000
 8004a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x96a>
 8004a60:	4bc1      	ldr	r3, [pc, #772]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4ac0      	ldr	r2, [pc, #768]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	6213      	str	r3, [r2, #32]
 8004a6c:	4bbe      	ldr	r3, [pc, #760]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4abd      	ldr	r2, [pc, #756]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a72:	f023 0304 	bic.w	r3, r3, #4
 8004a76:	6213      	str	r3, [r2, #32]
 8004a78:	e020      	b.n	8004abc <HAL_RCC_OscConfig+0x9ac>
 8004a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x994>
 8004a8a:	4bb7      	ldr	r3, [pc, #732]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4ab6      	ldr	r2, [pc, #728]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	6213      	str	r3, [r2, #32]
 8004a96:	4bb4      	ldr	r3, [pc, #720]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	4ab3      	ldr	r2, [pc, #716]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6213      	str	r3, [r2, #32]
 8004aa2:	e00b      	b.n	8004abc <HAL_RCC_OscConfig+0x9ac>
 8004aa4:	4bb0      	ldr	r3, [pc, #704]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4aaf      	ldr	r2, [pc, #700]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6213      	str	r3, [r2, #32]
 8004ab0:	4bad      	ldr	r3, [pc, #692]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4aac      	ldr	r2, [pc, #688]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004ab6:	f023 0304 	bic.w	r3, r3, #4
 8004aba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8081 	beq.w	8004bd0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fd fd77 	bl	80025c0 <HAL_GetTick>
 8004ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad8:	f7fd fd72 	bl	80025c0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e345      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
 8004af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004af8:	2202      	movs	r2, #2
 8004afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	fa93 f2a3 	rbit	r2, r3
 8004b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	fa93 f2a3 	rbit	r2, r3
 8004b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b32:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b36:	601a      	str	r2, [r3, #0]
  return result;
 8004b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f043 0302 	orr.w	r3, r3, #2
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d102      	bne.n	8004b5c <HAL_RCC_OscConfig+0xa4c>
 8004b56:	4b84      	ldr	r3, [pc, #528]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	e013      	b.n	8004b84 <HAL_RCC_OscConfig+0xa74>
 8004b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b64:	2202      	movs	r2, #2
 8004b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	fa93 f2a3 	rbit	r2, r3
 8004b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b7a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	4b79      	ldr	r3, [pc, #484]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b88:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	6011      	str	r1, [r2, #0]
 8004b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b94:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	fa92 f1a2 	rbit	r1, r2
 8004b9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ba2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004ba6:	6011      	str	r1, [r2, #0]
  return result;
 8004ba8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	fab2 f282 	clz	r2, r2
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	f002 021f 	and.w	r2, r2, #31
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d084      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x9c8>
 8004bce:	e07f      	b.n	8004cd0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd0:	f7fd fcf6 	bl	80025c0 <HAL_GetTick>
 8004bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd8:	e00b      	b.n	8004bf2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fd fcf1 	bl	80025c0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e2c4      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
 8004bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c02:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	fa93 f2a3 	rbit	r2, r3
 8004c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c10:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c1e:	2202      	movs	r2, #2
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c26:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	fa93 f2a3 	rbit	r2, r3
 8004c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c34:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c38:	601a      	str	r2, [r3, #0]
  return result;
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c44:	fab3 f383 	clz	r3, r3
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f043 0302 	orr.w	r3, r3, #2
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d102      	bne.n	8004c5e <HAL_RCC_OscConfig+0xb4e>
 8004c58:	4b43      	ldr	r3, [pc, #268]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	e013      	b.n	8004c86 <HAL_RCC_OscConfig+0xb76>
 8004c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c66:	2202      	movs	r2, #2
 8004c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	fa93 f2a3 	rbit	r2, r3
 8004c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c8a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c8e:	2102      	movs	r1, #2
 8004c90:	6011      	str	r1, [r2, #0]
 8004c92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c96:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	fa92 f1a2 	rbit	r1, r2
 8004ca0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ca4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004ca8:	6011      	str	r1, [r2, #0]
  return result;
 8004caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	fab2 f282 	clz	r2, r2
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	f002 021f 	and.w	r2, r2, #31
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d184      	bne.n	8004bda <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cd0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd8:	4b23      	ldr	r3, [pc, #140]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8242 	beq.w	800517a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d68 <HAL_RCC_OscConfig+0xc58>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	f000 8213 	beq.w	800512a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	f040 8162 	bne.w	8004fda <HAL_RCC_OscConfig+0xeca>
 8004d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004d1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fa93 f2a3 	rbit	r2, r3
 8004d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d36:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d3a:	601a      	str	r2, [r3, #0]
  return result;
 8004d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d40:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	461a      	mov	r2, r3
 8004d58:	2300      	movs	r3, #0
 8004d5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fc30 	bl	80025c0 <HAL_GetTick>
 8004d60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d64:	e00c      	b.n	8004d80 <HAL_RCC_OscConfig+0xc70>
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fd fc28 	bl	80025c0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e1fd      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
 8004d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d84:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d92:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	fa93 f2a3 	rbit	r2, r3
 8004d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004da4:	601a      	str	r2, [r3, #0]
  return result;
 8004da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004daa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004dae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db0:	fab3 f383 	clz	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d102      	bne.n	8004dca <HAL_RCC_OscConfig+0xcba>
 8004dc4:	4bb0      	ldr	r3, [pc, #704]	@ (8005088 <HAL_RCC_OscConfig+0xf78>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	e027      	b.n	8004e1a <HAL_RCC_OscConfig+0xd0a>
 8004dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004dd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ddc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	fa93 f2a3 	rbit	r2, r3
 8004de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e02:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	fa93 f2a3 	rbit	r2, r3
 8004e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e10:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	4b9c      	ldr	r3, [pc, #624]	@ (8005088 <HAL_RCC_OscConfig+0xf78>)
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e1e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004e22:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e26:	6011      	str	r1, [r2, #0]
 8004e28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e2c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	fa92 f1a2 	rbit	r1, r2
 8004e36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e3a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e3e:	6011      	str	r1, [r2, #0]
  return result;
 8004e40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e44:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	fab2 f282 	clz	r2, r2
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	f042 0220 	orr.w	r2, r2, #32
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	f002 021f 	and.w	r2, r2, #31
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d182      	bne.n	8004d6c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e66:	4b88      	ldr	r3, [pc, #544]	@ (8005088 <HAL_RCC_OscConfig+0xf78>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	430b      	orrs	r3, r1
 8004e88:	497f      	ldr	r1, [pc, #508]	@ (8005088 <HAL_RCC_OscConfig+0xf78>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	604b      	str	r3, [r1, #4]
 8004e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e92:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004e96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	fa93 f2a3 	rbit	r2, r3
 8004eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004eb2:	601a      	str	r2, [r3, #0]
  return result;
 8004eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004ebc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ec8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fb74 	bl	80025c0 <HAL_GetTick>
 8004ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004edc:	e009      	b.n	8004ef2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fd fb6f 	bl	80025c0 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e144      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
 8004ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004efa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f04:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	fa93 f2a3 	rbit	r2, r3
 8004f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f12:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f16:	601a      	str	r2, [r3, #0]
  return result;
 8004f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d102      	bne.n	8004f3c <HAL_RCC_OscConfig+0xe2c>
 8004f36:	4b54      	ldr	r3, [pc, #336]	@ (8005088 <HAL_RCC_OscConfig+0xf78>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	e027      	b.n	8004f8c <HAL_RCC_OscConfig+0xe7c>
 8004f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f40:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	fa93 f2a3 	rbit	r2, r3
 8004f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f66:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f74:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	fa93 f2a3 	rbit	r2, r3
 8004f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f82:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	4b3f      	ldr	r3, [pc, #252]	@ (8005088 <HAL_RCC_OscConfig+0xf78>)
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f90:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004f94:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f9e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	fa92 f1a2 	rbit	r1, r2
 8004fa8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004fb0:	6011      	str	r1, [r2, #0]
  return result;
 8004fb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fb6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	fab2 f282 	clz	r2, r2
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	f042 0220 	orr.w	r2, r2, #32
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	f002 021f 	and.w	r2, r2, #31
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d082      	beq.n	8004ede <HAL_RCC_OscConfig+0xdce>
 8004fd8:	e0cf      	b.n	800517a <HAL_RCC_OscConfig+0x106a>
 8004fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fde:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fe2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	fa93 f2a3 	rbit	r2, r3
 8004ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004ffe:	601a      	str	r2, [r3, #0]
  return result;
 8005000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005004:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005008:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	fab3 f383 	clz	r3, r3
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005014:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	461a      	mov	r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fd face 	bl	80025c0 <HAL_GetTick>
 8005024:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005028:	e009      	b.n	800503e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502a:	f7fd fac9 	bl	80025c0 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e09e      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
 800503e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005042:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005046:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800504a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005050:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	fa93 f2a3 	rbit	r2, r3
 800505a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005062:	601a      	str	r2, [r3, #0]
  return result;
 8005064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005068:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800506c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d104      	bne.n	800508c <HAL_RCC_OscConfig+0xf7c>
 8005082:	4b01      	ldr	r3, [pc, #4]	@ (8005088 <HAL_RCC_OscConfig+0xf78>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	e029      	b.n	80050dc <HAL_RCC_OscConfig+0xfcc>
 8005088:	40021000 	.word	0x40021000
 800508c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005090:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005094:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800509e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	fa93 f2a3 	rbit	r2, r3
 80050a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ac:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80050ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	fa93 f2a3 	rbit	r2, r3
 80050ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005188 <HAL_RCC_OscConfig+0x1078>)
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050e0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80050e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050ee:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	fa92 f1a2 	rbit	r1, r2
 80050f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050fc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005100:	6011      	str	r1, [r2, #0]
  return result;
 8005102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005106:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	fab2 f282 	clz	r2, r2
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	f042 0220 	orr.w	r2, r2, #32
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	f002 021f 	and.w	r2, r2, #31
 800511c:	2101      	movs	r1, #1
 800511e:	fa01 f202 	lsl.w	r2, r1, r2
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d180      	bne.n	800502a <HAL_RCC_OscConfig+0xf1a>
 8005128:	e027      	b.n	800517a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800512a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800512e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e01e      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800513e:	4b12      	ldr	r3, [pc, #72]	@ (8005188 <HAL_RCC_OscConfig+0x1078>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005146:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800514a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800514e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005152:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	429a      	cmp	r2, r3
 800515c:	d10b      	bne.n	8005176 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800515e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005162:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800516a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005172:	429a      	cmp	r2, r3
 8005174:	d001      	beq.n	800517a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000

0800518c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b09e      	sub	sp, #120	@ 0x78
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e162      	b.n	800546a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a4:	4b90      	ldr	r3, [pc, #576]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d910      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b8d      	ldr	r3, [pc, #564]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	498b      	ldr	r1, [pc, #556]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b89      	ldr	r3, [pc, #548]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e14a      	b.n	800546a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e0:	4b82      	ldr	r3, [pc, #520]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	497f      	ldr	r1, [pc, #508]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80dc 	beq.w	80053b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d13c      	bne.n	8005282 <HAL_RCC_ClockConfig+0xf6>
 8005208:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800520c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005210:	fa93 f3a3 	rbit	r3, r3
 8005214:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	b2db      	uxtb	r3, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d102      	bne.n	8005232 <HAL_RCC_ClockConfig+0xa6>
 800522c:	4b6f      	ldr	r3, [pc, #444]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	e00f      	b.n	8005252 <HAL_RCC_ClockConfig+0xc6>
 8005232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005236:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800523a:	fa93 f3a3 	rbit	r3, r3
 800523e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005240:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005244:	663b      	str	r3, [r7, #96]	@ 0x60
 8005246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005248:	fa93 f3a3 	rbit	r3, r3
 800524c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800524e:	4b67      	ldr	r3, [pc, #412]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005256:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800525a:	fa92 f2a2 	rbit	r2, r2
 800525e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005260:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005262:	fab2 f282 	clz	r2, r2
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	f042 0220 	orr.w	r2, r2, #32
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	f002 021f 	and.w	r2, r2, #31
 8005272:	2101      	movs	r1, #1
 8005274:	fa01 f202 	lsl.w	r2, r1, r2
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d17b      	bne.n	8005376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e0f3      	b.n	800546a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d13c      	bne.n	8005304 <HAL_RCC_ClockConfig+0x178>
 800528a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800528e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005292:	fa93 f3a3 	rbit	r3, r3
 8005296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d102      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x128>
 80052ae:	4b4f      	ldr	r3, [pc, #316]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	e00f      	b.n	80052d4 <HAL_RCC_ClockConfig+0x148>
 80052b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052bc:	fa93 f3a3 	rbit	r3, r3
 80052c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80052c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ca:	fa93 f3a3 	rbit	r3, r3
 80052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d0:	4b46      	ldr	r3, [pc, #280]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052d8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80052da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052dc:	fa92 f2a2 	rbit	r2, r2
 80052e0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80052e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052e4:	fab2 f282 	clz	r2, r2
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	f042 0220 	orr.w	r2, r2, #32
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	f002 021f 	and.w	r2, r2, #31
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f202 	lsl.w	r2, r1, r2
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d13a      	bne.n	8005376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0b2      	b.n	800546a <HAL_RCC_ClockConfig+0x2de>
 8005304:	2302      	movs	r3, #2
 8005306:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	fa93 f3a3 	rbit	r3, r3
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005312:	fab3 f383 	clz	r3, r3
 8005316:	b2db      	uxtb	r3, r3
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d102      	bne.n	800532c <HAL_RCC_ClockConfig+0x1a0>
 8005326:	4b31      	ldr	r3, [pc, #196]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	e00d      	b.n	8005348 <HAL_RCC_ClockConfig+0x1bc>
 800532c:	2302      	movs	r3, #2
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
 8005338:	2302      	movs	r3, #2
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	fa93 f3a3 	rbit	r3, r3
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	4b29      	ldr	r3, [pc, #164]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	2202      	movs	r2, #2
 800534a:	61ba      	str	r2, [r7, #24]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	fa92 f2a2 	rbit	r2, r2
 8005352:	617a      	str	r2, [r7, #20]
  return result;
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	fab2 f282 	clz	r2, r2
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	f042 0220 	orr.w	r2, r2, #32
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	f002 021f 	and.w	r2, r2, #31
 8005366:	2101      	movs	r1, #1
 8005368:	fa01 f202 	lsl.w	r2, r1, r2
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e079      	b.n	800546a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005376:	4b1d      	ldr	r3, [pc, #116]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f023 0203 	bic.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	491a      	ldr	r1, [pc, #104]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005388:	f7fd f91a 	bl	80025c0 <HAL_GetTick>
 800538c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005390:	f7fd f916 	bl	80025c0 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e061      	b.n	800546a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	4b11      	ldr	r3, [pc, #68]	@ (80053ec <HAL_RCC_ClockConfig+0x260>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 020c 	and.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1eb      	bne.n	8005390 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d214      	bcs.n	80053f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b08      	ldr	r3, [pc, #32]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 0207 	bic.w	r2, r3, #7
 80053ce:	4906      	ldr	r1, [pc, #24]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d6:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <HAL_RCC_ClockConfig+0x25c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e040      	b.n	800546a <HAL_RCC_ClockConfig+0x2de>
 80053e8:	40022000 	.word	0x40022000
 80053ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <HAL_RCC_ClockConfig+0x2e8>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	491a      	ldr	r1, [pc, #104]	@ (8005474 <HAL_RCC_ClockConfig+0x2e8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541a:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <HAL_RCC_ClockConfig+0x2e8>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4912      	ldr	r1, [pc, #72]	@ (8005474 <HAL_RCC_ClockConfig+0x2e8>)
 800542a:	4313      	orrs	r3, r2
 800542c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800542e:	f000 f829 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005432:	4601      	mov	r1, r0
 8005434:	4b0f      	ldr	r3, [pc, #60]	@ (8005474 <HAL_RCC_ClockConfig+0x2e8>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800543c:	22f0      	movs	r2, #240	@ 0xf0
 800543e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	fa92 f2a2 	rbit	r2, r2
 8005446:	60fa      	str	r2, [r7, #12]
  return result;
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	fab2 f282 	clz	r2, r2
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	40d3      	lsrs	r3, r2
 8005452:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <HAL_RCC_ClockConfig+0x2ec>)
 8005454:	5cd3      	ldrb	r3, [r2, r3]
 8005456:	fa21 f303 	lsr.w	r3, r1, r3
 800545a:	4a08      	ldr	r2, [pc, #32]	@ (800547c <HAL_RCC_ClockConfig+0x2f0>)
 800545c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800545e:	4b08      	ldr	r3, [pc, #32]	@ (8005480 <HAL_RCC_ClockConfig+0x2f4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fd f868 	bl	8002538 <HAL_InitTick>
  
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3778      	adds	r7, #120	@ 0x78
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000
 8005478:	0800bc14 	.word	0x0800bc14
 800547c:	20000014 	.word	0x20000014
 8005480:	20000018 	.word	0x20000018

08005484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800549e:	4b1e      	ldr	r3, [pc, #120]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x94>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d002      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x30>
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d003      	beq.n	80054ba <HAL_RCC_GetSysClockFreq+0x36>
 80054b2:	e026      	b.n	8005502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054b4:	4b19      	ldr	r3, [pc, #100]	@ (800551c <HAL_RCC_GetSysClockFreq+0x98>)
 80054b6:	613b      	str	r3, [r7, #16]
      break;
 80054b8:	e026      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	0c9b      	lsrs	r3, r3, #18
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	4a17      	ldr	r2, [pc, #92]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054c4:	5cd3      	ldrb	r3, [r2, r3]
 80054c6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80054c8:	4b13      	ldr	r3, [pc, #76]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x94>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	4a14      	ldr	r2, [pc, #80]	@ (8005524 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054d2:	5cd3      	ldrb	r3, [r2, r3]
 80054d4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054e0:	4a0e      	ldr	r2, [pc, #56]	@ (800551c <HAL_RCC_GetSysClockFreq+0x98>)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e004      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	613b      	str	r3, [r7, #16]
      break;
 8005500:	e002      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005502:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_RCC_GetSysClockFreq+0x98>)
 8005504:	613b      	str	r3, [r7, #16]
      break;
 8005506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005508:	693b      	ldr	r3, [r7, #16]
}
 800550a:	4618      	mov	r0, r3
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
 800551c:	007a1200 	.word	0x007a1200
 8005520:	0800bc2c 	.word	0x0800bc2c
 8005524:	0800bc3c 	.word	0x0800bc3c
 8005528:	003d0900 	.word	0x003d0900

0800552c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	@ (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000014 	.word	0x20000014

08005544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800554a:	f7ff ffef 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554e:	4601      	mov	r1, r0
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005558:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800555c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	fa92 f2a2 	rbit	r2, r2
 8005564:	603a      	str	r2, [r7, #0]
  return result;
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	fab2 f282 	clz	r2, r2
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	40d3      	lsrs	r3, r2
 8005570:	4a04      	ldr	r2, [pc, #16]	@ (8005584 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	0800bc24 	.word	0x0800bc24

08005588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800558e:	f7ff ffcd 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005592:	4601      	mov	r1, r0
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800559c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80055a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	fa92 f2a2 	rbit	r2, r2
 80055a8:	603a      	str	r2, [r7, #0]
  return result;
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	fab2 f282 	clz	r2, r2
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	40d3      	lsrs	r3, r2
 80055b4:	4a04      	ldr	r2, [pc, #16]	@ (80055c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055b6:	5cd3      	ldrb	r3, [r2, r3]
 80055b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	0800bc24 	.word	0x0800bc24

080055cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b092      	sub	sp, #72	@ 0x48
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80d4 	beq.w	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f0:	4b4e      	ldr	r3, [pc, #312]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10e      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fc:	4b4b      	ldr	r3, [pc, #300]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4a4a      	ldr	r2, [pc, #296]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005606:	61d3      	str	r3, [r2, #28]
 8005608:	4b48      	ldr	r3, [pc, #288]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561a:	4b45      	ldr	r3, [pc, #276]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d118      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005626:	4b42      	ldr	r3, [pc, #264]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a41      	ldr	r2, [pc, #260]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800562c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005630:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005632:	f7fc ffc5 	bl	80025c0 <HAL_GetTick>
 8005636:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	e008      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563a:	f7fc ffc1 	bl	80025c0 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b64      	cmp	r3, #100	@ 0x64
 8005646:	d901      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e14b      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	4b38      	ldr	r3, [pc, #224]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f0      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005658:	4b34      	ldr	r3, [pc, #208]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005660:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8084 	beq.w	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005672:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005674:	429a      	cmp	r2, r3
 8005676:	d07c      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005678:	4b2c      	ldr	r3, [pc, #176]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	fa93 f3a3 	rbit	r3, r3
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005692:	fab3 f383 	clz	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	4b26      	ldr	r3, [pc, #152]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	461a      	mov	r2, r3
 80056a2:	2301      	movs	r3, #1
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80056aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80056b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	4b1d      	ldr	r3, [pc, #116]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056ca:	4a18      	ldr	r2, [pc, #96]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04b      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fc ff71 	bl	80025c0 <HAL_GetTick>
 80056de:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fc ff6d 	bl	80025c0 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0f5      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80056f8:	2302      	movs	r3, #2
 80056fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
 8005704:	2302      	movs	r3, #2
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	fa93 f3a3 	rbit	r3, r3
 800570e:	61fb      	str	r3, [r7, #28]
  return result;
 8005710:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f043 0302 	orr.w	r3, r3, #2
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d108      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005726:	4b01      	ldr	r3, [pc, #4]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	e00d      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800572c:	40021000 	.word	0x40021000
 8005730:	40007000 	.word	0x40007000
 8005734:	10908100 	.word	0x10908100
 8005738:	2302      	movs	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	fa93 f3a3 	rbit	r3, r3
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	4b69      	ldr	r3, [pc, #420]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	2202      	movs	r2, #2
 800574a:	613a      	str	r2, [r7, #16]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	fa92 f2a2 	rbit	r2, r2
 8005752:	60fa      	str	r2, [r7, #12]
  return result;
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	fab2 f282 	clz	r2, r2
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	f002 021f 	and.w	r2, r2, #31
 8005766:	2101      	movs	r1, #1
 8005768:	fa01 f202 	lsl.w	r2, r1, r2
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0b7      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005772:	4b5e      	ldr	r3, [pc, #376]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	495b      	ldr	r1, [pc, #364]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005780:	4313      	orrs	r3, r2
 8005782:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005784:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b57      	ldr	r3, [pc, #348]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4a56      	ldr	r2, [pc, #344]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057a4:	4b51      	ldr	r3, [pc, #324]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	f023 0203 	bic.w	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	494e      	ldr	r1, [pc, #312]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c2:	4b4a      	ldr	r3, [pc, #296]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f023 0210 	bic.w	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4947      	ldr	r1, [pc, #284]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80057e0:	4b42      	ldr	r3, [pc, #264]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	493f      	ldr	r1, [pc, #252]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057fe:	4b3b      	ldr	r3, [pc, #236]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	f023 0220 	bic.w	r2, r3, #32
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	4938      	ldr	r1, [pc, #224]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800580c:	4313      	orrs	r3, r2
 800580e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800581c:	4b33      	ldr	r3, [pc, #204]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	4930      	ldr	r1, [pc, #192]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800582a:	4313      	orrs	r3, r2
 800582c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800583a:	4b2c      	ldr	r3, [pc, #176]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	4929      	ldr	r1, [pc, #164]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005858:	4b24      	ldr	r3, [pc, #144]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800585a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	4921      	ldr	r1, [pc, #132]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005866:	4313      	orrs	r3, r2
 8005868:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005876:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	491a      	ldr	r1, [pc, #104]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005884:	4313      	orrs	r3, r2
 8005886:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005894:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	4912      	ldr	r1, [pc, #72]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80058b2:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058be:	490b      	ldr	r1, [pc, #44]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	4903      	ldr	r1, [pc, #12]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3748      	adds	r7, #72	@ 0x48
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40021000 	.word	0x40021000

080058f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e049      	b.n	8005996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc f854 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fcda 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d001      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e03b      	b.n	8005a30 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a19      	ldr	r2, [pc, #100]	@ (8005a3c <HAL_TIM_Base_Start_IT+0x9c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x4e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e2:	d004      	beq.n	80059ee <HAL_TIM_Base_Start_IT+0x4e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a15      	ldr	r2, [pc, #84]	@ (8005a40 <HAL_TIM_Base_Start_IT+0xa0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d115      	bne.n	8005a1a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	4b13      	ldr	r3, [pc, #76]	@ (8005a44 <HAL_TIM_Base_Start_IT+0xa4>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d015      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x8c>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a06:	d011      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a18:	e008      	b.n	8005a2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e000      	b.n	8005a2e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40014000 	.word	0x40014000
 8005a44:	00010007 	.word	0x00010007

08005a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e049      	b.n	8005aee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fb ff88 	bl	8001984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f000 fc2e 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <HAL_TIM_PWM_Start+0x24>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	e03c      	b.n	8005b96 <HAL_TIM_PWM_Start+0x9e>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d109      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x3e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	bf14      	ite	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	2300      	moveq	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	e02f      	b.n	8005b96 <HAL_TIM_PWM_Start+0x9e>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d109      	bne.n	8005b50 <HAL_TIM_PWM_Start+0x58>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e022      	b.n	8005b96 <HAL_TIM_PWM_Start+0x9e>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b0c      	cmp	r3, #12
 8005b54:	d109      	bne.n	8005b6a <HAL_TIM_PWM_Start+0x72>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	bf14      	ite	ne
 8005b62:	2301      	movne	r3, #1
 8005b64:	2300      	moveq	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	e015      	b.n	8005b96 <HAL_TIM_PWM_Start+0x9e>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d109      	bne.n	8005b84 <HAL_TIM_PWM_Start+0x8c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e008      	b.n	8005b96 <HAL_TIM_PWM_Start+0x9e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e083      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_PWM_Start+0xb6>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bac:	e023      	b.n	8005bf6 <HAL_TIM_PWM_Start+0xfe>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_PWM_Start+0xc6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bbc:	e01b      	b.n	8005bf6 <HAL_TIM_PWM_Start+0xfe>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d104      	bne.n	8005bce <HAL_TIM_PWM_Start+0xd6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bcc:	e013      	b.n	8005bf6 <HAL_TIM_PWM_Start+0xfe>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_PWM_Start+0xe6>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bdc:	e00b      	b.n	8005bf6 <HAL_TIM_PWM_Start+0xfe>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_Start+0xf6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bec:	e003      	b.n	8005bf6 <HAL_TIM_PWM_Start+0xfe>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 ff2c 	bl	8006a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a29      	ldr	r2, [pc, #164]	@ (8005cb0 <HAL_TIM_PWM_Start+0x1b8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIM_PWM_Start+0x134>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a28      	ldr	r2, [pc, #160]	@ (8005cb4 <HAL_TIM_PWM_Start+0x1bc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_TIM_PWM_Start+0x134>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a26      	ldr	r2, [pc, #152]	@ (8005cb8 <HAL_TIM_PWM_Start+0x1c0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_PWM_Start+0x134>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a25      	ldr	r2, [pc, #148]	@ (8005cbc <HAL_TIM_PWM_Start+0x1c4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x138>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_TIM_PWM_Start+0x13a>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <HAL_TIM_PWM_Start+0x1b8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x16c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d004      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x16c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	@ (8005cb4 <HAL_TIM_PWM_Start+0x1bc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d115      	bne.n	8005c90 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	4b15      	ldr	r3, [pc, #84]	@ (8005cc0 <HAL_TIM_PWM_Start+0x1c8>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b06      	cmp	r3, #6
 8005c74:	d015      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x1aa>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c7c:	d011      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	e008      	b.n	8005ca2 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e000      	b.n	8005ca4 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800
 8005cc0:	00010007 	.word	0x00010007

08005cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d020      	beq.n	8005d28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0202 	mvn.w	r2, #2
 8005cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 facb 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fabd 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 face 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d020      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01b      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0204 	mvn.w	r2, #4
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 faa5 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa97 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 faa8 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d020      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0208 	mvn.w	r2, #8
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2204      	movs	r2, #4
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa7f 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa71 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fa82 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d020      	beq.n	8005e0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01b      	beq.n	8005e0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0210 	mvn.w	r2, #16
 8005ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2208      	movs	r2, #8
 8005de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa59 	bl	80062aa <HAL_TIM_IC_CaptureCallback>
 8005df8:	e005      	b.n	8005e06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa4b 	bl	8006296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fa5c 	bl	80062be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0201 	mvn.w	r2, #1
 8005e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa29 	bl	8006282 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 ff12 	bl	8006c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 ff0a 	bl	8006c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa1b 	bl	80062d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0220 	mvn.w	r2, #32
 8005eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fed2 	bl	8006c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e0ff      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b14      	cmp	r3, #20
 8005ef2:	f200 80f0 	bhi.w	80060d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8005efc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	080060d7 	.word	0x080060d7
 8005f04:	080060d7 	.word	0x080060d7
 8005f08:	080060d7 	.word	0x080060d7
 8005f0c:	08005f91 	.word	0x08005f91
 8005f10:	080060d7 	.word	0x080060d7
 8005f14:	080060d7 	.word	0x080060d7
 8005f18:	080060d7 	.word	0x080060d7
 8005f1c:	08005fd3 	.word	0x08005fd3
 8005f20:	080060d7 	.word	0x080060d7
 8005f24:	080060d7 	.word	0x080060d7
 8005f28:	080060d7 	.word	0x080060d7
 8005f2c:	08006013 	.word	0x08006013
 8005f30:	080060d7 	.word	0x080060d7
 8005f34:	080060d7 	.word	0x080060d7
 8005f38:	080060d7 	.word	0x080060d7
 8005f3c:	08006055 	.word	0x08006055
 8005f40:	080060d7 	.word	0x080060d7
 8005f44:	080060d7 	.word	0x080060d7
 8005f48:	080060d7 	.word	0x080060d7
 8005f4c:	08006095 	.word	0x08006095
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68b9      	ldr	r1, [r7, #8]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fa40 	bl	80063dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0208 	orr.w	r2, r2, #8
 8005f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0204 	bic.w	r2, r2, #4
 8005f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6999      	ldr	r1, [r3, #24]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	619a      	str	r2, [r3, #24]
      break;
 8005f8e:	e0a5      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 faa6 	bl	80064e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6999      	ldr	r1, [r3, #24]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	021a      	lsls	r2, r3, #8
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	619a      	str	r2, [r3, #24]
      break;
 8005fd0:	e084      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fb05 	bl	80065e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69da      	ldr	r2, [r3, #28]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0208 	orr.w	r2, r2, #8
 8005fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0204 	bic.w	r2, r2, #4
 8005ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69d9      	ldr	r1, [r3, #28]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	61da      	str	r2, [r3, #28]
      break;
 8006010:	e064      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fb63 	bl	80066e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800602c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69d9      	ldr	r1, [r3, #28]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	021a      	lsls	r2, r3, #8
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	61da      	str	r2, [r3, #28]
      break;
 8006052:	e043      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fba6 	bl	80067ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0208 	orr.w	r2, r2, #8
 800606e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0204 	bic.w	r2, r2, #4
 800607e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006092:	e023      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fbe4 	bl	8006868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	021a      	lsls	r2, r3, #8
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060d4:	e002      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	75fb      	strb	r3, [r7, #23]
      break;
 80060da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop

080060f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIM_ConfigClockSource+0x1c>
 8006108:	2302      	movs	r3, #2
 800610a:	e0b6      	b.n	800627a <HAL_TIM_ConfigClockSource+0x18a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800612a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006148:	d03e      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0xd8>
 800614a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800614e:	f200 8087 	bhi.w	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	f000 8086 	beq.w	8006266 <HAL_TIM_ConfigClockSource+0x176>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	d87f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006160:	2b70      	cmp	r3, #112	@ 0x70
 8006162:	d01a      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xaa>
 8006164:	2b70      	cmp	r3, #112	@ 0x70
 8006166:	d87b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006168:	2b60      	cmp	r3, #96	@ 0x60
 800616a:	d050      	beq.n	800620e <HAL_TIM_ConfigClockSource+0x11e>
 800616c:	2b60      	cmp	r3, #96	@ 0x60
 800616e:	d877      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006170:	2b50      	cmp	r3, #80	@ 0x50
 8006172:	d03c      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0xfe>
 8006174:	2b50      	cmp	r3, #80	@ 0x50
 8006176:	d873      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d058      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x13e>
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d86f      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006180:	2b30      	cmp	r3, #48	@ 0x30
 8006182:	d064      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15e>
 8006184:	2b30      	cmp	r3, #48	@ 0x30
 8006186:	d86b      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006188:	2b20      	cmp	r3, #32
 800618a:	d060      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15e>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d867      	bhi.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d05c      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15e>
 8006194:	2b10      	cmp	r3, #16
 8006196:	d05a      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x15e>
 8006198:	e062      	b.n	8006260 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	f000 fc37 	bl	8006a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	609a      	str	r2, [r3, #8]
      break;
 80061c6:	e04f      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	f000 fc20 	bl	8006a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061ea:	609a      	str	r2, [r3, #8]
      break;
 80061ec:	e03c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	461a      	mov	r2, r3
 80061fc:	f000 fb94 	bl	8006928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2150      	movs	r1, #80	@ 0x50
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fbed 	bl	80069e6 <TIM_ITRx_SetConfig>
      break;
 800620c:	e02c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800621a:	461a      	mov	r2, r3
 800621c:	f000 fbb3 	bl	8006986 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2160      	movs	r1, #96	@ 0x60
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fbdd 	bl	80069e6 <TIM_ITRx_SetConfig>
      break;
 800622c:	e01c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 fb74 	bl	8006928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2140      	movs	r1, #64	@ 0x40
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fbcd 	bl	80069e6 <TIM_ITRx_SetConfig>
      break;
 800624c:	e00c      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f000 fbc4 	bl	80069e6 <TIM_ITRx_SetConfig>
      break;
 800625e:	e003      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
      break;
 8006264:	e000      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a34      	ldr	r2, [pc, #208]	@ (80063cc <TIM_Base_SetConfig+0xe4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_Base_SetConfig+0x20>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006306:	d108      	bne.n	800631a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2b      	ldr	r2, [pc, #172]	@ (80063cc <TIM_Base_SetConfig+0xe4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00f      	beq.n	8006342 <TIM_Base_SetConfig+0x5a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006328:	d00b      	beq.n	8006342 <TIM_Base_SetConfig+0x5a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a28      	ldr	r2, [pc, #160]	@ (80063d0 <TIM_Base_SetConfig+0xe8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <TIM_Base_SetConfig+0x5a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a27      	ldr	r2, [pc, #156]	@ (80063d4 <TIM_Base_SetConfig+0xec>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_Base_SetConfig+0x5a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a26      	ldr	r2, [pc, #152]	@ (80063d8 <TIM_Base_SetConfig+0xf0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d108      	bne.n	8006354 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <TIM_Base_SetConfig+0xe4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00b      	beq.n	8006398 <TIM_Base_SetConfig+0xb0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <TIM_Base_SetConfig+0xe8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_Base_SetConfig+0xb0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a12      	ldr	r2, [pc, #72]	@ (80063d4 <TIM_Base_SetConfig+0xec>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_Base_SetConfig+0xb0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a11      	ldr	r2, [pc, #68]	@ (80063d8 <TIM_Base_SetConfig+0xf0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d103      	bne.n	80063a0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d105      	bne.n	80063be <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f023 0201 	bic.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	611a      	str	r2, [r3, #16]
  }
}
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40012c00 	.word	0x40012c00
 80063d0:	40014000 	.word	0x40014000
 80063d4:	40014400 	.word	0x40014400
 80063d8:	40014800 	.word	0x40014800

080063dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f023 0201 	bic.w	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0302 	bic.w	r3, r3, #2
 8006428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a28      	ldr	r2, [pc, #160]	@ (80064d8 <TIM_OC1_SetConfig+0xfc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00b      	beq.n	8006454 <TIM_OC1_SetConfig+0x78>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a27      	ldr	r2, [pc, #156]	@ (80064dc <TIM_OC1_SetConfig+0x100>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d007      	beq.n	8006454 <TIM_OC1_SetConfig+0x78>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a26      	ldr	r2, [pc, #152]	@ (80064e0 <TIM_OC1_SetConfig+0x104>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC1_SetConfig+0x78>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a25      	ldr	r2, [pc, #148]	@ (80064e4 <TIM_OC1_SetConfig+0x108>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d10c      	bne.n	800646e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 0308 	bic.w	r3, r3, #8
 800645a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0304 	bic.w	r3, r3, #4
 800646c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a19      	ldr	r2, [pc, #100]	@ (80064d8 <TIM_OC1_SetConfig+0xfc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_OC1_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <TIM_OC1_SetConfig+0x100>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_OC1_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a17      	ldr	r2, [pc, #92]	@ (80064e0 <TIM_OC1_SetConfig+0x104>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_OC1_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a16      	ldr	r2, [pc, #88]	@ (80064e4 <TIM_OC1_SetConfig+0x108>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d111      	bne.n	80064b2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800649c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	621a      	str	r2, [r3, #32]
}
 80064cc:	bf00      	nop
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	40012c00 	.word	0x40012c00
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800

080064e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	f023 0210 	bic.w	r2, r3, #16
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0320 	bic.w	r3, r3, #32
 8006536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a24      	ldr	r2, [pc, #144]	@ (80065d8 <TIM_OC2_SetConfig+0xf0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d10d      	bne.n	8006568 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006566:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <TIM_OC2_SetConfig+0xf0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00b      	beq.n	8006588 <TIM_OC2_SetConfig+0xa0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1a      	ldr	r2, [pc, #104]	@ (80065dc <TIM_OC2_SetConfig+0xf4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d007      	beq.n	8006588 <TIM_OC2_SetConfig+0xa0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a19      	ldr	r2, [pc, #100]	@ (80065e0 <TIM_OC2_SetConfig+0xf8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_OC2_SetConfig+0xa0>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a18      	ldr	r2, [pc, #96]	@ (80065e4 <TIM_OC2_SetConfig+0xfc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d113      	bne.n	80065b0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800658e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006596:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800

080065e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a23      	ldr	r2, [pc, #140]	@ (80066d4 <TIM_OC3_SetConfig+0xec>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d10d      	bne.n	8006666 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006664:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1a      	ldr	r2, [pc, #104]	@ (80066d4 <TIM_OC3_SetConfig+0xec>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00b      	beq.n	8006686 <TIM_OC3_SetConfig+0x9e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <TIM_OC3_SetConfig+0xf0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d007      	beq.n	8006686 <TIM_OC3_SetConfig+0x9e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <TIM_OC3_SetConfig+0xf4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC3_SetConfig+0x9e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <TIM_OC3_SetConfig+0xf8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d113      	bne.n	80066ae <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800668c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800

080066e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	031b      	lsls	r3, r3, #12
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a16      	ldr	r2, [pc, #88]	@ (800679c <TIM_OC4_SetConfig+0xb8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00b      	beq.n	8006760 <TIM_OC4_SetConfig+0x7c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a15      	ldr	r2, [pc, #84]	@ (80067a0 <TIM_OC4_SetConfig+0xbc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d007      	beq.n	8006760 <TIM_OC4_SetConfig+0x7c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a14      	ldr	r2, [pc, #80]	@ (80067a4 <TIM_OC4_SetConfig+0xc0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_OC4_SetConfig+0x7c>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a13      	ldr	r2, [pc, #76]	@ (80067a8 <TIM_OC4_SetConfig+0xc4>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d109      	bne.n	8006774 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	019b      	lsls	r3, r3, #6
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40014400 	.word	0x40014400
 80067a8:	40014800 	.word	0x40014800

080067ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a15      	ldr	r2, [pc, #84]	@ (8006858 <TIM_OC5_SetConfig+0xac>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00b      	beq.n	800681e <TIM_OC5_SetConfig+0x72>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a14      	ldr	r2, [pc, #80]	@ (800685c <TIM_OC5_SetConfig+0xb0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d007      	beq.n	800681e <TIM_OC5_SetConfig+0x72>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a13      	ldr	r2, [pc, #76]	@ (8006860 <TIM_OC5_SetConfig+0xb4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_OC5_SetConfig+0x72>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a12      	ldr	r2, [pc, #72]	@ (8006864 <TIM_OC5_SetConfig+0xb8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d109      	bne.n	8006832 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006824:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	621a      	str	r2, [r3, #32]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	40012c00 	.word	0x40012c00
 800685c:	40014000 	.word	0x40014000
 8006860:	40014400 	.word	0x40014400
 8006864:	40014800 	.word	0x40014800

08006868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <TIM_OC6_SetConfig+0xb0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_OC6_SetConfig+0x74>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a15      	ldr	r2, [pc, #84]	@ (800691c <TIM_OC6_SetConfig+0xb4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_OC6_SetConfig+0x74>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a14      	ldr	r2, [pc, #80]	@ (8006920 <TIM_OC6_SetConfig+0xb8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC6_SetConfig+0x74>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a13      	ldr	r2, [pc, #76]	@ (8006924 <TIM_OC6_SetConfig+0xbc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0201 	bic.w	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f023 030a 	bic.w	r3, r3, #10
 8006964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006986:	b480      	push	{r7}
 8006988:	b087      	sub	sp, #28
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f023 0210 	bic.w	r2, r3, #16
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	031b      	lsls	r3, r3, #12
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b085      	sub	sp, #20
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f043 0307 	orr.w	r3, r3, #7
 8006a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	bf00      	nop
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	021a      	lsls	r2, r3, #8
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	609a      	str	r2, [r3, #8]
}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2201      	movs	r2, #1
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	43db      	mvns	r3, r3
 8006a7e:	401a      	ands	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	fa01 f303 	lsl.w	r3, r1, r3
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e04f      	b.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a21      	ldr	r2, [pc, #132]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d108      	bne.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006af0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a14      	ldr	r2, [pc, #80]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b28:	d004      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a10      	ldr	r2, [pc, #64]	@ (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40014000 	.word	0x40014000

08006b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e060      	b.n	8006c52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a14      	ldr	r2, [pc, #80]	@ (8006c60 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d115      	bne.n	8006c40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	051b      	lsls	r3, r3, #20
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40012c00 	.word	0x40012c00

08006c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e040      	b.n	8006d34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fa fef6 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2224      	movs	r2, #36	@ 0x24
 8006ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9e8 	bl	80070bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8af 	bl	8006e50 <UART_SetConfig>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e01b      	b.n	8006d34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fa67 	bl	8007200 <UART_CheckIdleState>
 8006d32:	4603      	mov	r3, r0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	@ 0x28
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	d177      	bne.n	8006e44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_UART_Transmit+0x24>
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e070      	b.n	8006e46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2221      	movs	r2, #33	@ 0x21
 8006d70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d72:	f7fb fc25 	bl	80025c0 <HAL_GetTick>
 8006d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	88fa      	ldrh	r2, [r7, #6]
 8006d84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d90:	d108      	bne.n	8006da4 <HAL_UART_Transmit+0x68>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d104      	bne.n	8006da4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	e003      	b.n	8006dac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dac:	e02f      	b.n	8006e0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2200      	movs	r2, #0
 8006db6:	2180      	movs	r1, #128	@ 0x80
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fac9 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e03b      	b.n	8006e46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	881a      	ldrh	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de0:	b292      	uxth	r2, r2
 8006de2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	3302      	adds	r3, #2
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e007      	b.n	8006dfc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1c9      	bne.n	8006dae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2200      	movs	r2, #0
 8006e22:	2140      	movs	r1, #64	@ 0x40
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fa93 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e005      	b.n	8006e46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e000      	b.n	8006e46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	4b8a      	ldr	r3, [pc, #552]	@ (80070a4 <UART_SetConfig+0x254>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6812      	ldr	r2, [r2, #0]
 8006e82:	6979      	ldr	r1, [r7, #20]
 8006e84:	430b      	orrs	r3, r1
 8006e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a78      	ldr	r2, [pc, #480]	@ (80070a8 <UART_SetConfig+0x258>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d120      	bne.n	8006f0e <UART_SetConfig+0xbe>
 8006ecc:	4b77      	ldr	r3, [pc, #476]	@ (80070ac <UART_SetConfig+0x25c>)
 8006ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d817      	bhi.n	8006f08 <UART_SetConfig+0xb8>
 8006ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <UART_SetConfig+0x90>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006ef1 	.word	0x08006ef1
 8006ee4:	08006efd 	.word	0x08006efd
 8006ee8:	08006f03 	.word	0x08006f03
 8006eec:	08006ef7 	.word	0x08006ef7
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e01d      	b.n	8006f32 <UART_SetConfig+0xe2>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e01a      	b.n	8006f32 <UART_SetConfig+0xe2>
 8006efc:	2304      	movs	r3, #4
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e017      	b.n	8006f32 <UART_SetConfig+0xe2>
 8006f02:	2308      	movs	r3, #8
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e014      	b.n	8006f32 <UART_SetConfig+0xe2>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e011      	b.n	8006f32 <UART_SetConfig+0xe2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a67      	ldr	r2, [pc, #412]	@ (80070b0 <UART_SetConfig+0x260>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d102      	bne.n	8006f1e <UART_SetConfig+0xce>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e009      	b.n	8006f32 <UART_SetConfig+0xe2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a64      	ldr	r2, [pc, #400]	@ (80070b4 <UART_SetConfig+0x264>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d102      	bne.n	8006f2e <UART_SetConfig+0xde>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e001      	b.n	8006f32 <UART_SetConfig+0xe2>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f3a:	d15a      	bne.n	8006ff2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006f3c:	7ffb      	ldrb	r3, [r7, #31]
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d827      	bhi.n	8006f92 <UART_SetConfig+0x142>
 8006f42:	a201      	add	r2, pc, #4	@ (adr r2, 8006f48 <UART_SetConfig+0xf8>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f75 	.word	0x08006f75
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	08006f93 	.word	0x08006f93
 8006f58:	08006f83 	.word	0x08006f83
 8006f5c:	08006f93 	.word	0x08006f93
 8006f60:	08006f93 	.word	0x08006f93
 8006f64:	08006f93 	.word	0x08006f93
 8006f68:	08006f8b 	.word	0x08006f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f6c:	f7fe faea 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006f70:	61b8      	str	r0, [r7, #24]
        break;
 8006f72:	e013      	b.n	8006f9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f74:	f7fe fb08 	bl	8005588 <HAL_RCC_GetPCLK2Freq>
 8006f78:	61b8      	str	r0, [r7, #24]
        break;
 8006f7a:	e00f      	b.n	8006f9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f7c:	4b4e      	ldr	r3, [pc, #312]	@ (80070b8 <UART_SetConfig+0x268>)
 8006f7e:	61bb      	str	r3, [r7, #24]
        break;
 8006f80:	e00c      	b.n	8006f9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f82:	f7fe fa7f 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8006f86:	61b8      	str	r0, [r7, #24]
        break;
 8006f88:	e008      	b.n	8006f9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f8e:	61bb      	str	r3, [r7, #24]
        break;
 8006f90:	e004      	b.n	8006f9c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	77bb      	strb	r3, [r7, #30]
        break;
 8006f9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d074      	beq.n	800708c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	005a      	lsls	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	441a      	add	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b0f      	cmp	r3, #15
 8006fbc:	d916      	bls.n	8006fec <UART_SetConfig+0x19c>
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc4:	d212      	bcs.n	8006fec <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f023 030f 	bic.w	r3, r3, #15
 8006fce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	89fb      	ldrh	r3, [r7, #14]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	89fa      	ldrh	r2, [r7, #14]
 8006fe8:	60da      	str	r2, [r3, #12]
 8006fea:	e04f      	b.n	800708c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	77bb      	strb	r3, [r7, #30]
 8006ff0:	e04c      	b.n	800708c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ff2:	7ffb      	ldrb	r3, [r7, #31]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d828      	bhi.n	800704a <UART_SetConfig+0x1fa>
 8006ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8007000 <UART_SetConfig+0x1b0>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007025 	.word	0x08007025
 8007004:	0800702d 	.word	0x0800702d
 8007008:	08007035 	.word	0x08007035
 800700c:	0800704b 	.word	0x0800704b
 8007010:	0800703b 	.word	0x0800703b
 8007014:	0800704b 	.word	0x0800704b
 8007018:	0800704b 	.word	0x0800704b
 800701c:	0800704b 	.word	0x0800704b
 8007020:	08007043 	.word	0x08007043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007024:	f7fe fa8e 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8007028:	61b8      	str	r0, [r7, #24]
        break;
 800702a:	e013      	b.n	8007054 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fe faac 	bl	8005588 <HAL_RCC_GetPCLK2Freq>
 8007030:	61b8      	str	r0, [r7, #24]
        break;
 8007032:	e00f      	b.n	8007054 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007034:	4b20      	ldr	r3, [pc, #128]	@ (80070b8 <UART_SetConfig+0x268>)
 8007036:	61bb      	str	r3, [r7, #24]
        break;
 8007038:	e00c      	b.n	8007054 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703a:	f7fe fa23 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 800703e:	61b8      	str	r0, [r7, #24]
        break;
 8007040:	e008      	b.n	8007054 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007046:	61bb      	str	r3, [r7, #24]
        break;
 8007048:	e004      	b.n	8007054 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	77bb      	strb	r3, [r7, #30]
        break;
 8007052:	bf00      	nop
    }

    if (pclk != 0U)
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d018      	beq.n	800708c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	085a      	lsrs	r2, r3, #1
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	441a      	add	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	fbb2 f3f3 	udiv	r3, r2, r3
 800706c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b0f      	cmp	r3, #15
 8007072:	d909      	bls.n	8007088 <UART_SetConfig+0x238>
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707a:	d205      	bcs.n	8007088 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	60da      	str	r2, [r3, #12]
 8007086:	e001      	b.n	800708c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007098:	7fbb      	ldrb	r3, [r7, #30]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	efff69f3 	.word	0xefff69f3
 80070a8:	40013800 	.word	0x40013800
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40004400 	.word	0x40004400
 80070b4:	40004800 	.word	0x40004800
 80070b8:	007a1200 	.word	0x007a1200

080070bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01a      	beq.n	80071d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071ba:	d10a      	bne.n	80071d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]
  }
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b098      	sub	sp, #96	@ 0x60
 8007204:	af02      	add	r7, sp, #8
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007210:	f7fb f9d6 	bl	80025c0 <HAL_GetTick>
 8007214:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b08      	cmp	r3, #8
 8007222:	d12e      	bne.n	8007282 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007224:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800722c:	2200      	movs	r2, #0
 800722e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f88c 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d021      	beq.n	8007282 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800724c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007252:	653b      	str	r3, [r7, #80]	@ 0x50
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800725c:	647b      	str	r3, [r7, #68]	@ 0x44
 800725e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800726a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e6      	bne.n	800723e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e062      	b.n	8007348 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b04      	cmp	r3, #4
 800728e:	d149      	bne.n	8007324 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007298:	2200      	movs	r2, #0
 800729a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f856 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d03c      	beq.n	8007324 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	623b      	str	r3, [r7, #32]
   return(result);
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e6      	bne.n	80072aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3308      	adds	r3, #8
 80072e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072fc:	61fa      	str	r2, [r7, #28]
 80072fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	617b      	str	r3, [r7, #20]
   return(result);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e5      	bne.n	80072dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e011      	b.n	8007348 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3758      	adds	r7, #88	@ 0x58
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007360:	e04f      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d04b      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736a:	f7fb f929 	bl	80025c0 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <UART_WaitOnFlagUntilTimeout+0x30>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e04e      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d037      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b80      	cmp	r3, #128	@ 0x80
 8007396:	d034      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b40      	cmp	r3, #64	@ 0x40
 800739c:	d031      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d110      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f838 	bl	800742a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2208      	movs	r2, #8
 80073be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e029      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073dc:	d111      	bne.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f81e 	bl	800742a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	429a      	cmp	r2, r3
 8007410:	bf0c      	ite	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	2300      	movne	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	429a      	cmp	r2, r3
 800741e:	d0a0      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800742a:	b480      	push	{r7}
 800742c:	b095      	sub	sp, #84	@ 0x54
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007450:	643b      	str	r3, [r7, #64]	@ 0x40
 8007452:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e6      	bne.n	8007432 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	61fb      	str	r3, [r7, #28]
   return(result);
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3308      	adds	r3, #8
 8007482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800748a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e5      	bne.n	8007464 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800749c:	2b01      	cmp	r3, #1
 800749e:	d118      	bne.n	80074d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0310 	bic.w	r3, r3, #16
 80074b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6979      	ldr	r1, [r7, #20]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	613b      	str	r3, [r7, #16]
   return(result);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074e6:	bf00      	nop
 80074e8:	3754      	adds	r7, #84	@ 0x54
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <calloc>:
 80074f4:	4b02      	ldr	r3, [pc, #8]	@ (8007500 <calloc+0xc>)
 80074f6:	460a      	mov	r2, r1
 80074f8:	4601      	mov	r1, r0
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	f000 b802 	b.w	8007504 <_calloc_r>
 8007500:	2000002c 	.word	0x2000002c

08007504 <_calloc_r>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	fba1 5402 	umull	r5, r4, r1, r2
 800750a:	b93c      	cbnz	r4, 800751c <_calloc_r+0x18>
 800750c:	4629      	mov	r1, r5
 800750e:	f000 f837 	bl	8007580 <_malloc_r>
 8007512:	4606      	mov	r6, r0
 8007514:	b928      	cbnz	r0, 8007522 <_calloc_r+0x1e>
 8007516:	2600      	movs	r6, #0
 8007518:	4630      	mov	r0, r6
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	220c      	movs	r2, #12
 800751e:	6002      	str	r2, [r0, #0]
 8007520:	e7f9      	b.n	8007516 <_calloc_r+0x12>
 8007522:	462a      	mov	r2, r5
 8007524:	4621      	mov	r1, r4
 8007526:	f001 f848 	bl	80085ba <memset>
 800752a:	e7f5      	b.n	8007518 <_calloc_r+0x14>

0800752c <malloc>:
 800752c:	4b02      	ldr	r3, [pc, #8]	@ (8007538 <malloc+0xc>)
 800752e:	4601      	mov	r1, r0
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	f000 b825 	b.w	8007580 <_malloc_r>
 8007536:	bf00      	nop
 8007538:	2000002c 	.word	0x2000002c

0800753c <sbrk_aligned>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4e0f      	ldr	r6, [pc, #60]	@ (800757c <sbrk_aligned+0x40>)
 8007540:	460c      	mov	r4, r1
 8007542:	6831      	ldr	r1, [r6, #0]
 8007544:	4605      	mov	r5, r0
 8007546:	b911      	cbnz	r1, 800754e <sbrk_aligned+0x12>
 8007548:	f001 f878 	bl	800863c <_sbrk_r>
 800754c:	6030      	str	r0, [r6, #0]
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f001 f873 	bl	800863c <_sbrk_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	d103      	bne.n	8007562 <sbrk_aligned+0x26>
 800755a:	f04f 34ff 	mov.w	r4, #4294967295
 800755e:	4620      	mov	r0, r4
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	1cc4      	adds	r4, r0, #3
 8007564:	f024 0403 	bic.w	r4, r4, #3
 8007568:	42a0      	cmp	r0, r4
 800756a:	d0f8      	beq.n	800755e <sbrk_aligned+0x22>
 800756c:	1a21      	subs	r1, r4, r0
 800756e:	4628      	mov	r0, r5
 8007570:	f001 f864 	bl	800863c <_sbrk_r>
 8007574:	3001      	adds	r0, #1
 8007576:	d1f2      	bne.n	800755e <sbrk_aligned+0x22>
 8007578:	e7ef      	b.n	800755a <sbrk_aligned+0x1e>
 800757a:	bf00      	nop
 800757c:	2000047c 	.word	0x2000047c

08007580 <_malloc_r>:
 8007580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007584:	1ccd      	adds	r5, r1, #3
 8007586:	f025 0503 	bic.w	r5, r5, #3
 800758a:	3508      	adds	r5, #8
 800758c:	2d0c      	cmp	r5, #12
 800758e:	bf38      	it	cc
 8007590:	250c      	movcc	r5, #12
 8007592:	2d00      	cmp	r5, #0
 8007594:	4606      	mov	r6, r0
 8007596:	db01      	blt.n	800759c <_malloc_r+0x1c>
 8007598:	42a9      	cmp	r1, r5
 800759a:	d904      	bls.n	80075a6 <_malloc_r+0x26>
 800759c:	230c      	movs	r3, #12
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	2000      	movs	r0, #0
 80075a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800767c <_malloc_r+0xfc>
 80075aa:	f000 f869 	bl	8007680 <__malloc_lock>
 80075ae:	f8d8 3000 	ldr.w	r3, [r8]
 80075b2:	461c      	mov	r4, r3
 80075b4:	bb44      	cbnz	r4, 8007608 <_malloc_r+0x88>
 80075b6:	4629      	mov	r1, r5
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff ffbf 	bl	800753c <sbrk_aligned>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	4604      	mov	r4, r0
 80075c2:	d158      	bne.n	8007676 <_malloc_r+0xf6>
 80075c4:	f8d8 4000 	ldr.w	r4, [r8]
 80075c8:	4627      	mov	r7, r4
 80075ca:	2f00      	cmp	r7, #0
 80075cc:	d143      	bne.n	8007656 <_malloc_r+0xd6>
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	d04b      	beq.n	800766a <_malloc_r+0xea>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	4639      	mov	r1, r7
 80075d6:	4630      	mov	r0, r6
 80075d8:	eb04 0903 	add.w	r9, r4, r3
 80075dc:	f001 f82e 	bl	800863c <_sbrk_r>
 80075e0:	4581      	cmp	r9, r0
 80075e2:	d142      	bne.n	800766a <_malloc_r+0xea>
 80075e4:	6821      	ldr	r1, [r4, #0]
 80075e6:	1a6d      	subs	r5, r5, r1
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ffa6 	bl	800753c <sbrk_aligned>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d03a      	beq.n	800766a <_malloc_r+0xea>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	442b      	add	r3, r5
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	f8d8 3000 	ldr.w	r3, [r8]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	bb62      	cbnz	r2, 800765c <_malloc_r+0xdc>
 8007602:	f8c8 7000 	str.w	r7, [r8]
 8007606:	e00f      	b.n	8007628 <_malloc_r+0xa8>
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	1b52      	subs	r2, r2, r5
 800760c:	d420      	bmi.n	8007650 <_malloc_r+0xd0>
 800760e:	2a0b      	cmp	r2, #11
 8007610:	d917      	bls.n	8007642 <_malloc_r+0xc2>
 8007612:	1961      	adds	r1, r4, r5
 8007614:	42a3      	cmp	r3, r4
 8007616:	6025      	str	r5, [r4, #0]
 8007618:	bf18      	it	ne
 800761a:	6059      	strne	r1, [r3, #4]
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	bf08      	it	eq
 8007620:	f8c8 1000 	streq.w	r1, [r8]
 8007624:	5162      	str	r2, [r4, r5]
 8007626:	604b      	str	r3, [r1, #4]
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f82f 	bl	800768c <__malloc_unlock>
 800762e:	f104 000b 	add.w	r0, r4, #11
 8007632:	1d23      	adds	r3, r4, #4
 8007634:	f020 0007 	bic.w	r0, r0, #7
 8007638:	1ac2      	subs	r2, r0, r3
 800763a:	bf1c      	itt	ne
 800763c:	1a1b      	subne	r3, r3, r0
 800763e:	50a3      	strne	r3, [r4, r2]
 8007640:	e7af      	b.n	80075a2 <_malloc_r+0x22>
 8007642:	6862      	ldr	r2, [r4, #4]
 8007644:	42a3      	cmp	r3, r4
 8007646:	bf0c      	ite	eq
 8007648:	f8c8 2000 	streq.w	r2, [r8]
 800764c:	605a      	strne	r2, [r3, #4]
 800764e:	e7eb      	b.n	8007628 <_malloc_r+0xa8>
 8007650:	4623      	mov	r3, r4
 8007652:	6864      	ldr	r4, [r4, #4]
 8007654:	e7ae      	b.n	80075b4 <_malloc_r+0x34>
 8007656:	463c      	mov	r4, r7
 8007658:	687f      	ldr	r7, [r7, #4]
 800765a:	e7b6      	b.n	80075ca <_malloc_r+0x4a>
 800765c:	461a      	mov	r2, r3
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	42a3      	cmp	r3, r4
 8007662:	d1fb      	bne.n	800765c <_malloc_r+0xdc>
 8007664:	2300      	movs	r3, #0
 8007666:	6053      	str	r3, [r2, #4]
 8007668:	e7de      	b.n	8007628 <_malloc_r+0xa8>
 800766a:	230c      	movs	r3, #12
 800766c:	6033      	str	r3, [r6, #0]
 800766e:	4630      	mov	r0, r6
 8007670:	f000 f80c 	bl	800768c <__malloc_unlock>
 8007674:	e794      	b.n	80075a0 <_malloc_r+0x20>
 8007676:	6005      	str	r5, [r0, #0]
 8007678:	e7d6      	b.n	8007628 <_malloc_r+0xa8>
 800767a:	bf00      	nop
 800767c:	20000480 	.word	0x20000480

08007680 <__malloc_lock>:
 8007680:	4801      	ldr	r0, [pc, #4]	@ (8007688 <__malloc_lock+0x8>)
 8007682:	f001 b828 	b.w	80086d6 <__retarget_lock_acquire_recursive>
 8007686:	bf00      	nop
 8007688:	200005c4 	.word	0x200005c4

0800768c <__malloc_unlock>:
 800768c:	4801      	ldr	r0, [pc, #4]	@ (8007694 <__malloc_unlock+0x8>)
 800768e:	f001 b823 	b.w	80086d8 <__retarget_lock_release_recursive>
 8007692:	bf00      	nop
 8007694:	200005c4 	.word	0x200005c4

08007698 <__cvt>:
 8007698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800769c:	ec57 6b10 	vmov	r6, r7, d0
 80076a0:	2f00      	cmp	r7, #0
 80076a2:	460c      	mov	r4, r1
 80076a4:	4619      	mov	r1, r3
 80076a6:	463b      	mov	r3, r7
 80076a8:	bfbb      	ittet	lt
 80076aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076ae:	461f      	movlt	r7, r3
 80076b0:	2300      	movge	r3, #0
 80076b2:	232d      	movlt	r3, #45	@ 0x2d
 80076b4:	700b      	strb	r3, [r1, #0]
 80076b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076bc:	4691      	mov	r9, r2
 80076be:	f023 0820 	bic.w	r8, r3, #32
 80076c2:	bfbc      	itt	lt
 80076c4:	4632      	movlt	r2, r6
 80076c6:	4616      	movlt	r6, r2
 80076c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076cc:	d005      	beq.n	80076da <__cvt+0x42>
 80076ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076d2:	d100      	bne.n	80076d6 <__cvt+0x3e>
 80076d4:	3401      	adds	r4, #1
 80076d6:	2102      	movs	r1, #2
 80076d8:	e000      	b.n	80076dc <__cvt+0x44>
 80076da:	2103      	movs	r1, #3
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	ab02      	add	r3, sp, #8
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	ec47 6b10 	vmov	d0, r6, r7
 80076e8:	4653      	mov	r3, sl
 80076ea:	4622      	mov	r2, r4
 80076ec:	f001 f884 	bl	80087f8 <_dtoa_r>
 80076f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80076f4:	4605      	mov	r5, r0
 80076f6:	d119      	bne.n	800772c <__cvt+0x94>
 80076f8:	f019 0f01 	tst.w	r9, #1
 80076fc:	d00e      	beq.n	800771c <__cvt+0x84>
 80076fe:	eb00 0904 	add.w	r9, r0, r4
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4630      	mov	r0, r6
 8007708:	4639      	mov	r1, r7
 800770a:	f7f9 f9ed 	bl	8000ae8 <__aeabi_dcmpeq>
 800770e:	b108      	cbz	r0, 8007714 <__cvt+0x7c>
 8007710:	f8cd 900c 	str.w	r9, [sp, #12]
 8007714:	2230      	movs	r2, #48	@ 0x30
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	454b      	cmp	r3, r9
 800771a:	d31e      	bcc.n	800775a <__cvt+0xc2>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007720:	1b5b      	subs	r3, r3, r5
 8007722:	4628      	mov	r0, r5
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	b004      	add	sp, #16
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007730:	eb00 0904 	add.w	r9, r0, r4
 8007734:	d1e5      	bne.n	8007702 <__cvt+0x6a>
 8007736:	7803      	ldrb	r3, [r0, #0]
 8007738:	2b30      	cmp	r3, #48	@ 0x30
 800773a:	d10a      	bne.n	8007752 <__cvt+0xba>
 800773c:	2200      	movs	r2, #0
 800773e:	2300      	movs	r3, #0
 8007740:	4630      	mov	r0, r6
 8007742:	4639      	mov	r1, r7
 8007744:	f7f9 f9d0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007748:	b918      	cbnz	r0, 8007752 <__cvt+0xba>
 800774a:	f1c4 0401 	rsb	r4, r4, #1
 800774e:	f8ca 4000 	str.w	r4, [sl]
 8007752:	f8da 3000 	ldr.w	r3, [sl]
 8007756:	4499      	add	r9, r3
 8007758:	e7d3      	b.n	8007702 <__cvt+0x6a>
 800775a:	1c59      	adds	r1, r3, #1
 800775c:	9103      	str	r1, [sp, #12]
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e7d9      	b.n	8007716 <__cvt+0x7e>

08007762 <__exponent>:
 8007762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007764:	2900      	cmp	r1, #0
 8007766:	bfba      	itte	lt
 8007768:	4249      	neglt	r1, r1
 800776a:	232d      	movlt	r3, #45	@ 0x2d
 800776c:	232b      	movge	r3, #43	@ 0x2b
 800776e:	2909      	cmp	r1, #9
 8007770:	7002      	strb	r2, [r0, #0]
 8007772:	7043      	strb	r3, [r0, #1]
 8007774:	dd29      	ble.n	80077ca <__exponent+0x68>
 8007776:	f10d 0307 	add.w	r3, sp, #7
 800777a:	461d      	mov	r5, r3
 800777c:	270a      	movs	r7, #10
 800777e:	461a      	mov	r2, r3
 8007780:	fbb1 f6f7 	udiv	r6, r1, r7
 8007784:	fb07 1416 	mls	r4, r7, r6, r1
 8007788:	3430      	adds	r4, #48	@ 0x30
 800778a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800778e:	460c      	mov	r4, r1
 8007790:	2c63      	cmp	r4, #99	@ 0x63
 8007792:	f103 33ff 	add.w	r3, r3, #4294967295
 8007796:	4631      	mov	r1, r6
 8007798:	dcf1      	bgt.n	800777e <__exponent+0x1c>
 800779a:	3130      	adds	r1, #48	@ 0x30
 800779c:	1e94      	subs	r4, r2, #2
 800779e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077a2:	1c41      	adds	r1, r0, #1
 80077a4:	4623      	mov	r3, r4
 80077a6:	42ab      	cmp	r3, r5
 80077a8:	d30a      	bcc.n	80077c0 <__exponent+0x5e>
 80077aa:	f10d 0309 	add.w	r3, sp, #9
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	42ac      	cmp	r4, r5
 80077b2:	bf88      	it	hi
 80077b4:	2300      	movhi	r3, #0
 80077b6:	3302      	adds	r3, #2
 80077b8:	4403      	add	r3, r0
 80077ba:	1a18      	subs	r0, r3, r0
 80077bc:	b003      	add	sp, #12
 80077be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077c8:	e7ed      	b.n	80077a6 <__exponent+0x44>
 80077ca:	2330      	movs	r3, #48	@ 0x30
 80077cc:	3130      	adds	r1, #48	@ 0x30
 80077ce:	7083      	strb	r3, [r0, #2]
 80077d0:	70c1      	strb	r1, [r0, #3]
 80077d2:	1d03      	adds	r3, r0, #4
 80077d4:	e7f1      	b.n	80077ba <__exponent+0x58>
	...

080077d8 <_printf_float>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	b08d      	sub	sp, #52	@ 0x34
 80077de:	460c      	mov	r4, r1
 80077e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077e4:	4616      	mov	r6, r2
 80077e6:	461f      	mov	r7, r3
 80077e8:	4605      	mov	r5, r0
 80077ea:	f000 feef 	bl	80085cc <_localeconv_r>
 80077ee:	6803      	ldr	r3, [r0, #0]
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7f8 fd4c 	bl	8000290 <strlen>
 80077f8:	2300      	movs	r3, #0
 80077fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80077fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007800:	9005      	str	r0, [sp, #20]
 8007802:	3307      	adds	r3, #7
 8007804:	f023 0307 	bic.w	r3, r3, #7
 8007808:	f103 0208 	add.w	r2, r3, #8
 800780c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007810:	f8d4 b000 	ldr.w	fp, [r4]
 8007814:	f8c8 2000 	str.w	r2, [r8]
 8007818:	e9d3 8900 	ldrd	r8, r9, [r3]
 800781c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007820:	9307      	str	r3, [sp, #28]
 8007822:	f8cd 8018 	str.w	r8, [sp, #24]
 8007826:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800782a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800782e:	4b9c      	ldr	r3, [pc, #624]	@ (8007aa0 <_printf_float+0x2c8>)
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	f7f9 f98a 	bl	8000b4c <__aeabi_dcmpun>
 8007838:	bb70      	cbnz	r0, 8007898 <_printf_float+0xc0>
 800783a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800783e:	4b98      	ldr	r3, [pc, #608]	@ (8007aa0 <_printf_float+0x2c8>)
 8007840:	f04f 32ff 	mov.w	r2, #4294967295
 8007844:	f7f9 f964 	bl	8000b10 <__aeabi_dcmple>
 8007848:	bb30      	cbnz	r0, 8007898 <_printf_float+0xc0>
 800784a:	2200      	movs	r2, #0
 800784c:	2300      	movs	r3, #0
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	f7f9 f953 	bl	8000afc <__aeabi_dcmplt>
 8007856:	b110      	cbz	r0, 800785e <_printf_float+0x86>
 8007858:	232d      	movs	r3, #45	@ 0x2d
 800785a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800785e:	4a91      	ldr	r2, [pc, #580]	@ (8007aa4 <_printf_float+0x2cc>)
 8007860:	4b91      	ldr	r3, [pc, #580]	@ (8007aa8 <_printf_float+0x2d0>)
 8007862:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007866:	bf94      	ite	ls
 8007868:	4690      	movls	r8, r2
 800786a:	4698      	movhi	r8, r3
 800786c:	2303      	movs	r3, #3
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	f02b 0304 	bic.w	r3, fp, #4
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	f04f 0900 	mov.w	r9, #0
 800787a:	9700      	str	r7, [sp, #0]
 800787c:	4633      	mov	r3, r6
 800787e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007880:	4621      	mov	r1, r4
 8007882:	4628      	mov	r0, r5
 8007884:	f000 f9d2 	bl	8007c2c <_printf_common>
 8007888:	3001      	adds	r0, #1
 800788a:	f040 808d 	bne.w	80079a8 <_printf_float+0x1d0>
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
 8007892:	b00d      	add	sp, #52	@ 0x34
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	f7f9 f954 	bl	8000b4c <__aeabi_dcmpun>
 80078a4:	b140      	cbz	r0, 80078b8 <_printf_float+0xe0>
 80078a6:	464b      	mov	r3, r9
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bfbc      	itt	lt
 80078ac:	232d      	movlt	r3, #45	@ 0x2d
 80078ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078b2:	4a7e      	ldr	r2, [pc, #504]	@ (8007aac <_printf_float+0x2d4>)
 80078b4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ab0 <_printf_float+0x2d8>)
 80078b6:	e7d4      	b.n	8007862 <_printf_float+0x8a>
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078be:	9206      	str	r2, [sp, #24]
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	d13b      	bne.n	800793c <_printf_float+0x164>
 80078c4:	2306      	movs	r3, #6
 80078c6:	6063      	str	r3, [r4, #4]
 80078c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078cc:	2300      	movs	r3, #0
 80078ce:	6022      	str	r2, [r4, #0]
 80078d0:	9303      	str	r3, [sp, #12]
 80078d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80078d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078d8:	ab09      	add	r3, sp, #36	@ 0x24
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	ec49 8b10 	vmov	d0, r8, r9
 80078e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078e6:	4628      	mov	r0, r5
 80078e8:	f7ff fed6 	bl	8007698 <__cvt>
 80078ec:	9b06      	ldr	r3, [sp, #24]
 80078ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078f0:	2b47      	cmp	r3, #71	@ 0x47
 80078f2:	4680      	mov	r8, r0
 80078f4:	d129      	bne.n	800794a <_printf_float+0x172>
 80078f6:	1cc8      	adds	r0, r1, #3
 80078f8:	db02      	blt.n	8007900 <_printf_float+0x128>
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	4299      	cmp	r1, r3
 80078fe:	dd41      	ble.n	8007984 <_printf_float+0x1ac>
 8007900:	f1aa 0a02 	sub.w	sl, sl, #2
 8007904:	fa5f fa8a 	uxtb.w	sl, sl
 8007908:	3901      	subs	r1, #1
 800790a:	4652      	mov	r2, sl
 800790c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007910:	9109      	str	r1, [sp, #36]	@ 0x24
 8007912:	f7ff ff26 	bl	8007762 <__exponent>
 8007916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007918:	1813      	adds	r3, r2, r0
 800791a:	2a01      	cmp	r2, #1
 800791c:	4681      	mov	r9, r0
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	dc02      	bgt.n	8007928 <_printf_float+0x150>
 8007922:	6822      	ldr	r2, [r4, #0]
 8007924:	07d2      	lsls	r2, r2, #31
 8007926:	d501      	bpl.n	800792c <_printf_float+0x154>
 8007928:	3301      	adds	r3, #1
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0a2      	beq.n	800787a <_printf_float+0xa2>
 8007934:	232d      	movs	r3, #45	@ 0x2d
 8007936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800793a:	e79e      	b.n	800787a <_printf_float+0xa2>
 800793c:	9a06      	ldr	r2, [sp, #24]
 800793e:	2a47      	cmp	r2, #71	@ 0x47
 8007940:	d1c2      	bne.n	80078c8 <_printf_float+0xf0>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1c0      	bne.n	80078c8 <_printf_float+0xf0>
 8007946:	2301      	movs	r3, #1
 8007948:	e7bd      	b.n	80078c6 <_printf_float+0xee>
 800794a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800794e:	d9db      	bls.n	8007908 <_printf_float+0x130>
 8007950:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007954:	d118      	bne.n	8007988 <_printf_float+0x1b0>
 8007956:	2900      	cmp	r1, #0
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	dd0b      	ble.n	8007974 <_printf_float+0x19c>
 800795c:	6121      	str	r1, [r4, #16]
 800795e:	b913      	cbnz	r3, 8007966 <_printf_float+0x18e>
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	07d0      	lsls	r0, r2, #31
 8007964:	d502      	bpl.n	800796c <_printf_float+0x194>
 8007966:	3301      	adds	r3, #1
 8007968:	440b      	add	r3, r1
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800796e:	f04f 0900 	mov.w	r9, #0
 8007972:	e7db      	b.n	800792c <_printf_float+0x154>
 8007974:	b913      	cbnz	r3, 800797c <_printf_float+0x1a4>
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	07d2      	lsls	r2, r2, #31
 800797a:	d501      	bpl.n	8007980 <_printf_float+0x1a8>
 800797c:	3302      	adds	r3, #2
 800797e:	e7f4      	b.n	800796a <_printf_float+0x192>
 8007980:	2301      	movs	r3, #1
 8007982:	e7f2      	b.n	800796a <_printf_float+0x192>
 8007984:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800798a:	4299      	cmp	r1, r3
 800798c:	db05      	blt.n	800799a <_printf_float+0x1c2>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	6121      	str	r1, [r4, #16]
 8007992:	07d8      	lsls	r0, r3, #31
 8007994:	d5ea      	bpl.n	800796c <_printf_float+0x194>
 8007996:	1c4b      	adds	r3, r1, #1
 8007998:	e7e7      	b.n	800796a <_printf_float+0x192>
 800799a:	2900      	cmp	r1, #0
 800799c:	bfd4      	ite	le
 800799e:	f1c1 0202 	rsble	r2, r1, #2
 80079a2:	2201      	movgt	r2, #1
 80079a4:	4413      	add	r3, r2
 80079a6:	e7e0      	b.n	800796a <_printf_float+0x192>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	055a      	lsls	r2, r3, #21
 80079ac:	d407      	bmi.n	80079be <_printf_float+0x1e6>
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	4642      	mov	r2, r8
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	d12b      	bne.n	8007a14 <_printf_float+0x23c>
 80079bc:	e767      	b.n	800788e <_printf_float+0xb6>
 80079be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079c2:	f240 80dd 	bls.w	8007b80 <_printf_float+0x3a8>
 80079c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079ca:	2200      	movs	r2, #0
 80079cc:	2300      	movs	r3, #0
 80079ce:	f7f9 f88b 	bl	8000ae8 <__aeabi_dcmpeq>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d033      	beq.n	8007a3e <_printf_float+0x266>
 80079d6:	4a37      	ldr	r2, [pc, #220]	@ (8007ab4 <_printf_float+0x2dc>)
 80079d8:	2301      	movs	r3, #1
 80079da:	4631      	mov	r1, r6
 80079dc:	4628      	mov	r0, r5
 80079de:	47b8      	blx	r7
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f af54 	beq.w	800788e <_printf_float+0xb6>
 80079e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079ea:	4543      	cmp	r3, r8
 80079ec:	db02      	blt.n	80079f4 <_printf_float+0x21c>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	07d8      	lsls	r0, r3, #31
 80079f2:	d50f      	bpl.n	8007a14 <_printf_float+0x23c>
 80079f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f af45 	beq.w	800788e <_printf_float+0xb6>
 8007a04:	f04f 0900 	mov.w	r9, #0
 8007a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a0c:	f104 0a1a 	add.w	sl, r4, #26
 8007a10:	45c8      	cmp	r8, r9
 8007a12:	dc09      	bgt.n	8007a28 <_printf_float+0x250>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	079b      	lsls	r3, r3, #30
 8007a18:	f100 8103 	bmi.w	8007c22 <_printf_float+0x44a>
 8007a1c:	68e0      	ldr	r0, [r4, #12]
 8007a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a20:	4298      	cmp	r0, r3
 8007a22:	bfb8      	it	lt
 8007a24:	4618      	movlt	r0, r3
 8007a26:	e734      	b.n	8007892 <_printf_float+0xba>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	f43f af2b 	beq.w	800788e <_printf_float+0xb6>
 8007a38:	f109 0901 	add.w	r9, r9, #1
 8007a3c:	e7e8      	b.n	8007a10 <_printf_float+0x238>
 8007a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dc39      	bgt.n	8007ab8 <_printf_float+0x2e0>
 8007a44:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab4 <_printf_float+0x2dc>)
 8007a46:	2301      	movs	r3, #1
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	47b8      	blx	r7
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f43f af1d 	beq.w	800788e <_printf_float+0xb6>
 8007a54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a58:	ea59 0303 	orrs.w	r3, r9, r3
 8007a5c:	d102      	bne.n	8007a64 <_printf_float+0x28c>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	07d9      	lsls	r1, r3, #31
 8007a62:	d5d7      	bpl.n	8007a14 <_printf_float+0x23c>
 8007a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f43f af0d 	beq.w	800788e <_printf_float+0xb6>
 8007a74:	f04f 0a00 	mov.w	sl, #0
 8007a78:	f104 0b1a 	add.w	fp, r4, #26
 8007a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7e:	425b      	negs	r3, r3
 8007a80:	4553      	cmp	r3, sl
 8007a82:	dc01      	bgt.n	8007a88 <_printf_float+0x2b0>
 8007a84:	464b      	mov	r3, r9
 8007a86:	e793      	b.n	80079b0 <_printf_float+0x1d8>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	465a      	mov	r2, fp
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	f43f aefb 	beq.w	800788e <_printf_float+0xb6>
 8007a98:	f10a 0a01 	add.w	sl, sl, #1
 8007a9c:	e7ee      	b.n	8007a7c <_printf_float+0x2a4>
 8007a9e:	bf00      	nop
 8007aa0:	7fefffff 	.word	0x7fefffff
 8007aa4:	0800bc4c 	.word	0x0800bc4c
 8007aa8:	0800bc50 	.word	0x0800bc50
 8007aac:	0800bc54 	.word	0x0800bc54
 8007ab0:	0800bc58 	.word	0x0800bc58
 8007ab4:	0800bc5c 	.word	0x0800bc5c
 8007ab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007aba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007abe:	4553      	cmp	r3, sl
 8007ac0:	bfa8      	it	ge
 8007ac2:	4653      	movge	r3, sl
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	4699      	mov	r9, r3
 8007ac8:	dc36      	bgt.n	8007b38 <_printf_float+0x360>
 8007aca:	f04f 0b00 	mov.w	fp, #0
 8007ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ad2:	f104 021a 	add.w	r2, r4, #26
 8007ad6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ad8:	9306      	str	r3, [sp, #24]
 8007ada:	eba3 0309 	sub.w	r3, r3, r9
 8007ade:	455b      	cmp	r3, fp
 8007ae0:	dc31      	bgt.n	8007b46 <_printf_float+0x36e>
 8007ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae4:	459a      	cmp	sl, r3
 8007ae6:	dc3a      	bgt.n	8007b5e <_printf_float+0x386>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	07da      	lsls	r2, r3, #31
 8007aec:	d437      	bmi.n	8007b5e <_printf_float+0x386>
 8007aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af0:	ebaa 0903 	sub.w	r9, sl, r3
 8007af4:	9b06      	ldr	r3, [sp, #24]
 8007af6:	ebaa 0303 	sub.w	r3, sl, r3
 8007afa:	4599      	cmp	r9, r3
 8007afc:	bfa8      	it	ge
 8007afe:	4699      	movge	r9, r3
 8007b00:	f1b9 0f00 	cmp.w	r9, #0
 8007b04:	dc33      	bgt.n	8007b6e <_printf_float+0x396>
 8007b06:	f04f 0800 	mov.w	r8, #0
 8007b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b0e:	f104 0b1a 	add.w	fp, r4, #26
 8007b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b14:	ebaa 0303 	sub.w	r3, sl, r3
 8007b18:	eba3 0309 	sub.w	r3, r3, r9
 8007b1c:	4543      	cmp	r3, r8
 8007b1e:	f77f af79 	ble.w	8007a14 <_printf_float+0x23c>
 8007b22:	2301      	movs	r3, #1
 8007b24:	465a      	mov	r2, fp
 8007b26:	4631      	mov	r1, r6
 8007b28:	4628      	mov	r0, r5
 8007b2a:	47b8      	blx	r7
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	f43f aeae 	beq.w	800788e <_printf_float+0xb6>
 8007b32:	f108 0801 	add.w	r8, r8, #1
 8007b36:	e7ec      	b.n	8007b12 <_printf_float+0x33a>
 8007b38:	4642      	mov	r2, r8
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	d1c2      	bne.n	8007aca <_printf_float+0x2f2>
 8007b44:	e6a3      	b.n	800788e <_printf_float+0xb6>
 8007b46:	2301      	movs	r3, #1
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	9206      	str	r2, [sp, #24]
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	f43f ae9c 	beq.w	800788e <_printf_float+0xb6>
 8007b56:	9a06      	ldr	r2, [sp, #24]
 8007b58:	f10b 0b01 	add.w	fp, fp, #1
 8007b5c:	e7bb      	b.n	8007ad6 <_printf_float+0x2fe>
 8007b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d1c0      	bne.n	8007aee <_printf_float+0x316>
 8007b6c:	e68f      	b.n	800788e <_printf_float+0xb6>
 8007b6e:	9a06      	ldr	r2, [sp, #24]
 8007b70:	464b      	mov	r3, r9
 8007b72:	4442      	add	r2, r8
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d1c3      	bne.n	8007b06 <_printf_float+0x32e>
 8007b7e:	e686      	b.n	800788e <_printf_float+0xb6>
 8007b80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b84:	f1ba 0f01 	cmp.w	sl, #1
 8007b88:	dc01      	bgt.n	8007b8e <_printf_float+0x3b6>
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d536      	bpl.n	8007bfc <_printf_float+0x424>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4642      	mov	r2, r8
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f ae78 	beq.w	800788e <_printf_float+0xb6>
 8007b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f43f ae70 	beq.w	800788e <_printf_float+0xb6>
 8007bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bba:	f7f8 ff95 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bbe:	b9c0      	cbnz	r0, 8007bf2 <_printf_float+0x41a>
 8007bc0:	4653      	mov	r3, sl
 8007bc2:	f108 0201 	add.w	r2, r8, #1
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d10c      	bne.n	8007bea <_printf_float+0x412>
 8007bd0:	e65d      	b.n	800788e <_printf_float+0xb6>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	465a      	mov	r2, fp
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b8      	blx	r7
 8007bdc:	3001      	adds	r0, #1
 8007bde:	f43f ae56 	beq.w	800788e <_printf_float+0xb6>
 8007be2:	f108 0801 	add.w	r8, r8, #1
 8007be6:	45d0      	cmp	r8, sl
 8007be8:	dbf3      	blt.n	8007bd2 <_printf_float+0x3fa>
 8007bea:	464b      	mov	r3, r9
 8007bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007bf0:	e6df      	b.n	80079b2 <_printf_float+0x1da>
 8007bf2:	f04f 0800 	mov.w	r8, #0
 8007bf6:	f104 0b1a 	add.w	fp, r4, #26
 8007bfa:	e7f4      	b.n	8007be6 <_printf_float+0x40e>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4642      	mov	r2, r8
 8007c00:	e7e1      	b.n	8007bc6 <_printf_float+0x3ee>
 8007c02:	2301      	movs	r3, #1
 8007c04:	464a      	mov	r2, r9
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae3e 	beq.w	800788e <_printf_float+0xb6>
 8007c12:	f108 0801 	add.w	r8, r8, #1
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c1a:	1a5b      	subs	r3, r3, r1
 8007c1c:	4543      	cmp	r3, r8
 8007c1e:	dcf0      	bgt.n	8007c02 <_printf_float+0x42a>
 8007c20:	e6fc      	b.n	8007a1c <_printf_float+0x244>
 8007c22:	f04f 0800 	mov.w	r8, #0
 8007c26:	f104 0919 	add.w	r9, r4, #25
 8007c2a:	e7f4      	b.n	8007c16 <_printf_float+0x43e>

08007c2c <_printf_common>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	4616      	mov	r6, r2
 8007c32:	4698      	mov	r8, r3
 8007c34:	688a      	ldr	r2, [r1, #8]
 8007c36:	690b      	ldr	r3, [r1, #16]
 8007c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	bfb8      	it	lt
 8007c40:	4613      	movlt	r3, r2
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c48:	4607      	mov	r7, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b10a      	cbz	r2, 8007c52 <_printf_common+0x26>
 8007c4e:	3301      	adds	r3, #1
 8007c50:	6033      	str	r3, [r6, #0]
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	0699      	lsls	r1, r3, #26
 8007c56:	bf42      	ittt	mi
 8007c58:	6833      	ldrmi	r3, [r6, #0]
 8007c5a:	3302      	addmi	r3, #2
 8007c5c:	6033      	strmi	r3, [r6, #0]
 8007c5e:	6825      	ldr	r5, [r4, #0]
 8007c60:	f015 0506 	ands.w	r5, r5, #6
 8007c64:	d106      	bne.n	8007c74 <_printf_common+0x48>
 8007c66:	f104 0a19 	add.w	sl, r4, #25
 8007c6a:	68e3      	ldr	r3, [r4, #12]
 8007c6c:	6832      	ldr	r2, [r6, #0]
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	dc26      	bgt.n	8007cc2 <_printf_common+0x96>
 8007c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c78:	6822      	ldr	r2, [r4, #0]
 8007c7a:	3b00      	subs	r3, #0
 8007c7c:	bf18      	it	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	0692      	lsls	r2, r2, #26
 8007c82:	d42b      	bmi.n	8007cdc <_printf_common+0xb0>
 8007c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c88:	4641      	mov	r1, r8
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	47c8      	blx	r9
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d01e      	beq.n	8007cd0 <_printf_common+0xa4>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	6922      	ldr	r2, [r4, #16]
 8007c96:	f003 0306 	and.w	r3, r3, #6
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	bf02      	ittt	eq
 8007c9e:	68e5      	ldreq	r5, [r4, #12]
 8007ca0:	6833      	ldreq	r3, [r6, #0]
 8007ca2:	1aed      	subeq	r5, r5, r3
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	bf0c      	ite	eq
 8007ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cac:	2500      	movne	r5, #0
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	bfc4      	itt	gt
 8007cb2:	1a9b      	subgt	r3, r3, r2
 8007cb4:	18ed      	addgt	r5, r5, r3
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	341a      	adds	r4, #26
 8007cba:	42b5      	cmp	r5, r6
 8007cbc:	d11a      	bne.n	8007cf4 <_printf_common+0xc8>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	e008      	b.n	8007cd4 <_printf_common+0xa8>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	4641      	mov	r1, r8
 8007cc8:	4638      	mov	r0, r7
 8007cca:	47c8      	blx	r9
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d103      	bne.n	8007cd8 <_printf_common+0xac>
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd8:	3501      	adds	r5, #1
 8007cda:	e7c6      	b.n	8007c6a <_printf_common+0x3e>
 8007cdc:	18e1      	adds	r1, r4, r3
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	2030      	movs	r0, #48	@ 0x30
 8007ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ce6:	4422      	add	r2, r4
 8007ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	e7c7      	b.n	8007c84 <_printf_common+0x58>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	47c8      	blx	r9
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d0e6      	beq.n	8007cd0 <_printf_common+0xa4>
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7d9      	b.n	8007cba <_printf_common+0x8e>
	...

08007d08 <_printf_i>:
 8007d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0c:	7e0f      	ldrb	r7, [r1, #24]
 8007d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d10:	2f78      	cmp	r7, #120	@ 0x78
 8007d12:	4691      	mov	r9, r2
 8007d14:	4680      	mov	r8, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d1e:	d807      	bhi.n	8007d30 <_printf_i+0x28>
 8007d20:	2f62      	cmp	r7, #98	@ 0x62
 8007d22:	d80a      	bhi.n	8007d3a <_printf_i+0x32>
 8007d24:	2f00      	cmp	r7, #0
 8007d26:	f000 80d2 	beq.w	8007ece <_printf_i+0x1c6>
 8007d2a:	2f58      	cmp	r7, #88	@ 0x58
 8007d2c:	f000 80b9 	beq.w	8007ea2 <_printf_i+0x19a>
 8007d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d38:	e03a      	b.n	8007db0 <_printf_i+0xa8>
 8007d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d3e:	2b15      	cmp	r3, #21
 8007d40:	d8f6      	bhi.n	8007d30 <_printf_i+0x28>
 8007d42:	a101      	add	r1, pc, #4	@ (adr r1, 8007d48 <_printf_i+0x40>)
 8007d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007db5 	.word	0x08007db5
 8007d50:	08007d31 	.word	0x08007d31
 8007d54:	08007d31 	.word	0x08007d31
 8007d58:	08007d31 	.word	0x08007d31
 8007d5c:	08007d31 	.word	0x08007d31
 8007d60:	08007db5 	.word	0x08007db5
 8007d64:	08007d31 	.word	0x08007d31
 8007d68:	08007d31 	.word	0x08007d31
 8007d6c:	08007d31 	.word	0x08007d31
 8007d70:	08007d31 	.word	0x08007d31
 8007d74:	08007eb5 	.word	0x08007eb5
 8007d78:	08007ddf 	.word	0x08007ddf
 8007d7c:	08007e6f 	.word	0x08007e6f
 8007d80:	08007d31 	.word	0x08007d31
 8007d84:	08007d31 	.word	0x08007d31
 8007d88:	08007ed7 	.word	0x08007ed7
 8007d8c:	08007d31 	.word	0x08007d31
 8007d90:	08007ddf 	.word	0x08007ddf
 8007d94:	08007d31 	.word	0x08007d31
 8007d98:	08007d31 	.word	0x08007d31
 8007d9c:	08007e77 	.word	0x08007e77
 8007da0:	6833      	ldr	r3, [r6, #0]
 8007da2:	1d1a      	adds	r2, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6032      	str	r2, [r6, #0]
 8007da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007db0:	2301      	movs	r3, #1
 8007db2:	e09d      	b.n	8007ef0 <_printf_i+0x1e8>
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	6820      	ldr	r0, [r4, #0]
 8007db8:	1d19      	adds	r1, r3, #4
 8007dba:	6031      	str	r1, [r6, #0]
 8007dbc:	0606      	lsls	r6, r0, #24
 8007dbe:	d501      	bpl.n	8007dc4 <_printf_i+0xbc>
 8007dc0:	681d      	ldr	r5, [r3, #0]
 8007dc2:	e003      	b.n	8007dcc <_printf_i+0xc4>
 8007dc4:	0645      	lsls	r5, r0, #25
 8007dc6:	d5fb      	bpl.n	8007dc0 <_printf_i+0xb8>
 8007dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dcc:	2d00      	cmp	r5, #0
 8007dce:	da03      	bge.n	8007dd8 <_printf_i+0xd0>
 8007dd0:	232d      	movs	r3, #45	@ 0x2d
 8007dd2:	426d      	negs	r5, r5
 8007dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dd8:	4859      	ldr	r0, [pc, #356]	@ (8007f40 <_printf_i+0x238>)
 8007dda:	230a      	movs	r3, #10
 8007ddc:	e011      	b.n	8007e02 <_printf_i+0xfa>
 8007dde:	6821      	ldr	r1, [r4, #0]
 8007de0:	6833      	ldr	r3, [r6, #0]
 8007de2:	0608      	lsls	r0, r1, #24
 8007de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007de8:	d402      	bmi.n	8007df0 <_printf_i+0xe8>
 8007dea:	0649      	lsls	r1, r1, #25
 8007dec:	bf48      	it	mi
 8007dee:	b2ad      	uxthmi	r5, r5
 8007df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007df2:	4853      	ldr	r0, [pc, #332]	@ (8007f40 <_printf_i+0x238>)
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	bf14      	ite	ne
 8007df8:	230a      	movne	r3, #10
 8007dfa:	2308      	moveq	r3, #8
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e02:	6866      	ldr	r6, [r4, #4]
 8007e04:	60a6      	str	r6, [r4, #8]
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	bfa2      	ittt	ge
 8007e0a:	6821      	ldrge	r1, [r4, #0]
 8007e0c:	f021 0104 	bicge.w	r1, r1, #4
 8007e10:	6021      	strge	r1, [r4, #0]
 8007e12:	b90d      	cbnz	r5, 8007e18 <_printf_i+0x110>
 8007e14:	2e00      	cmp	r6, #0
 8007e16:	d04b      	beq.n	8007eb0 <_printf_i+0x1a8>
 8007e18:	4616      	mov	r6, r2
 8007e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e22:	5dc7      	ldrb	r7, [r0, r7]
 8007e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e28:	462f      	mov	r7, r5
 8007e2a:	42bb      	cmp	r3, r7
 8007e2c:	460d      	mov	r5, r1
 8007e2e:	d9f4      	bls.n	8007e1a <_printf_i+0x112>
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d10b      	bne.n	8007e4c <_printf_i+0x144>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	07df      	lsls	r7, r3, #31
 8007e38:	d508      	bpl.n	8007e4c <_printf_i+0x144>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6861      	ldr	r1, [r4, #4]
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	bfde      	ittt	le
 8007e42:	2330      	movle	r3, #48	@ 0x30
 8007e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e4c:	1b92      	subs	r2, r2, r6
 8007e4e:	6122      	str	r2, [r4, #16]
 8007e50:	f8cd a000 	str.w	sl, [sp]
 8007e54:	464b      	mov	r3, r9
 8007e56:	aa03      	add	r2, sp, #12
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7ff fee6 	bl	8007c2c <_printf_common>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d14a      	bne.n	8007efa <_printf_i+0x1f2>
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b004      	add	sp, #16
 8007e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	f043 0320 	orr.w	r3, r3, #32
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	4833      	ldr	r0, [pc, #204]	@ (8007f44 <_printf_i+0x23c>)
 8007e78:	2778      	movs	r7, #120	@ 0x78
 8007e7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	6831      	ldr	r1, [r6, #0]
 8007e82:	061f      	lsls	r7, r3, #24
 8007e84:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e88:	d402      	bmi.n	8007e90 <_printf_i+0x188>
 8007e8a:	065f      	lsls	r7, r3, #25
 8007e8c:	bf48      	it	mi
 8007e8e:	b2ad      	uxthmi	r5, r5
 8007e90:	6031      	str	r1, [r6, #0]
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	bf44      	itt	mi
 8007e96:	f043 0320 	orrmi.w	r3, r3, #32
 8007e9a:	6023      	strmi	r3, [r4, #0]
 8007e9c:	b11d      	cbz	r5, 8007ea6 <_printf_i+0x19e>
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	e7ac      	b.n	8007dfc <_printf_i+0xf4>
 8007ea2:	4827      	ldr	r0, [pc, #156]	@ (8007f40 <_printf_i+0x238>)
 8007ea4:	e7e9      	b.n	8007e7a <_printf_i+0x172>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	f023 0320 	bic.w	r3, r3, #32
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	e7f6      	b.n	8007e9e <_printf_i+0x196>
 8007eb0:	4616      	mov	r6, r2
 8007eb2:	e7bd      	b.n	8007e30 <_printf_i+0x128>
 8007eb4:	6833      	ldr	r3, [r6, #0]
 8007eb6:	6825      	ldr	r5, [r4, #0]
 8007eb8:	6961      	ldr	r1, [r4, #20]
 8007eba:	1d18      	adds	r0, r3, #4
 8007ebc:	6030      	str	r0, [r6, #0]
 8007ebe:	062e      	lsls	r6, r5, #24
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	d501      	bpl.n	8007ec8 <_printf_i+0x1c0>
 8007ec4:	6019      	str	r1, [r3, #0]
 8007ec6:	e002      	b.n	8007ece <_printf_i+0x1c6>
 8007ec8:	0668      	lsls	r0, r5, #25
 8007eca:	d5fb      	bpl.n	8007ec4 <_printf_i+0x1bc>
 8007ecc:	8019      	strh	r1, [r3, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	4616      	mov	r6, r2
 8007ed4:	e7bc      	b.n	8007e50 <_printf_i+0x148>
 8007ed6:	6833      	ldr	r3, [r6, #0]
 8007ed8:	1d1a      	adds	r2, r3, #4
 8007eda:	6032      	str	r2, [r6, #0]
 8007edc:	681e      	ldr	r6, [r3, #0]
 8007ede:	6862      	ldr	r2, [r4, #4]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7f8 f984 	bl	80001f0 <memchr>
 8007ee8:	b108      	cbz	r0, 8007eee <_printf_i+0x1e6>
 8007eea:	1b80      	subs	r0, r0, r6
 8007eec:	6060      	str	r0, [r4, #4]
 8007eee:	6863      	ldr	r3, [r4, #4]
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef8:	e7aa      	b.n	8007e50 <_printf_i+0x148>
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	4632      	mov	r2, r6
 8007efe:	4649      	mov	r1, r9
 8007f00:	4640      	mov	r0, r8
 8007f02:	47d0      	blx	sl
 8007f04:	3001      	adds	r0, #1
 8007f06:	d0ad      	beq.n	8007e64 <_printf_i+0x15c>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	079b      	lsls	r3, r3, #30
 8007f0c:	d413      	bmi.n	8007f36 <_printf_i+0x22e>
 8007f0e:	68e0      	ldr	r0, [r4, #12]
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	4298      	cmp	r0, r3
 8007f14:	bfb8      	it	lt
 8007f16:	4618      	movlt	r0, r3
 8007f18:	e7a6      	b.n	8007e68 <_printf_i+0x160>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4640      	mov	r0, r8
 8007f22:	47d0      	blx	sl
 8007f24:	3001      	adds	r0, #1
 8007f26:	d09d      	beq.n	8007e64 <_printf_i+0x15c>
 8007f28:	3501      	adds	r5, #1
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	9903      	ldr	r1, [sp, #12]
 8007f2e:	1a5b      	subs	r3, r3, r1
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	dcf2      	bgt.n	8007f1a <_printf_i+0x212>
 8007f34:	e7eb      	b.n	8007f0e <_printf_i+0x206>
 8007f36:	2500      	movs	r5, #0
 8007f38:	f104 0619 	add.w	r6, r4, #25
 8007f3c:	e7f5      	b.n	8007f2a <_printf_i+0x222>
 8007f3e:	bf00      	nop
 8007f40:	0800bc5e 	.word	0x0800bc5e
 8007f44:	0800bc6f 	.word	0x0800bc6f

08007f48 <_scanf_float>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	b087      	sub	sp, #28
 8007f4e:	4617      	mov	r7, r2
 8007f50:	9303      	str	r3, [sp, #12]
 8007f52:	688b      	ldr	r3, [r1, #8]
 8007f54:	1e5a      	subs	r2, r3, #1
 8007f56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f5a:	bf81      	itttt	hi
 8007f5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f60:	eb03 0b05 	addhi.w	fp, r3, r5
 8007f64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f68:	608b      	strhi	r3, [r1, #8]
 8007f6a:	680b      	ldr	r3, [r1, #0]
 8007f6c:	460a      	mov	r2, r1
 8007f6e:	f04f 0500 	mov.w	r5, #0
 8007f72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007f76:	f842 3b1c 	str.w	r3, [r2], #28
 8007f7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f7e:	4680      	mov	r8, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	bf98      	it	ls
 8007f84:	f04f 0b00 	movls.w	fp, #0
 8007f88:	9201      	str	r2, [sp, #4]
 8007f8a:	4616      	mov	r6, r2
 8007f8c:	46aa      	mov	sl, r5
 8007f8e:	46a9      	mov	r9, r5
 8007f90:	9502      	str	r5, [sp, #8]
 8007f92:	68a2      	ldr	r2, [r4, #8]
 8007f94:	b152      	cbz	r2, 8007fac <_scanf_float+0x64>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f9c:	d864      	bhi.n	8008068 <_scanf_float+0x120>
 8007f9e:	2b40      	cmp	r3, #64	@ 0x40
 8007fa0:	d83c      	bhi.n	800801c <_scanf_float+0xd4>
 8007fa2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007fa6:	b2c8      	uxtb	r0, r1
 8007fa8:	280e      	cmp	r0, #14
 8007faa:	d93a      	bls.n	8008022 <_scanf_float+0xda>
 8007fac:	f1b9 0f00 	cmp.w	r9, #0
 8007fb0:	d003      	beq.n	8007fba <_scanf_float+0x72>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	f1ba 0f01 	cmp.w	sl, #1
 8007fc2:	f200 8117 	bhi.w	80081f4 <_scanf_float+0x2ac>
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	429e      	cmp	r6, r3
 8007fca:	f200 8108 	bhi.w	80081de <_scanf_float+0x296>
 8007fce:	2001      	movs	r0, #1
 8007fd0:	b007      	add	sp, #28
 8007fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007fda:	2a0d      	cmp	r2, #13
 8007fdc:	d8e6      	bhi.n	8007fac <_scanf_float+0x64>
 8007fde:	a101      	add	r1, pc, #4	@ (adr r1, 8007fe4 <_scanf_float+0x9c>)
 8007fe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fe4:	0800812b 	.word	0x0800812b
 8007fe8:	08007fad 	.word	0x08007fad
 8007fec:	08007fad 	.word	0x08007fad
 8007ff0:	08007fad 	.word	0x08007fad
 8007ff4:	0800818b 	.word	0x0800818b
 8007ff8:	08008163 	.word	0x08008163
 8007ffc:	08007fad 	.word	0x08007fad
 8008000:	08007fad 	.word	0x08007fad
 8008004:	08008139 	.word	0x08008139
 8008008:	08007fad 	.word	0x08007fad
 800800c:	08007fad 	.word	0x08007fad
 8008010:	08007fad 	.word	0x08007fad
 8008014:	08007fad 	.word	0x08007fad
 8008018:	080080f1 	.word	0x080080f1
 800801c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008020:	e7db      	b.n	8007fda <_scanf_float+0x92>
 8008022:	290e      	cmp	r1, #14
 8008024:	d8c2      	bhi.n	8007fac <_scanf_float+0x64>
 8008026:	a001      	add	r0, pc, #4	@ (adr r0, 800802c <_scanf_float+0xe4>)
 8008028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800802c:	080080e1 	.word	0x080080e1
 8008030:	08007fad 	.word	0x08007fad
 8008034:	080080e1 	.word	0x080080e1
 8008038:	08008177 	.word	0x08008177
 800803c:	08007fad 	.word	0x08007fad
 8008040:	08008089 	.word	0x08008089
 8008044:	080080c7 	.word	0x080080c7
 8008048:	080080c7 	.word	0x080080c7
 800804c:	080080c7 	.word	0x080080c7
 8008050:	080080c7 	.word	0x080080c7
 8008054:	080080c7 	.word	0x080080c7
 8008058:	080080c7 	.word	0x080080c7
 800805c:	080080c7 	.word	0x080080c7
 8008060:	080080c7 	.word	0x080080c7
 8008064:	080080c7 	.word	0x080080c7
 8008068:	2b6e      	cmp	r3, #110	@ 0x6e
 800806a:	d809      	bhi.n	8008080 <_scanf_float+0x138>
 800806c:	2b60      	cmp	r3, #96	@ 0x60
 800806e:	d8b2      	bhi.n	8007fd6 <_scanf_float+0x8e>
 8008070:	2b54      	cmp	r3, #84	@ 0x54
 8008072:	d07b      	beq.n	800816c <_scanf_float+0x224>
 8008074:	2b59      	cmp	r3, #89	@ 0x59
 8008076:	d199      	bne.n	8007fac <_scanf_float+0x64>
 8008078:	2d07      	cmp	r5, #7
 800807a:	d197      	bne.n	8007fac <_scanf_float+0x64>
 800807c:	2508      	movs	r5, #8
 800807e:	e02c      	b.n	80080da <_scanf_float+0x192>
 8008080:	2b74      	cmp	r3, #116	@ 0x74
 8008082:	d073      	beq.n	800816c <_scanf_float+0x224>
 8008084:	2b79      	cmp	r3, #121	@ 0x79
 8008086:	e7f6      	b.n	8008076 <_scanf_float+0x12e>
 8008088:	6821      	ldr	r1, [r4, #0]
 800808a:	05c8      	lsls	r0, r1, #23
 800808c:	d51b      	bpl.n	80080c6 <_scanf_float+0x17e>
 800808e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008092:	6021      	str	r1, [r4, #0]
 8008094:	f109 0901 	add.w	r9, r9, #1
 8008098:	f1bb 0f00 	cmp.w	fp, #0
 800809c:	d003      	beq.n	80080a6 <_scanf_float+0x15e>
 800809e:	3201      	adds	r2, #1
 80080a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080a4:	60a2      	str	r2, [r4, #8]
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	60a3      	str	r3, [r4, #8]
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	3301      	adds	r3, #1
 80080b0:	6123      	str	r3, [r4, #16]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	607b      	str	r3, [r7, #4]
 80080ba:	f340 8087 	ble.w	80081cc <_scanf_float+0x284>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	e765      	b.n	8007f92 <_scanf_float+0x4a>
 80080c6:	eb1a 0105 	adds.w	r1, sl, r5
 80080ca:	f47f af6f 	bne.w	8007fac <_scanf_float+0x64>
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80080d4:	6022      	str	r2, [r4, #0]
 80080d6:	460d      	mov	r5, r1
 80080d8:	468a      	mov	sl, r1
 80080da:	f806 3b01 	strb.w	r3, [r6], #1
 80080de:	e7e2      	b.n	80080a6 <_scanf_float+0x15e>
 80080e0:	6822      	ldr	r2, [r4, #0]
 80080e2:	0610      	lsls	r0, r2, #24
 80080e4:	f57f af62 	bpl.w	8007fac <_scanf_float+0x64>
 80080e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080ec:	6022      	str	r2, [r4, #0]
 80080ee:	e7f4      	b.n	80080da <_scanf_float+0x192>
 80080f0:	f1ba 0f00 	cmp.w	sl, #0
 80080f4:	d10e      	bne.n	8008114 <_scanf_float+0x1cc>
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	d10e      	bne.n	800811a <_scanf_float+0x1d2>
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008102:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008106:	d108      	bne.n	800811a <_scanf_float+0x1d2>
 8008108:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800810c:	6022      	str	r2, [r4, #0]
 800810e:	f04f 0a01 	mov.w	sl, #1
 8008112:	e7e2      	b.n	80080da <_scanf_float+0x192>
 8008114:	f1ba 0f02 	cmp.w	sl, #2
 8008118:	d055      	beq.n	80081c6 <_scanf_float+0x27e>
 800811a:	2d01      	cmp	r5, #1
 800811c:	d002      	beq.n	8008124 <_scanf_float+0x1dc>
 800811e:	2d04      	cmp	r5, #4
 8008120:	f47f af44 	bne.w	8007fac <_scanf_float+0x64>
 8008124:	3501      	adds	r5, #1
 8008126:	b2ed      	uxtb	r5, r5
 8008128:	e7d7      	b.n	80080da <_scanf_float+0x192>
 800812a:	f1ba 0f01 	cmp.w	sl, #1
 800812e:	f47f af3d 	bne.w	8007fac <_scanf_float+0x64>
 8008132:	f04f 0a02 	mov.w	sl, #2
 8008136:	e7d0      	b.n	80080da <_scanf_float+0x192>
 8008138:	b97d      	cbnz	r5, 800815a <_scanf_float+0x212>
 800813a:	f1b9 0f00 	cmp.w	r9, #0
 800813e:	f47f af38 	bne.w	8007fb2 <_scanf_float+0x6a>
 8008142:	6822      	ldr	r2, [r4, #0]
 8008144:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008148:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800814c:	f040 8108 	bne.w	8008360 <_scanf_float+0x418>
 8008150:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008154:	6022      	str	r2, [r4, #0]
 8008156:	2501      	movs	r5, #1
 8008158:	e7bf      	b.n	80080da <_scanf_float+0x192>
 800815a:	2d03      	cmp	r5, #3
 800815c:	d0e2      	beq.n	8008124 <_scanf_float+0x1dc>
 800815e:	2d05      	cmp	r5, #5
 8008160:	e7de      	b.n	8008120 <_scanf_float+0x1d8>
 8008162:	2d02      	cmp	r5, #2
 8008164:	f47f af22 	bne.w	8007fac <_scanf_float+0x64>
 8008168:	2503      	movs	r5, #3
 800816a:	e7b6      	b.n	80080da <_scanf_float+0x192>
 800816c:	2d06      	cmp	r5, #6
 800816e:	f47f af1d 	bne.w	8007fac <_scanf_float+0x64>
 8008172:	2507      	movs	r5, #7
 8008174:	e7b1      	b.n	80080da <_scanf_float+0x192>
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	0591      	lsls	r1, r2, #22
 800817a:	f57f af17 	bpl.w	8007fac <_scanf_float+0x64>
 800817e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008182:	6022      	str	r2, [r4, #0]
 8008184:	f8cd 9008 	str.w	r9, [sp, #8]
 8008188:	e7a7      	b.n	80080da <_scanf_float+0x192>
 800818a:	6822      	ldr	r2, [r4, #0]
 800818c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008190:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008194:	d006      	beq.n	80081a4 <_scanf_float+0x25c>
 8008196:	0550      	lsls	r0, r2, #21
 8008198:	f57f af08 	bpl.w	8007fac <_scanf_float+0x64>
 800819c:	f1b9 0f00 	cmp.w	r9, #0
 80081a0:	f000 80de 	beq.w	8008360 <_scanf_float+0x418>
 80081a4:	0591      	lsls	r1, r2, #22
 80081a6:	bf58      	it	pl
 80081a8:	9902      	ldrpl	r1, [sp, #8]
 80081aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081ae:	bf58      	it	pl
 80081b0:	eba9 0101 	subpl.w	r1, r9, r1
 80081b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80081b8:	bf58      	it	pl
 80081ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	f04f 0900 	mov.w	r9, #0
 80081c4:	e789      	b.n	80080da <_scanf_float+0x192>
 80081c6:	f04f 0a03 	mov.w	sl, #3
 80081ca:	e786      	b.n	80080da <_scanf_float+0x192>
 80081cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80081d0:	4639      	mov	r1, r7
 80081d2:	4640      	mov	r0, r8
 80081d4:	4798      	blx	r3
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f43f aedb 	beq.w	8007f92 <_scanf_float+0x4a>
 80081dc:	e6e6      	b.n	8007fac <_scanf_float+0x64>
 80081de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081e6:	463a      	mov	r2, r7
 80081e8:	4640      	mov	r0, r8
 80081ea:	4798      	blx	r3
 80081ec:	6923      	ldr	r3, [r4, #16]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	e6e8      	b.n	8007fc6 <_scanf_float+0x7e>
 80081f4:	1e6b      	subs	r3, r5, #1
 80081f6:	2b06      	cmp	r3, #6
 80081f8:	d824      	bhi.n	8008244 <_scanf_float+0x2fc>
 80081fa:	2d02      	cmp	r5, #2
 80081fc:	d836      	bhi.n	800826c <_scanf_float+0x324>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	429e      	cmp	r6, r3
 8008202:	f67f aee4 	bls.w	8007fce <_scanf_float+0x86>
 8008206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800820a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800820e:	463a      	mov	r2, r7
 8008210:	4640      	mov	r0, r8
 8008212:	4798      	blx	r3
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	3b01      	subs	r3, #1
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	e7f0      	b.n	80081fe <_scanf_float+0x2b6>
 800821c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008220:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008224:	463a      	mov	r2, r7
 8008226:	4640      	mov	r0, r8
 8008228:	4798      	blx	r3
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	3b01      	subs	r3, #1
 800822e:	6123      	str	r3, [r4, #16]
 8008230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008234:	fa5f fa8a 	uxtb.w	sl, sl
 8008238:	f1ba 0f02 	cmp.w	sl, #2
 800823c:	d1ee      	bne.n	800821c <_scanf_float+0x2d4>
 800823e:	3d03      	subs	r5, #3
 8008240:	b2ed      	uxtb	r5, r5
 8008242:	1b76      	subs	r6, r6, r5
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	05da      	lsls	r2, r3, #23
 8008248:	d530      	bpl.n	80082ac <_scanf_float+0x364>
 800824a:	055b      	lsls	r3, r3, #21
 800824c:	d511      	bpl.n	8008272 <_scanf_float+0x32a>
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	429e      	cmp	r6, r3
 8008252:	f67f aebc 	bls.w	8007fce <_scanf_float+0x86>
 8008256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800825a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800825e:	463a      	mov	r2, r7
 8008260:	4640      	mov	r0, r8
 8008262:	4798      	blx	r3
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	3b01      	subs	r3, #1
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	e7f0      	b.n	800824e <_scanf_float+0x306>
 800826c:	46aa      	mov	sl, r5
 800826e:	46b3      	mov	fp, r6
 8008270:	e7de      	b.n	8008230 <_scanf_float+0x2e8>
 8008272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008276:	6923      	ldr	r3, [r4, #16]
 8008278:	2965      	cmp	r1, #101	@ 0x65
 800827a:	f103 33ff 	add.w	r3, r3, #4294967295
 800827e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	d00c      	beq.n	80082a0 <_scanf_float+0x358>
 8008286:	2945      	cmp	r1, #69	@ 0x45
 8008288:	d00a      	beq.n	80082a0 <_scanf_float+0x358>
 800828a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800828e:	463a      	mov	r2, r7
 8008290:	4640      	mov	r0, r8
 8008292:	4798      	blx	r3
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800829a:	3b01      	subs	r3, #1
 800829c:	1eb5      	subs	r5, r6, #2
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082a4:	463a      	mov	r2, r7
 80082a6:	4640      	mov	r0, r8
 80082a8:	4798      	blx	r3
 80082aa:	462e      	mov	r6, r5
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	f012 0210 	ands.w	r2, r2, #16
 80082b2:	d001      	beq.n	80082b8 <_scanf_float+0x370>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e68b      	b.n	8007fd0 <_scanf_float+0x88>
 80082b8:	7032      	strb	r2, [r6, #0]
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c4:	d11c      	bne.n	8008300 <_scanf_float+0x3b8>
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	454b      	cmp	r3, r9
 80082ca:	eba3 0209 	sub.w	r2, r3, r9
 80082ce:	d123      	bne.n	8008318 <_scanf_float+0x3d0>
 80082d0:	9901      	ldr	r1, [sp, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	4640      	mov	r0, r8
 80082d6:	f002 fb53 	bl	800a980 <_strtod_r>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	6821      	ldr	r1, [r4, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f011 0f02 	tst.w	r1, #2
 80082e4:	ec57 6b10 	vmov	r6, r7, d0
 80082e8:	f103 0204 	add.w	r2, r3, #4
 80082ec:	d01f      	beq.n	800832e <_scanf_float+0x3e6>
 80082ee:	9903      	ldr	r1, [sp, #12]
 80082f0:	600a      	str	r2, [r1, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	e9c3 6700 	strd	r6, r7, [r3]
 80082f8:	68e3      	ldr	r3, [r4, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60e3      	str	r3, [r4, #12]
 80082fe:	e7d9      	b.n	80082b4 <_scanf_float+0x36c>
 8008300:	9b04      	ldr	r3, [sp, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0e4      	beq.n	80082d0 <_scanf_float+0x388>
 8008306:	9905      	ldr	r1, [sp, #20]
 8008308:	230a      	movs	r3, #10
 800830a:	3101      	adds	r1, #1
 800830c:	4640      	mov	r0, r8
 800830e:	f002 fbb7 	bl	800aa80 <_strtol_r>
 8008312:	9b04      	ldr	r3, [sp, #16]
 8008314:	9e05      	ldr	r6, [sp, #20]
 8008316:	1ac2      	subs	r2, r0, r3
 8008318:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800831c:	429e      	cmp	r6, r3
 800831e:	bf28      	it	cs
 8008320:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008324:	4910      	ldr	r1, [pc, #64]	@ (8008368 <_scanf_float+0x420>)
 8008326:	4630      	mov	r0, r6
 8008328:	f000 f8e4 	bl	80084f4 <siprintf>
 800832c:	e7d0      	b.n	80082d0 <_scanf_float+0x388>
 800832e:	f011 0f04 	tst.w	r1, #4
 8008332:	9903      	ldr	r1, [sp, #12]
 8008334:	600a      	str	r2, [r1, #0]
 8008336:	d1dc      	bne.n	80082f2 <_scanf_float+0x3aa>
 8008338:	681d      	ldr	r5, [r3, #0]
 800833a:	4632      	mov	r2, r6
 800833c:	463b      	mov	r3, r7
 800833e:	4630      	mov	r0, r6
 8008340:	4639      	mov	r1, r7
 8008342:	f7f8 fc03 	bl	8000b4c <__aeabi_dcmpun>
 8008346:	b128      	cbz	r0, 8008354 <_scanf_float+0x40c>
 8008348:	4808      	ldr	r0, [pc, #32]	@ (800836c <_scanf_float+0x424>)
 800834a:	f000 f9c7 	bl	80086dc <nanf>
 800834e:	ed85 0a00 	vstr	s0, [r5]
 8008352:	e7d1      	b.n	80082f8 <_scanf_float+0x3b0>
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	f7f8 fc56 	bl	8000c08 <__aeabi_d2f>
 800835c:	6028      	str	r0, [r5, #0]
 800835e:	e7cb      	b.n	80082f8 <_scanf_float+0x3b0>
 8008360:	f04f 0900 	mov.w	r9, #0
 8008364:	e629      	b.n	8007fba <_scanf_float+0x72>
 8008366:	bf00      	nop
 8008368:	0800bc80 	.word	0x0800bc80
 800836c:	0800c015 	.word	0x0800c015

08008370 <std>:
 8008370:	2300      	movs	r3, #0
 8008372:	b510      	push	{r4, lr}
 8008374:	4604      	mov	r4, r0
 8008376:	e9c0 3300 	strd	r3, r3, [r0]
 800837a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800837e:	6083      	str	r3, [r0, #8]
 8008380:	8181      	strh	r1, [r0, #12]
 8008382:	6643      	str	r3, [r0, #100]	@ 0x64
 8008384:	81c2      	strh	r2, [r0, #14]
 8008386:	6183      	str	r3, [r0, #24]
 8008388:	4619      	mov	r1, r3
 800838a:	2208      	movs	r2, #8
 800838c:	305c      	adds	r0, #92	@ 0x5c
 800838e:	f000 f914 	bl	80085ba <memset>
 8008392:	4b0d      	ldr	r3, [pc, #52]	@ (80083c8 <std+0x58>)
 8008394:	6263      	str	r3, [r4, #36]	@ 0x24
 8008396:	4b0d      	ldr	r3, [pc, #52]	@ (80083cc <std+0x5c>)
 8008398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <std+0x60>)
 800839c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800839e:	4b0d      	ldr	r3, [pc, #52]	@ (80083d4 <std+0x64>)
 80083a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80083a2:	4b0d      	ldr	r3, [pc, #52]	@ (80083d8 <std+0x68>)
 80083a4:	6224      	str	r4, [r4, #32]
 80083a6:	429c      	cmp	r4, r3
 80083a8:	d006      	beq.n	80083b8 <std+0x48>
 80083aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083ae:	4294      	cmp	r4, r2
 80083b0:	d002      	beq.n	80083b8 <std+0x48>
 80083b2:	33d0      	adds	r3, #208	@ 0xd0
 80083b4:	429c      	cmp	r4, r3
 80083b6:	d105      	bne.n	80083c4 <std+0x54>
 80083b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c0:	f000 b988 	b.w	80086d4 <__retarget_lock_init_recursive>
 80083c4:	bd10      	pop	{r4, pc}
 80083c6:	bf00      	nop
 80083c8:	08008535 	.word	0x08008535
 80083cc:	08008557 	.word	0x08008557
 80083d0:	0800858f 	.word	0x0800858f
 80083d4:	080085b3 	.word	0x080085b3
 80083d8:	20000484 	.word	0x20000484

080083dc <stdio_exit_handler>:
 80083dc:	4a02      	ldr	r2, [pc, #8]	@ (80083e8 <stdio_exit_handler+0xc>)
 80083de:	4903      	ldr	r1, [pc, #12]	@ (80083ec <stdio_exit_handler+0x10>)
 80083e0:	4803      	ldr	r0, [pc, #12]	@ (80083f0 <stdio_exit_handler+0x14>)
 80083e2:	f000 b869 	b.w	80084b8 <_fwalk_sglue>
 80083e6:	bf00      	nop
 80083e8:	20000020 	.word	0x20000020
 80083ec:	0800ae3d 	.word	0x0800ae3d
 80083f0:	20000030 	.word	0x20000030

080083f4 <cleanup_stdio>:
 80083f4:	6841      	ldr	r1, [r0, #4]
 80083f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <cleanup_stdio+0x34>)
 80083f8:	4299      	cmp	r1, r3
 80083fa:	b510      	push	{r4, lr}
 80083fc:	4604      	mov	r4, r0
 80083fe:	d001      	beq.n	8008404 <cleanup_stdio+0x10>
 8008400:	f002 fd1c 	bl	800ae3c <_fflush_r>
 8008404:	68a1      	ldr	r1, [r4, #8]
 8008406:	4b09      	ldr	r3, [pc, #36]	@ (800842c <cleanup_stdio+0x38>)
 8008408:	4299      	cmp	r1, r3
 800840a:	d002      	beq.n	8008412 <cleanup_stdio+0x1e>
 800840c:	4620      	mov	r0, r4
 800840e:	f002 fd15 	bl	800ae3c <_fflush_r>
 8008412:	68e1      	ldr	r1, [r4, #12]
 8008414:	4b06      	ldr	r3, [pc, #24]	@ (8008430 <cleanup_stdio+0x3c>)
 8008416:	4299      	cmp	r1, r3
 8008418:	d004      	beq.n	8008424 <cleanup_stdio+0x30>
 800841a:	4620      	mov	r0, r4
 800841c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008420:	f002 bd0c 	b.w	800ae3c <_fflush_r>
 8008424:	bd10      	pop	{r4, pc}
 8008426:	bf00      	nop
 8008428:	20000484 	.word	0x20000484
 800842c:	200004ec 	.word	0x200004ec
 8008430:	20000554 	.word	0x20000554

08008434 <global_stdio_init.part.0>:
 8008434:	b510      	push	{r4, lr}
 8008436:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <global_stdio_init.part.0+0x30>)
 8008438:	4c0b      	ldr	r4, [pc, #44]	@ (8008468 <global_stdio_init.part.0+0x34>)
 800843a:	4a0c      	ldr	r2, [pc, #48]	@ (800846c <global_stdio_init.part.0+0x38>)
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	4620      	mov	r0, r4
 8008440:	2200      	movs	r2, #0
 8008442:	2104      	movs	r1, #4
 8008444:	f7ff ff94 	bl	8008370 <std>
 8008448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800844c:	2201      	movs	r2, #1
 800844e:	2109      	movs	r1, #9
 8008450:	f7ff ff8e 	bl	8008370 <std>
 8008454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008458:	2202      	movs	r2, #2
 800845a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800845e:	2112      	movs	r1, #18
 8008460:	f7ff bf86 	b.w	8008370 <std>
 8008464:	200005bc 	.word	0x200005bc
 8008468:	20000484 	.word	0x20000484
 800846c:	080083dd 	.word	0x080083dd

08008470 <__sfp_lock_acquire>:
 8008470:	4801      	ldr	r0, [pc, #4]	@ (8008478 <__sfp_lock_acquire+0x8>)
 8008472:	f000 b930 	b.w	80086d6 <__retarget_lock_acquire_recursive>
 8008476:	bf00      	nop
 8008478:	200005c5 	.word	0x200005c5

0800847c <__sfp_lock_release>:
 800847c:	4801      	ldr	r0, [pc, #4]	@ (8008484 <__sfp_lock_release+0x8>)
 800847e:	f000 b92b 	b.w	80086d8 <__retarget_lock_release_recursive>
 8008482:	bf00      	nop
 8008484:	200005c5 	.word	0x200005c5

08008488 <__sinit>:
 8008488:	b510      	push	{r4, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	f7ff fff0 	bl	8008470 <__sfp_lock_acquire>
 8008490:	6a23      	ldr	r3, [r4, #32]
 8008492:	b11b      	cbz	r3, 800849c <__sinit+0x14>
 8008494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008498:	f7ff bff0 	b.w	800847c <__sfp_lock_release>
 800849c:	4b04      	ldr	r3, [pc, #16]	@ (80084b0 <__sinit+0x28>)
 800849e:	6223      	str	r3, [r4, #32]
 80084a0:	4b04      	ldr	r3, [pc, #16]	@ (80084b4 <__sinit+0x2c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1f5      	bne.n	8008494 <__sinit+0xc>
 80084a8:	f7ff ffc4 	bl	8008434 <global_stdio_init.part.0>
 80084ac:	e7f2      	b.n	8008494 <__sinit+0xc>
 80084ae:	bf00      	nop
 80084b0:	080083f5 	.word	0x080083f5
 80084b4:	200005bc 	.word	0x200005bc

080084b8 <_fwalk_sglue>:
 80084b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084bc:	4607      	mov	r7, r0
 80084be:	4688      	mov	r8, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	2600      	movs	r6, #0
 80084c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084c8:	f1b9 0901 	subs.w	r9, r9, #1
 80084cc:	d505      	bpl.n	80084da <_fwalk_sglue+0x22>
 80084ce:	6824      	ldr	r4, [r4, #0]
 80084d0:	2c00      	cmp	r4, #0
 80084d2:	d1f7      	bne.n	80084c4 <_fwalk_sglue+0xc>
 80084d4:	4630      	mov	r0, r6
 80084d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084da:	89ab      	ldrh	r3, [r5, #12]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d907      	bls.n	80084f0 <_fwalk_sglue+0x38>
 80084e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084e4:	3301      	adds	r3, #1
 80084e6:	d003      	beq.n	80084f0 <_fwalk_sglue+0x38>
 80084e8:	4629      	mov	r1, r5
 80084ea:	4638      	mov	r0, r7
 80084ec:	47c0      	blx	r8
 80084ee:	4306      	orrs	r6, r0
 80084f0:	3568      	adds	r5, #104	@ 0x68
 80084f2:	e7e9      	b.n	80084c8 <_fwalk_sglue+0x10>

080084f4 <siprintf>:
 80084f4:	b40e      	push	{r1, r2, r3}
 80084f6:	b500      	push	{lr}
 80084f8:	b09c      	sub	sp, #112	@ 0x70
 80084fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80084fc:	9002      	str	r0, [sp, #8]
 80084fe:	9006      	str	r0, [sp, #24]
 8008500:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008504:	4809      	ldr	r0, [pc, #36]	@ (800852c <siprintf+0x38>)
 8008506:	9107      	str	r1, [sp, #28]
 8008508:	9104      	str	r1, [sp, #16]
 800850a:	4909      	ldr	r1, [pc, #36]	@ (8008530 <siprintf+0x3c>)
 800850c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008510:	9105      	str	r1, [sp, #20]
 8008512:	6800      	ldr	r0, [r0, #0]
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	a902      	add	r1, sp, #8
 8008518:	f002 fb10 	bl	800ab3c <_svfiprintf_r>
 800851c:	9b02      	ldr	r3, [sp, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	701a      	strb	r2, [r3, #0]
 8008522:	b01c      	add	sp, #112	@ 0x70
 8008524:	f85d eb04 	ldr.w	lr, [sp], #4
 8008528:	b003      	add	sp, #12
 800852a:	4770      	bx	lr
 800852c:	2000002c 	.word	0x2000002c
 8008530:	ffff0208 	.word	0xffff0208

08008534 <__sread>:
 8008534:	b510      	push	{r4, lr}
 8008536:	460c      	mov	r4, r1
 8008538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853c:	f000 f86c 	bl	8008618 <_read_r>
 8008540:	2800      	cmp	r0, #0
 8008542:	bfab      	itete	ge
 8008544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008546:	89a3      	ldrhlt	r3, [r4, #12]
 8008548:	181b      	addge	r3, r3, r0
 800854a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800854e:	bfac      	ite	ge
 8008550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008552:	81a3      	strhlt	r3, [r4, #12]
 8008554:	bd10      	pop	{r4, pc}

08008556 <__swrite>:
 8008556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855a:	461f      	mov	r7, r3
 800855c:	898b      	ldrh	r3, [r1, #12]
 800855e:	05db      	lsls	r3, r3, #23
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4616      	mov	r6, r2
 8008566:	d505      	bpl.n	8008574 <__swrite+0x1e>
 8008568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856c:	2302      	movs	r3, #2
 800856e:	2200      	movs	r2, #0
 8008570:	f000 f840 	bl	80085f4 <_lseek_r>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800857a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	4632      	mov	r2, r6
 8008582:	463b      	mov	r3, r7
 8008584:	4628      	mov	r0, r5
 8008586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	f000 b867 	b.w	800865c <_write_r>

0800858e <__sseek>:
 800858e:	b510      	push	{r4, lr}
 8008590:	460c      	mov	r4, r1
 8008592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008596:	f000 f82d 	bl	80085f4 <_lseek_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	bf15      	itete	ne
 80085a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085aa:	81a3      	strheq	r3, [r4, #12]
 80085ac:	bf18      	it	ne
 80085ae:	81a3      	strhne	r3, [r4, #12]
 80085b0:	bd10      	pop	{r4, pc}

080085b2 <__sclose>:
 80085b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b6:	f000 b80d 	b.w	80085d4 <_close_r>

080085ba <memset>:
 80085ba:	4402      	add	r2, r0
 80085bc:	4603      	mov	r3, r0
 80085be:	4293      	cmp	r3, r2
 80085c0:	d100      	bne.n	80085c4 <memset+0xa>
 80085c2:	4770      	bx	lr
 80085c4:	f803 1b01 	strb.w	r1, [r3], #1
 80085c8:	e7f9      	b.n	80085be <memset+0x4>
	...

080085cc <_localeconv_r>:
 80085cc:	4800      	ldr	r0, [pc, #0]	@ (80085d0 <_localeconv_r+0x4>)
 80085ce:	4770      	bx	lr
 80085d0:	2000016c 	.word	0x2000016c

080085d4 <_close_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d06      	ldr	r5, [pc, #24]	@ (80085f0 <_close_r+0x1c>)
 80085d8:	2300      	movs	r3, #0
 80085da:	4604      	mov	r4, r0
 80085dc:	4608      	mov	r0, r1
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	f7f9 feee 	bl	80023c0 <_close>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_close_r+0x1a>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_close_r+0x1a>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	200005c0 	.word	0x200005c0

080085f4 <_lseek_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d07      	ldr	r5, [pc, #28]	@ (8008614 <_lseek_r+0x20>)
 80085f8:	4604      	mov	r4, r0
 80085fa:	4608      	mov	r0, r1
 80085fc:	4611      	mov	r1, r2
 80085fe:	2200      	movs	r2, #0
 8008600:	602a      	str	r2, [r5, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	f7f9 ff03 	bl	800240e <_lseek>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_lseek_r+0x1e>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_lseek_r+0x1e>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	200005c0 	.word	0x200005c0

08008618 <_read_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d07      	ldr	r5, [pc, #28]	@ (8008638 <_read_r+0x20>)
 800861c:	4604      	mov	r4, r0
 800861e:	4608      	mov	r0, r1
 8008620:	4611      	mov	r1, r2
 8008622:	2200      	movs	r2, #0
 8008624:	602a      	str	r2, [r5, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	f7f9 fe91 	bl	800234e <_read>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_read_r+0x1e>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_read_r+0x1e>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	200005c0 	.word	0x200005c0

0800863c <_sbrk_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d06      	ldr	r5, [pc, #24]	@ (8008658 <_sbrk_r+0x1c>)
 8008640:	2300      	movs	r3, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	f7f9 feee 	bl	8002428 <_sbrk>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_sbrk_r+0x1a>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_sbrk_r+0x1a>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	200005c0 	.word	0x200005c0

0800865c <_write_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d07      	ldr	r5, [pc, #28]	@ (800867c <_write_r+0x20>)
 8008660:	4604      	mov	r4, r0
 8008662:	4608      	mov	r0, r1
 8008664:	4611      	mov	r1, r2
 8008666:	2200      	movs	r2, #0
 8008668:	602a      	str	r2, [r5, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f7f9 fe8c 	bl	8002388 <_write>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_write_r+0x1e>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_write_r+0x1e>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	200005c0 	.word	0x200005c0

08008680 <__errno>:
 8008680:	4b01      	ldr	r3, [pc, #4]	@ (8008688 <__errno+0x8>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	2000002c 	.word	0x2000002c

0800868c <__libc_init_array>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4d0d      	ldr	r5, [pc, #52]	@ (80086c4 <__libc_init_array+0x38>)
 8008690:	4c0d      	ldr	r4, [pc, #52]	@ (80086c8 <__libc_init_array+0x3c>)
 8008692:	1b64      	subs	r4, r4, r5
 8008694:	10a4      	asrs	r4, r4, #2
 8008696:	2600      	movs	r6, #0
 8008698:	42a6      	cmp	r6, r4
 800869a:	d109      	bne.n	80086b0 <__libc_init_array+0x24>
 800869c:	4d0b      	ldr	r5, [pc, #44]	@ (80086cc <__libc_init_array+0x40>)
 800869e:	4c0c      	ldr	r4, [pc, #48]	@ (80086d0 <__libc_init_array+0x44>)
 80086a0:	f003 fa98 	bl	800bbd4 <_init>
 80086a4:	1b64      	subs	r4, r4, r5
 80086a6:	10a4      	asrs	r4, r4, #2
 80086a8:	2600      	movs	r6, #0
 80086aa:	42a6      	cmp	r6, r4
 80086ac:	d105      	bne.n	80086ba <__libc_init_array+0x2e>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b4:	4798      	blx	r3
 80086b6:	3601      	adds	r6, #1
 80086b8:	e7ee      	b.n	8008698 <__libc_init_array+0xc>
 80086ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80086be:	4798      	blx	r3
 80086c0:	3601      	adds	r6, #1
 80086c2:	e7f2      	b.n	80086aa <__libc_init_array+0x1e>
 80086c4:	0800c080 	.word	0x0800c080
 80086c8:	0800c080 	.word	0x0800c080
 80086cc:	0800c080 	.word	0x0800c080
 80086d0:	0800c084 	.word	0x0800c084

080086d4 <__retarget_lock_init_recursive>:
 80086d4:	4770      	bx	lr

080086d6 <__retarget_lock_acquire_recursive>:
 80086d6:	4770      	bx	lr

080086d8 <__retarget_lock_release_recursive>:
 80086d8:	4770      	bx	lr
	...

080086dc <nanf>:
 80086dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80086e4 <nanf+0x8>
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	7fc00000 	.word	0x7fc00000

080086e8 <quorem>:
 80086e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	6903      	ldr	r3, [r0, #16]
 80086ee:	690c      	ldr	r4, [r1, #16]
 80086f0:	42a3      	cmp	r3, r4
 80086f2:	4607      	mov	r7, r0
 80086f4:	db7e      	blt.n	80087f4 <quorem+0x10c>
 80086f6:	3c01      	subs	r4, #1
 80086f8:	f101 0814 	add.w	r8, r1, #20
 80086fc:	00a3      	lsls	r3, r4, #2
 80086fe:	f100 0514 	add.w	r5, r0, #20
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800870e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008712:	3301      	adds	r3, #1
 8008714:	429a      	cmp	r2, r3
 8008716:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800871a:	fbb2 f6f3 	udiv	r6, r2, r3
 800871e:	d32e      	bcc.n	800877e <quorem+0x96>
 8008720:	f04f 0a00 	mov.w	sl, #0
 8008724:	46c4      	mov	ip, r8
 8008726:	46ae      	mov	lr, r5
 8008728:	46d3      	mov	fp, sl
 800872a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800872e:	b298      	uxth	r0, r3
 8008730:	fb06 a000 	mla	r0, r6, r0, sl
 8008734:	0c02      	lsrs	r2, r0, #16
 8008736:	0c1b      	lsrs	r3, r3, #16
 8008738:	fb06 2303 	mla	r3, r6, r3, r2
 800873c:	f8de 2000 	ldr.w	r2, [lr]
 8008740:	b280      	uxth	r0, r0
 8008742:	b292      	uxth	r2, r2
 8008744:	1a12      	subs	r2, r2, r0
 8008746:	445a      	add	r2, fp
 8008748:	f8de 0000 	ldr.w	r0, [lr]
 800874c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008750:	b29b      	uxth	r3, r3
 8008752:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008756:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800875a:	b292      	uxth	r2, r2
 800875c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008760:	45e1      	cmp	r9, ip
 8008762:	f84e 2b04 	str.w	r2, [lr], #4
 8008766:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800876a:	d2de      	bcs.n	800872a <quorem+0x42>
 800876c:	9b00      	ldr	r3, [sp, #0]
 800876e:	58eb      	ldr	r3, [r5, r3]
 8008770:	b92b      	cbnz	r3, 800877e <quorem+0x96>
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	3b04      	subs	r3, #4
 8008776:	429d      	cmp	r5, r3
 8008778:	461a      	mov	r2, r3
 800877a:	d32f      	bcc.n	80087dc <quorem+0xf4>
 800877c:	613c      	str	r4, [r7, #16]
 800877e:	4638      	mov	r0, r7
 8008780:	f001 f90c 	bl	800999c <__mcmp>
 8008784:	2800      	cmp	r0, #0
 8008786:	db25      	blt.n	80087d4 <quorem+0xec>
 8008788:	4629      	mov	r1, r5
 800878a:	2000      	movs	r0, #0
 800878c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008790:	f8d1 c000 	ldr.w	ip, [r1]
 8008794:	fa1f fe82 	uxth.w	lr, r2
 8008798:	fa1f f38c 	uxth.w	r3, ip
 800879c:	eba3 030e 	sub.w	r3, r3, lr
 80087a0:	4403      	add	r3, r0
 80087a2:	0c12      	lsrs	r2, r2, #16
 80087a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087b2:	45c1      	cmp	r9, r8
 80087b4:	f841 3b04 	str.w	r3, [r1], #4
 80087b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087bc:	d2e6      	bcs.n	800878c <quorem+0xa4>
 80087be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087c6:	b922      	cbnz	r2, 80087d2 <quorem+0xea>
 80087c8:	3b04      	subs	r3, #4
 80087ca:	429d      	cmp	r5, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	d30b      	bcc.n	80087e8 <quorem+0x100>
 80087d0:	613c      	str	r4, [r7, #16]
 80087d2:	3601      	adds	r6, #1
 80087d4:	4630      	mov	r0, r6
 80087d6:	b003      	add	sp, #12
 80087d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	3b04      	subs	r3, #4
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	d1cb      	bne.n	800877c <quorem+0x94>
 80087e4:	3c01      	subs	r4, #1
 80087e6:	e7c6      	b.n	8008776 <quorem+0x8e>
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	3b04      	subs	r3, #4
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d1ef      	bne.n	80087d0 <quorem+0xe8>
 80087f0:	3c01      	subs	r4, #1
 80087f2:	e7ea      	b.n	80087ca <quorem+0xe2>
 80087f4:	2000      	movs	r0, #0
 80087f6:	e7ee      	b.n	80087d6 <quorem+0xee>

080087f8 <_dtoa_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	69c7      	ldr	r7, [r0, #28]
 80087fe:	b099      	sub	sp, #100	@ 0x64
 8008800:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008804:	ec55 4b10 	vmov	r4, r5, d0
 8008808:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800880a:	9109      	str	r1, [sp, #36]	@ 0x24
 800880c:	4683      	mov	fp, r0
 800880e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008810:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008812:	b97f      	cbnz	r7, 8008834 <_dtoa_r+0x3c>
 8008814:	2010      	movs	r0, #16
 8008816:	f7fe fe89 	bl	800752c <malloc>
 800881a:	4602      	mov	r2, r0
 800881c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008820:	b920      	cbnz	r0, 800882c <_dtoa_r+0x34>
 8008822:	4ba7      	ldr	r3, [pc, #668]	@ (8008ac0 <_dtoa_r+0x2c8>)
 8008824:	21ef      	movs	r1, #239	@ 0xef
 8008826:	48a7      	ldr	r0, [pc, #668]	@ (8008ac4 <_dtoa_r+0x2cc>)
 8008828:	f002 fb72 	bl	800af10 <__assert_func>
 800882c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008830:	6007      	str	r7, [r0, #0]
 8008832:	60c7      	str	r7, [r0, #12]
 8008834:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008838:	6819      	ldr	r1, [r3, #0]
 800883a:	b159      	cbz	r1, 8008854 <_dtoa_r+0x5c>
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	604a      	str	r2, [r1, #4]
 8008840:	2301      	movs	r3, #1
 8008842:	4093      	lsls	r3, r2
 8008844:	608b      	str	r3, [r1, #8]
 8008846:	4658      	mov	r0, fp
 8008848:	f000 fe24 	bl	8009494 <_Bfree>
 800884c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	1e2b      	subs	r3, r5, #0
 8008856:	bfb9      	ittee	lt
 8008858:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800885c:	9303      	strlt	r3, [sp, #12]
 800885e:	2300      	movge	r3, #0
 8008860:	6033      	strge	r3, [r6, #0]
 8008862:	9f03      	ldr	r7, [sp, #12]
 8008864:	4b98      	ldr	r3, [pc, #608]	@ (8008ac8 <_dtoa_r+0x2d0>)
 8008866:	bfbc      	itt	lt
 8008868:	2201      	movlt	r2, #1
 800886a:	6032      	strlt	r2, [r6, #0]
 800886c:	43bb      	bics	r3, r7
 800886e:	d112      	bne.n	8008896 <_dtoa_r+0x9e>
 8008870:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008872:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800887c:	4323      	orrs	r3, r4
 800887e:	f000 854d 	beq.w	800931c <_dtoa_r+0xb24>
 8008882:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008884:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008adc <_dtoa_r+0x2e4>
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 854f 	beq.w	800932c <_dtoa_r+0xb34>
 800888e:	f10a 0303 	add.w	r3, sl, #3
 8008892:	f000 bd49 	b.w	8009328 <_dtoa_r+0xb30>
 8008896:	ed9d 7b02 	vldr	d7, [sp, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	ec51 0b17 	vmov	r0, r1, d7
 80088a0:	2300      	movs	r3, #0
 80088a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80088a6:	f7f8 f91f 	bl	8000ae8 <__aeabi_dcmpeq>
 80088aa:	4680      	mov	r8, r0
 80088ac:	b158      	cbz	r0, 80088c6 <_dtoa_r+0xce>
 80088ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088b0:	2301      	movs	r3, #1
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088b6:	b113      	cbz	r3, 80088be <_dtoa_r+0xc6>
 80088b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088ba:	4b84      	ldr	r3, [pc, #528]	@ (8008acc <_dtoa_r+0x2d4>)
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008ae0 <_dtoa_r+0x2e8>
 80088c2:	f000 bd33 	b.w	800932c <_dtoa_r+0xb34>
 80088c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80088ca:	aa16      	add	r2, sp, #88	@ 0x58
 80088cc:	a917      	add	r1, sp, #92	@ 0x5c
 80088ce:	4658      	mov	r0, fp
 80088d0:	f001 f984 	bl	8009bdc <__d2b>
 80088d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80088d8:	4681      	mov	r9, r0
 80088da:	2e00      	cmp	r6, #0
 80088dc:	d077      	beq.n	80089ce <_dtoa_r+0x1d6>
 80088de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80088e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80088f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80088f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80088f8:	4619      	mov	r1, r3
 80088fa:	2200      	movs	r2, #0
 80088fc:	4b74      	ldr	r3, [pc, #464]	@ (8008ad0 <_dtoa_r+0x2d8>)
 80088fe:	f7f7 fcd3 	bl	80002a8 <__aeabi_dsub>
 8008902:	a369      	add	r3, pc, #420	@ (adr r3, 8008aa8 <_dtoa_r+0x2b0>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fe86 	bl	8000618 <__aeabi_dmul>
 800890c:	a368      	add	r3, pc, #416	@ (adr r3, 8008ab0 <_dtoa_r+0x2b8>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fccb 	bl	80002ac <__adddf3>
 8008916:	4604      	mov	r4, r0
 8008918:	4630      	mov	r0, r6
 800891a:	460d      	mov	r5, r1
 800891c:	f7f7 fe12 	bl	8000544 <__aeabi_i2d>
 8008920:	a365      	add	r3, pc, #404	@ (adr r3, 8008ab8 <_dtoa_r+0x2c0>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fe77 	bl	8000618 <__aeabi_dmul>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4620      	mov	r0, r4
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 fcbb 	bl	80002ac <__adddf3>
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
 800893a:	f7f8 f91d 	bl	8000b78 <__aeabi_d2iz>
 800893e:	2200      	movs	r2, #0
 8008940:	4607      	mov	r7, r0
 8008942:	2300      	movs	r3, #0
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f8 f8d8 	bl	8000afc <__aeabi_dcmplt>
 800894c:	b140      	cbz	r0, 8008960 <_dtoa_r+0x168>
 800894e:	4638      	mov	r0, r7
 8008950:	f7f7 fdf8 	bl	8000544 <__aeabi_i2d>
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	f7f8 f8c6 	bl	8000ae8 <__aeabi_dcmpeq>
 800895c:	b900      	cbnz	r0, 8008960 <_dtoa_r+0x168>
 800895e:	3f01      	subs	r7, #1
 8008960:	2f16      	cmp	r7, #22
 8008962:	d851      	bhi.n	8008a08 <_dtoa_r+0x210>
 8008964:	4b5b      	ldr	r3, [pc, #364]	@ (8008ad4 <_dtoa_r+0x2dc>)
 8008966:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008972:	f7f8 f8c3 	bl	8000afc <__aeabi_dcmplt>
 8008976:	2800      	cmp	r0, #0
 8008978:	d048      	beq.n	8008a0c <_dtoa_r+0x214>
 800897a:	3f01      	subs	r7, #1
 800897c:	2300      	movs	r3, #0
 800897e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008980:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008982:	1b9b      	subs	r3, r3, r6
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	bf44      	itt	mi
 8008988:	f1c3 0801 	rsbmi	r8, r3, #1
 800898c:	2300      	movmi	r3, #0
 800898e:	9208      	str	r2, [sp, #32]
 8008990:	bf54      	ite	pl
 8008992:	f04f 0800 	movpl.w	r8, #0
 8008996:	9308      	strmi	r3, [sp, #32]
 8008998:	2f00      	cmp	r7, #0
 800899a:	db39      	blt.n	8008a10 <_dtoa_r+0x218>
 800899c:	9b08      	ldr	r3, [sp, #32]
 800899e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80089a0:	443b      	add	r3, r7
 80089a2:	9308      	str	r3, [sp, #32]
 80089a4:	2300      	movs	r3, #0
 80089a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	d864      	bhi.n	8008a78 <_dtoa_r+0x280>
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	bfc4      	itt	gt
 80089b2:	3b04      	subgt	r3, #4
 80089b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b8:	f1a3 0302 	sub.w	r3, r3, #2
 80089bc:	bfcc      	ite	gt
 80089be:	2400      	movgt	r4, #0
 80089c0:	2401      	movle	r4, #1
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d863      	bhi.n	8008a8e <_dtoa_r+0x296>
 80089c6:	e8df f003 	tbb	[pc, r3]
 80089ca:	372a      	.short	0x372a
 80089cc:	5535      	.short	0x5535
 80089ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80089d2:	441e      	add	r6, r3
 80089d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80089d8:	2b20      	cmp	r3, #32
 80089da:	bfc1      	itttt	gt
 80089dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80089e0:	409f      	lslgt	r7, r3
 80089e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80089e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80089ea:	bfd6      	itet	le
 80089ec:	f1c3 0320 	rsble	r3, r3, #32
 80089f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80089f4:	fa04 f003 	lslle.w	r0, r4, r3
 80089f8:	f7f7 fd94 	bl	8000524 <__aeabi_ui2d>
 80089fc:	2201      	movs	r2, #1
 80089fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a02:	3e01      	subs	r6, #1
 8008a04:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a06:	e777      	b.n	80088f8 <_dtoa_r+0x100>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e7b8      	b.n	800897e <_dtoa_r+0x186>
 8008a0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a0e:	e7b7      	b.n	8008980 <_dtoa_r+0x188>
 8008a10:	427b      	negs	r3, r7
 8008a12:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a14:	2300      	movs	r3, #0
 8008a16:	eba8 0807 	sub.w	r8, r8, r7
 8008a1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a1c:	e7c4      	b.n	80089a8 <_dtoa_r+0x1b0>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dc35      	bgt.n	8008a94 <_dtoa_r+0x29c>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a32:	e00b      	b.n	8008a4c <_dtoa_r+0x254>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e7f3      	b.n	8008a20 <_dtoa_r+0x228>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a3e:	18fb      	adds	r3, r7, r3
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	9307      	str	r3, [sp, #28]
 8008a48:	bfb8      	it	lt
 8008a4a:	2301      	movlt	r3, #1
 8008a4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a50:	2100      	movs	r1, #0
 8008a52:	2204      	movs	r2, #4
 8008a54:	f102 0514 	add.w	r5, r2, #20
 8008a58:	429d      	cmp	r5, r3
 8008a5a:	d91f      	bls.n	8008a9c <_dtoa_r+0x2a4>
 8008a5c:	6041      	str	r1, [r0, #4]
 8008a5e:	4658      	mov	r0, fp
 8008a60:	f000 fcd8 	bl	8009414 <_Balloc>
 8008a64:	4682      	mov	sl, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d13c      	bne.n	8008ae4 <_dtoa_r+0x2ec>
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad8 <_dtoa_r+0x2e0>)
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a72:	e6d8      	b.n	8008826 <_dtoa_r+0x2e>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e7e0      	b.n	8008a3a <_dtoa_r+0x242>
 8008a78:	2401      	movs	r4, #1
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a80:	f04f 33ff 	mov.w	r3, #4294967295
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2312      	movs	r3, #18
 8008a8c:	e7d0      	b.n	8008a30 <_dtoa_r+0x238>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a92:	e7f5      	b.n	8008a80 <_dtoa_r+0x288>
 8008a94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	9307      	str	r3, [sp, #28]
 8008a9a:	e7d7      	b.n	8008a4c <_dtoa_r+0x254>
 8008a9c:	3101      	adds	r1, #1
 8008a9e:	0052      	lsls	r2, r2, #1
 8008aa0:	e7d8      	b.n	8008a54 <_dtoa_r+0x25c>
 8008aa2:	bf00      	nop
 8008aa4:	f3af 8000 	nop.w
 8008aa8:	636f4361 	.word	0x636f4361
 8008aac:	3fd287a7 	.word	0x3fd287a7
 8008ab0:	8b60c8b3 	.word	0x8b60c8b3
 8008ab4:	3fc68a28 	.word	0x3fc68a28
 8008ab8:	509f79fb 	.word	0x509f79fb
 8008abc:	3fd34413 	.word	0x3fd34413
 8008ac0:	0800bc92 	.word	0x0800bc92
 8008ac4:	0800bca9 	.word	0x0800bca9
 8008ac8:	7ff00000 	.word	0x7ff00000
 8008acc:	0800bc5d 	.word	0x0800bc5d
 8008ad0:	3ff80000 	.word	0x3ff80000
 8008ad4:	0800bda0 	.word	0x0800bda0
 8008ad8:	0800bd01 	.word	0x0800bd01
 8008adc:	0800bc8e 	.word	0x0800bc8e
 8008ae0:	0800bc5c 	.word	0x0800bc5c
 8008ae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ae8:	6018      	str	r0, [r3, #0]
 8008aea:	9b07      	ldr	r3, [sp, #28]
 8008aec:	2b0e      	cmp	r3, #14
 8008aee:	f200 80a4 	bhi.w	8008c3a <_dtoa_r+0x442>
 8008af2:	2c00      	cmp	r4, #0
 8008af4:	f000 80a1 	beq.w	8008c3a <_dtoa_r+0x442>
 8008af8:	2f00      	cmp	r7, #0
 8008afa:	dd33      	ble.n	8008b64 <_dtoa_r+0x36c>
 8008afc:	4bad      	ldr	r3, [pc, #692]	@ (8008db4 <_dtoa_r+0x5bc>)
 8008afe:	f007 020f 	and.w	r2, r7, #15
 8008b02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b06:	ed93 7b00 	vldr	d7, [r3]
 8008b0a:	05f8      	lsls	r0, r7, #23
 8008b0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b14:	d516      	bpl.n	8008b44 <_dtoa_r+0x34c>
 8008b16:	4ba8      	ldr	r3, [pc, #672]	@ (8008db8 <_dtoa_r+0x5c0>)
 8008b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b20:	f7f7 fea4 	bl	800086c <__aeabi_ddiv>
 8008b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b28:	f004 040f 	and.w	r4, r4, #15
 8008b2c:	2603      	movs	r6, #3
 8008b2e:	4da2      	ldr	r5, [pc, #648]	@ (8008db8 <_dtoa_r+0x5c0>)
 8008b30:	b954      	cbnz	r4, 8008b48 <_dtoa_r+0x350>
 8008b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b3a:	f7f7 fe97 	bl	800086c <__aeabi_ddiv>
 8008b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b42:	e028      	b.n	8008b96 <_dtoa_r+0x39e>
 8008b44:	2602      	movs	r6, #2
 8008b46:	e7f2      	b.n	8008b2e <_dtoa_r+0x336>
 8008b48:	07e1      	lsls	r1, r4, #31
 8008b4a:	d508      	bpl.n	8008b5e <_dtoa_r+0x366>
 8008b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b54:	f7f7 fd60 	bl	8000618 <__aeabi_dmul>
 8008b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	1064      	asrs	r4, r4, #1
 8008b60:	3508      	adds	r5, #8
 8008b62:	e7e5      	b.n	8008b30 <_dtoa_r+0x338>
 8008b64:	f000 80d2 	beq.w	8008d0c <_dtoa_r+0x514>
 8008b68:	427c      	negs	r4, r7
 8008b6a:	4b92      	ldr	r3, [pc, #584]	@ (8008db4 <_dtoa_r+0x5bc>)
 8008b6c:	4d92      	ldr	r5, [pc, #584]	@ (8008db8 <_dtoa_r+0x5c0>)
 8008b6e:	f004 020f 	and.w	r2, r4, #15
 8008b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b7e:	f7f7 fd4b 	bl	8000618 <__aeabi_dmul>
 8008b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b86:	1124      	asrs	r4, r4, #4
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2602      	movs	r6, #2
 8008b8c:	2c00      	cmp	r4, #0
 8008b8e:	f040 80b2 	bne.w	8008cf6 <_dtoa_r+0x4fe>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1d3      	bne.n	8008b3e <_dtoa_r+0x346>
 8008b96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 80b7 	beq.w	8008d10 <_dtoa_r+0x518>
 8008ba2:	4b86      	ldr	r3, [pc, #536]	@ (8008dbc <_dtoa_r+0x5c4>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 ffa7 	bl	8000afc <__aeabi_dcmplt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f000 80ae 	beq.w	8008d10 <_dtoa_r+0x518>
 8008bb4:	9b07      	ldr	r3, [sp, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80aa 	beq.w	8008d10 <_dtoa_r+0x518>
 8008bbc:	9b00      	ldr	r3, [sp, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dd37      	ble.n	8008c32 <_dtoa_r+0x43a>
 8008bc2:	1e7b      	subs	r3, r7, #1
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	4b7d      	ldr	r3, [pc, #500]	@ (8008dc0 <_dtoa_r+0x5c8>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 fd23 	bl	8000618 <__aeabi_dmul>
 8008bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd6:	9c00      	ldr	r4, [sp, #0]
 8008bd8:	3601      	adds	r6, #1
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7f7 fcb2 	bl	8000544 <__aeabi_i2d>
 8008be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008be4:	f7f7 fd18 	bl	8000618 <__aeabi_dmul>
 8008be8:	4b76      	ldr	r3, [pc, #472]	@ (8008dc4 <_dtoa_r+0x5cc>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	f7f7 fb5e 	bl	80002ac <__adddf3>
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008bf6:	2c00      	cmp	r4, #0
 8008bf8:	f040 808d 	bne.w	8008d16 <_dtoa_r+0x51e>
 8008bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c00:	4b71      	ldr	r3, [pc, #452]	@ (8008dc8 <_dtoa_r+0x5d0>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	f7f7 fb50 	bl	80002a8 <__aeabi_dsub>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c10:	462a      	mov	r2, r5
 8008c12:	4633      	mov	r3, r6
 8008c14:	f7f7 ff90 	bl	8000b38 <__aeabi_dcmpgt>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	f040 828b 	bne.w	8009134 <_dtoa_r+0x93c>
 8008c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c22:	462a      	mov	r2, r5
 8008c24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c28:	f7f7 ff68 	bl	8000afc <__aeabi_dcmplt>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f040 8128 	bne.w	8008e82 <_dtoa_r+0x68a>
 8008c32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f2c0 815a 	blt.w	8008ef6 <_dtoa_r+0x6fe>
 8008c42:	2f0e      	cmp	r7, #14
 8008c44:	f300 8157 	bgt.w	8008ef6 <_dtoa_r+0x6fe>
 8008c48:	4b5a      	ldr	r3, [pc, #360]	@ (8008db4 <_dtoa_r+0x5bc>)
 8008c4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c4e:	ed93 7b00 	vldr	d7, [r3]
 8008c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	ed8d 7b00 	vstr	d7, [sp]
 8008c5a:	da03      	bge.n	8008c64 <_dtoa_r+0x46c>
 8008c5c:	9b07      	ldr	r3, [sp, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f340 8101 	ble.w	8008e66 <_dtoa_r+0x66e>
 8008c64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c68:	4656      	mov	r6, sl
 8008c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7f7 fdfb 	bl	800086c <__aeabi_ddiv>
 8008c76:	f7f7 ff7f 	bl	8000b78 <__aeabi_d2iz>
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	f7f7 fc62 	bl	8000544 <__aeabi_i2d>
 8008c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c84:	f7f7 fcc8 	bl	8000618 <__aeabi_dmul>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c94:	f7f7 fb08 	bl	80002a8 <__aeabi_dsub>
 8008c98:	f806 4b01 	strb.w	r4, [r6], #1
 8008c9c:	9d07      	ldr	r5, [sp, #28]
 8008c9e:	eba6 040a 	sub.w	r4, r6, sl
 8008ca2:	42a5      	cmp	r5, r4
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	f040 8117 	bne.w	8008eda <_dtoa_r+0x6e2>
 8008cac:	f7f7 fafe 	bl	80002ac <__adddf3>
 8008cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	f7f7 ff3e 	bl	8000b38 <__aeabi_dcmpgt>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	f040 80f9 	bne.w	8008eb4 <_dtoa_r+0x6bc>
 8008cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7f7 ff0d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cce:	b118      	cbz	r0, 8008cd8 <_dtoa_r+0x4e0>
 8008cd0:	f018 0f01 	tst.w	r8, #1
 8008cd4:	f040 80ee 	bne.w	8008eb4 <_dtoa_r+0x6bc>
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f000 fbda 	bl	8009494 <_Bfree>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	7033      	strb	r3, [r6, #0]
 8008ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ce6:	3701      	adds	r7, #1
 8008ce8:	601f      	str	r7, [r3, #0]
 8008cea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 831d 	beq.w	800932c <_dtoa_r+0xb34>
 8008cf2:	601e      	str	r6, [r3, #0]
 8008cf4:	e31a      	b.n	800932c <_dtoa_r+0xb34>
 8008cf6:	07e2      	lsls	r2, r4, #31
 8008cf8:	d505      	bpl.n	8008d06 <_dtoa_r+0x50e>
 8008cfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cfe:	f7f7 fc8b 	bl	8000618 <__aeabi_dmul>
 8008d02:	3601      	adds	r6, #1
 8008d04:	2301      	movs	r3, #1
 8008d06:	1064      	asrs	r4, r4, #1
 8008d08:	3508      	adds	r5, #8
 8008d0a:	e73f      	b.n	8008b8c <_dtoa_r+0x394>
 8008d0c:	2602      	movs	r6, #2
 8008d0e:	e742      	b.n	8008b96 <_dtoa_r+0x39e>
 8008d10:	9c07      	ldr	r4, [sp, #28]
 8008d12:	9704      	str	r7, [sp, #16]
 8008d14:	e761      	b.n	8008bda <_dtoa_r+0x3e2>
 8008d16:	4b27      	ldr	r3, [pc, #156]	@ (8008db4 <_dtoa_r+0x5bc>)
 8008d18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d22:	4454      	add	r4, sl
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d053      	beq.n	8008dd0 <_dtoa_r+0x5d8>
 8008d28:	4928      	ldr	r1, [pc, #160]	@ (8008dcc <_dtoa_r+0x5d4>)
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f7f7 fd9e 	bl	800086c <__aeabi_ddiv>
 8008d30:	4633      	mov	r3, r6
 8008d32:	462a      	mov	r2, r5
 8008d34:	f7f7 fab8 	bl	80002a8 <__aeabi_dsub>
 8008d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d3c:	4656      	mov	r6, sl
 8008d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d42:	f7f7 ff19 	bl	8000b78 <__aeabi_d2iz>
 8008d46:	4605      	mov	r5, r0
 8008d48:	f7f7 fbfc 	bl	8000544 <__aeabi_i2d>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d54:	f7f7 faa8 	bl	80002a8 <__aeabi_dsub>
 8008d58:	3530      	adds	r5, #48	@ 0x30
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d62:	f806 5b01 	strb.w	r5, [r6], #1
 8008d66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d6a:	f7f7 fec7 	bl	8000afc <__aeabi_dcmplt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d171      	bne.n	8008e56 <_dtoa_r+0x65e>
 8008d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d76:	4911      	ldr	r1, [pc, #68]	@ (8008dbc <_dtoa_r+0x5c4>)
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f7f7 fa95 	bl	80002a8 <__aeabi_dsub>
 8008d7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d82:	f7f7 febb 	bl	8000afc <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f040 8095 	bne.w	8008eb6 <_dtoa_r+0x6be>
 8008d8c:	42a6      	cmp	r6, r4
 8008d8e:	f43f af50 	beq.w	8008c32 <_dtoa_r+0x43a>
 8008d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d96:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc0 <_dtoa_r+0x5c8>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f7f7 fc3d 	bl	8000618 <__aeabi_dmul>
 8008d9e:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <_dtoa_r+0x5c8>)
 8008da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008da4:	2200      	movs	r2, #0
 8008da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008daa:	f7f7 fc35 	bl	8000618 <__aeabi_dmul>
 8008dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db2:	e7c4      	b.n	8008d3e <_dtoa_r+0x546>
 8008db4:	0800bda0 	.word	0x0800bda0
 8008db8:	0800bd78 	.word	0x0800bd78
 8008dbc:	3ff00000 	.word	0x3ff00000
 8008dc0:	40240000 	.word	0x40240000
 8008dc4:	401c0000 	.word	0x401c0000
 8008dc8:	40140000 	.word	0x40140000
 8008dcc:	3fe00000 	.word	0x3fe00000
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7f7 fc20 	bl	8000618 <__aeabi_dmul>
 8008dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ddc:	9415      	str	r4, [sp, #84]	@ 0x54
 8008dde:	4656      	mov	r6, sl
 8008de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de4:	f7f7 fec8 	bl	8000b78 <__aeabi_d2iz>
 8008de8:	4605      	mov	r5, r0
 8008dea:	f7f7 fbab 	bl	8000544 <__aeabi_i2d>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008df6:	f7f7 fa57 	bl	80002a8 <__aeabi_dsub>
 8008dfa:	3530      	adds	r5, #48	@ 0x30
 8008dfc:	f806 5b01 	strb.w	r5, [r6], #1
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	d124      	bne.n	8008e5a <_dtoa_r+0x662>
 8008e10:	4bac      	ldr	r3, [pc, #688]	@ (80090c4 <_dtoa_r+0x8cc>)
 8008e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e16:	f7f7 fa49 	bl	80002ac <__adddf3>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e22:	f7f7 fe89 	bl	8000b38 <__aeabi_dcmpgt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d145      	bne.n	8008eb6 <_dtoa_r+0x6be>
 8008e2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e2e:	49a5      	ldr	r1, [pc, #660]	@ (80090c4 <_dtoa_r+0x8cc>)
 8008e30:	2000      	movs	r0, #0
 8008e32:	f7f7 fa39 	bl	80002a8 <__aeabi_dsub>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e3e:	f7f7 fe5d 	bl	8000afc <__aeabi_dcmplt>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	f43f aef5 	beq.w	8008c32 <_dtoa_r+0x43a>
 8008e48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e4a:	1e73      	subs	r3, r6, #1
 8008e4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e52:	2b30      	cmp	r3, #48	@ 0x30
 8008e54:	d0f8      	beq.n	8008e48 <_dtoa_r+0x650>
 8008e56:	9f04      	ldr	r7, [sp, #16]
 8008e58:	e73e      	b.n	8008cd8 <_dtoa_r+0x4e0>
 8008e5a:	4b9b      	ldr	r3, [pc, #620]	@ (80090c8 <_dtoa_r+0x8d0>)
 8008e5c:	f7f7 fbdc 	bl	8000618 <__aeabi_dmul>
 8008e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e64:	e7bc      	b.n	8008de0 <_dtoa_r+0x5e8>
 8008e66:	d10c      	bne.n	8008e82 <_dtoa_r+0x68a>
 8008e68:	4b98      	ldr	r3, [pc, #608]	@ (80090cc <_dtoa_r+0x8d4>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e70:	f7f7 fbd2 	bl	8000618 <__aeabi_dmul>
 8008e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e78:	f7f7 fe54 	bl	8000b24 <__aeabi_dcmpge>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f000 8157 	beq.w	8009130 <_dtoa_r+0x938>
 8008e82:	2400      	movs	r4, #0
 8008e84:	4625      	mov	r5, r4
 8008e86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e88:	43db      	mvns	r3, r3
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	4656      	mov	r6, sl
 8008e8e:	2700      	movs	r7, #0
 8008e90:	4621      	mov	r1, r4
 8008e92:	4658      	mov	r0, fp
 8008e94:	f000 fafe 	bl	8009494 <_Bfree>
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	d0dc      	beq.n	8008e56 <_dtoa_r+0x65e>
 8008e9c:	b12f      	cbz	r7, 8008eaa <_dtoa_r+0x6b2>
 8008e9e:	42af      	cmp	r7, r5
 8008ea0:	d003      	beq.n	8008eaa <_dtoa_r+0x6b2>
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4658      	mov	r0, fp
 8008ea6:	f000 faf5 	bl	8009494 <_Bfree>
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4658      	mov	r0, fp
 8008eae:	f000 faf1 	bl	8009494 <_Bfree>
 8008eb2:	e7d0      	b.n	8008e56 <_dtoa_r+0x65e>
 8008eb4:	9704      	str	r7, [sp, #16]
 8008eb6:	4633      	mov	r3, r6
 8008eb8:	461e      	mov	r6, r3
 8008eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ebe:	2a39      	cmp	r2, #57	@ 0x39
 8008ec0:	d107      	bne.n	8008ed2 <_dtoa_r+0x6da>
 8008ec2:	459a      	cmp	sl, r3
 8008ec4:	d1f8      	bne.n	8008eb8 <_dtoa_r+0x6c0>
 8008ec6:	9a04      	ldr	r2, [sp, #16]
 8008ec8:	3201      	adds	r2, #1
 8008eca:	9204      	str	r2, [sp, #16]
 8008ecc:	2230      	movs	r2, #48	@ 0x30
 8008ece:	f88a 2000 	strb.w	r2, [sl]
 8008ed2:	781a      	ldrb	r2, [r3, #0]
 8008ed4:	3201      	adds	r2, #1
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e7bd      	b.n	8008e56 <_dtoa_r+0x65e>
 8008eda:	4b7b      	ldr	r3, [pc, #492]	@ (80090c8 <_dtoa_r+0x8d0>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	f7f7 fb9b 	bl	8000618 <__aeabi_dmul>
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	460d      	mov	r5, r1
 8008eea:	f7f7 fdfd 	bl	8000ae8 <__aeabi_dcmpeq>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f43f aebb 	beq.w	8008c6a <_dtoa_r+0x472>
 8008ef4:	e6f0      	b.n	8008cd8 <_dtoa_r+0x4e0>
 8008ef6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	f000 80db 	beq.w	80090b4 <_dtoa_r+0x8bc>
 8008efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f00:	2a01      	cmp	r2, #1
 8008f02:	f300 80bf 	bgt.w	8009084 <_dtoa_r+0x88c>
 8008f06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	f000 80b7 	beq.w	800907c <_dtoa_r+0x884>
 8008f0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f14:	4646      	mov	r6, r8
 8008f16:	9a08      	ldr	r2, [sp, #32]
 8008f18:	2101      	movs	r1, #1
 8008f1a:	441a      	add	r2, r3
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	4498      	add	r8, r3
 8008f20:	9208      	str	r2, [sp, #32]
 8008f22:	f000 fbb5 	bl	8009690 <__i2b>
 8008f26:	4605      	mov	r5, r0
 8008f28:	b15e      	cbz	r6, 8008f42 <_dtoa_r+0x74a>
 8008f2a:	9b08      	ldr	r3, [sp, #32]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dd08      	ble.n	8008f42 <_dtoa_r+0x74a>
 8008f30:	42b3      	cmp	r3, r6
 8008f32:	9a08      	ldr	r2, [sp, #32]
 8008f34:	bfa8      	it	ge
 8008f36:	4633      	movge	r3, r6
 8008f38:	eba8 0803 	sub.w	r8, r8, r3
 8008f3c:	1af6      	subs	r6, r6, r3
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	9308      	str	r3, [sp, #32]
 8008f42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f44:	b1f3      	cbz	r3, 8008f84 <_dtoa_r+0x78c>
 8008f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80b7 	beq.w	80090bc <_dtoa_r+0x8c4>
 8008f4e:	b18c      	cbz	r4, 8008f74 <_dtoa_r+0x77c>
 8008f50:	4629      	mov	r1, r5
 8008f52:	4622      	mov	r2, r4
 8008f54:	4658      	mov	r0, fp
 8008f56:	f000 fc5b 	bl	8009810 <__pow5mult>
 8008f5a:	464a      	mov	r2, r9
 8008f5c:	4601      	mov	r1, r0
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4658      	mov	r0, fp
 8008f62:	f000 fbab 	bl	80096bc <__multiply>
 8008f66:	4649      	mov	r1, r9
 8008f68:	9004      	str	r0, [sp, #16]
 8008f6a:	4658      	mov	r0, fp
 8008f6c:	f000 fa92 	bl	8009494 <_Bfree>
 8008f70:	9b04      	ldr	r3, [sp, #16]
 8008f72:	4699      	mov	r9, r3
 8008f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f76:	1b1a      	subs	r2, r3, r4
 8008f78:	d004      	beq.n	8008f84 <_dtoa_r+0x78c>
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	4658      	mov	r0, fp
 8008f7e:	f000 fc47 	bl	8009810 <__pow5mult>
 8008f82:	4681      	mov	r9, r0
 8008f84:	2101      	movs	r1, #1
 8008f86:	4658      	mov	r0, fp
 8008f88:	f000 fb82 	bl	8009690 <__i2b>
 8008f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f8e:	4604      	mov	r4, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 81cf 	beq.w	8009334 <_dtoa_r+0xb3c>
 8008f96:	461a      	mov	r2, r3
 8008f98:	4601      	mov	r1, r0
 8008f9a:	4658      	mov	r0, fp
 8008f9c:	f000 fc38 	bl	8009810 <__pow5mult>
 8008fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	f300 8095 	bgt.w	80090d4 <_dtoa_r+0x8dc>
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8087 	bne.w	80090c0 <_dtoa_r+0x8c8>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f040 8089 	bne.w	80090d0 <_dtoa_r+0x8d8>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fc4:	0d1b      	lsrs	r3, r3, #20
 8008fc6:	051b      	lsls	r3, r3, #20
 8008fc8:	b12b      	cbz	r3, 8008fd6 <_dtoa_r+0x7de>
 8008fca:	9b08      	ldr	r3, [sp, #32]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	9308      	str	r3, [sp, #32]
 8008fd0:	f108 0801 	add.w	r8, r8, #1
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 81b0 	beq.w	8009340 <_dtoa_r+0xb48>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fe6:	6918      	ldr	r0, [r3, #16]
 8008fe8:	f000 fb06 	bl	80095f8 <__hi0bits>
 8008fec:	f1c0 0020 	rsb	r0, r0, #32
 8008ff0:	9b08      	ldr	r3, [sp, #32]
 8008ff2:	4418      	add	r0, r3
 8008ff4:	f010 001f 	ands.w	r0, r0, #31
 8008ff8:	d077      	beq.n	80090ea <_dtoa_r+0x8f2>
 8008ffa:	f1c0 0320 	rsb	r3, r0, #32
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	dd6b      	ble.n	80090da <_dtoa_r+0x8e2>
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	f1c0 001c 	rsb	r0, r0, #28
 8009008:	4403      	add	r3, r0
 800900a:	4480      	add	r8, r0
 800900c:	4406      	add	r6, r0
 800900e:	9308      	str	r3, [sp, #32]
 8009010:	f1b8 0f00 	cmp.w	r8, #0
 8009014:	dd05      	ble.n	8009022 <_dtoa_r+0x82a>
 8009016:	4649      	mov	r1, r9
 8009018:	4642      	mov	r2, r8
 800901a:	4658      	mov	r0, fp
 800901c:	f000 fc52 	bl	80098c4 <__lshift>
 8009020:	4681      	mov	r9, r0
 8009022:	9b08      	ldr	r3, [sp, #32]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dd05      	ble.n	8009034 <_dtoa_r+0x83c>
 8009028:	4621      	mov	r1, r4
 800902a:	461a      	mov	r2, r3
 800902c:	4658      	mov	r0, fp
 800902e:	f000 fc49 	bl	80098c4 <__lshift>
 8009032:	4604      	mov	r4, r0
 8009034:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009036:	2b00      	cmp	r3, #0
 8009038:	d059      	beq.n	80090ee <_dtoa_r+0x8f6>
 800903a:	4621      	mov	r1, r4
 800903c:	4648      	mov	r0, r9
 800903e:	f000 fcad 	bl	800999c <__mcmp>
 8009042:	2800      	cmp	r0, #0
 8009044:	da53      	bge.n	80090ee <_dtoa_r+0x8f6>
 8009046:	1e7b      	subs	r3, r7, #1
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	4649      	mov	r1, r9
 800904c:	2300      	movs	r3, #0
 800904e:	220a      	movs	r2, #10
 8009050:	4658      	mov	r0, fp
 8009052:	f000 fa41 	bl	80094d8 <__multadd>
 8009056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009058:	4681      	mov	r9, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 8172 	beq.w	8009344 <_dtoa_r+0xb4c>
 8009060:	2300      	movs	r3, #0
 8009062:	4629      	mov	r1, r5
 8009064:	220a      	movs	r2, #10
 8009066:	4658      	mov	r0, fp
 8009068:	f000 fa36 	bl	80094d8 <__multadd>
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	4605      	mov	r5, r0
 8009072:	dc67      	bgt.n	8009144 <_dtoa_r+0x94c>
 8009074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009076:	2b02      	cmp	r3, #2
 8009078:	dc41      	bgt.n	80090fe <_dtoa_r+0x906>
 800907a:	e063      	b.n	8009144 <_dtoa_r+0x94c>
 800907c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800907e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009082:	e746      	b.n	8008f12 <_dtoa_r+0x71a>
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	1e5c      	subs	r4, r3, #1
 8009088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800908a:	42a3      	cmp	r3, r4
 800908c:	bfbf      	itttt	lt
 800908e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009090:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009092:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009094:	1ae3      	sublt	r3, r4, r3
 8009096:	bfb4      	ite	lt
 8009098:	18d2      	addlt	r2, r2, r3
 800909a:	1b1c      	subge	r4, r3, r4
 800909c:	9b07      	ldr	r3, [sp, #28]
 800909e:	bfbc      	itt	lt
 80090a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80090a2:	2400      	movlt	r4, #0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfb5      	itete	lt
 80090a8:	eba8 0603 	sublt.w	r6, r8, r3
 80090ac:	9b07      	ldrge	r3, [sp, #28]
 80090ae:	2300      	movlt	r3, #0
 80090b0:	4646      	movge	r6, r8
 80090b2:	e730      	b.n	8008f16 <_dtoa_r+0x71e>
 80090b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090b8:	4646      	mov	r6, r8
 80090ba:	e735      	b.n	8008f28 <_dtoa_r+0x730>
 80090bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090be:	e75c      	b.n	8008f7a <_dtoa_r+0x782>
 80090c0:	2300      	movs	r3, #0
 80090c2:	e788      	b.n	8008fd6 <_dtoa_r+0x7de>
 80090c4:	3fe00000 	.word	0x3fe00000
 80090c8:	40240000 	.word	0x40240000
 80090cc:	40140000 	.word	0x40140000
 80090d0:	9b02      	ldr	r3, [sp, #8]
 80090d2:	e780      	b.n	8008fd6 <_dtoa_r+0x7de>
 80090d4:	2300      	movs	r3, #0
 80090d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d8:	e782      	b.n	8008fe0 <_dtoa_r+0x7e8>
 80090da:	d099      	beq.n	8009010 <_dtoa_r+0x818>
 80090dc:	9a08      	ldr	r2, [sp, #32]
 80090de:	331c      	adds	r3, #28
 80090e0:	441a      	add	r2, r3
 80090e2:	4498      	add	r8, r3
 80090e4:	441e      	add	r6, r3
 80090e6:	9208      	str	r2, [sp, #32]
 80090e8:	e792      	b.n	8009010 <_dtoa_r+0x818>
 80090ea:	4603      	mov	r3, r0
 80090ec:	e7f6      	b.n	80090dc <_dtoa_r+0x8e4>
 80090ee:	9b07      	ldr	r3, [sp, #28]
 80090f0:	9704      	str	r7, [sp, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dc20      	bgt.n	8009138 <_dtoa_r+0x940>
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	dd1e      	ble.n	800913c <_dtoa_r+0x944>
 80090fe:	9b00      	ldr	r3, [sp, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f47f aec0 	bne.w	8008e86 <_dtoa_r+0x68e>
 8009106:	4621      	mov	r1, r4
 8009108:	2205      	movs	r2, #5
 800910a:	4658      	mov	r0, fp
 800910c:	f000 f9e4 	bl	80094d8 <__multadd>
 8009110:	4601      	mov	r1, r0
 8009112:	4604      	mov	r4, r0
 8009114:	4648      	mov	r0, r9
 8009116:	f000 fc41 	bl	800999c <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	f77f aeb3 	ble.w	8008e86 <_dtoa_r+0x68e>
 8009120:	4656      	mov	r6, sl
 8009122:	2331      	movs	r3, #49	@ 0x31
 8009124:	f806 3b01 	strb.w	r3, [r6], #1
 8009128:	9b04      	ldr	r3, [sp, #16]
 800912a:	3301      	adds	r3, #1
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	e6ae      	b.n	8008e8e <_dtoa_r+0x696>
 8009130:	9c07      	ldr	r4, [sp, #28]
 8009132:	9704      	str	r7, [sp, #16]
 8009134:	4625      	mov	r5, r4
 8009136:	e7f3      	b.n	8009120 <_dtoa_r+0x928>
 8009138:	9b07      	ldr	r3, [sp, #28]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8104 	beq.w	800934c <_dtoa_r+0xb54>
 8009144:	2e00      	cmp	r6, #0
 8009146:	dd05      	ble.n	8009154 <_dtoa_r+0x95c>
 8009148:	4629      	mov	r1, r5
 800914a:	4632      	mov	r2, r6
 800914c:	4658      	mov	r0, fp
 800914e:	f000 fbb9 	bl	80098c4 <__lshift>
 8009152:	4605      	mov	r5, r0
 8009154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	d05a      	beq.n	8009210 <_dtoa_r+0xa18>
 800915a:	6869      	ldr	r1, [r5, #4]
 800915c:	4658      	mov	r0, fp
 800915e:	f000 f959 	bl	8009414 <_Balloc>
 8009162:	4606      	mov	r6, r0
 8009164:	b928      	cbnz	r0, 8009172 <_dtoa_r+0x97a>
 8009166:	4b84      	ldr	r3, [pc, #528]	@ (8009378 <_dtoa_r+0xb80>)
 8009168:	4602      	mov	r2, r0
 800916a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800916e:	f7ff bb5a 	b.w	8008826 <_dtoa_r+0x2e>
 8009172:	692a      	ldr	r2, [r5, #16]
 8009174:	3202      	adds	r2, #2
 8009176:	0092      	lsls	r2, r2, #2
 8009178:	f105 010c 	add.w	r1, r5, #12
 800917c:	300c      	adds	r0, #12
 800917e:	f001 feb1 	bl	800aee4 <memcpy>
 8009182:	2201      	movs	r2, #1
 8009184:	4631      	mov	r1, r6
 8009186:	4658      	mov	r0, fp
 8009188:	f000 fb9c 	bl	80098c4 <__lshift>
 800918c:	f10a 0301 	add.w	r3, sl, #1
 8009190:	9307      	str	r3, [sp, #28]
 8009192:	9b00      	ldr	r3, [sp, #0]
 8009194:	4453      	add	r3, sl
 8009196:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009198:	9b02      	ldr	r3, [sp, #8]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	462f      	mov	r7, r5
 80091a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a2:	4605      	mov	r5, r0
 80091a4:	9b07      	ldr	r3, [sp, #28]
 80091a6:	4621      	mov	r1, r4
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4648      	mov	r0, r9
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	f7ff fa9b 	bl	80086e8 <quorem>
 80091b2:	4639      	mov	r1, r7
 80091b4:	9002      	str	r0, [sp, #8]
 80091b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091ba:	4648      	mov	r0, r9
 80091bc:	f000 fbee 	bl	800999c <__mcmp>
 80091c0:	462a      	mov	r2, r5
 80091c2:	9008      	str	r0, [sp, #32]
 80091c4:	4621      	mov	r1, r4
 80091c6:	4658      	mov	r0, fp
 80091c8:	f000 fc04 	bl	80099d4 <__mdiff>
 80091cc:	68c2      	ldr	r2, [r0, #12]
 80091ce:	4606      	mov	r6, r0
 80091d0:	bb02      	cbnz	r2, 8009214 <_dtoa_r+0xa1c>
 80091d2:	4601      	mov	r1, r0
 80091d4:	4648      	mov	r0, r9
 80091d6:	f000 fbe1 	bl	800999c <__mcmp>
 80091da:	4602      	mov	r2, r0
 80091dc:	4631      	mov	r1, r6
 80091de:	4658      	mov	r0, fp
 80091e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80091e2:	f000 f957 	bl	8009494 <_Bfree>
 80091e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091ea:	9e07      	ldr	r6, [sp, #28]
 80091ec:	ea43 0102 	orr.w	r1, r3, r2
 80091f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091f2:	4319      	orrs	r1, r3
 80091f4:	d110      	bne.n	8009218 <_dtoa_r+0xa20>
 80091f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091fa:	d029      	beq.n	8009250 <_dtoa_r+0xa58>
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	dd02      	ble.n	8009208 <_dtoa_r+0xa10>
 8009202:	9b02      	ldr	r3, [sp, #8]
 8009204:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009208:	9b00      	ldr	r3, [sp, #0]
 800920a:	f883 8000 	strb.w	r8, [r3]
 800920e:	e63f      	b.n	8008e90 <_dtoa_r+0x698>
 8009210:	4628      	mov	r0, r5
 8009212:	e7bb      	b.n	800918c <_dtoa_r+0x994>
 8009214:	2201      	movs	r2, #1
 8009216:	e7e1      	b.n	80091dc <_dtoa_r+0x9e4>
 8009218:	9b08      	ldr	r3, [sp, #32]
 800921a:	2b00      	cmp	r3, #0
 800921c:	db04      	blt.n	8009228 <_dtoa_r+0xa30>
 800921e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009220:	430b      	orrs	r3, r1
 8009222:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009224:	430b      	orrs	r3, r1
 8009226:	d120      	bne.n	800926a <_dtoa_r+0xa72>
 8009228:	2a00      	cmp	r2, #0
 800922a:	dded      	ble.n	8009208 <_dtoa_r+0xa10>
 800922c:	4649      	mov	r1, r9
 800922e:	2201      	movs	r2, #1
 8009230:	4658      	mov	r0, fp
 8009232:	f000 fb47 	bl	80098c4 <__lshift>
 8009236:	4621      	mov	r1, r4
 8009238:	4681      	mov	r9, r0
 800923a:	f000 fbaf 	bl	800999c <__mcmp>
 800923e:	2800      	cmp	r0, #0
 8009240:	dc03      	bgt.n	800924a <_dtoa_r+0xa52>
 8009242:	d1e1      	bne.n	8009208 <_dtoa_r+0xa10>
 8009244:	f018 0f01 	tst.w	r8, #1
 8009248:	d0de      	beq.n	8009208 <_dtoa_r+0xa10>
 800924a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800924e:	d1d8      	bne.n	8009202 <_dtoa_r+0xa0a>
 8009250:	9a00      	ldr	r2, [sp, #0]
 8009252:	2339      	movs	r3, #57	@ 0x39
 8009254:	7013      	strb	r3, [r2, #0]
 8009256:	4633      	mov	r3, r6
 8009258:	461e      	mov	r6, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009260:	2a39      	cmp	r2, #57	@ 0x39
 8009262:	d052      	beq.n	800930a <_dtoa_r+0xb12>
 8009264:	3201      	adds	r2, #1
 8009266:	701a      	strb	r2, [r3, #0]
 8009268:	e612      	b.n	8008e90 <_dtoa_r+0x698>
 800926a:	2a00      	cmp	r2, #0
 800926c:	dd07      	ble.n	800927e <_dtoa_r+0xa86>
 800926e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009272:	d0ed      	beq.n	8009250 <_dtoa_r+0xa58>
 8009274:	9a00      	ldr	r2, [sp, #0]
 8009276:	f108 0301 	add.w	r3, r8, #1
 800927a:	7013      	strb	r3, [r2, #0]
 800927c:	e608      	b.n	8008e90 <_dtoa_r+0x698>
 800927e:	9b07      	ldr	r3, [sp, #28]
 8009280:	9a07      	ldr	r2, [sp, #28]
 8009282:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009288:	4293      	cmp	r3, r2
 800928a:	d028      	beq.n	80092de <_dtoa_r+0xae6>
 800928c:	4649      	mov	r1, r9
 800928e:	2300      	movs	r3, #0
 8009290:	220a      	movs	r2, #10
 8009292:	4658      	mov	r0, fp
 8009294:	f000 f920 	bl	80094d8 <__multadd>
 8009298:	42af      	cmp	r7, r5
 800929a:	4681      	mov	r9, r0
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	f04f 020a 	mov.w	r2, #10
 80092a4:	4639      	mov	r1, r7
 80092a6:	4658      	mov	r0, fp
 80092a8:	d107      	bne.n	80092ba <_dtoa_r+0xac2>
 80092aa:	f000 f915 	bl	80094d8 <__multadd>
 80092ae:	4607      	mov	r7, r0
 80092b0:	4605      	mov	r5, r0
 80092b2:	9b07      	ldr	r3, [sp, #28]
 80092b4:	3301      	adds	r3, #1
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	e774      	b.n	80091a4 <_dtoa_r+0x9ac>
 80092ba:	f000 f90d 	bl	80094d8 <__multadd>
 80092be:	4629      	mov	r1, r5
 80092c0:	4607      	mov	r7, r0
 80092c2:	2300      	movs	r3, #0
 80092c4:	220a      	movs	r2, #10
 80092c6:	4658      	mov	r0, fp
 80092c8:	f000 f906 	bl	80094d8 <__multadd>
 80092cc:	4605      	mov	r5, r0
 80092ce:	e7f0      	b.n	80092b2 <_dtoa_r+0xaba>
 80092d0:	9b00      	ldr	r3, [sp, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfcc      	ite	gt
 80092d6:	461e      	movgt	r6, r3
 80092d8:	2601      	movle	r6, #1
 80092da:	4456      	add	r6, sl
 80092dc:	2700      	movs	r7, #0
 80092de:	4649      	mov	r1, r9
 80092e0:	2201      	movs	r2, #1
 80092e2:	4658      	mov	r0, fp
 80092e4:	f000 faee 	bl	80098c4 <__lshift>
 80092e8:	4621      	mov	r1, r4
 80092ea:	4681      	mov	r9, r0
 80092ec:	f000 fb56 	bl	800999c <__mcmp>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	dcb0      	bgt.n	8009256 <_dtoa_r+0xa5e>
 80092f4:	d102      	bne.n	80092fc <_dtoa_r+0xb04>
 80092f6:	f018 0f01 	tst.w	r8, #1
 80092fa:	d1ac      	bne.n	8009256 <_dtoa_r+0xa5e>
 80092fc:	4633      	mov	r3, r6
 80092fe:	461e      	mov	r6, r3
 8009300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009304:	2a30      	cmp	r2, #48	@ 0x30
 8009306:	d0fa      	beq.n	80092fe <_dtoa_r+0xb06>
 8009308:	e5c2      	b.n	8008e90 <_dtoa_r+0x698>
 800930a:	459a      	cmp	sl, r3
 800930c:	d1a4      	bne.n	8009258 <_dtoa_r+0xa60>
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	3301      	adds	r3, #1
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	2331      	movs	r3, #49	@ 0x31
 8009316:	f88a 3000 	strb.w	r3, [sl]
 800931a:	e5b9      	b.n	8008e90 <_dtoa_r+0x698>
 800931c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800931e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800937c <_dtoa_r+0xb84>
 8009322:	b11b      	cbz	r3, 800932c <_dtoa_r+0xb34>
 8009324:	f10a 0308 	add.w	r3, sl, #8
 8009328:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	4650      	mov	r0, sl
 800932e:	b019      	add	sp, #100	@ 0x64
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009336:	2b01      	cmp	r3, #1
 8009338:	f77f ae37 	ble.w	8008faa <_dtoa_r+0x7b2>
 800933c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800933e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009340:	2001      	movs	r0, #1
 8009342:	e655      	b.n	8008ff0 <_dtoa_r+0x7f8>
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f77f aed6 	ble.w	80090f8 <_dtoa_r+0x900>
 800934c:	4656      	mov	r6, sl
 800934e:	4621      	mov	r1, r4
 8009350:	4648      	mov	r0, r9
 8009352:	f7ff f9c9 	bl	80086e8 <quorem>
 8009356:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800935a:	f806 8b01 	strb.w	r8, [r6], #1
 800935e:	9b00      	ldr	r3, [sp, #0]
 8009360:	eba6 020a 	sub.w	r2, r6, sl
 8009364:	4293      	cmp	r3, r2
 8009366:	ddb3      	ble.n	80092d0 <_dtoa_r+0xad8>
 8009368:	4649      	mov	r1, r9
 800936a:	2300      	movs	r3, #0
 800936c:	220a      	movs	r2, #10
 800936e:	4658      	mov	r0, fp
 8009370:	f000 f8b2 	bl	80094d8 <__multadd>
 8009374:	4681      	mov	r9, r0
 8009376:	e7ea      	b.n	800934e <_dtoa_r+0xb56>
 8009378:	0800bd01 	.word	0x0800bd01
 800937c:	0800bc85 	.word	0x0800bc85

08009380 <_free_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4605      	mov	r5, r0
 8009384:	2900      	cmp	r1, #0
 8009386:	d041      	beq.n	800940c <_free_r+0x8c>
 8009388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800938c:	1f0c      	subs	r4, r1, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfb8      	it	lt
 8009392:	18e4      	addlt	r4, r4, r3
 8009394:	f7fe f974 	bl	8007680 <__malloc_lock>
 8009398:	4a1d      	ldr	r2, [pc, #116]	@ (8009410 <_free_r+0x90>)
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	b933      	cbnz	r3, 80093ac <_free_r+0x2c>
 800939e:	6063      	str	r3, [r4, #4]
 80093a0:	6014      	str	r4, [r2, #0]
 80093a2:	4628      	mov	r0, r5
 80093a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093a8:	f7fe b970 	b.w	800768c <__malloc_unlock>
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d908      	bls.n	80093c2 <_free_r+0x42>
 80093b0:	6820      	ldr	r0, [r4, #0]
 80093b2:	1821      	adds	r1, r4, r0
 80093b4:	428b      	cmp	r3, r1
 80093b6:	bf01      	itttt	eq
 80093b8:	6819      	ldreq	r1, [r3, #0]
 80093ba:	685b      	ldreq	r3, [r3, #4]
 80093bc:	1809      	addeq	r1, r1, r0
 80093be:	6021      	streq	r1, [r4, #0]
 80093c0:	e7ed      	b.n	800939e <_free_r+0x1e>
 80093c2:	461a      	mov	r2, r3
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	b10b      	cbz	r3, 80093cc <_free_r+0x4c>
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	d9fa      	bls.n	80093c2 <_free_r+0x42>
 80093cc:	6811      	ldr	r1, [r2, #0]
 80093ce:	1850      	adds	r0, r2, r1
 80093d0:	42a0      	cmp	r0, r4
 80093d2:	d10b      	bne.n	80093ec <_free_r+0x6c>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	4401      	add	r1, r0
 80093d8:	1850      	adds	r0, r2, r1
 80093da:	4283      	cmp	r3, r0
 80093dc:	6011      	str	r1, [r2, #0]
 80093de:	d1e0      	bne.n	80093a2 <_free_r+0x22>
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	6053      	str	r3, [r2, #4]
 80093e6:	4408      	add	r0, r1
 80093e8:	6010      	str	r0, [r2, #0]
 80093ea:	e7da      	b.n	80093a2 <_free_r+0x22>
 80093ec:	d902      	bls.n	80093f4 <_free_r+0x74>
 80093ee:	230c      	movs	r3, #12
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	e7d6      	b.n	80093a2 <_free_r+0x22>
 80093f4:	6820      	ldr	r0, [r4, #0]
 80093f6:	1821      	adds	r1, r4, r0
 80093f8:	428b      	cmp	r3, r1
 80093fa:	bf04      	itt	eq
 80093fc:	6819      	ldreq	r1, [r3, #0]
 80093fe:	685b      	ldreq	r3, [r3, #4]
 8009400:	6063      	str	r3, [r4, #4]
 8009402:	bf04      	itt	eq
 8009404:	1809      	addeq	r1, r1, r0
 8009406:	6021      	streq	r1, [r4, #0]
 8009408:	6054      	str	r4, [r2, #4]
 800940a:	e7ca      	b.n	80093a2 <_free_r+0x22>
 800940c:	bd38      	pop	{r3, r4, r5, pc}
 800940e:	bf00      	nop
 8009410:	20000480 	.word	0x20000480

08009414 <_Balloc>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	69c6      	ldr	r6, [r0, #28]
 8009418:	4604      	mov	r4, r0
 800941a:	460d      	mov	r5, r1
 800941c:	b976      	cbnz	r6, 800943c <_Balloc+0x28>
 800941e:	2010      	movs	r0, #16
 8009420:	f7fe f884 	bl	800752c <malloc>
 8009424:	4602      	mov	r2, r0
 8009426:	61e0      	str	r0, [r4, #28]
 8009428:	b920      	cbnz	r0, 8009434 <_Balloc+0x20>
 800942a:	4b18      	ldr	r3, [pc, #96]	@ (800948c <_Balloc+0x78>)
 800942c:	4818      	ldr	r0, [pc, #96]	@ (8009490 <_Balloc+0x7c>)
 800942e:	216b      	movs	r1, #107	@ 0x6b
 8009430:	f001 fd6e 	bl	800af10 <__assert_func>
 8009434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009438:	6006      	str	r6, [r0, #0]
 800943a:	60c6      	str	r6, [r0, #12]
 800943c:	69e6      	ldr	r6, [r4, #28]
 800943e:	68f3      	ldr	r3, [r6, #12]
 8009440:	b183      	cbz	r3, 8009464 <_Balloc+0x50>
 8009442:	69e3      	ldr	r3, [r4, #28]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800944a:	b9b8      	cbnz	r0, 800947c <_Balloc+0x68>
 800944c:	2101      	movs	r1, #1
 800944e:	fa01 f605 	lsl.w	r6, r1, r5
 8009452:	1d72      	adds	r2, r6, #5
 8009454:	0092      	lsls	r2, r2, #2
 8009456:	4620      	mov	r0, r4
 8009458:	f7fe f854 	bl	8007504 <_calloc_r>
 800945c:	b160      	cbz	r0, 8009478 <_Balloc+0x64>
 800945e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009462:	e00e      	b.n	8009482 <_Balloc+0x6e>
 8009464:	2221      	movs	r2, #33	@ 0x21
 8009466:	2104      	movs	r1, #4
 8009468:	4620      	mov	r0, r4
 800946a:	f7fe f84b 	bl	8007504 <_calloc_r>
 800946e:	69e3      	ldr	r3, [r4, #28]
 8009470:	60f0      	str	r0, [r6, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e4      	bne.n	8009442 <_Balloc+0x2e>
 8009478:	2000      	movs	r0, #0
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	6802      	ldr	r2, [r0, #0]
 800947e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009482:	2300      	movs	r3, #0
 8009484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009488:	e7f7      	b.n	800947a <_Balloc+0x66>
 800948a:	bf00      	nop
 800948c:	0800bc92 	.word	0x0800bc92
 8009490:	0800bd12 	.word	0x0800bd12

08009494 <_Bfree>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	69c6      	ldr	r6, [r0, #28]
 8009498:	4605      	mov	r5, r0
 800949a:	460c      	mov	r4, r1
 800949c:	b976      	cbnz	r6, 80094bc <_Bfree+0x28>
 800949e:	2010      	movs	r0, #16
 80094a0:	f7fe f844 	bl	800752c <malloc>
 80094a4:	4602      	mov	r2, r0
 80094a6:	61e8      	str	r0, [r5, #28]
 80094a8:	b920      	cbnz	r0, 80094b4 <_Bfree+0x20>
 80094aa:	4b09      	ldr	r3, [pc, #36]	@ (80094d0 <_Bfree+0x3c>)
 80094ac:	4809      	ldr	r0, [pc, #36]	@ (80094d4 <_Bfree+0x40>)
 80094ae:	218f      	movs	r1, #143	@ 0x8f
 80094b0:	f001 fd2e 	bl	800af10 <__assert_func>
 80094b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b8:	6006      	str	r6, [r0, #0]
 80094ba:	60c6      	str	r6, [r0, #12]
 80094bc:	b13c      	cbz	r4, 80094ce <_Bfree+0x3a>
 80094be:	69eb      	ldr	r3, [r5, #28]
 80094c0:	6862      	ldr	r2, [r4, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c8:	6021      	str	r1, [r4, #0]
 80094ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	0800bc92 	.word	0x0800bc92
 80094d4:	0800bd12 	.word	0x0800bd12

080094d8 <__multadd>:
 80094d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094dc:	690d      	ldr	r5, [r1, #16]
 80094de:	4607      	mov	r7, r0
 80094e0:	460c      	mov	r4, r1
 80094e2:	461e      	mov	r6, r3
 80094e4:	f101 0c14 	add.w	ip, r1, #20
 80094e8:	2000      	movs	r0, #0
 80094ea:	f8dc 3000 	ldr.w	r3, [ip]
 80094ee:	b299      	uxth	r1, r3
 80094f0:	fb02 6101 	mla	r1, r2, r1, r6
 80094f4:	0c1e      	lsrs	r6, r3, #16
 80094f6:	0c0b      	lsrs	r3, r1, #16
 80094f8:	fb02 3306 	mla	r3, r2, r6, r3
 80094fc:	b289      	uxth	r1, r1
 80094fe:	3001      	adds	r0, #1
 8009500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009504:	4285      	cmp	r5, r0
 8009506:	f84c 1b04 	str.w	r1, [ip], #4
 800950a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800950e:	dcec      	bgt.n	80094ea <__multadd+0x12>
 8009510:	b30e      	cbz	r6, 8009556 <__multadd+0x7e>
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	42ab      	cmp	r3, r5
 8009516:	dc19      	bgt.n	800954c <__multadd+0x74>
 8009518:	6861      	ldr	r1, [r4, #4]
 800951a:	4638      	mov	r0, r7
 800951c:	3101      	adds	r1, #1
 800951e:	f7ff ff79 	bl	8009414 <_Balloc>
 8009522:	4680      	mov	r8, r0
 8009524:	b928      	cbnz	r0, 8009532 <__multadd+0x5a>
 8009526:	4602      	mov	r2, r0
 8009528:	4b0c      	ldr	r3, [pc, #48]	@ (800955c <__multadd+0x84>)
 800952a:	480d      	ldr	r0, [pc, #52]	@ (8009560 <__multadd+0x88>)
 800952c:	21ba      	movs	r1, #186	@ 0xba
 800952e:	f001 fcef 	bl	800af10 <__assert_func>
 8009532:	6922      	ldr	r2, [r4, #16]
 8009534:	3202      	adds	r2, #2
 8009536:	f104 010c 	add.w	r1, r4, #12
 800953a:	0092      	lsls	r2, r2, #2
 800953c:	300c      	adds	r0, #12
 800953e:	f001 fcd1 	bl	800aee4 <memcpy>
 8009542:	4621      	mov	r1, r4
 8009544:	4638      	mov	r0, r7
 8009546:	f7ff ffa5 	bl	8009494 <_Bfree>
 800954a:	4644      	mov	r4, r8
 800954c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009550:	3501      	adds	r5, #1
 8009552:	615e      	str	r6, [r3, #20]
 8009554:	6125      	str	r5, [r4, #16]
 8009556:	4620      	mov	r0, r4
 8009558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955c:	0800bd01 	.word	0x0800bd01
 8009560:	0800bd12 	.word	0x0800bd12

08009564 <__s2b>:
 8009564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009568:	460c      	mov	r4, r1
 800956a:	4615      	mov	r5, r2
 800956c:	461f      	mov	r7, r3
 800956e:	2209      	movs	r2, #9
 8009570:	3308      	adds	r3, #8
 8009572:	4606      	mov	r6, r0
 8009574:	fb93 f3f2 	sdiv	r3, r3, r2
 8009578:	2100      	movs	r1, #0
 800957a:	2201      	movs	r2, #1
 800957c:	429a      	cmp	r2, r3
 800957e:	db09      	blt.n	8009594 <__s2b+0x30>
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff ff47 	bl	8009414 <_Balloc>
 8009586:	b940      	cbnz	r0, 800959a <__s2b+0x36>
 8009588:	4602      	mov	r2, r0
 800958a:	4b19      	ldr	r3, [pc, #100]	@ (80095f0 <__s2b+0x8c>)
 800958c:	4819      	ldr	r0, [pc, #100]	@ (80095f4 <__s2b+0x90>)
 800958e:	21d3      	movs	r1, #211	@ 0xd3
 8009590:	f001 fcbe 	bl	800af10 <__assert_func>
 8009594:	0052      	lsls	r2, r2, #1
 8009596:	3101      	adds	r1, #1
 8009598:	e7f0      	b.n	800957c <__s2b+0x18>
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	6143      	str	r3, [r0, #20]
 800959e:	2d09      	cmp	r5, #9
 80095a0:	f04f 0301 	mov.w	r3, #1
 80095a4:	6103      	str	r3, [r0, #16]
 80095a6:	dd16      	ble.n	80095d6 <__s2b+0x72>
 80095a8:	f104 0909 	add.w	r9, r4, #9
 80095ac:	46c8      	mov	r8, r9
 80095ae:	442c      	add	r4, r5
 80095b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095b4:	4601      	mov	r1, r0
 80095b6:	3b30      	subs	r3, #48	@ 0x30
 80095b8:	220a      	movs	r2, #10
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ff8c 	bl	80094d8 <__multadd>
 80095c0:	45a0      	cmp	r8, r4
 80095c2:	d1f5      	bne.n	80095b0 <__s2b+0x4c>
 80095c4:	f1a5 0408 	sub.w	r4, r5, #8
 80095c8:	444c      	add	r4, r9
 80095ca:	1b2d      	subs	r5, r5, r4
 80095cc:	1963      	adds	r3, r4, r5
 80095ce:	42bb      	cmp	r3, r7
 80095d0:	db04      	blt.n	80095dc <__s2b+0x78>
 80095d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d6:	340a      	adds	r4, #10
 80095d8:	2509      	movs	r5, #9
 80095da:	e7f6      	b.n	80095ca <__s2b+0x66>
 80095dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095e0:	4601      	mov	r1, r0
 80095e2:	3b30      	subs	r3, #48	@ 0x30
 80095e4:	220a      	movs	r2, #10
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff ff76 	bl	80094d8 <__multadd>
 80095ec:	e7ee      	b.n	80095cc <__s2b+0x68>
 80095ee:	bf00      	nop
 80095f0:	0800bd01 	.word	0x0800bd01
 80095f4:	0800bd12 	.word	0x0800bd12

080095f8 <__hi0bits>:
 80095f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095fc:	4603      	mov	r3, r0
 80095fe:	bf36      	itet	cc
 8009600:	0403      	lslcc	r3, r0, #16
 8009602:	2000      	movcs	r0, #0
 8009604:	2010      	movcc	r0, #16
 8009606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800960a:	bf3c      	itt	cc
 800960c:	021b      	lslcc	r3, r3, #8
 800960e:	3008      	addcc	r0, #8
 8009610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009614:	bf3c      	itt	cc
 8009616:	011b      	lslcc	r3, r3, #4
 8009618:	3004      	addcc	r0, #4
 800961a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961e:	bf3c      	itt	cc
 8009620:	009b      	lslcc	r3, r3, #2
 8009622:	3002      	addcc	r0, #2
 8009624:	2b00      	cmp	r3, #0
 8009626:	db05      	blt.n	8009634 <__hi0bits+0x3c>
 8009628:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800962c:	f100 0001 	add.w	r0, r0, #1
 8009630:	bf08      	it	eq
 8009632:	2020      	moveq	r0, #32
 8009634:	4770      	bx	lr

08009636 <__lo0bits>:
 8009636:	6803      	ldr	r3, [r0, #0]
 8009638:	4602      	mov	r2, r0
 800963a:	f013 0007 	ands.w	r0, r3, #7
 800963e:	d00b      	beq.n	8009658 <__lo0bits+0x22>
 8009640:	07d9      	lsls	r1, r3, #31
 8009642:	d421      	bmi.n	8009688 <__lo0bits+0x52>
 8009644:	0798      	lsls	r0, r3, #30
 8009646:	bf49      	itett	mi
 8009648:	085b      	lsrmi	r3, r3, #1
 800964a:	089b      	lsrpl	r3, r3, #2
 800964c:	2001      	movmi	r0, #1
 800964e:	6013      	strmi	r3, [r2, #0]
 8009650:	bf5c      	itt	pl
 8009652:	6013      	strpl	r3, [r2, #0]
 8009654:	2002      	movpl	r0, #2
 8009656:	4770      	bx	lr
 8009658:	b299      	uxth	r1, r3
 800965a:	b909      	cbnz	r1, 8009660 <__lo0bits+0x2a>
 800965c:	0c1b      	lsrs	r3, r3, #16
 800965e:	2010      	movs	r0, #16
 8009660:	b2d9      	uxtb	r1, r3
 8009662:	b909      	cbnz	r1, 8009668 <__lo0bits+0x32>
 8009664:	3008      	adds	r0, #8
 8009666:	0a1b      	lsrs	r3, r3, #8
 8009668:	0719      	lsls	r1, r3, #28
 800966a:	bf04      	itt	eq
 800966c:	091b      	lsreq	r3, r3, #4
 800966e:	3004      	addeq	r0, #4
 8009670:	0799      	lsls	r1, r3, #30
 8009672:	bf04      	itt	eq
 8009674:	089b      	lsreq	r3, r3, #2
 8009676:	3002      	addeq	r0, #2
 8009678:	07d9      	lsls	r1, r3, #31
 800967a:	d403      	bmi.n	8009684 <__lo0bits+0x4e>
 800967c:	085b      	lsrs	r3, r3, #1
 800967e:	f100 0001 	add.w	r0, r0, #1
 8009682:	d003      	beq.n	800968c <__lo0bits+0x56>
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	4770      	bx	lr
 8009688:	2000      	movs	r0, #0
 800968a:	4770      	bx	lr
 800968c:	2020      	movs	r0, #32
 800968e:	4770      	bx	lr

08009690 <__i2b>:
 8009690:	b510      	push	{r4, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	2101      	movs	r1, #1
 8009696:	f7ff febd 	bl	8009414 <_Balloc>
 800969a:	4602      	mov	r2, r0
 800969c:	b928      	cbnz	r0, 80096aa <__i2b+0x1a>
 800969e:	4b05      	ldr	r3, [pc, #20]	@ (80096b4 <__i2b+0x24>)
 80096a0:	4805      	ldr	r0, [pc, #20]	@ (80096b8 <__i2b+0x28>)
 80096a2:	f240 1145 	movw	r1, #325	@ 0x145
 80096a6:	f001 fc33 	bl	800af10 <__assert_func>
 80096aa:	2301      	movs	r3, #1
 80096ac:	6144      	str	r4, [r0, #20]
 80096ae:	6103      	str	r3, [r0, #16]
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	bf00      	nop
 80096b4:	0800bd01 	.word	0x0800bd01
 80096b8:	0800bd12 	.word	0x0800bd12

080096bc <__multiply>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	4614      	mov	r4, r2
 80096c2:	690a      	ldr	r2, [r1, #16]
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	bfa8      	it	ge
 80096ca:	4623      	movge	r3, r4
 80096cc:	460f      	mov	r7, r1
 80096ce:	bfa4      	itt	ge
 80096d0:	460c      	movge	r4, r1
 80096d2:	461f      	movge	r7, r3
 80096d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80096d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096dc:	68a3      	ldr	r3, [r4, #8]
 80096de:	6861      	ldr	r1, [r4, #4]
 80096e0:	eb0a 0609 	add.w	r6, sl, r9
 80096e4:	42b3      	cmp	r3, r6
 80096e6:	b085      	sub	sp, #20
 80096e8:	bfb8      	it	lt
 80096ea:	3101      	addlt	r1, #1
 80096ec:	f7ff fe92 	bl	8009414 <_Balloc>
 80096f0:	b930      	cbnz	r0, 8009700 <__multiply+0x44>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b44      	ldr	r3, [pc, #272]	@ (8009808 <__multiply+0x14c>)
 80096f6:	4845      	ldr	r0, [pc, #276]	@ (800980c <__multiply+0x150>)
 80096f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096fc:	f001 fc08 	bl	800af10 <__assert_func>
 8009700:	f100 0514 	add.w	r5, r0, #20
 8009704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009708:	462b      	mov	r3, r5
 800970a:	2200      	movs	r2, #0
 800970c:	4543      	cmp	r3, r8
 800970e:	d321      	bcc.n	8009754 <__multiply+0x98>
 8009710:	f107 0114 	add.w	r1, r7, #20
 8009714:	f104 0214 	add.w	r2, r4, #20
 8009718:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800971c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009720:	9302      	str	r3, [sp, #8]
 8009722:	1b13      	subs	r3, r2, r4
 8009724:	3b15      	subs	r3, #21
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	3304      	adds	r3, #4
 800972c:	f104 0715 	add.w	r7, r4, #21
 8009730:	42ba      	cmp	r2, r7
 8009732:	bf38      	it	cc
 8009734:	2304      	movcc	r3, #4
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	9b02      	ldr	r3, [sp, #8]
 800973a:	9103      	str	r1, [sp, #12]
 800973c:	428b      	cmp	r3, r1
 800973e:	d80c      	bhi.n	800975a <__multiply+0x9e>
 8009740:	2e00      	cmp	r6, #0
 8009742:	dd03      	ble.n	800974c <__multiply+0x90>
 8009744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009748:	2b00      	cmp	r3, #0
 800974a:	d05b      	beq.n	8009804 <__multiply+0x148>
 800974c:	6106      	str	r6, [r0, #16]
 800974e:	b005      	add	sp, #20
 8009750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009754:	f843 2b04 	str.w	r2, [r3], #4
 8009758:	e7d8      	b.n	800970c <__multiply+0x50>
 800975a:	f8b1 a000 	ldrh.w	sl, [r1]
 800975e:	f1ba 0f00 	cmp.w	sl, #0
 8009762:	d024      	beq.n	80097ae <__multiply+0xf2>
 8009764:	f104 0e14 	add.w	lr, r4, #20
 8009768:	46a9      	mov	r9, r5
 800976a:	f04f 0c00 	mov.w	ip, #0
 800976e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009772:	f8d9 3000 	ldr.w	r3, [r9]
 8009776:	fa1f fb87 	uxth.w	fp, r7
 800977a:	b29b      	uxth	r3, r3
 800977c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009780:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009784:	f8d9 7000 	ldr.w	r7, [r9]
 8009788:	4463      	add	r3, ip
 800978a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800978e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009792:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009796:	b29b      	uxth	r3, r3
 8009798:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800979c:	4572      	cmp	r2, lr
 800979e:	f849 3b04 	str.w	r3, [r9], #4
 80097a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80097a6:	d8e2      	bhi.n	800976e <__multiply+0xb2>
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	f845 c003 	str.w	ip, [r5, r3]
 80097ae:	9b03      	ldr	r3, [sp, #12]
 80097b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097b4:	3104      	adds	r1, #4
 80097b6:	f1b9 0f00 	cmp.w	r9, #0
 80097ba:	d021      	beq.n	8009800 <__multiply+0x144>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	f104 0c14 	add.w	ip, r4, #20
 80097c2:	46ae      	mov	lr, r5
 80097c4:	f04f 0a00 	mov.w	sl, #0
 80097c8:	f8bc b000 	ldrh.w	fp, [ip]
 80097cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80097d0:	fb09 770b 	mla	r7, r9, fp, r7
 80097d4:	4457      	add	r7, sl
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097dc:	f84e 3b04 	str.w	r3, [lr], #4
 80097e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097e8:	f8be 3000 	ldrh.w	r3, [lr]
 80097ec:	fb09 330a 	mla	r3, r9, sl, r3
 80097f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097f4:	4562      	cmp	r2, ip
 80097f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097fa:	d8e5      	bhi.n	80097c8 <__multiply+0x10c>
 80097fc:	9f01      	ldr	r7, [sp, #4]
 80097fe:	51eb      	str	r3, [r5, r7]
 8009800:	3504      	adds	r5, #4
 8009802:	e799      	b.n	8009738 <__multiply+0x7c>
 8009804:	3e01      	subs	r6, #1
 8009806:	e79b      	b.n	8009740 <__multiply+0x84>
 8009808:	0800bd01 	.word	0x0800bd01
 800980c:	0800bd12 	.word	0x0800bd12

08009810 <__pow5mult>:
 8009810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009814:	4615      	mov	r5, r2
 8009816:	f012 0203 	ands.w	r2, r2, #3
 800981a:	4607      	mov	r7, r0
 800981c:	460e      	mov	r6, r1
 800981e:	d007      	beq.n	8009830 <__pow5mult+0x20>
 8009820:	4c25      	ldr	r4, [pc, #148]	@ (80098b8 <__pow5mult+0xa8>)
 8009822:	3a01      	subs	r2, #1
 8009824:	2300      	movs	r3, #0
 8009826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800982a:	f7ff fe55 	bl	80094d8 <__multadd>
 800982e:	4606      	mov	r6, r0
 8009830:	10ad      	asrs	r5, r5, #2
 8009832:	d03d      	beq.n	80098b0 <__pow5mult+0xa0>
 8009834:	69fc      	ldr	r4, [r7, #28]
 8009836:	b97c      	cbnz	r4, 8009858 <__pow5mult+0x48>
 8009838:	2010      	movs	r0, #16
 800983a:	f7fd fe77 	bl	800752c <malloc>
 800983e:	4602      	mov	r2, r0
 8009840:	61f8      	str	r0, [r7, #28]
 8009842:	b928      	cbnz	r0, 8009850 <__pow5mult+0x40>
 8009844:	4b1d      	ldr	r3, [pc, #116]	@ (80098bc <__pow5mult+0xac>)
 8009846:	481e      	ldr	r0, [pc, #120]	@ (80098c0 <__pow5mult+0xb0>)
 8009848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800984c:	f001 fb60 	bl	800af10 <__assert_func>
 8009850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009854:	6004      	str	r4, [r0, #0]
 8009856:	60c4      	str	r4, [r0, #12]
 8009858:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800985c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009860:	b94c      	cbnz	r4, 8009876 <__pow5mult+0x66>
 8009862:	f240 2171 	movw	r1, #625	@ 0x271
 8009866:	4638      	mov	r0, r7
 8009868:	f7ff ff12 	bl	8009690 <__i2b>
 800986c:	2300      	movs	r3, #0
 800986e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009872:	4604      	mov	r4, r0
 8009874:	6003      	str	r3, [r0, #0]
 8009876:	f04f 0900 	mov.w	r9, #0
 800987a:	07eb      	lsls	r3, r5, #31
 800987c:	d50a      	bpl.n	8009894 <__pow5mult+0x84>
 800987e:	4631      	mov	r1, r6
 8009880:	4622      	mov	r2, r4
 8009882:	4638      	mov	r0, r7
 8009884:	f7ff ff1a 	bl	80096bc <__multiply>
 8009888:	4631      	mov	r1, r6
 800988a:	4680      	mov	r8, r0
 800988c:	4638      	mov	r0, r7
 800988e:	f7ff fe01 	bl	8009494 <_Bfree>
 8009892:	4646      	mov	r6, r8
 8009894:	106d      	asrs	r5, r5, #1
 8009896:	d00b      	beq.n	80098b0 <__pow5mult+0xa0>
 8009898:	6820      	ldr	r0, [r4, #0]
 800989a:	b938      	cbnz	r0, 80098ac <__pow5mult+0x9c>
 800989c:	4622      	mov	r2, r4
 800989e:	4621      	mov	r1, r4
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7ff ff0b 	bl	80096bc <__multiply>
 80098a6:	6020      	str	r0, [r4, #0]
 80098a8:	f8c0 9000 	str.w	r9, [r0]
 80098ac:	4604      	mov	r4, r0
 80098ae:	e7e4      	b.n	800987a <__pow5mult+0x6a>
 80098b0:	4630      	mov	r0, r6
 80098b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098b6:	bf00      	nop
 80098b8:	0800bd6c 	.word	0x0800bd6c
 80098bc:	0800bc92 	.word	0x0800bc92
 80098c0:	0800bd12 	.word	0x0800bd12

080098c4 <__lshift>:
 80098c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c8:	460c      	mov	r4, r1
 80098ca:	6849      	ldr	r1, [r1, #4]
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098d2:	68a3      	ldr	r3, [r4, #8]
 80098d4:	4607      	mov	r7, r0
 80098d6:	4691      	mov	r9, r2
 80098d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098dc:	f108 0601 	add.w	r6, r8, #1
 80098e0:	42b3      	cmp	r3, r6
 80098e2:	db0b      	blt.n	80098fc <__lshift+0x38>
 80098e4:	4638      	mov	r0, r7
 80098e6:	f7ff fd95 	bl	8009414 <_Balloc>
 80098ea:	4605      	mov	r5, r0
 80098ec:	b948      	cbnz	r0, 8009902 <__lshift+0x3e>
 80098ee:	4602      	mov	r2, r0
 80098f0:	4b28      	ldr	r3, [pc, #160]	@ (8009994 <__lshift+0xd0>)
 80098f2:	4829      	ldr	r0, [pc, #164]	@ (8009998 <__lshift+0xd4>)
 80098f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098f8:	f001 fb0a 	bl	800af10 <__assert_func>
 80098fc:	3101      	adds	r1, #1
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	e7ee      	b.n	80098e0 <__lshift+0x1c>
 8009902:	2300      	movs	r3, #0
 8009904:	f100 0114 	add.w	r1, r0, #20
 8009908:	f100 0210 	add.w	r2, r0, #16
 800990c:	4618      	mov	r0, r3
 800990e:	4553      	cmp	r3, sl
 8009910:	db33      	blt.n	800997a <__lshift+0xb6>
 8009912:	6920      	ldr	r0, [r4, #16]
 8009914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009918:	f104 0314 	add.w	r3, r4, #20
 800991c:	f019 091f 	ands.w	r9, r9, #31
 8009920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009928:	d02b      	beq.n	8009982 <__lshift+0xbe>
 800992a:	f1c9 0e20 	rsb	lr, r9, #32
 800992e:	468a      	mov	sl, r1
 8009930:	2200      	movs	r2, #0
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	fa00 f009 	lsl.w	r0, r0, r9
 8009938:	4310      	orrs	r0, r2
 800993a:	f84a 0b04 	str.w	r0, [sl], #4
 800993e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009942:	459c      	cmp	ip, r3
 8009944:	fa22 f20e 	lsr.w	r2, r2, lr
 8009948:	d8f3      	bhi.n	8009932 <__lshift+0x6e>
 800994a:	ebac 0304 	sub.w	r3, ip, r4
 800994e:	3b15      	subs	r3, #21
 8009950:	f023 0303 	bic.w	r3, r3, #3
 8009954:	3304      	adds	r3, #4
 8009956:	f104 0015 	add.w	r0, r4, #21
 800995a:	4584      	cmp	ip, r0
 800995c:	bf38      	it	cc
 800995e:	2304      	movcc	r3, #4
 8009960:	50ca      	str	r2, [r1, r3]
 8009962:	b10a      	cbz	r2, 8009968 <__lshift+0xa4>
 8009964:	f108 0602 	add.w	r6, r8, #2
 8009968:	3e01      	subs	r6, #1
 800996a:	4638      	mov	r0, r7
 800996c:	612e      	str	r6, [r5, #16]
 800996e:	4621      	mov	r1, r4
 8009970:	f7ff fd90 	bl	8009494 <_Bfree>
 8009974:	4628      	mov	r0, r5
 8009976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997a:	f842 0f04 	str.w	r0, [r2, #4]!
 800997e:	3301      	adds	r3, #1
 8009980:	e7c5      	b.n	800990e <__lshift+0x4a>
 8009982:	3904      	subs	r1, #4
 8009984:	f853 2b04 	ldr.w	r2, [r3], #4
 8009988:	f841 2f04 	str.w	r2, [r1, #4]!
 800998c:	459c      	cmp	ip, r3
 800998e:	d8f9      	bhi.n	8009984 <__lshift+0xc0>
 8009990:	e7ea      	b.n	8009968 <__lshift+0xa4>
 8009992:	bf00      	nop
 8009994:	0800bd01 	.word	0x0800bd01
 8009998:	0800bd12 	.word	0x0800bd12

0800999c <__mcmp>:
 800999c:	690a      	ldr	r2, [r1, #16]
 800999e:	4603      	mov	r3, r0
 80099a0:	6900      	ldr	r0, [r0, #16]
 80099a2:	1a80      	subs	r0, r0, r2
 80099a4:	b530      	push	{r4, r5, lr}
 80099a6:	d10e      	bne.n	80099c6 <__mcmp+0x2a>
 80099a8:	3314      	adds	r3, #20
 80099aa:	3114      	adds	r1, #20
 80099ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099bc:	4295      	cmp	r5, r2
 80099be:	d003      	beq.n	80099c8 <__mcmp+0x2c>
 80099c0:	d205      	bcs.n	80099ce <__mcmp+0x32>
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	bd30      	pop	{r4, r5, pc}
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	d3f3      	bcc.n	80099b4 <__mcmp+0x18>
 80099cc:	e7fb      	b.n	80099c6 <__mcmp+0x2a>
 80099ce:	2001      	movs	r0, #1
 80099d0:	e7f9      	b.n	80099c6 <__mcmp+0x2a>
	...

080099d4 <__mdiff>:
 80099d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	4689      	mov	r9, r1
 80099da:	4606      	mov	r6, r0
 80099dc:	4611      	mov	r1, r2
 80099de:	4648      	mov	r0, r9
 80099e0:	4614      	mov	r4, r2
 80099e2:	f7ff ffdb 	bl	800999c <__mcmp>
 80099e6:	1e05      	subs	r5, r0, #0
 80099e8:	d112      	bne.n	8009a10 <__mdiff+0x3c>
 80099ea:	4629      	mov	r1, r5
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7ff fd11 	bl	8009414 <_Balloc>
 80099f2:	4602      	mov	r2, r0
 80099f4:	b928      	cbnz	r0, 8009a02 <__mdiff+0x2e>
 80099f6:	4b3f      	ldr	r3, [pc, #252]	@ (8009af4 <__mdiff+0x120>)
 80099f8:	f240 2137 	movw	r1, #567	@ 0x237
 80099fc:	483e      	ldr	r0, [pc, #248]	@ (8009af8 <__mdiff+0x124>)
 80099fe:	f001 fa87 	bl	800af10 <__assert_func>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a08:	4610      	mov	r0, r2
 8009a0a:	b003      	add	sp, #12
 8009a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a10:	bfbc      	itt	lt
 8009a12:	464b      	movlt	r3, r9
 8009a14:	46a1      	movlt	r9, r4
 8009a16:	4630      	mov	r0, r6
 8009a18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a1c:	bfba      	itte	lt
 8009a1e:	461c      	movlt	r4, r3
 8009a20:	2501      	movlt	r5, #1
 8009a22:	2500      	movge	r5, #0
 8009a24:	f7ff fcf6 	bl	8009414 <_Balloc>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	b918      	cbnz	r0, 8009a34 <__mdiff+0x60>
 8009a2c:	4b31      	ldr	r3, [pc, #196]	@ (8009af4 <__mdiff+0x120>)
 8009a2e:	f240 2145 	movw	r1, #581	@ 0x245
 8009a32:	e7e3      	b.n	80099fc <__mdiff+0x28>
 8009a34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a38:	6926      	ldr	r6, [r4, #16]
 8009a3a:	60c5      	str	r5, [r0, #12]
 8009a3c:	f109 0310 	add.w	r3, r9, #16
 8009a40:	f109 0514 	add.w	r5, r9, #20
 8009a44:	f104 0e14 	add.w	lr, r4, #20
 8009a48:	f100 0b14 	add.w	fp, r0, #20
 8009a4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	46d9      	mov	r9, fp
 8009a58:	f04f 0c00 	mov.w	ip, #0
 8009a5c:	9b01      	ldr	r3, [sp, #4]
 8009a5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	fa1f f38a 	uxth.w	r3, sl
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	b283      	uxth	r3, r0
 8009a70:	1acb      	subs	r3, r1, r3
 8009a72:	0c00      	lsrs	r0, r0, #16
 8009a74:	4463      	add	r3, ip
 8009a76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a84:	4576      	cmp	r6, lr
 8009a86:	f849 3b04 	str.w	r3, [r9], #4
 8009a8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a8e:	d8e5      	bhi.n	8009a5c <__mdiff+0x88>
 8009a90:	1b33      	subs	r3, r6, r4
 8009a92:	3b15      	subs	r3, #21
 8009a94:	f023 0303 	bic.w	r3, r3, #3
 8009a98:	3415      	adds	r4, #21
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	42a6      	cmp	r6, r4
 8009a9e:	bf38      	it	cc
 8009aa0:	2304      	movcc	r3, #4
 8009aa2:	441d      	add	r5, r3
 8009aa4:	445b      	add	r3, fp
 8009aa6:	461e      	mov	r6, r3
 8009aa8:	462c      	mov	r4, r5
 8009aaa:	4544      	cmp	r4, r8
 8009aac:	d30e      	bcc.n	8009acc <__mdiff+0xf8>
 8009aae:	f108 0103 	add.w	r1, r8, #3
 8009ab2:	1b49      	subs	r1, r1, r5
 8009ab4:	f021 0103 	bic.w	r1, r1, #3
 8009ab8:	3d03      	subs	r5, #3
 8009aba:	45a8      	cmp	r8, r5
 8009abc:	bf38      	it	cc
 8009abe:	2100      	movcc	r1, #0
 8009ac0:	440b      	add	r3, r1
 8009ac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ac6:	b191      	cbz	r1, 8009aee <__mdiff+0x11a>
 8009ac8:	6117      	str	r7, [r2, #16]
 8009aca:	e79d      	b.n	8009a08 <__mdiff+0x34>
 8009acc:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ad0:	46e6      	mov	lr, ip
 8009ad2:	0c08      	lsrs	r0, r1, #16
 8009ad4:	fa1c fc81 	uxtah	ip, ip, r1
 8009ad8:	4471      	add	r1, lr
 8009ada:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ade:	b289      	uxth	r1, r1
 8009ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ae4:	f846 1b04 	str.w	r1, [r6], #4
 8009ae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009aec:	e7dd      	b.n	8009aaa <__mdiff+0xd6>
 8009aee:	3f01      	subs	r7, #1
 8009af0:	e7e7      	b.n	8009ac2 <__mdiff+0xee>
 8009af2:	bf00      	nop
 8009af4:	0800bd01 	.word	0x0800bd01
 8009af8:	0800bd12 	.word	0x0800bd12

08009afc <__ulp>:
 8009afc:	b082      	sub	sp, #8
 8009afe:	ed8d 0b00 	vstr	d0, [sp]
 8009b02:	9a01      	ldr	r2, [sp, #4]
 8009b04:	4b0f      	ldr	r3, [pc, #60]	@ (8009b44 <__ulp+0x48>)
 8009b06:	4013      	ands	r3, r2
 8009b08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dc08      	bgt.n	8009b22 <__ulp+0x26>
 8009b10:	425b      	negs	r3, r3
 8009b12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b1a:	da04      	bge.n	8009b26 <__ulp+0x2a>
 8009b1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b20:	4113      	asrs	r3, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	e008      	b.n	8009b38 <__ulp+0x3c>
 8009b26:	f1a2 0314 	sub.w	r3, r2, #20
 8009b2a:	2b1e      	cmp	r3, #30
 8009b2c:	bfda      	itte	le
 8009b2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b32:	40da      	lsrle	r2, r3
 8009b34:	2201      	movgt	r2, #1
 8009b36:	2300      	movs	r3, #0
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	ec41 0b10 	vmov	d0, r0, r1
 8009b40:	b002      	add	sp, #8
 8009b42:	4770      	bx	lr
 8009b44:	7ff00000 	.word	0x7ff00000

08009b48 <__b2d>:
 8009b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4c:	6906      	ldr	r6, [r0, #16]
 8009b4e:	f100 0814 	add.w	r8, r0, #20
 8009b52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b56:	1f37      	subs	r7, r6, #4
 8009b58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f7ff fd4b 	bl	80095f8 <__hi0bits>
 8009b62:	f1c0 0320 	rsb	r3, r0, #32
 8009b66:	280a      	cmp	r0, #10
 8009b68:	600b      	str	r3, [r1, #0]
 8009b6a:	491b      	ldr	r1, [pc, #108]	@ (8009bd8 <__b2d+0x90>)
 8009b6c:	dc15      	bgt.n	8009b9a <__b2d+0x52>
 8009b6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b72:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b76:	45b8      	cmp	r8, r7
 8009b78:	ea43 0501 	orr.w	r5, r3, r1
 8009b7c:	bf34      	ite	cc
 8009b7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b82:	2300      	movcs	r3, #0
 8009b84:	3015      	adds	r0, #21
 8009b86:	fa02 f000 	lsl.w	r0, r2, r0
 8009b8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b8e:	4303      	orrs	r3, r0
 8009b90:	461c      	mov	r4, r3
 8009b92:	ec45 4b10 	vmov	d0, r4, r5
 8009b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9a:	45b8      	cmp	r8, r7
 8009b9c:	bf3a      	itte	cc
 8009b9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ba2:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ba6:	2300      	movcs	r3, #0
 8009ba8:	380b      	subs	r0, #11
 8009baa:	d012      	beq.n	8009bd2 <__b2d+0x8a>
 8009bac:	f1c0 0120 	rsb	r1, r0, #32
 8009bb0:	fa23 f401 	lsr.w	r4, r3, r1
 8009bb4:	4082      	lsls	r2, r0
 8009bb6:	4322      	orrs	r2, r4
 8009bb8:	4547      	cmp	r7, r8
 8009bba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009bbe:	bf8c      	ite	hi
 8009bc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009bc4:	2200      	movls	r2, #0
 8009bc6:	4083      	lsls	r3, r0
 8009bc8:	40ca      	lsrs	r2, r1
 8009bca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	e7de      	b.n	8009b90 <__b2d+0x48>
 8009bd2:	ea42 0501 	orr.w	r5, r2, r1
 8009bd6:	e7db      	b.n	8009b90 <__b2d+0x48>
 8009bd8:	3ff00000 	.word	0x3ff00000

08009bdc <__d2b>:
 8009bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	460f      	mov	r7, r1
 8009be2:	2101      	movs	r1, #1
 8009be4:	ec59 8b10 	vmov	r8, r9, d0
 8009be8:	4616      	mov	r6, r2
 8009bea:	f7ff fc13 	bl	8009414 <_Balloc>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	b930      	cbnz	r0, 8009c00 <__d2b+0x24>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4b23      	ldr	r3, [pc, #140]	@ (8009c84 <__d2b+0xa8>)
 8009bf6:	4824      	ldr	r0, [pc, #144]	@ (8009c88 <__d2b+0xac>)
 8009bf8:	f240 310f 	movw	r1, #783	@ 0x30f
 8009bfc:	f001 f988 	bl	800af10 <__assert_func>
 8009c00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c08:	b10d      	cbz	r5, 8009c0e <__d2b+0x32>
 8009c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	f1b8 0300 	subs.w	r3, r8, #0
 8009c14:	d023      	beq.n	8009c5e <__d2b+0x82>
 8009c16:	4668      	mov	r0, sp
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	f7ff fd0c 	bl	8009636 <__lo0bits>
 8009c1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c22:	b1d0      	cbz	r0, 8009c5a <__d2b+0x7e>
 8009c24:	f1c0 0320 	rsb	r3, r0, #32
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	430b      	orrs	r3, r1
 8009c2e:	40c2      	lsrs	r2, r0
 8009c30:	6163      	str	r3, [r4, #20]
 8009c32:	9201      	str	r2, [sp, #4]
 8009c34:	9b01      	ldr	r3, [sp, #4]
 8009c36:	61a3      	str	r3, [r4, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bf0c      	ite	eq
 8009c3c:	2201      	moveq	r2, #1
 8009c3e:	2202      	movne	r2, #2
 8009c40:	6122      	str	r2, [r4, #16]
 8009c42:	b1a5      	cbz	r5, 8009c6e <__d2b+0x92>
 8009c44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c48:	4405      	add	r5, r0
 8009c4a:	603d      	str	r5, [r7, #0]
 8009c4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c50:	6030      	str	r0, [r6, #0]
 8009c52:	4620      	mov	r0, r4
 8009c54:	b003      	add	sp, #12
 8009c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c5a:	6161      	str	r1, [r4, #20]
 8009c5c:	e7ea      	b.n	8009c34 <__d2b+0x58>
 8009c5e:	a801      	add	r0, sp, #4
 8009c60:	f7ff fce9 	bl	8009636 <__lo0bits>
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	6163      	str	r3, [r4, #20]
 8009c68:	3020      	adds	r0, #32
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	e7e8      	b.n	8009c40 <__d2b+0x64>
 8009c6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c76:	6038      	str	r0, [r7, #0]
 8009c78:	6918      	ldr	r0, [r3, #16]
 8009c7a:	f7ff fcbd 	bl	80095f8 <__hi0bits>
 8009c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c82:	e7e5      	b.n	8009c50 <__d2b+0x74>
 8009c84:	0800bd01 	.word	0x0800bd01
 8009c88:	0800bd12 	.word	0x0800bd12

08009c8c <__ratio>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	b085      	sub	sp, #20
 8009c92:	e9cd 1000 	strd	r1, r0, [sp]
 8009c96:	a902      	add	r1, sp, #8
 8009c98:	f7ff ff56 	bl	8009b48 <__b2d>
 8009c9c:	9800      	ldr	r0, [sp, #0]
 8009c9e:	a903      	add	r1, sp, #12
 8009ca0:	ec55 4b10 	vmov	r4, r5, d0
 8009ca4:	f7ff ff50 	bl	8009b48 <__b2d>
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	6919      	ldr	r1, [r3, #16]
 8009cac:	9b00      	ldr	r3, [sp, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	1ac9      	subs	r1, r1, r3
 8009cb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	ec5b ab10 	vmov	sl, fp, d0
 8009cbc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bfce      	itee	gt
 8009cc4:	462a      	movgt	r2, r5
 8009cc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cca:	465a      	movle	r2, fp
 8009ccc:	462f      	mov	r7, r5
 8009cce:	46d9      	mov	r9, fp
 8009cd0:	bfcc      	ite	gt
 8009cd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cd6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009cda:	464b      	mov	r3, r9
 8009cdc:	4652      	mov	r2, sl
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7f6 fdc3 	bl	800086c <__aeabi_ddiv>
 8009ce6:	ec41 0b10 	vmov	d0, r0, r1
 8009cea:	b005      	add	sp, #20
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cf0 <__copybits>:
 8009cf0:	3901      	subs	r1, #1
 8009cf2:	b570      	push	{r4, r5, r6, lr}
 8009cf4:	1149      	asrs	r1, r1, #5
 8009cf6:	6914      	ldr	r4, [r2, #16]
 8009cf8:	3101      	adds	r1, #1
 8009cfa:	f102 0314 	add.w	r3, r2, #20
 8009cfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d06:	1f05      	subs	r5, r0, #4
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	d30c      	bcc.n	8009d26 <__copybits+0x36>
 8009d0c:	1aa3      	subs	r3, r4, r2
 8009d0e:	3b11      	subs	r3, #17
 8009d10:	f023 0303 	bic.w	r3, r3, #3
 8009d14:	3211      	adds	r2, #17
 8009d16:	42a2      	cmp	r2, r4
 8009d18:	bf88      	it	hi
 8009d1a:	2300      	movhi	r3, #0
 8009d1c:	4418      	add	r0, r3
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4288      	cmp	r0, r1
 8009d22:	d305      	bcc.n	8009d30 <__copybits+0x40>
 8009d24:	bd70      	pop	{r4, r5, r6, pc}
 8009d26:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d2a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d2e:	e7eb      	b.n	8009d08 <__copybits+0x18>
 8009d30:	f840 3b04 	str.w	r3, [r0], #4
 8009d34:	e7f4      	b.n	8009d20 <__copybits+0x30>

08009d36 <__any_on>:
 8009d36:	f100 0214 	add.w	r2, r0, #20
 8009d3a:	6900      	ldr	r0, [r0, #16]
 8009d3c:	114b      	asrs	r3, r1, #5
 8009d3e:	4298      	cmp	r0, r3
 8009d40:	b510      	push	{r4, lr}
 8009d42:	db11      	blt.n	8009d68 <__any_on+0x32>
 8009d44:	dd0a      	ble.n	8009d5c <__any_on+0x26>
 8009d46:	f011 011f 	ands.w	r1, r1, #31
 8009d4a:	d007      	beq.n	8009d5c <__any_on+0x26>
 8009d4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d50:	fa24 f001 	lsr.w	r0, r4, r1
 8009d54:	fa00 f101 	lsl.w	r1, r0, r1
 8009d58:	428c      	cmp	r4, r1
 8009d5a:	d10b      	bne.n	8009d74 <__any_on+0x3e>
 8009d5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d803      	bhi.n	8009d6c <__any_on+0x36>
 8009d64:	2000      	movs	r0, #0
 8009d66:	bd10      	pop	{r4, pc}
 8009d68:	4603      	mov	r3, r0
 8009d6a:	e7f7      	b.n	8009d5c <__any_on+0x26>
 8009d6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d70:	2900      	cmp	r1, #0
 8009d72:	d0f5      	beq.n	8009d60 <__any_on+0x2a>
 8009d74:	2001      	movs	r0, #1
 8009d76:	e7f6      	b.n	8009d66 <__any_on+0x30>

08009d78 <sulp>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	ec45 4b10 	vmov	d0, r4, r5
 8009d82:	4616      	mov	r6, r2
 8009d84:	f7ff feba 	bl	8009afc <__ulp>
 8009d88:	ec51 0b10 	vmov	r0, r1, d0
 8009d8c:	b17e      	cbz	r6, 8009dae <sulp+0x36>
 8009d8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dd09      	ble.n	8009dae <sulp+0x36>
 8009d9a:	051b      	lsls	r3, r3, #20
 8009d9c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009da0:	2400      	movs	r4, #0
 8009da2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	f7f6 fc35 	bl	8000618 <__aeabi_dmul>
 8009dae:	ec41 0b10 	vmov	d0, r0, r1
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	0000      	movs	r0, r0
	...

08009db8 <_strtod_l>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	b09f      	sub	sp, #124	@ 0x7c
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009dc6:	9005      	str	r0, [sp, #20]
 8009dc8:	f04f 0a00 	mov.w	sl, #0
 8009dcc:	f04f 0b00 	mov.w	fp, #0
 8009dd0:	460a      	mov	r2, r1
 8009dd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dd4:	7811      	ldrb	r1, [r2, #0]
 8009dd6:	292b      	cmp	r1, #43	@ 0x2b
 8009dd8:	d04a      	beq.n	8009e70 <_strtod_l+0xb8>
 8009dda:	d838      	bhi.n	8009e4e <_strtod_l+0x96>
 8009ddc:	290d      	cmp	r1, #13
 8009dde:	d832      	bhi.n	8009e46 <_strtod_l+0x8e>
 8009de0:	2908      	cmp	r1, #8
 8009de2:	d832      	bhi.n	8009e4a <_strtod_l+0x92>
 8009de4:	2900      	cmp	r1, #0
 8009de6:	d03b      	beq.n	8009e60 <_strtod_l+0xa8>
 8009de8:	2200      	movs	r2, #0
 8009dea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009dec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009dee:	782a      	ldrb	r2, [r5, #0]
 8009df0:	2a30      	cmp	r2, #48	@ 0x30
 8009df2:	f040 80b3 	bne.w	8009f5c <_strtod_l+0x1a4>
 8009df6:	786a      	ldrb	r2, [r5, #1]
 8009df8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dfc:	2a58      	cmp	r2, #88	@ 0x58
 8009dfe:	d16e      	bne.n	8009ede <_strtod_l+0x126>
 8009e00:	9302      	str	r3, [sp, #8]
 8009e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4a8e      	ldr	r2, [pc, #568]	@ (800a044 <_strtod_l+0x28c>)
 8009e0c:	9805      	ldr	r0, [sp, #20]
 8009e0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e10:	a919      	add	r1, sp, #100	@ 0x64
 8009e12:	f001 f903 	bl	800b01c <__gethex>
 8009e16:	f010 060f 	ands.w	r6, r0, #15
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	d005      	beq.n	8009e2a <_strtod_l+0x72>
 8009e1e:	2e06      	cmp	r6, #6
 8009e20:	d128      	bne.n	8009e74 <_strtod_l+0xbc>
 8009e22:	3501      	adds	r5, #1
 8009e24:	2300      	movs	r3, #0
 8009e26:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f040 858e 	bne.w	800a94e <_strtod_l+0xb96>
 8009e32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e34:	b1cb      	cbz	r3, 8009e6a <_strtod_l+0xb2>
 8009e36:	4652      	mov	r2, sl
 8009e38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009e3c:	ec43 2b10 	vmov	d0, r2, r3
 8009e40:	b01f      	add	sp, #124	@ 0x7c
 8009e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e46:	2920      	cmp	r1, #32
 8009e48:	d1ce      	bne.n	8009de8 <_strtod_l+0x30>
 8009e4a:	3201      	adds	r2, #1
 8009e4c:	e7c1      	b.n	8009dd2 <_strtod_l+0x1a>
 8009e4e:	292d      	cmp	r1, #45	@ 0x2d
 8009e50:	d1ca      	bne.n	8009de8 <_strtod_l+0x30>
 8009e52:	2101      	movs	r1, #1
 8009e54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e56:	1c51      	adds	r1, r2, #1
 8009e58:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e5a:	7852      	ldrb	r2, [r2, #1]
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	d1c5      	bne.n	8009dec <_strtod_l+0x34>
 8009e60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e62:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f040 8570 	bne.w	800a94a <_strtod_l+0xb92>
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	465b      	mov	r3, fp
 8009e6e:	e7e5      	b.n	8009e3c <_strtod_l+0x84>
 8009e70:	2100      	movs	r1, #0
 8009e72:	e7ef      	b.n	8009e54 <_strtod_l+0x9c>
 8009e74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e76:	b13a      	cbz	r2, 8009e88 <_strtod_l+0xd0>
 8009e78:	2135      	movs	r1, #53	@ 0x35
 8009e7a:	a81c      	add	r0, sp, #112	@ 0x70
 8009e7c:	f7ff ff38 	bl	8009cf0 <__copybits>
 8009e80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e82:	9805      	ldr	r0, [sp, #20]
 8009e84:	f7ff fb06 	bl	8009494 <_Bfree>
 8009e88:	3e01      	subs	r6, #1
 8009e8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009e8c:	2e04      	cmp	r6, #4
 8009e8e:	d806      	bhi.n	8009e9e <_strtod_l+0xe6>
 8009e90:	e8df f006 	tbb	[pc, r6]
 8009e94:	201d0314 	.word	0x201d0314
 8009e98:	14          	.byte	0x14
 8009e99:	00          	.byte	0x00
 8009e9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009e9e:	05e1      	lsls	r1, r4, #23
 8009ea0:	bf48      	it	mi
 8009ea2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ea6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009eaa:	0d1b      	lsrs	r3, r3, #20
 8009eac:	051b      	lsls	r3, r3, #20
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1bb      	bne.n	8009e2a <_strtod_l+0x72>
 8009eb2:	f7fe fbe5 	bl	8008680 <__errno>
 8009eb6:	2322      	movs	r3, #34	@ 0x22
 8009eb8:	6003      	str	r3, [r0, #0]
 8009eba:	e7b6      	b.n	8009e2a <_strtod_l+0x72>
 8009ebc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ec0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009ec4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ec8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ecc:	e7e7      	b.n	8009e9e <_strtod_l+0xe6>
 8009ece:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a04c <_strtod_l+0x294>
 8009ed2:	e7e4      	b.n	8009e9e <_strtod_l+0xe6>
 8009ed4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009ed8:	f04f 3aff 	mov.w	sl, #4294967295
 8009edc:	e7df      	b.n	8009e9e <_strtod_l+0xe6>
 8009ede:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	2b30      	cmp	r3, #48	@ 0x30
 8009ee8:	d0f9      	beq.n	8009ede <_strtod_l+0x126>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d09d      	beq.n	8009e2a <_strtod_l+0x72>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ef4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	9308      	str	r3, [sp, #32]
 8009efa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009efc:	461f      	mov	r7, r3
 8009efe:	220a      	movs	r2, #10
 8009f00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f02:	7805      	ldrb	r5, [r0, #0]
 8009f04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f08:	b2d9      	uxtb	r1, r3
 8009f0a:	2909      	cmp	r1, #9
 8009f0c:	d928      	bls.n	8009f60 <_strtod_l+0x1a8>
 8009f0e:	494e      	ldr	r1, [pc, #312]	@ (800a048 <_strtod_l+0x290>)
 8009f10:	2201      	movs	r2, #1
 8009f12:	f000 ffd5 	bl	800aec0 <strncmp>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d032      	beq.n	8009f80 <_strtod_l+0x1c8>
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	462a      	mov	r2, r5
 8009f1e:	4681      	mov	r9, r0
 8009f20:	463d      	mov	r5, r7
 8009f22:	4603      	mov	r3, r0
 8009f24:	2a65      	cmp	r2, #101	@ 0x65
 8009f26:	d001      	beq.n	8009f2c <_strtod_l+0x174>
 8009f28:	2a45      	cmp	r2, #69	@ 0x45
 8009f2a:	d114      	bne.n	8009f56 <_strtod_l+0x19e>
 8009f2c:	b91d      	cbnz	r5, 8009f36 <_strtod_l+0x17e>
 8009f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f30:	4302      	orrs	r2, r0
 8009f32:	d095      	beq.n	8009e60 <_strtod_l+0xa8>
 8009f34:	2500      	movs	r5, #0
 8009f36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f38:	1c62      	adds	r2, r4, #1
 8009f3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f3c:	7862      	ldrb	r2, [r4, #1]
 8009f3e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f40:	d077      	beq.n	800a032 <_strtod_l+0x27a>
 8009f42:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f44:	d07b      	beq.n	800a03e <_strtod_l+0x286>
 8009f46:	f04f 0c00 	mov.w	ip, #0
 8009f4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f4e:	2909      	cmp	r1, #9
 8009f50:	f240 8082 	bls.w	800a058 <_strtod_l+0x2a0>
 8009f54:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f56:	f04f 0800 	mov.w	r8, #0
 8009f5a:	e0a2      	b.n	800a0a2 <_strtod_l+0x2ea>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e7c7      	b.n	8009ef0 <_strtod_l+0x138>
 8009f60:	2f08      	cmp	r7, #8
 8009f62:	bfd5      	itete	le
 8009f64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f66:	9908      	ldrgt	r1, [sp, #32]
 8009f68:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f70:	f100 0001 	add.w	r0, r0, #1
 8009f74:	bfd4      	ite	le
 8009f76:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009f78:	9308      	strgt	r3, [sp, #32]
 8009f7a:	3701      	adds	r7, #1
 8009f7c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f7e:	e7bf      	b.n	8009f00 <_strtod_l+0x148>
 8009f80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f86:	785a      	ldrb	r2, [r3, #1]
 8009f88:	b37f      	cbz	r7, 8009fea <_strtod_l+0x232>
 8009f8a:	4681      	mov	r9, r0
 8009f8c:	463d      	mov	r5, r7
 8009f8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d912      	bls.n	8009fbc <_strtod_l+0x204>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e7c4      	b.n	8009f24 <_strtod_l+0x16c>
 8009f9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fa0:	785a      	ldrb	r2, [r3, #1]
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	2a30      	cmp	r2, #48	@ 0x30
 8009fa6:	d0f8      	beq.n	8009f9a <_strtod_l+0x1e2>
 8009fa8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	f200 84d3 	bhi.w	800a958 <_strtod_l+0xba0>
 8009fb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fb6:	4681      	mov	r9, r0
 8009fb8:	2000      	movs	r0, #0
 8009fba:	4605      	mov	r5, r0
 8009fbc:	3a30      	subs	r2, #48	@ 0x30
 8009fbe:	f100 0301 	add.w	r3, r0, #1
 8009fc2:	d02a      	beq.n	800a01a <_strtod_l+0x262>
 8009fc4:	4499      	add	r9, r3
 8009fc6:	eb00 0c05 	add.w	ip, r0, r5
 8009fca:	462b      	mov	r3, r5
 8009fcc:	210a      	movs	r1, #10
 8009fce:	4563      	cmp	r3, ip
 8009fd0:	d10d      	bne.n	8009fee <_strtod_l+0x236>
 8009fd2:	1c69      	adds	r1, r5, #1
 8009fd4:	4401      	add	r1, r0
 8009fd6:	4428      	add	r0, r5
 8009fd8:	2808      	cmp	r0, #8
 8009fda:	dc16      	bgt.n	800a00a <_strtod_l+0x252>
 8009fdc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fde:	230a      	movs	r3, #10
 8009fe0:	fb03 2300 	mla	r3, r3, r0, r2
 8009fe4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	e018      	b.n	800a01c <_strtod_l+0x264>
 8009fea:	4638      	mov	r0, r7
 8009fec:	e7da      	b.n	8009fa4 <_strtod_l+0x1ec>
 8009fee:	2b08      	cmp	r3, #8
 8009ff0:	f103 0301 	add.w	r3, r3, #1
 8009ff4:	dc03      	bgt.n	8009ffe <_strtod_l+0x246>
 8009ff6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009ff8:	434e      	muls	r6, r1
 8009ffa:	960a      	str	r6, [sp, #40]	@ 0x28
 8009ffc:	e7e7      	b.n	8009fce <_strtod_l+0x216>
 8009ffe:	2b10      	cmp	r3, #16
 800a000:	bfde      	ittt	le
 800a002:	9e08      	ldrle	r6, [sp, #32]
 800a004:	434e      	mulle	r6, r1
 800a006:	9608      	strle	r6, [sp, #32]
 800a008:	e7e1      	b.n	8009fce <_strtod_l+0x216>
 800a00a:	280f      	cmp	r0, #15
 800a00c:	dceb      	bgt.n	8009fe6 <_strtod_l+0x22e>
 800a00e:	9808      	ldr	r0, [sp, #32]
 800a010:	230a      	movs	r3, #10
 800a012:	fb03 2300 	mla	r3, r3, r0, r2
 800a016:	9308      	str	r3, [sp, #32]
 800a018:	e7e5      	b.n	8009fe6 <_strtod_l+0x22e>
 800a01a:	4629      	mov	r1, r5
 800a01c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a01e:	1c50      	adds	r0, r2, #1
 800a020:	9019      	str	r0, [sp, #100]	@ 0x64
 800a022:	7852      	ldrb	r2, [r2, #1]
 800a024:	4618      	mov	r0, r3
 800a026:	460d      	mov	r5, r1
 800a028:	e7b1      	b.n	8009f8e <_strtod_l+0x1d6>
 800a02a:	f04f 0900 	mov.w	r9, #0
 800a02e:	2301      	movs	r3, #1
 800a030:	e77d      	b.n	8009f2e <_strtod_l+0x176>
 800a032:	f04f 0c00 	mov.w	ip, #0
 800a036:	1ca2      	adds	r2, r4, #2
 800a038:	9219      	str	r2, [sp, #100]	@ 0x64
 800a03a:	78a2      	ldrb	r2, [r4, #2]
 800a03c:	e785      	b.n	8009f4a <_strtod_l+0x192>
 800a03e:	f04f 0c01 	mov.w	ip, #1
 800a042:	e7f8      	b.n	800a036 <_strtod_l+0x27e>
 800a044:	0800be80 	.word	0x0800be80
 800a048:	0800be68 	.word	0x0800be68
 800a04c:	7ff00000 	.word	0x7ff00000
 800a050:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a052:	1c51      	adds	r1, r2, #1
 800a054:	9119      	str	r1, [sp, #100]	@ 0x64
 800a056:	7852      	ldrb	r2, [r2, #1]
 800a058:	2a30      	cmp	r2, #48	@ 0x30
 800a05a:	d0f9      	beq.n	800a050 <_strtod_l+0x298>
 800a05c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a060:	2908      	cmp	r1, #8
 800a062:	f63f af78 	bhi.w	8009f56 <_strtod_l+0x19e>
 800a066:	3a30      	subs	r2, #48	@ 0x30
 800a068:	920e      	str	r2, [sp, #56]	@ 0x38
 800a06a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a06c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a06e:	f04f 080a 	mov.w	r8, #10
 800a072:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a074:	1c56      	adds	r6, r2, #1
 800a076:	9619      	str	r6, [sp, #100]	@ 0x64
 800a078:	7852      	ldrb	r2, [r2, #1]
 800a07a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a07e:	f1be 0f09 	cmp.w	lr, #9
 800a082:	d939      	bls.n	800a0f8 <_strtod_l+0x340>
 800a084:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a086:	1a76      	subs	r6, r6, r1
 800a088:	2e08      	cmp	r6, #8
 800a08a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a08e:	dc03      	bgt.n	800a098 <_strtod_l+0x2e0>
 800a090:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a092:	4588      	cmp	r8, r1
 800a094:	bfa8      	it	ge
 800a096:	4688      	movge	r8, r1
 800a098:	f1bc 0f00 	cmp.w	ip, #0
 800a09c:	d001      	beq.n	800a0a2 <_strtod_l+0x2ea>
 800a09e:	f1c8 0800 	rsb	r8, r8, #0
 800a0a2:	2d00      	cmp	r5, #0
 800a0a4:	d14e      	bne.n	800a144 <_strtod_l+0x38c>
 800a0a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0a8:	4308      	orrs	r0, r1
 800a0aa:	f47f aebe 	bne.w	8009e2a <_strtod_l+0x72>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f47f aed6 	bne.w	8009e60 <_strtod_l+0xa8>
 800a0b4:	2a69      	cmp	r2, #105	@ 0x69
 800a0b6:	d028      	beq.n	800a10a <_strtod_l+0x352>
 800a0b8:	dc25      	bgt.n	800a106 <_strtod_l+0x34e>
 800a0ba:	2a49      	cmp	r2, #73	@ 0x49
 800a0bc:	d025      	beq.n	800a10a <_strtod_l+0x352>
 800a0be:	2a4e      	cmp	r2, #78	@ 0x4e
 800a0c0:	f47f aece 	bne.w	8009e60 <_strtod_l+0xa8>
 800a0c4:	499b      	ldr	r1, [pc, #620]	@ (800a334 <_strtod_l+0x57c>)
 800a0c6:	a819      	add	r0, sp, #100	@ 0x64
 800a0c8:	f001 f9ca 	bl	800b460 <__match>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f43f aec7 	beq.w	8009e60 <_strtod_l+0xa8>
 800a0d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b28      	cmp	r3, #40	@ 0x28
 800a0d8:	d12e      	bne.n	800a138 <_strtod_l+0x380>
 800a0da:	4997      	ldr	r1, [pc, #604]	@ (800a338 <_strtod_l+0x580>)
 800a0dc:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0de:	a819      	add	r0, sp, #100	@ 0x64
 800a0e0:	f001 f9d2 	bl	800b488 <__hexnan>
 800a0e4:	2805      	cmp	r0, #5
 800a0e6:	d127      	bne.n	800a138 <_strtod_l+0x380>
 800a0e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a0ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a0f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a0f6:	e698      	b.n	8009e2a <_strtod_l+0x72>
 800a0f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0fa:	fb08 2101 	mla	r1, r8, r1, r2
 800a0fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a102:	920e      	str	r2, [sp, #56]	@ 0x38
 800a104:	e7b5      	b.n	800a072 <_strtod_l+0x2ba>
 800a106:	2a6e      	cmp	r2, #110	@ 0x6e
 800a108:	e7da      	b.n	800a0c0 <_strtod_l+0x308>
 800a10a:	498c      	ldr	r1, [pc, #560]	@ (800a33c <_strtod_l+0x584>)
 800a10c:	a819      	add	r0, sp, #100	@ 0x64
 800a10e:	f001 f9a7 	bl	800b460 <__match>
 800a112:	2800      	cmp	r0, #0
 800a114:	f43f aea4 	beq.w	8009e60 <_strtod_l+0xa8>
 800a118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a11a:	4989      	ldr	r1, [pc, #548]	@ (800a340 <_strtod_l+0x588>)
 800a11c:	3b01      	subs	r3, #1
 800a11e:	a819      	add	r0, sp, #100	@ 0x64
 800a120:	9319      	str	r3, [sp, #100]	@ 0x64
 800a122:	f001 f99d 	bl	800b460 <__match>
 800a126:	b910      	cbnz	r0, 800a12e <_strtod_l+0x376>
 800a128:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a12a:	3301      	adds	r3, #1
 800a12c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a12e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a350 <_strtod_l+0x598>
 800a132:	f04f 0a00 	mov.w	sl, #0
 800a136:	e678      	b.n	8009e2a <_strtod_l+0x72>
 800a138:	4882      	ldr	r0, [pc, #520]	@ (800a344 <_strtod_l+0x58c>)
 800a13a:	f000 fee1 	bl	800af00 <nan>
 800a13e:	ec5b ab10 	vmov	sl, fp, d0
 800a142:	e672      	b.n	8009e2a <_strtod_l+0x72>
 800a144:	eba8 0309 	sub.w	r3, r8, r9
 800a148:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a14a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a14c:	2f00      	cmp	r7, #0
 800a14e:	bf08      	it	eq
 800a150:	462f      	moveq	r7, r5
 800a152:	2d10      	cmp	r5, #16
 800a154:	462c      	mov	r4, r5
 800a156:	bfa8      	it	ge
 800a158:	2410      	movge	r4, #16
 800a15a:	f7f6 f9e3 	bl	8000524 <__aeabi_ui2d>
 800a15e:	2d09      	cmp	r5, #9
 800a160:	4682      	mov	sl, r0
 800a162:	468b      	mov	fp, r1
 800a164:	dc13      	bgt.n	800a18e <_strtod_l+0x3d6>
 800a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f43f ae5e 	beq.w	8009e2a <_strtod_l+0x72>
 800a16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a170:	dd78      	ble.n	800a264 <_strtod_l+0x4ac>
 800a172:	2b16      	cmp	r3, #22
 800a174:	dc5f      	bgt.n	800a236 <_strtod_l+0x47e>
 800a176:	4974      	ldr	r1, [pc, #464]	@ (800a348 <_strtod_l+0x590>)
 800a178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a17c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a180:	4652      	mov	r2, sl
 800a182:	465b      	mov	r3, fp
 800a184:	f7f6 fa48 	bl	8000618 <__aeabi_dmul>
 800a188:	4682      	mov	sl, r0
 800a18a:	468b      	mov	fp, r1
 800a18c:	e64d      	b.n	8009e2a <_strtod_l+0x72>
 800a18e:	4b6e      	ldr	r3, [pc, #440]	@ (800a348 <_strtod_l+0x590>)
 800a190:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a194:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a198:	f7f6 fa3e 	bl	8000618 <__aeabi_dmul>
 800a19c:	4682      	mov	sl, r0
 800a19e:	9808      	ldr	r0, [sp, #32]
 800a1a0:	468b      	mov	fp, r1
 800a1a2:	f7f6 f9bf 	bl	8000524 <__aeabi_ui2d>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	4659      	mov	r1, fp
 800a1ae:	f7f6 f87d 	bl	80002ac <__adddf3>
 800a1b2:	2d0f      	cmp	r5, #15
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	468b      	mov	fp, r1
 800a1b8:	ddd5      	ble.n	800a166 <_strtod_l+0x3ae>
 800a1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1bc:	1b2c      	subs	r4, r5, r4
 800a1be:	441c      	add	r4, r3
 800a1c0:	2c00      	cmp	r4, #0
 800a1c2:	f340 8096 	ble.w	800a2f2 <_strtod_l+0x53a>
 800a1c6:	f014 030f 	ands.w	r3, r4, #15
 800a1ca:	d00a      	beq.n	800a1e2 <_strtod_l+0x42a>
 800a1cc:	495e      	ldr	r1, [pc, #376]	@ (800a348 <_strtod_l+0x590>)
 800a1ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1d2:	4652      	mov	r2, sl
 800a1d4:	465b      	mov	r3, fp
 800a1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1da:	f7f6 fa1d 	bl	8000618 <__aeabi_dmul>
 800a1de:	4682      	mov	sl, r0
 800a1e0:	468b      	mov	fp, r1
 800a1e2:	f034 040f 	bics.w	r4, r4, #15
 800a1e6:	d073      	beq.n	800a2d0 <_strtod_l+0x518>
 800a1e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a1ec:	dd48      	ble.n	800a280 <_strtod_l+0x4c8>
 800a1ee:	2400      	movs	r4, #0
 800a1f0:	46a0      	mov	r8, r4
 800a1f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a1f4:	46a1      	mov	r9, r4
 800a1f6:	9a05      	ldr	r2, [sp, #20]
 800a1f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a350 <_strtod_l+0x598>
 800a1fc:	2322      	movs	r3, #34	@ 0x22
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	f04f 0a00 	mov.w	sl, #0
 800a204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a206:	2b00      	cmp	r3, #0
 800a208:	f43f ae0f 	beq.w	8009e2a <_strtod_l+0x72>
 800a20c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a20e:	9805      	ldr	r0, [sp, #20]
 800a210:	f7ff f940 	bl	8009494 <_Bfree>
 800a214:	9805      	ldr	r0, [sp, #20]
 800a216:	4649      	mov	r1, r9
 800a218:	f7ff f93c 	bl	8009494 <_Bfree>
 800a21c:	9805      	ldr	r0, [sp, #20]
 800a21e:	4641      	mov	r1, r8
 800a220:	f7ff f938 	bl	8009494 <_Bfree>
 800a224:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a226:	9805      	ldr	r0, [sp, #20]
 800a228:	f7ff f934 	bl	8009494 <_Bfree>
 800a22c:	9805      	ldr	r0, [sp, #20]
 800a22e:	4621      	mov	r1, r4
 800a230:	f7ff f930 	bl	8009494 <_Bfree>
 800a234:	e5f9      	b.n	8009e2a <_strtod_l+0x72>
 800a236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a238:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a23c:	4293      	cmp	r3, r2
 800a23e:	dbbc      	blt.n	800a1ba <_strtod_l+0x402>
 800a240:	4c41      	ldr	r4, [pc, #260]	@ (800a348 <_strtod_l+0x590>)
 800a242:	f1c5 050f 	rsb	r5, r5, #15
 800a246:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a24a:	4652      	mov	r2, sl
 800a24c:	465b      	mov	r3, fp
 800a24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a252:	f7f6 f9e1 	bl	8000618 <__aeabi_dmul>
 800a256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a258:	1b5d      	subs	r5, r3, r5
 800a25a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a25e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a262:	e78f      	b.n	800a184 <_strtod_l+0x3cc>
 800a264:	3316      	adds	r3, #22
 800a266:	dba8      	blt.n	800a1ba <_strtod_l+0x402>
 800a268:	4b37      	ldr	r3, [pc, #220]	@ (800a348 <_strtod_l+0x590>)
 800a26a:	eba9 0808 	sub.w	r8, r9, r8
 800a26e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a272:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a276:	4650      	mov	r0, sl
 800a278:	4659      	mov	r1, fp
 800a27a:	f7f6 faf7 	bl	800086c <__aeabi_ddiv>
 800a27e:	e783      	b.n	800a188 <_strtod_l+0x3d0>
 800a280:	4b32      	ldr	r3, [pc, #200]	@ (800a34c <_strtod_l+0x594>)
 800a282:	9308      	str	r3, [sp, #32]
 800a284:	2300      	movs	r3, #0
 800a286:	1124      	asrs	r4, r4, #4
 800a288:	4650      	mov	r0, sl
 800a28a:	4659      	mov	r1, fp
 800a28c:	461e      	mov	r6, r3
 800a28e:	2c01      	cmp	r4, #1
 800a290:	dc21      	bgt.n	800a2d6 <_strtod_l+0x51e>
 800a292:	b10b      	cbz	r3, 800a298 <_strtod_l+0x4e0>
 800a294:	4682      	mov	sl, r0
 800a296:	468b      	mov	fp, r1
 800a298:	492c      	ldr	r1, [pc, #176]	@ (800a34c <_strtod_l+0x594>)
 800a29a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a29e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a2a2:	4652      	mov	r2, sl
 800a2a4:	465b      	mov	r3, fp
 800a2a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2aa:	f7f6 f9b5 	bl	8000618 <__aeabi_dmul>
 800a2ae:	4b28      	ldr	r3, [pc, #160]	@ (800a350 <_strtod_l+0x598>)
 800a2b0:	460a      	mov	r2, r1
 800a2b2:	400b      	ands	r3, r1
 800a2b4:	4927      	ldr	r1, [pc, #156]	@ (800a354 <_strtod_l+0x59c>)
 800a2b6:	428b      	cmp	r3, r1
 800a2b8:	4682      	mov	sl, r0
 800a2ba:	d898      	bhi.n	800a1ee <_strtod_l+0x436>
 800a2bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a2c0:	428b      	cmp	r3, r1
 800a2c2:	bf86      	itte	hi
 800a2c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a358 <_strtod_l+0x5a0>
 800a2c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9308      	str	r3, [sp, #32]
 800a2d4:	e07a      	b.n	800a3cc <_strtod_l+0x614>
 800a2d6:	07e2      	lsls	r2, r4, #31
 800a2d8:	d505      	bpl.n	800a2e6 <_strtod_l+0x52e>
 800a2da:	9b08      	ldr	r3, [sp, #32]
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f7f6 f99a 	bl	8000618 <__aeabi_dmul>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	9a08      	ldr	r2, [sp, #32]
 800a2e8:	3208      	adds	r2, #8
 800a2ea:	3601      	adds	r6, #1
 800a2ec:	1064      	asrs	r4, r4, #1
 800a2ee:	9208      	str	r2, [sp, #32]
 800a2f0:	e7cd      	b.n	800a28e <_strtod_l+0x4d6>
 800a2f2:	d0ed      	beq.n	800a2d0 <_strtod_l+0x518>
 800a2f4:	4264      	negs	r4, r4
 800a2f6:	f014 020f 	ands.w	r2, r4, #15
 800a2fa:	d00a      	beq.n	800a312 <_strtod_l+0x55a>
 800a2fc:	4b12      	ldr	r3, [pc, #72]	@ (800a348 <_strtod_l+0x590>)
 800a2fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a302:	4650      	mov	r0, sl
 800a304:	4659      	mov	r1, fp
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f6 faaf 	bl	800086c <__aeabi_ddiv>
 800a30e:	4682      	mov	sl, r0
 800a310:	468b      	mov	fp, r1
 800a312:	1124      	asrs	r4, r4, #4
 800a314:	d0dc      	beq.n	800a2d0 <_strtod_l+0x518>
 800a316:	2c1f      	cmp	r4, #31
 800a318:	dd20      	ble.n	800a35c <_strtod_l+0x5a4>
 800a31a:	2400      	movs	r4, #0
 800a31c:	46a0      	mov	r8, r4
 800a31e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a320:	46a1      	mov	r9, r4
 800a322:	9a05      	ldr	r2, [sp, #20]
 800a324:	2322      	movs	r3, #34	@ 0x22
 800a326:	f04f 0a00 	mov.w	sl, #0
 800a32a:	f04f 0b00 	mov.w	fp, #0
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	e768      	b.n	800a204 <_strtod_l+0x44c>
 800a332:	bf00      	nop
 800a334:	0800bc59 	.word	0x0800bc59
 800a338:	0800be6c 	.word	0x0800be6c
 800a33c:	0800bc51 	.word	0x0800bc51
 800a340:	0800bc88 	.word	0x0800bc88
 800a344:	0800c015 	.word	0x0800c015
 800a348:	0800bda0 	.word	0x0800bda0
 800a34c:	0800bd78 	.word	0x0800bd78
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	7ca00000 	.word	0x7ca00000
 800a358:	7fefffff 	.word	0x7fefffff
 800a35c:	f014 0310 	ands.w	r3, r4, #16
 800a360:	bf18      	it	ne
 800a362:	236a      	movne	r3, #106	@ 0x6a
 800a364:	4ea9      	ldr	r6, [pc, #676]	@ (800a60c <_strtod_l+0x854>)
 800a366:	9308      	str	r3, [sp, #32]
 800a368:	4650      	mov	r0, sl
 800a36a:	4659      	mov	r1, fp
 800a36c:	2300      	movs	r3, #0
 800a36e:	07e2      	lsls	r2, r4, #31
 800a370:	d504      	bpl.n	800a37c <_strtod_l+0x5c4>
 800a372:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a376:	f7f6 f94f 	bl	8000618 <__aeabi_dmul>
 800a37a:	2301      	movs	r3, #1
 800a37c:	1064      	asrs	r4, r4, #1
 800a37e:	f106 0608 	add.w	r6, r6, #8
 800a382:	d1f4      	bne.n	800a36e <_strtod_l+0x5b6>
 800a384:	b10b      	cbz	r3, 800a38a <_strtod_l+0x5d2>
 800a386:	4682      	mov	sl, r0
 800a388:	468b      	mov	fp, r1
 800a38a:	9b08      	ldr	r3, [sp, #32]
 800a38c:	b1b3      	cbz	r3, 800a3bc <_strtod_l+0x604>
 800a38e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a392:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a396:	2b00      	cmp	r3, #0
 800a398:	4659      	mov	r1, fp
 800a39a:	dd0f      	ble.n	800a3bc <_strtod_l+0x604>
 800a39c:	2b1f      	cmp	r3, #31
 800a39e:	dd55      	ble.n	800a44c <_strtod_l+0x694>
 800a3a0:	2b34      	cmp	r3, #52	@ 0x34
 800a3a2:	bfde      	ittt	le
 800a3a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a3a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3ac:	4093      	lslle	r3, r2
 800a3ae:	f04f 0a00 	mov.w	sl, #0
 800a3b2:	bfcc      	ite	gt
 800a3b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3b8:	ea03 0b01 	andle.w	fp, r3, r1
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2300      	movs	r3, #0
 800a3c0:	4650      	mov	r0, sl
 800a3c2:	4659      	mov	r1, fp
 800a3c4:	f7f6 fb90 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d1a6      	bne.n	800a31a <_strtod_l+0x562>
 800a3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3d2:	9805      	ldr	r0, [sp, #20]
 800a3d4:	462b      	mov	r3, r5
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	f7ff f8c4 	bl	8009564 <__s2b>
 800a3dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f43f af05 	beq.w	800a1ee <_strtod_l+0x436>
 800a3e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	eba9 0308 	sub.w	r3, r9, r8
 800a3ec:	bfa8      	it	ge
 800a3ee:	2300      	movge	r3, #0
 800a3f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3f2:	2400      	movs	r4, #0
 800a3f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3f8:	9316      	str	r3, [sp, #88]	@ 0x58
 800a3fa:	46a0      	mov	r8, r4
 800a3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3fe:	9805      	ldr	r0, [sp, #20]
 800a400:	6859      	ldr	r1, [r3, #4]
 800a402:	f7ff f807 	bl	8009414 <_Balloc>
 800a406:	4681      	mov	r9, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	f43f aef4 	beq.w	800a1f6 <_strtod_l+0x43e>
 800a40e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	3202      	adds	r2, #2
 800a414:	f103 010c 	add.w	r1, r3, #12
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	300c      	adds	r0, #12
 800a41c:	f000 fd62 	bl	800aee4 <memcpy>
 800a420:	ec4b ab10 	vmov	d0, sl, fp
 800a424:	9805      	ldr	r0, [sp, #20]
 800a426:	aa1c      	add	r2, sp, #112	@ 0x70
 800a428:	a91b      	add	r1, sp, #108	@ 0x6c
 800a42a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a42e:	f7ff fbd5 	bl	8009bdc <__d2b>
 800a432:	901a      	str	r0, [sp, #104]	@ 0x68
 800a434:	2800      	cmp	r0, #0
 800a436:	f43f aede 	beq.w	800a1f6 <_strtod_l+0x43e>
 800a43a:	9805      	ldr	r0, [sp, #20]
 800a43c:	2101      	movs	r1, #1
 800a43e:	f7ff f927 	bl	8009690 <__i2b>
 800a442:	4680      	mov	r8, r0
 800a444:	b948      	cbnz	r0, 800a45a <_strtod_l+0x6a2>
 800a446:	f04f 0800 	mov.w	r8, #0
 800a44a:	e6d4      	b.n	800a1f6 <_strtod_l+0x43e>
 800a44c:	f04f 32ff 	mov.w	r2, #4294967295
 800a450:	fa02 f303 	lsl.w	r3, r2, r3
 800a454:	ea03 0a0a 	and.w	sl, r3, sl
 800a458:	e7b0      	b.n	800a3bc <_strtod_l+0x604>
 800a45a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a45c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a45e:	2d00      	cmp	r5, #0
 800a460:	bfab      	itete	ge
 800a462:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a464:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a466:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a468:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a46a:	bfac      	ite	ge
 800a46c:	18ef      	addge	r7, r5, r3
 800a46e:	1b5e      	sublt	r6, r3, r5
 800a470:	9b08      	ldr	r3, [sp, #32]
 800a472:	1aed      	subs	r5, r5, r3
 800a474:	4415      	add	r5, r2
 800a476:	4b66      	ldr	r3, [pc, #408]	@ (800a610 <_strtod_l+0x858>)
 800a478:	3d01      	subs	r5, #1
 800a47a:	429d      	cmp	r5, r3
 800a47c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a480:	da50      	bge.n	800a524 <_strtod_l+0x76c>
 800a482:	1b5b      	subs	r3, r3, r5
 800a484:	2b1f      	cmp	r3, #31
 800a486:	eba2 0203 	sub.w	r2, r2, r3
 800a48a:	f04f 0101 	mov.w	r1, #1
 800a48e:	dc3d      	bgt.n	800a50c <_strtod_l+0x754>
 800a490:	fa01 f303 	lsl.w	r3, r1, r3
 800a494:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a496:	2300      	movs	r3, #0
 800a498:	9310      	str	r3, [sp, #64]	@ 0x40
 800a49a:	18bd      	adds	r5, r7, r2
 800a49c:	9b08      	ldr	r3, [sp, #32]
 800a49e:	42af      	cmp	r7, r5
 800a4a0:	4416      	add	r6, r2
 800a4a2:	441e      	add	r6, r3
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	bfa8      	it	ge
 800a4a8:	462b      	movge	r3, r5
 800a4aa:	42b3      	cmp	r3, r6
 800a4ac:	bfa8      	it	ge
 800a4ae:	4633      	movge	r3, r6
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfc2      	ittt	gt
 800a4b4:	1aed      	subgt	r5, r5, r3
 800a4b6:	1af6      	subgt	r6, r6, r3
 800a4b8:	1aff      	subgt	r7, r7, r3
 800a4ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dd16      	ble.n	800a4ee <_strtod_l+0x736>
 800a4c0:	4641      	mov	r1, r8
 800a4c2:	9805      	ldr	r0, [sp, #20]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f7ff f9a3 	bl	8009810 <__pow5mult>
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d0ba      	beq.n	800a446 <_strtod_l+0x68e>
 800a4d0:	4601      	mov	r1, r0
 800a4d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	f7ff f8f1 	bl	80096bc <__multiply>
 800a4da:	900e      	str	r0, [sp, #56]	@ 0x38
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	f43f ae8a 	beq.w	800a1f6 <_strtod_l+0x43e>
 800a4e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4e4:	9805      	ldr	r0, [sp, #20]
 800a4e6:	f7fe ffd5 	bl	8009494 <_Bfree>
 800a4ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4ee:	2d00      	cmp	r5, #0
 800a4f0:	dc1d      	bgt.n	800a52e <_strtod_l+0x776>
 800a4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dd23      	ble.n	800a540 <_strtod_l+0x788>
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a4fc:	9805      	ldr	r0, [sp, #20]
 800a4fe:	f7ff f987 	bl	8009810 <__pow5mult>
 800a502:	4681      	mov	r9, r0
 800a504:	b9e0      	cbnz	r0, 800a540 <_strtod_l+0x788>
 800a506:	f04f 0900 	mov.w	r9, #0
 800a50a:	e674      	b.n	800a1f6 <_strtod_l+0x43e>
 800a50c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a510:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a514:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a518:	35e2      	adds	r5, #226	@ 0xe2
 800a51a:	fa01 f305 	lsl.w	r3, r1, r5
 800a51e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a520:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a522:	e7ba      	b.n	800a49a <_strtod_l+0x6e2>
 800a524:	2300      	movs	r3, #0
 800a526:	9310      	str	r3, [sp, #64]	@ 0x40
 800a528:	2301      	movs	r3, #1
 800a52a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a52c:	e7b5      	b.n	800a49a <_strtod_l+0x6e2>
 800a52e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a530:	9805      	ldr	r0, [sp, #20]
 800a532:	462a      	mov	r2, r5
 800a534:	f7ff f9c6 	bl	80098c4 <__lshift>
 800a538:	901a      	str	r0, [sp, #104]	@ 0x68
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d1d9      	bne.n	800a4f2 <_strtod_l+0x73a>
 800a53e:	e65a      	b.n	800a1f6 <_strtod_l+0x43e>
 800a540:	2e00      	cmp	r6, #0
 800a542:	dd07      	ble.n	800a554 <_strtod_l+0x79c>
 800a544:	4649      	mov	r1, r9
 800a546:	9805      	ldr	r0, [sp, #20]
 800a548:	4632      	mov	r2, r6
 800a54a:	f7ff f9bb 	bl	80098c4 <__lshift>
 800a54e:	4681      	mov	r9, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	d0d8      	beq.n	800a506 <_strtod_l+0x74e>
 800a554:	2f00      	cmp	r7, #0
 800a556:	dd08      	ble.n	800a56a <_strtod_l+0x7b2>
 800a558:	4641      	mov	r1, r8
 800a55a:	9805      	ldr	r0, [sp, #20]
 800a55c:	463a      	mov	r2, r7
 800a55e:	f7ff f9b1 	bl	80098c4 <__lshift>
 800a562:	4680      	mov	r8, r0
 800a564:	2800      	cmp	r0, #0
 800a566:	f43f ae46 	beq.w	800a1f6 <_strtod_l+0x43e>
 800a56a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	464a      	mov	r2, r9
 800a570:	f7ff fa30 	bl	80099d4 <__mdiff>
 800a574:	4604      	mov	r4, r0
 800a576:	2800      	cmp	r0, #0
 800a578:	f43f ae3d 	beq.w	800a1f6 <_strtod_l+0x43e>
 800a57c:	68c3      	ldr	r3, [r0, #12]
 800a57e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a580:	2300      	movs	r3, #0
 800a582:	60c3      	str	r3, [r0, #12]
 800a584:	4641      	mov	r1, r8
 800a586:	f7ff fa09 	bl	800999c <__mcmp>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	da46      	bge.n	800a61c <_strtod_l+0x864>
 800a58e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a590:	ea53 030a 	orrs.w	r3, r3, sl
 800a594:	d16c      	bne.n	800a670 <_strtod_l+0x8b8>
 800a596:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d168      	bne.n	800a670 <_strtod_l+0x8b8>
 800a59e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5a2:	0d1b      	lsrs	r3, r3, #20
 800a5a4:	051b      	lsls	r3, r3, #20
 800a5a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5aa:	d961      	bls.n	800a670 <_strtod_l+0x8b8>
 800a5ac:	6963      	ldr	r3, [r4, #20]
 800a5ae:	b913      	cbnz	r3, 800a5b6 <_strtod_l+0x7fe>
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	dd5c      	ble.n	800a670 <_strtod_l+0x8b8>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	9805      	ldr	r0, [sp, #20]
 800a5bc:	f7ff f982 	bl	80098c4 <__lshift>
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	f7ff f9ea 	bl	800999c <__mcmp>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	dd51      	ble.n	800a670 <_strtod_l+0x8b8>
 800a5cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5d0:	9a08      	ldr	r2, [sp, #32]
 800a5d2:	0d1b      	lsrs	r3, r3, #20
 800a5d4:	051b      	lsls	r3, r3, #20
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	d06b      	beq.n	800a6b2 <_strtod_l+0x8fa>
 800a5da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5de:	d868      	bhi.n	800a6b2 <_strtod_l+0x8fa>
 800a5e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a5e4:	f67f ae9d 	bls.w	800a322 <_strtod_l+0x56a>
 800a5e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a614 <_strtod_l+0x85c>)
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	4659      	mov	r1, fp
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f7f6 f812 	bl	8000618 <__aeabi_dmul>
 800a5f4:	4b08      	ldr	r3, [pc, #32]	@ (800a618 <_strtod_l+0x860>)
 800a5f6:	400b      	ands	r3, r1
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	468b      	mov	fp, r1
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f47f ae05 	bne.w	800a20c <_strtod_l+0x454>
 800a602:	9a05      	ldr	r2, [sp, #20]
 800a604:	2322      	movs	r3, #34	@ 0x22
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	e600      	b.n	800a20c <_strtod_l+0x454>
 800a60a:	bf00      	nop
 800a60c:	0800be98 	.word	0x0800be98
 800a610:	fffffc02 	.word	0xfffffc02
 800a614:	39500000 	.word	0x39500000
 800a618:	7ff00000 	.word	0x7ff00000
 800a61c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a620:	d165      	bne.n	800a6ee <_strtod_l+0x936>
 800a622:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a624:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a628:	b35a      	cbz	r2, 800a682 <_strtod_l+0x8ca>
 800a62a:	4a9f      	ldr	r2, [pc, #636]	@ (800a8a8 <_strtod_l+0xaf0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d12b      	bne.n	800a688 <_strtod_l+0x8d0>
 800a630:	9b08      	ldr	r3, [sp, #32]
 800a632:	4651      	mov	r1, sl
 800a634:	b303      	cbz	r3, 800a678 <_strtod_l+0x8c0>
 800a636:	4b9d      	ldr	r3, [pc, #628]	@ (800a8ac <_strtod_l+0xaf4>)
 800a638:	465a      	mov	r2, fp
 800a63a:	4013      	ands	r3, r2
 800a63c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	d81b      	bhi.n	800a67e <_strtod_l+0x8c6>
 800a646:	0d1b      	lsrs	r3, r3, #20
 800a648:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a64c:	fa02 f303 	lsl.w	r3, r2, r3
 800a650:	4299      	cmp	r1, r3
 800a652:	d119      	bne.n	800a688 <_strtod_l+0x8d0>
 800a654:	4b96      	ldr	r3, [pc, #600]	@ (800a8b0 <_strtod_l+0xaf8>)
 800a656:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a658:	429a      	cmp	r2, r3
 800a65a:	d102      	bne.n	800a662 <_strtod_l+0x8aa>
 800a65c:	3101      	adds	r1, #1
 800a65e:	f43f adca 	beq.w	800a1f6 <_strtod_l+0x43e>
 800a662:	4b92      	ldr	r3, [pc, #584]	@ (800a8ac <_strtod_l+0xaf4>)
 800a664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a666:	401a      	ands	r2, r3
 800a668:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a66c:	f04f 0a00 	mov.w	sl, #0
 800a670:	9b08      	ldr	r3, [sp, #32]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1b8      	bne.n	800a5e8 <_strtod_l+0x830>
 800a676:	e5c9      	b.n	800a20c <_strtod_l+0x454>
 800a678:	f04f 33ff 	mov.w	r3, #4294967295
 800a67c:	e7e8      	b.n	800a650 <_strtod_l+0x898>
 800a67e:	4613      	mov	r3, r2
 800a680:	e7e6      	b.n	800a650 <_strtod_l+0x898>
 800a682:	ea53 030a 	orrs.w	r3, r3, sl
 800a686:	d0a1      	beq.n	800a5cc <_strtod_l+0x814>
 800a688:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a68a:	b1db      	cbz	r3, 800a6c4 <_strtod_l+0x90c>
 800a68c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a68e:	4213      	tst	r3, r2
 800a690:	d0ee      	beq.n	800a670 <_strtod_l+0x8b8>
 800a692:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a694:	9a08      	ldr	r2, [sp, #32]
 800a696:	4650      	mov	r0, sl
 800a698:	4659      	mov	r1, fp
 800a69a:	b1bb      	cbz	r3, 800a6cc <_strtod_l+0x914>
 800a69c:	f7ff fb6c 	bl	8009d78 <sulp>
 800a6a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6a4:	ec53 2b10 	vmov	r2, r3, d0
 800a6a8:	f7f5 fe00 	bl	80002ac <__adddf3>
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	468b      	mov	fp, r1
 800a6b0:	e7de      	b.n	800a670 <_strtod_l+0x8b8>
 800a6b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6be:	f04f 3aff 	mov.w	sl, #4294967295
 800a6c2:	e7d5      	b.n	800a670 <_strtod_l+0x8b8>
 800a6c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6c6:	ea13 0f0a 	tst.w	r3, sl
 800a6ca:	e7e1      	b.n	800a690 <_strtod_l+0x8d8>
 800a6cc:	f7ff fb54 	bl	8009d78 <sulp>
 800a6d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6d4:	ec53 2b10 	vmov	r2, r3, d0
 800a6d8:	f7f5 fde6 	bl	80002a8 <__aeabi_dsub>
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2300      	movs	r3, #0
 800a6e0:	4682      	mov	sl, r0
 800a6e2:	468b      	mov	fp, r1
 800a6e4:	f7f6 fa00 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d0c1      	beq.n	800a670 <_strtod_l+0x8b8>
 800a6ec:	e619      	b.n	800a322 <_strtod_l+0x56a>
 800a6ee:	4641      	mov	r1, r8
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7ff facb 	bl	8009c8c <__ratio>
 800a6f6:	ec57 6b10 	vmov	r6, r7, d0
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f6 fa04 	bl	8000b10 <__aeabi_dcmple>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d06f      	beq.n	800a7ec <_strtod_l+0xa34>
 800a70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d17a      	bne.n	800a808 <_strtod_l+0xa50>
 800a712:	f1ba 0f00 	cmp.w	sl, #0
 800a716:	d158      	bne.n	800a7ca <_strtod_l+0xa12>
 800a718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a71a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d15a      	bne.n	800a7d8 <_strtod_l+0xa20>
 800a722:	4b64      	ldr	r3, [pc, #400]	@ (800a8b4 <_strtod_l+0xafc>)
 800a724:	2200      	movs	r2, #0
 800a726:	4630      	mov	r0, r6
 800a728:	4639      	mov	r1, r7
 800a72a:	f7f6 f9e7 	bl	8000afc <__aeabi_dcmplt>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d159      	bne.n	800a7e6 <_strtod_l+0xa2e>
 800a732:	4630      	mov	r0, r6
 800a734:	4639      	mov	r1, r7
 800a736:	4b60      	ldr	r3, [pc, #384]	@ (800a8b8 <_strtod_l+0xb00>)
 800a738:	2200      	movs	r2, #0
 800a73a:	f7f5 ff6d 	bl	8000618 <__aeabi_dmul>
 800a73e:	4606      	mov	r6, r0
 800a740:	460f      	mov	r7, r1
 800a742:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a746:	9606      	str	r6, [sp, #24]
 800a748:	9307      	str	r3, [sp, #28]
 800a74a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a74e:	4d57      	ldr	r5, [pc, #348]	@ (800a8ac <_strtod_l+0xaf4>)
 800a750:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a756:	401d      	ands	r5, r3
 800a758:	4b58      	ldr	r3, [pc, #352]	@ (800a8bc <_strtod_l+0xb04>)
 800a75a:	429d      	cmp	r5, r3
 800a75c:	f040 80b2 	bne.w	800a8c4 <_strtod_l+0xb0c>
 800a760:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a762:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a766:	ec4b ab10 	vmov	d0, sl, fp
 800a76a:	f7ff f9c7 	bl	8009afc <__ulp>
 800a76e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a772:	ec51 0b10 	vmov	r0, r1, d0
 800a776:	f7f5 ff4f 	bl	8000618 <__aeabi_dmul>
 800a77a:	4652      	mov	r2, sl
 800a77c:	465b      	mov	r3, fp
 800a77e:	f7f5 fd95 	bl	80002ac <__adddf3>
 800a782:	460b      	mov	r3, r1
 800a784:	4949      	ldr	r1, [pc, #292]	@ (800a8ac <_strtod_l+0xaf4>)
 800a786:	4a4e      	ldr	r2, [pc, #312]	@ (800a8c0 <_strtod_l+0xb08>)
 800a788:	4019      	ands	r1, r3
 800a78a:	4291      	cmp	r1, r2
 800a78c:	4682      	mov	sl, r0
 800a78e:	d942      	bls.n	800a816 <_strtod_l+0xa5e>
 800a790:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a792:	4b47      	ldr	r3, [pc, #284]	@ (800a8b0 <_strtod_l+0xaf8>)
 800a794:	429a      	cmp	r2, r3
 800a796:	d103      	bne.n	800a7a0 <_strtod_l+0x9e8>
 800a798:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a79a:	3301      	adds	r3, #1
 800a79c:	f43f ad2b 	beq.w	800a1f6 <_strtod_l+0x43e>
 800a7a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a8b0 <_strtod_l+0xaf8>
 800a7a4:	f04f 3aff 	mov.w	sl, #4294967295
 800a7a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7aa:	9805      	ldr	r0, [sp, #20]
 800a7ac:	f7fe fe72 	bl	8009494 <_Bfree>
 800a7b0:	9805      	ldr	r0, [sp, #20]
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	f7fe fe6e 	bl	8009494 <_Bfree>
 800a7b8:	9805      	ldr	r0, [sp, #20]
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	f7fe fe6a 	bl	8009494 <_Bfree>
 800a7c0:	9805      	ldr	r0, [sp, #20]
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	f7fe fe66 	bl	8009494 <_Bfree>
 800a7c8:	e618      	b.n	800a3fc <_strtod_l+0x644>
 800a7ca:	f1ba 0f01 	cmp.w	sl, #1
 800a7ce:	d103      	bne.n	800a7d8 <_strtod_l+0xa20>
 800a7d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f43f ada5 	beq.w	800a322 <_strtod_l+0x56a>
 800a7d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a888 <_strtod_l+0xad0>
 800a7dc:	4f35      	ldr	r7, [pc, #212]	@ (800a8b4 <_strtod_l+0xafc>)
 800a7de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7e2:	2600      	movs	r6, #0
 800a7e4:	e7b1      	b.n	800a74a <_strtod_l+0x992>
 800a7e6:	4f34      	ldr	r7, [pc, #208]	@ (800a8b8 <_strtod_l+0xb00>)
 800a7e8:	2600      	movs	r6, #0
 800a7ea:	e7aa      	b.n	800a742 <_strtod_l+0x98a>
 800a7ec:	4b32      	ldr	r3, [pc, #200]	@ (800a8b8 <_strtod_l+0xb00>)
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f7f5 ff10 	bl	8000618 <__aeabi_dmul>
 800a7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d09f      	beq.n	800a742 <_strtod_l+0x98a>
 800a802:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a806:	e7a0      	b.n	800a74a <_strtod_l+0x992>
 800a808:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a890 <_strtod_l+0xad8>
 800a80c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a810:	ec57 6b17 	vmov	r6, r7, d7
 800a814:	e799      	b.n	800a74a <_strtod_l+0x992>
 800a816:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1c1      	bne.n	800a7a8 <_strtod_l+0x9f0>
 800a824:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a828:	0d1b      	lsrs	r3, r3, #20
 800a82a:	051b      	lsls	r3, r3, #20
 800a82c:	429d      	cmp	r5, r3
 800a82e:	d1bb      	bne.n	800a7a8 <_strtod_l+0x9f0>
 800a830:	4630      	mov	r0, r6
 800a832:	4639      	mov	r1, r7
 800a834:	f7f6 fa38 	bl	8000ca8 <__aeabi_d2lz>
 800a838:	f7f5 fec0 	bl	80005bc <__aeabi_l2d>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4630      	mov	r0, r6
 800a842:	4639      	mov	r1, r7
 800a844:	f7f5 fd30 	bl	80002a8 <__aeabi_dsub>
 800a848:	460b      	mov	r3, r1
 800a84a:	4602      	mov	r2, r0
 800a84c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a850:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a856:	ea46 060a 	orr.w	r6, r6, sl
 800a85a:	431e      	orrs	r6, r3
 800a85c:	d06f      	beq.n	800a93e <_strtod_l+0xb86>
 800a85e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a898 <_strtod_l+0xae0>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f6 f94a 	bl	8000afc <__aeabi_dcmplt>
 800a868:	2800      	cmp	r0, #0
 800a86a:	f47f accf 	bne.w	800a20c <_strtod_l+0x454>
 800a86e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a8a0 <_strtod_l+0xae8>)
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a878:	f7f6 f95e 	bl	8000b38 <__aeabi_dcmpgt>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d093      	beq.n	800a7a8 <_strtod_l+0x9f0>
 800a880:	e4c4      	b.n	800a20c <_strtod_l+0x454>
 800a882:	bf00      	nop
 800a884:	f3af 8000 	nop.w
 800a888:	00000000 	.word	0x00000000
 800a88c:	bff00000 	.word	0xbff00000
 800a890:	00000000 	.word	0x00000000
 800a894:	3ff00000 	.word	0x3ff00000
 800a898:	94a03595 	.word	0x94a03595
 800a89c:	3fdfffff 	.word	0x3fdfffff
 800a8a0:	35afe535 	.word	0x35afe535
 800a8a4:	3fe00000 	.word	0x3fe00000
 800a8a8:	000fffff 	.word	0x000fffff
 800a8ac:	7ff00000 	.word	0x7ff00000
 800a8b0:	7fefffff 	.word	0x7fefffff
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	3fe00000 	.word	0x3fe00000
 800a8bc:	7fe00000 	.word	0x7fe00000
 800a8c0:	7c9fffff 	.word	0x7c9fffff
 800a8c4:	9b08      	ldr	r3, [sp, #32]
 800a8c6:	b323      	cbz	r3, 800a912 <_strtod_l+0xb5a>
 800a8c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a8cc:	d821      	bhi.n	800a912 <_strtod_l+0xb5a>
 800a8ce:	a328      	add	r3, pc, #160	@ (adr r3, 800a970 <_strtod_l+0xbb8>)
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	f7f6 f91a 	bl	8000b10 <__aeabi_dcmple>
 800a8dc:	b1a0      	cbz	r0, 800a908 <_strtod_l+0xb50>
 800a8de:	4639      	mov	r1, r7
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f7f6 f971 	bl	8000bc8 <__aeabi_d2uiz>
 800a8e6:	2801      	cmp	r0, #1
 800a8e8:	bf38      	it	cc
 800a8ea:	2001      	movcc	r0, #1
 800a8ec:	f7f5 fe1a 	bl	8000524 <__aeabi_ui2d>
 800a8f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	b9fb      	cbnz	r3, 800a938 <_strtod_l+0xb80>
 800a8f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8fc:	9014      	str	r0, [sp, #80]	@ 0x50
 800a8fe:	9315      	str	r3, [sp, #84]	@ 0x54
 800a900:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a904:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a908:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a90a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a90e:	1b5b      	subs	r3, r3, r5
 800a910:	9311      	str	r3, [sp, #68]	@ 0x44
 800a912:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a916:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a91a:	f7ff f8ef 	bl	8009afc <__ulp>
 800a91e:	4650      	mov	r0, sl
 800a920:	ec53 2b10 	vmov	r2, r3, d0
 800a924:	4659      	mov	r1, fp
 800a926:	f7f5 fe77 	bl	8000618 <__aeabi_dmul>
 800a92a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a92e:	f7f5 fcbd 	bl	80002ac <__adddf3>
 800a932:	4682      	mov	sl, r0
 800a934:	468b      	mov	fp, r1
 800a936:	e770      	b.n	800a81a <_strtod_l+0xa62>
 800a938:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a93c:	e7e0      	b.n	800a900 <_strtod_l+0xb48>
 800a93e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a978 <_strtod_l+0xbc0>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f6 f8da 	bl	8000afc <__aeabi_dcmplt>
 800a948:	e798      	b.n	800a87c <_strtod_l+0xac4>
 800a94a:	2300      	movs	r3, #0
 800a94c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a94e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a950:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	f7ff ba6d 	b.w	8009e32 <_strtod_l+0x7a>
 800a958:	2a65      	cmp	r2, #101	@ 0x65
 800a95a:	f43f ab66 	beq.w	800a02a <_strtod_l+0x272>
 800a95e:	2a45      	cmp	r2, #69	@ 0x45
 800a960:	f43f ab63 	beq.w	800a02a <_strtod_l+0x272>
 800a964:	2301      	movs	r3, #1
 800a966:	f7ff bb9e 	b.w	800a0a6 <_strtod_l+0x2ee>
 800a96a:	bf00      	nop
 800a96c:	f3af 8000 	nop.w
 800a970:	ffc00000 	.word	0xffc00000
 800a974:	41dfffff 	.word	0x41dfffff
 800a978:	94a03595 	.word	0x94a03595
 800a97c:	3fcfffff 	.word	0x3fcfffff

0800a980 <_strtod_r>:
 800a980:	4b01      	ldr	r3, [pc, #4]	@ (800a988 <_strtod_r+0x8>)
 800a982:	f7ff ba19 	b.w	8009db8 <_strtod_l>
 800a986:	bf00      	nop
 800a988:	2000007c 	.word	0x2000007c

0800a98c <_strtol_l.constprop.0>:
 800a98c:	2b24      	cmp	r3, #36	@ 0x24
 800a98e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a992:	4686      	mov	lr, r0
 800a994:	4690      	mov	r8, r2
 800a996:	d801      	bhi.n	800a99c <_strtol_l.constprop.0+0x10>
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d106      	bne.n	800a9aa <_strtol_l.constprop.0+0x1e>
 800a99c:	f7fd fe70 	bl	8008680 <__errno>
 800a9a0:	2316      	movs	r3, #22
 800a9a2:	6003      	str	r3, [r0, #0]
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9aa:	4834      	ldr	r0, [pc, #208]	@ (800aa7c <_strtol_l.constprop.0+0xf0>)
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9b4:	5d06      	ldrb	r6, [r0, r4]
 800a9b6:	f016 0608 	ands.w	r6, r6, #8
 800a9ba:	d1f8      	bne.n	800a9ae <_strtol_l.constprop.0+0x22>
 800a9bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9be:	d12d      	bne.n	800aa1c <_strtol_l.constprop.0+0x90>
 800a9c0:	782c      	ldrb	r4, [r5, #0]
 800a9c2:	2601      	movs	r6, #1
 800a9c4:	1c95      	adds	r5, r2, #2
 800a9c6:	f033 0210 	bics.w	r2, r3, #16
 800a9ca:	d109      	bne.n	800a9e0 <_strtol_l.constprop.0+0x54>
 800a9cc:	2c30      	cmp	r4, #48	@ 0x30
 800a9ce:	d12a      	bne.n	800aa26 <_strtol_l.constprop.0+0x9a>
 800a9d0:	782a      	ldrb	r2, [r5, #0]
 800a9d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9d6:	2a58      	cmp	r2, #88	@ 0x58
 800a9d8:	d125      	bne.n	800aa26 <_strtol_l.constprop.0+0x9a>
 800a9da:	786c      	ldrb	r4, [r5, #1]
 800a9dc:	2310      	movs	r3, #16
 800a9de:	3502      	adds	r5, #2
 800a9e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a9e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	fbbc f9f3 	udiv	r9, ip, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a9f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a9f8:	2f09      	cmp	r7, #9
 800a9fa:	d81b      	bhi.n	800aa34 <_strtol_l.constprop.0+0xa8>
 800a9fc:	463c      	mov	r4, r7
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	dd27      	ble.n	800aa52 <_strtol_l.constprop.0+0xc6>
 800aa02:	1c57      	adds	r7, r2, #1
 800aa04:	d007      	beq.n	800aa16 <_strtol_l.constprop.0+0x8a>
 800aa06:	4581      	cmp	r9, r0
 800aa08:	d320      	bcc.n	800aa4c <_strtol_l.constprop.0+0xc0>
 800aa0a:	d101      	bne.n	800aa10 <_strtol_l.constprop.0+0x84>
 800aa0c:	45a2      	cmp	sl, r4
 800aa0e:	db1d      	blt.n	800aa4c <_strtol_l.constprop.0+0xc0>
 800aa10:	fb00 4003 	mla	r0, r0, r3, r4
 800aa14:	2201      	movs	r2, #1
 800aa16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa1a:	e7eb      	b.n	800a9f4 <_strtol_l.constprop.0+0x68>
 800aa1c:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa1e:	bf04      	itt	eq
 800aa20:	782c      	ldrbeq	r4, [r5, #0]
 800aa22:	1c95      	addeq	r5, r2, #2
 800aa24:	e7cf      	b.n	800a9c6 <_strtol_l.constprop.0+0x3a>
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1da      	bne.n	800a9e0 <_strtol_l.constprop.0+0x54>
 800aa2a:	2c30      	cmp	r4, #48	@ 0x30
 800aa2c:	bf0c      	ite	eq
 800aa2e:	2308      	moveq	r3, #8
 800aa30:	230a      	movne	r3, #10
 800aa32:	e7d5      	b.n	800a9e0 <_strtol_l.constprop.0+0x54>
 800aa34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa38:	2f19      	cmp	r7, #25
 800aa3a:	d801      	bhi.n	800aa40 <_strtol_l.constprop.0+0xb4>
 800aa3c:	3c37      	subs	r4, #55	@ 0x37
 800aa3e:	e7de      	b.n	800a9fe <_strtol_l.constprop.0+0x72>
 800aa40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa44:	2f19      	cmp	r7, #25
 800aa46:	d804      	bhi.n	800aa52 <_strtol_l.constprop.0+0xc6>
 800aa48:	3c57      	subs	r4, #87	@ 0x57
 800aa4a:	e7d8      	b.n	800a9fe <_strtol_l.constprop.0+0x72>
 800aa4c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa50:	e7e1      	b.n	800aa16 <_strtol_l.constprop.0+0x8a>
 800aa52:	1c53      	adds	r3, r2, #1
 800aa54:	d108      	bne.n	800aa68 <_strtol_l.constprop.0+0xdc>
 800aa56:	2322      	movs	r3, #34	@ 0x22
 800aa58:	f8ce 3000 	str.w	r3, [lr]
 800aa5c:	4660      	mov	r0, ip
 800aa5e:	f1b8 0f00 	cmp.w	r8, #0
 800aa62:	d0a0      	beq.n	800a9a6 <_strtol_l.constprop.0+0x1a>
 800aa64:	1e69      	subs	r1, r5, #1
 800aa66:	e006      	b.n	800aa76 <_strtol_l.constprop.0+0xea>
 800aa68:	b106      	cbz	r6, 800aa6c <_strtol_l.constprop.0+0xe0>
 800aa6a:	4240      	negs	r0, r0
 800aa6c:	f1b8 0f00 	cmp.w	r8, #0
 800aa70:	d099      	beq.n	800a9a6 <_strtol_l.constprop.0+0x1a>
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	d1f6      	bne.n	800aa64 <_strtol_l.constprop.0+0xd8>
 800aa76:	f8c8 1000 	str.w	r1, [r8]
 800aa7a:	e794      	b.n	800a9a6 <_strtol_l.constprop.0+0x1a>
 800aa7c:	0800bec1 	.word	0x0800bec1

0800aa80 <_strtol_r>:
 800aa80:	f7ff bf84 	b.w	800a98c <_strtol_l.constprop.0>

0800aa84 <__ssputs_r>:
 800aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa88:	688e      	ldr	r6, [r1, #8]
 800aa8a:	461f      	mov	r7, r3
 800aa8c:	42be      	cmp	r6, r7
 800aa8e:	680b      	ldr	r3, [r1, #0]
 800aa90:	4682      	mov	sl, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	4690      	mov	r8, r2
 800aa96:	d82d      	bhi.n	800aaf4 <__ssputs_r+0x70>
 800aa98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aaa0:	d026      	beq.n	800aaf0 <__ssputs_r+0x6c>
 800aaa2:	6965      	ldr	r5, [r4, #20]
 800aaa4:	6909      	ldr	r1, [r1, #16]
 800aaa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaaa:	eba3 0901 	sub.w	r9, r3, r1
 800aaae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aab2:	1c7b      	adds	r3, r7, #1
 800aab4:	444b      	add	r3, r9
 800aab6:	106d      	asrs	r5, r5, #1
 800aab8:	429d      	cmp	r5, r3
 800aaba:	bf38      	it	cc
 800aabc:	461d      	movcc	r5, r3
 800aabe:	0553      	lsls	r3, r2, #21
 800aac0:	d527      	bpl.n	800ab12 <__ssputs_r+0x8e>
 800aac2:	4629      	mov	r1, r5
 800aac4:	f7fc fd5c 	bl	8007580 <_malloc_r>
 800aac8:	4606      	mov	r6, r0
 800aaca:	b360      	cbz	r0, 800ab26 <__ssputs_r+0xa2>
 800aacc:	6921      	ldr	r1, [r4, #16]
 800aace:	464a      	mov	r2, r9
 800aad0:	f000 fa08 	bl	800aee4 <memcpy>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	6126      	str	r6, [r4, #16]
 800aae2:	6165      	str	r5, [r4, #20]
 800aae4:	444e      	add	r6, r9
 800aae6:	eba5 0509 	sub.w	r5, r5, r9
 800aaea:	6026      	str	r6, [r4, #0]
 800aaec:	60a5      	str	r5, [r4, #8]
 800aaee:	463e      	mov	r6, r7
 800aaf0:	42be      	cmp	r6, r7
 800aaf2:	d900      	bls.n	800aaf6 <__ssputs_r+0x72>
 800aaf4:	463e      	mov	r6, r7
 800aaf6:	6820      	ldr	r0, [r4, #0]
 800aaf8:	4632      	mov	r2, r6
 800aafa:	4641      	mov	r1, r8
 800aafc:	f000 f9c6 	bl	800ae8c <memmove>
 800ab00:	68a3      	ldr	r3, [r4, #8]
 800ab02:	1b9b      	subs	r3, r3, r6
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	4433      	add	r3, r6
 800ab0a:	6023      	str	r3, [r4, #0]
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab12:	462a      	mov	r2, r5
 800ab14:	f000 fd65 	bl	800b5e2 <_realloc_r>
 800ab18:	4606      	mov	r6, r0
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1e0      	bne.n	800aae0 <__ssputs_r+0x5c>
 800ab1e:	6921      	ldr	r1, [r4, #16]
 800ab20:	4650      	mov	r0, sl
 800ab22:	f7fe fc2d 	bl	8009380 <_free_r>
 800ab26:	230c      	movs	r3, #12
 800ab28:	f8ca 3000 	str.w	r3, [sl]
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	e7e9      	b.n	800ab0e <__ssputs_r+0x8a>
	...

0800ab3c <_svfiprintf_r>:
 800ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	4698      	mov	r8, r3
 800ab42:	898b      	ldrh	r3, [r1, #12]
 800ab44:	061b      	lsls	r3, r3, #24
 800ab46:	b09d      	sub	sp, #116	@ 0x74
 800ab48:	4607      	mov	r7, r0
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	d510      	bpl.n	800ab72 <_svfiprintf_r+0x36>
 800ab50:	690b      	ldr	r3, [r1, #16]
 800ab52:	b973      	cbnz	r3, 800ab72 <_svfiprintf_r+0x36>
 800ab54:	2140      	movs	r1, #64	@ 0x40
 800ab56:	f7fc fd13 	bl	8007580 <_malloc_r>
 800ab5a:	6028      	str	r0, [r5, #0]
 800ab5c:	6128      	str	r0, [r5, #16]
 800ab5e:	b930      	cbnz	r0, 800ab6e <_svfiprintf_r+0x32>
 800ab60:	230c      	movs	r3, #12
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	f04f 30ff 	mov.w	r0, #4294967295
 800ab68:	b01d      	add	sp, #116	@ 0x74
 800ab6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6e:	2340      	movs	r3, #64	@ 0x40
 800ab70:	616b      	str	r3, [r5, #20]
 800ab72:	2300      	movs	r3, #0
 800ab74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab76:	2320      	movs	r3, #32
 800ab78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab80:	2330      	movs	r3, #48	@ 0x30
 800ab82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad20 <_svfiprintf_r+0x1e4>
 800ab86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab8a:	f04f 0901 	mov.w	r9, #1
 800ab8e:	4623      	mov	r3, r4
 800ab90:	469a      	mov	sl, r3
 800ab92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab96:	b10a      	cbz	r2, 800ab9c <_svfiprintf_r+0x60>
 800ab98:	2a25      	cmp	r2, #37	@ 0x25
 800ab9a:	d1f9      	bne.n	800ab90 <_svfiprintf_r+0x54>
 800ab9c:	ebba 0b04 	subs.w	fp, sl, r4
 800aba0:	d00b      	beq.n	800abba <_svfiprintf_r+0x7e>
 800aba2:	465b      	mov	r3, fp
 800aba4:	4622      	mov	r2, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	4638      	mov	r0, r7
 800abaa:	f7ff ff6b 	bl	800aa84 <__ssputs_r>
 800abae:	3001      	adds	r0, #1
 800abb0:	f000 80a7 	beq.w	800ad02 <_svfiprintf_r+0x1c6>
 800abb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abb6:	445a      	add	r2, fp
 800abb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800abba:	f89a 3000 	ldrb.w	r3, [sl]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 809f 	beq.w	800ad02 <_svfiprintf_r+0x1c6>
 800abc4:	2300      	movs	r3, #0
 800abc6:	f04f 32ff 	mov.w	r2, #4294967295
 800abca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abce:	f10a 0a01 	add.w	sl, sl, #1
 800abd2:	9304      	str	r3, [sp, #16]
 800abd4:	9307      	str	r3, [sp, #28]
 800abd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abda:	931a      	str	r3, [sp, #104]	@ 0x68
 800abdc:	4654      	mov	r4, sl
 800abde:	2205      	movs	r2, #5
 800abe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe4:	484e      	ldr	r0, [pc, #312]	@ (800ad20 <_svfiprintf_r+0x1e4>)
 800abe6:	f7f5 fb03 	bl	80001f0 <memchr>
 800abea:	9a04      	ldr	r2, [sp, #16]
 800abec:	b9d8      	cbnz	r0, 800ac26 <_svfiprintf_r+0xea>
 800abee:	06d0      	lsls	r0, r2, #27
 800abf0:	bf44      	itt	mi
 800abf2:	2320      	movmi	r3, #32
 800abf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abf8:	0711      	lsls	r1, r2, #28
 800abfa:	bf44      	itt	mi
 800abfc:	232b      	movmi	r3, #43	@ 0x2b
 800abfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac02:	f89a 3000 	ldrb.w	r3, [sl]
 800ac06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac08:	d015      	beq.n	800ac36 <_svfiprintf_r+0xfa>
 800ac0a:	9a07      	ldr	r2, [sp, #28]
 800ac0c:	4654      	mov	r4, sl
 800ac0e:	2000      	movs	r0, #0
 800ac10:	f04f 0c0a 	mov.w	ip, #10
 800ac14:	4621      	mov	r1, r4
 800ac16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac1a:	3b30      	subs	r3, #48	@ 0x30
 800ac1c:	2b09      	cmp	r3, #9
 800ac1e:	d94b      	bls.n	800acb8 <_svfiprintf_r+0x17c>
 800ac20:	b1b0      	cbz	r0, 800ac50 <_svfiprintf_r+0x114>
 800ac22:	9207      	str	r2, [sp, #28]
 800ac24:	e014      	b.n	800ac50 <_svfiprintf_r+0x114>
 800ac26:	eba0 0308 	sub.w	r3, r0, r8
 800ac2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	9304      	str	r3, [sp, #16]
 800ac32:	46a2      	mov	sl, r4
 800ac34:	e7d2      	b.n	800abdc <_svfiprintf_r+0xa0>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	1d19      	adds	r1, r3, #4
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	9103      	str	r1, [sp, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bfbb      	ittet	lt
 800ac42:	425b      	neglt	r3, r3
 800ac44:	f042 0202 	orrlt.w	r2, r2, #2
 800ac48:	9307      	strge	r3, [sp, #28]
 800ac4a:	9307      	strlt	r3, [sp, #28]
 800ac4c:	bfb8      	it	lt
 800ac4e:	9204      	strlt	r2, [sp, #16]
 800ac50:	7823      	ldrb	r3, [r4, #0]
 800ac52:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac54:	d10a      	bne.n	800ac6c <_svfiprintf_r+0x130>
 800ac56:	7863      	ldrb	r3, [r4, #1]
 800ac58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac5a:	d132      	bne.n	800acc2 <_svfiprintf_r+0x186>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	9203      	str	r2, [sp, #12]
 800ac64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac68:	3402      	adds	r4, #2
 800ac6a:	9305      	str	r3, [sp, #20]
 800ac6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad30 <_svfiprintf_r+0x1f4>
 800ac70:	7821      	ldrb	r1, [r4, #0]
 800ac72:	2203      	movs	r2, #3
 800ac74:	4650      	mov	r0, sl
 800ac76:	f7f5 fabb 	bl	80001f0 <memchr>
 800ac7a:	b138      	cbz	r0, 800ac8c <_svfiprintf_r+0x150>
 800ac7c:	9b04      	ldr	r3, [sp, #16]
 800ac7e:	eba0 000a 	sub.w	r0, r0, sl
 800ac82:	2240      	movs	r2, #64	@ 0x40
 800ac84:	4082      	lsls	r2, r0
 800ac86:	4313      	orrs	r3, r2
 800ac88:	3401      	adds	r4, #1
 800ac8a:	9304      	str	r3, [sp, #16]
 800ac8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac90:	4824      	ldr	r0, [pc, #144]	@ (800ad24 <_svfiprintf_r+0x1e8>)
 800ac92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac96:	2206      	movs	r2, #6
 800ac98:	f7f5 faaa 	bl	80001f0 <memchr>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d036      	beq.n	800ad0e <_svfiprintf_r+0x1d2>
 800aca0:	4b21      	ldr	r3, [pc, #132]	@ (800ad28 <_svfiprintf_r+0x1ec>)
 800aca2:	bb1b      	cbnz	r3, 800acec <_svfiprintf_r+0x1b0>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	3307      	adds	r3, #7
 800aca8:	f023 0307 	bic.w	r3, r3, #7
 800acac:	3308      	adds	r3, #8
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb2:	4433      	add	r3, r6
 800acb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800acb6:	e76a      	b.n	800ab8e <_svfiprintf_r+0x52>
 800acb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acbc:	460c      	mov	r4, r1
 800acbe:	2001      	movs	r0, #1
 800acc0:	e7a8      	b.n	800ac14 <_svfiprintf_r+0xd8>
 800acc2:	2300      	movs	r3, #0
 800acc4:	3401      	adds	r4, #1
 800acc6:	9305      	str	r3, [sp, #20]
 800acc8:	4619      	mov	r1, r3
 800acca:	f04f 0c0a 	mov.w	ip, #10
 800acce:	4620      	mov	r0, r4
 800acd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acd4:	3a30      	subs	r2, #48	@ 0x30
 800acd6:	2a09      	cmp	r2, #9
 800acd8:	d903      	bls.n	800ace2 <_svfiprintf_r+0x1a6>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d0c6      	beq.n	800ac6c <_svfiprintf_r+0x130>
 800acde:	9105      	str	r1, [sp, #20]
 800ace0:	e7c4      	b.n	800ac6c <_svfiprintf_r+0x130>
 800ace2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace6:	4604      	mov	r4, r0
 800ace8:	2301      	movs	r3, #1
 800acea:	e7f0      	b.n	800acce <_svfiprintf_r+0x192>
 800acec:	ab03      	add	r3, sp, #12
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	462a      	mov	r2, r5
 800acf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ad2c <_svfiprintf_r+0x1f0>)
 800acf4:	a904      	add	r1, sp, #16
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7fc fd6e 	bl	80077d8 <_printf_float>
 800acfc:	1c42      	adds	r2, r0, #1
 800acfe:	4606      	mov	r6, r0
 800ad00:	d1d6      	bne.n	800acb0 <_svfiprintf_r+0x174>
 800ad02:	89ab      	ldrh	r3, [r5, #12]
 800ad04:	065b      	lsls	r3, r3, #25
 800ad06:	f53f af2d 	bmi.w	800ab64 <_svfiprintf_r+0x28>
 800ad0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad0c:	e72c      	b.n	800ab68 <_svfiprintf_r+0x2c>
 800ad0e:	ab03      	add	r3, sp, #12
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	462a      	mov	r2, r5
 800ad14:	4b05      	ldr	r3, [pc, #20]	@ (800ad2c <_svfiprintf_r+0x1f0>)
 800ad16:	a904      	add	r1, sp, #16
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f7fc fff5 	bl	8007d08 <_printf_i>
 800ad1e:	e7ed      	b.n	800acfc <_svfiprintf_r+0x1c0>
 800ad20:	0800bfc1 	.word	0x0800bfc1
 800ad24:	0800bfcb 	.word	0x0800bfcb
 800ad28:	080077d9 	.word	0x080077d9
 800ad2c:	0800aa85 	.word	0x0800aa85
 800ad30:	0800bfc7 	.word	0x0800bfc7

0800ad34 <__sflush_r>:
 800ad34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3c:	0716      	lsls	r6, r2, #28
 800ad3e:	4605      	mov	r5, r0
 800ad40:	460c      	mov	r4, r1
 800ad42:	d454      	bmi.n	800adee <__sflush_r+0xba>
 800ad44:	684b      	ldr	r3, [r1, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	dc02      	bgt.n	800ad50 <__sflush_r+0x1c>
 800ad4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	dd48      	ble.n	800ade2 <__sflush_r+0xae>
 800ad50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	d045      	beq.n	800ade2 <__sflush_r+0xae>
 800ad56:	2300      	movs	r3, #0
 800ad58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad5c:	682f      	ldr	r7, [r5, #0]
 800ad5e:	6a21      	ldr	r1, [r4, #32]
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	d030      	beq.n	800adc6 <__sflush_r+0x92>
 800ad64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	0759      	lsls	r1, r3, #29
 800ad6a:	d505      	bpl.n	800ad78 <__sflush_r+0x44>
 800ad6c:	6863      	ldr	r3, [r4, #4]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad72:	b10b      	cbz	r3, 800ad78 <__sflush_r+0x44>
 800ad74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad76:	1ad2      	subs	r2, r2, r3
 800ad78:	2300      	movs	r3, #0
 800ad7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad7c:	6a21      	ldr	r1, [r4, #32]
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b0      	blx	r6
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	d106      	bne.n	800ad96 <__sflush_r+0x62>
 800ad88:	6829      	ldr	r1, [r5, #0]
 800ad8a:	291d      	cmp	r1, #29
 800ad8c:	d82b      	bhi.n	800ade6 <__sflush_r+0xb2>
 800ad8e:	4a2a      	ldr	r2, [pc, #168]	@ (800ae38 <__sflush_r+0x104>)
 800ad90:	410a      	asrs	r2, r1
 800ad92:	07d6      	lsls	r6, r2, #31
 800ad94:	d427      	bmi.n	800ade6 <__sflush_r+0xb2>
 800ad96:	2200      	movs	r2, #0
 800ad98:	6062      	str	r2, [r4, #4]
 800ad9a:	04d9      	lsls	r1, r3, #19
 800ad9c:	6922      	ldr	r2, [r4, #16]
 800ad9e:	6022      	str	r2, [r4, #0]
 800ada0:	d504      	bpl.n	800adac <__sflush_r+0x78>
 800ada2:	1c42      	adds	r2, r0, #1
 800ada4:	d101      	bne.n	800adaa <__sflush_r+0x76>
 800ada6:	682b      	ldr	r3, [r5, #0]
 800ada8:	b903      	cbnz	r3, 800adac <__sflush_r+0x78>
 800adaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800adac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adae:	602f      	str	r7, [r5, #0]
 800adb0:	b1b9      	cbz	r1, 800ade2 <__sflush_r+0xae>
 800adb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adb6:	4299      	cmp	r1, r3
 800adb8:	d002      	beq.n	800adc0 <__sflush_r+0x8c>
 800adba:	4628      	mov	r0, r5
 800adbc:	f7fe fae0 	bl	8009380 <_free_r>
 800adc0:	2300      	movs	r3, #0
 800adc2:	6363      	str	r3, [r4, #52]	@ 0x34
 800adc4:	e00d      	b.n	800ade2 <__sflush_r+0xae>
 800adc6:	2301      	movs	r3, #1
 800adc8:	4628      	mov	r0, r5
 800adca:	47b0      	blx	r6
 800adcc:	4602      	mov	r2, r0
 800adce:	1c50      	adds	r0, r2, #1
 800add0:	d1c9      	bne.n	800ad66 <__sflush_r+0x32>
 800add2:	682b      	ldr	r3, [r5, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0c6      	beq.n	800ad66 <__sflush_r+0x32>
 800add8:	2b1d      	cmp	r3, #29
 800adda:	d001      	beq.n	800ade0 <__sflush_r+0xac>
 800addc:	2b16      	cmp	r3, #22
 800adde:	d11e      	bne.n	800ae1e <__sflush_r+0xea>
 800ade0:	602f      	str	r7, [r5, #0]
 800ade2:	2000      	movs	r0, #0
 800ade4:	e022      	b.n	800ae2c <__sflush_r+0xf8>
 800ade6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adea:	b21b      	sxth	r3, r3
 800adec:	e01b      	b.n	800ae26 <__sflush_r+0xf2>
 800adee:	690f      	ldr	r7, [r1, #16]
 800adf0:	2f00      	cmp	r7, #0
 800adf2:	d0f6      	beq.n	800ade2 <__sflush_r+0xae>
 800adf4:	0793      	lsls	r3, r2, #30
 800adf6:	680e      	ldr	r6, [r1, #0]
 800adf8:	bf08      	it	eq
 800adfa:	694b      	ldreq	r3, [r1, #20]
 800adfc:	600f      	str	r7, [r1, #0]
 800adfe:	bf18      	it	ne
 800ae00:	2300      	movne	r3, #0
 800ae02:	eba6 0807 	sub.w	r8, r6, r7
 800ae06:	608b      	str	r3, [r1, #8]
 800ae08:	f1b8 0f00 	cmp.w	r8, #0
 800ae0c:	dde9      	ble.n	800ade2 <__sflush_r+0xae>
 800ae0e:	6a21      	ldr	r1, [r4, #32]
 800ae10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae12:	4643      	mov	r3, r8
 800ae14:	463a      	mov	r2, r7
 800ae16:	4628      	mov	r0, r5
 800ae18:	47b0      	blx	r6
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	dc08      	bgt.n	800ae30 <__sflush_r+0xfc>
 800ae1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae26:	81a3      	strh	r3, [r4, #12]
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae30:	4407      	add	r7, r0
 800ae32:	eba8 0800 	sub.w	r8, r8, r0
 800ae36:	e7e7      	b.n	800ae08 <__sflush_r+0xd4>
 800ae38:	dfbffffe 	.word	0xdfbffffe

0800ae3c <_fflush_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	690b      	ldr	r3, [r1, #16]
 800ae40:	4605      	mov	r5, r0
 800ae42:	460c      	mov	r4, r1
 800ae44:	b913      	cbnz	r3, 800ae4c <_fflush_r+0x10>
 800ae46:	2500      	movs	r5, #0
 800ae48:	4628      	mov	r0, r5
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	b118      	cbz	r0, 800ae56 <_fflush_r+0x1a>
 800ae4e:	6a03      	ldr	r3, [r0, #32]
 800ae50:	b90b      	cbnz	r3, 800ae56 <_fflush_r+0x1a>
 800ae52:	f7fd fb19 	bl	8008488 <__sinit>
 800ae56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0f3      	beq.n	800ae46 <_fflush_r+0xa>
 800ae5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae60:	07d0      	lsls	r0, r2, #31
 800ae62:	d404      	bmi.n	800ae6e <_fflush_r+0x32>
 800ae64:	0599      	lsls	r1, r3, #22
 800ae66:	d402      	bmi.n	800ae6e <_fflush_r+0x32>
 800ae68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae6a:	f7fd fc34 	bl	80086d6 <__retarget_lock_acquire_recursive>
 800ae6e:	4628      	mov	r0, r5
 800ae70:	4621      	mov	r1, r4
 800ae72:	f7ff ff5f 	bl	800ad34 <__sflush_r>
 800ae76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae78:	07da      	lsls	r2, r3, #31
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	d4e4      	bmi.n	800ae48 <_fflush_r+0xc>
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	059b      	lsls	r3, r3, #22
 800ae82:	d4e1      	bmi.n	800ae48 <_fflush_r+0xc>
 800ae84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae86:	f7fd fc27 	bl	80086d8 <__retarget_lock_release_recursive>
 800ae8a:	e7dd      	b.n	800ae48 <_fflush_r+0xc>

0800ae8c <memmove>:
 800ae8c:	4288      	cmp	r0, r1
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	eb01 0402 	add.w	r4, r1, r2
 800ae94:	d902      	bls.n	800ae9c <memmove+0x10>
 800ae96:	4284      	cmp	r4, r0
 800ae98:	4623      	mov	r3, r4
 800ae9a:	d807      	bhi.n	800aeac <memmove+0x20>
 800ae9c:	1e43      	subs	r3, r0, #1
 800ae9e:	42a1      	cmp	r1, r4
 800aea0:	d008      	beq.n	800aeb4 <memmove+0x28>
 800aea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeaa:	e7f8      	b.n	800ae9e <memmove+0x12>
 800aeac:	4402      	add	r2, r0
 800aeae:	4601      	mov	r1, r0
 800aeb0:	428a      	cmp	r2, r1
 800aeb2:	d100      	bne.n	800aeb6 <memmove+0x2a>
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aebe:	e7f7      	b.n	800aeb0 <memmove+0x24>

0800aec0 <strncmp>:
 800aec0:	b510      	push	{r4, lr}
 800aec2:	b16a      	cbz	r2, 800aee0 <strncmp+0x20>
 800aec4:	3901      	subs	r1, #1
 800aec6:	1884      	adds	r4, r0, r2
 800aec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aecc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d103      	bne.n	800aedc <strncmp+0x1c>
 800aed4:	42a0      	cmp	r0, r4
 800aed6:	d001      	beq.n	800aedc <strncmp+0x1c>
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d1f5      	bne.n	800aec8 <strncmp+0x8>
 800aedc:	1ad0      	subs	r0, r2, r3
 800aede:	bd10      	pop	{r4, pc}
 800aee0:	4610      	mov	r0, r2
 800aee2:	e7fc      	b.n	800aede <strncmp+0x1e>

0800aee4 <memcpy>:
 800aee4:	440a      	add	r2, r1
 800aee6:	4291      	cmp	r1, r2
 800aee8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeec:	d100      	bne.n	800aef0 <memcpy+0xc>
 800aeee:	4770      	bx	lr
 800aef0:	b510      	push	{r4, lr}
 800aef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aefa:	4291      	cmp	r1, r2
 800aefc:	d1f9      	bne.n	800aef2 <memcpy+0xe>
 800aefe:	bd10      	pop	{r4, pc}

0800af00 <nan>:
 800af00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af08 <nan+0x8>
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	00000000 	.word	0x00000000
 800af0c:	7ff80000 	.word	0x7ff80000

0800af10 <__assert_func>:
 800af10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af12:	4614      	mov	r4, r2
 800af14:	461a      	mov	r2, r3
 800af16:	4b09      	ldr	r3, [pc, #36]	@ (800af3c <__assert_func+0x2c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4605      	mov	r5, r0
 800af1c:	68d8      	ldr	r0, [r3, #12]
 800af1e:	b954      	cbnz	r4, 800af36 <__assert_func+0x26>
 800af20:	4b07      	ldr	r3, [pc, #28]	@ (800af40 <__assert_func+0x30>)
 800af22:	461c      	mov	r4, r3
 800af24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af28:	9100      	str	r1, [sp, #0]
 800af2a:	462b      	mov	r3, r5
 800af2c:	4905      	ldr	r1, [pc, #20]	@ (800af44 <__assert_func+0x34>)
 800af2e:	f000 fb93 	bl	800b658 <fiprintf>
 800af32:	f000 fba3 	bl	800b67c <abort>
 800af36:	4b04      	ldr	r3, [pc, #16]	@ (800af48 <__assert_func+0x38>)
 800af38:	e7f4      	b.n	800af24 <__assert_func+0x14>
 800af3a:	bf00      	nop
 800af3c:	2000002c 	.word	0x2000002c
 800af40:	0800c015 	.word	0x0800c015
 800af44:	0800bfe7 	.word	0x0800bfe7
 800af48:	0800bfda 	.word	0x0800bfda

0800af4c <rshift>:
 800af4c:	6903      	ldr	r3, [r0, #16]
 800af4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af5a:	f100 0414 	add.w	r4, r0, #20
 800af5e:	dd45      	ble.n	800afec <rshift+0xa0>
 800af60:	f011 011f 	ands.w	r1, r1, #31
 800af64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af6c:	d10c      	bne.n	800af88 <rshift+0x3c>
 800af6e:	f100 0710 	add.w	r7, r0, #16
 800af72:	4629      	mov	r1, r5
 800af74:	42b1      	cmp	r1, r6
 800af76:	d334      	bcc.n	800afe2 <rshift+0x96>
 800af78:	1a9b      	subs	r3, r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	1eea      	subs	r2, r5, #3
 800af7e:	4296      	cmp	r6, r2
 800af80:	bf38      	it	cc
 800af82:	2300      	movcc	r3, #0
 800af84:	4423      	add	r3, r4
 800af86:	e015      	b.n	800afb4 <rshift+0x68>
 800af88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af8c:	f1c1 0820 	rsb	r8, r1, #32
 800af90:	40cf      	lsrs	r7, r1
 800af92:	f105 0e04 	add.w	lr, r5, #4
 800af96:	46a1      	mov	r9, r4
 800af98:	4576      	cmp	r6, lr
 800af9a:	46f4      	mov	ip, lr
 800af9c:	d815      	bhi.n	800afca <rshift+0x7e>
 800af9e:	1a9a      	subs	r2, r3, r2
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	3a04      	subs	r2, #4
 800afa4:	3501      	adds	r5, #1
 800afa6:	42ae      	cmp	r6, r5
 800afa8:	bf38      	it	cc
 800afaa:	2200      	movcc	r2, #0
 800afac:	18a3      	adds	r3, r4, r2
 800afae:	50a7      	str	r7, [r4, r2]
 800afb0:	b107      	cbz	r7, 800afb4 <rshift+0x68>
 800afb2:	3304      	adds	r3, #4
 800afb4:	1b1a      	subs	r2, r3, r4
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800afbc:	bf08      	it	eq
 800afbe:	2300      	moveq	r3, #0
 800afc0:	6102      	str	r2, [r0, #16]
 800afc2:	bf08      	it	eq
 800afc4:	6143      	streq	r3, [r0, #20]
 800afc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afca:	f8dc c000 	ldr.w	ip, [ip]
 800afce:	fa0c fc08 	lsl.w	ip, ip, r8
 800afd2:	ea4c 0707 	orr.w	r7, ip, r7
 800afd6:	f849 7b04 	str.w	r7, [r9], #4
 800afda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afde:	40cf      	lsrs	r7, r1
 800afe0:	e7da      	b.n	800af98 <rshift+0x4c>
 800afe2:	f851 cb04 	ldr.w	ip, [r1], #4
 800afe6:	f847 cf04 	str.w	ip, [r7, #4]!
 800afea:	e7c3      	b.n	800af74 <rshift+0x28>
 800afec:	4623      	mov	r3, r4
 800afee:	e7e1      	b.n	800afb4 <rshift+0x68>

0800aff0 <__hexdig_fun>:
 800aff0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aff4:	2b09      	cmp	r3, #9
 800aff6:	d802      	bhi.n	800affe <__hexdig_fun+0xe>
 800aff8:	3820      	subs	r0, #32
 800affa:	b2c0      	uxtb	r0, r0
 800affc:	4770      	bx	lr
 800affe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b002:	2b05      	cmp	r3, #5
 800b004:	d801      	bhi.n	800b00a <__hexdig_fun+0x1a>
 800b006:	3847      	subs	r0, #71	@ 0x47
 800b008:	e7f7      	b.n	800affa <__hexdig_fun+0xa>
 800b00a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b00e:	2b05      	cmp	r3, #5
 800b010:	d801      	bhi.n	800b016 <__hexdig_fun+0x26>
 800b012:	3827      	subs	r0, #39	@ 0x27
 800b014:	e7f1      	b.n	800affa <__hexdig_fun+0xa>
 800b016:	2000      	movs	r0, #0
 800b018:	4770      	bx	lr
	...

0800b01c <__gethex>:
 800b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b020:	b085      	sub	sp, #20
 800b022:	468a      	mov	sl, r1
 800b024:	9302      	str	r3, [sp, #8]
 800b026:	680b      	ldr	r3, [r1, #0]
 800b028:	9001      	str	r0, [sp, #4]
 800b02a:	4690      	mov	r8, r2
 800b02c:	1c9c      	adds	r4, r3, #2
 800b02e:	46a1      	mov	r9, r4
 800b030:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b034:	2830      	cmp	r0, #48	@ 0x30
 800b036:	d0fa      	beq.n	800b02e <__gethex+0x12>
 800b038:	eba9 0303 	sub.w	r3, r9, r3
 800b03c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b040:	f7ff ffd6 	bl	800aff0 <__hexdig_fun>
 800b044:	4605      	mov	r5, r0
 800b046:	2800      	cmp	r0, #0
 800b048:	d168      	bne.n	800b11c <__gethex+0x100>
 800b04a:	49a0      	ldr	r1, [pc, #640]	@ (800b2cc <__gethex+0x2b0>)
 800b04c:	2201      	movs	r2, #1
 800b04e:	4648      	mov	r0, r9
 800b050:	f7ff ff36 	bl	800aec0 <strncmp>
 800b054:	4607      	mov	r7, r0
 800b056:	2800      	cmp	r0, #0
 800b058:	d167      	bne.n	800b12a <__gethex+0x10e>
 800b05a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b05e:	4626      	mov	r6, r4
 800b060:	f7ff ffc6 	bl	800aff0 <__hexdig_fun>
 800b064:	2800      	cmp	r0, #0
 800b066:	d062      	beq.n	800b12e <__gethex+0x112>
 800b068:	4623      	mov	r3, r4
 800b06a:	7818      	ldrb	r0, [r3, #0]
 800b06c:	2830      	cmp	r0, #48	@ 0x30
 800b06e:	4699      	mov	r9, r3
 800b070:	f103 0301 	add.w	r3, r3, #1
 800b074:	d0f9      	beq.n	800b06a <__gethex+0x4e>
 800b076:	f7ff ffbb 	bl	800aff0 <__hexdig_fun>
 800b07a:	fab0 f580 	clz	r5, r0
 800b07e:	096d      	lsrs	r5, r5, #5
 800b080:	f04f 0b01 	mov.w	fp, #1
 800b084:	464a      	mov	r2, r9
 800b086:	4616      	mov	r6, r2
 800b088:	3201      	adds	r2, #1
 800b08a:	7830      	ldrb	r0, [r6, #0]
 800b08c:	f7ff ffb0 	bl	800aff0 <__hexdig_fun>
 800b090:	2800      	cmp	r0, #0
 800b092:	d1f8      	bne.n	800b086 <__gethex+0x6a>
 800b094:	498d      	ldr	r1, [pc, #564]	@ (800b2cc <__gethex+0x2b0>)
 800b096:	2201      	movs	r2, #1
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff ff11 	bl	800aec0 <strncmp>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d13f      	bne.n	800b122 <__gethex+0x106>
 800b0a2:	b944      	cbnz	r4, 800b0b6 <__gethex+0x9a>
 800b0a4:	1c74      	adds	r4, r6, #1
 800b0a6:	4622      	mov	r2, r4
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	3201      	adds	r2, #1
 800b0ac:	7830      	ldrb	r0, [r6, #0]
 800b0ae:	f7ff ff9f 	bl	800aff0 <__hexdig_fun>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d1f8      	bne.n	800b0a8 <__gethex+0x8c>
 800b0b6:	1ba4      	subs	r4, r4, r6
 800b0b8:	00a7      	lsls	r7, r4, #2
 800b0ba:	7833      	ldrb	r3, [r6, #0]
 800b0bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b0c0:	2b50      	cmp	r3, #80	@ 0x50
 800b0c2:	d13e      	bne.n	800b142 <__gethex+0x126>
 800b0c4:	7873      	ldrb	r3, [r6, #1]
 800b0c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b0c8:	d033      	beq.n	800b132 <__gethex+0x116>
 800b0ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800b0cc:	d034      	beq.n	800b138 <__gethex+0x11c>
 800b0ce:	1c71      	adds	r1, r6, #1
 800b0d0:	2400      	movs	r4, #0
 800b0d2:	7808      	ldrb	r0, [r1, #0]
 800b0d4:	f7ff ff8c 	bl	800aff0 <__hexdig_fun>
 800b0d8:	1e43      	subs	r3, r0, #1
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b18      	cmp	r3, #24
 800b0de:	d830      	bhi.n	800b142 <__gethex+0x126>
 800b0e0:	f1a0 0210 	sub.w	r2, r0, #16
 800b0e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0e8:	f7ff ff82 	bl	800aff0 <__hexdig_fun>
 800b0ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800b0f0:	fa5f fc8c 	uxtb.w	ip, ip
 800b0f4:	f1bc 0f18 	cmp.w	ip, #24
 800b0f8:	f04f 030a 	mov.w	r3, #10
 800b0fc:	d91e      	bls.n	800b13c <__gethex+0x120>
 800b0fe:	b104      	cbz	r4, 800b102 <__gethex+0xe6>
 800b100:	4252      	negs	r2, r2
 800b102:	4417      	add	r7, r2
 800b104:	f8ca 1000 	str.w	r1, [sl]
 800b108:	b1ed      	cbz	r5, 800b146 <__gethex+0x12a>
 800b10a:	f1bb 0f00 	cmp.w	fp, #0
 800b10e:	bf0c      	ite	eq
 800b110:	2506      	moveq	r5, #6
 800b112:	2500      	movne	r5, #0
 800b114:	4628      	mov	r0, r5
 800b116:	b005      	add	sp, #20
 800b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11c:	2500      	movs	r5, #0
 800b11e:	462c      	mov	r4, r5
 800b120:	e7b0      	b.n	800b084 <__gethex+0x68>
 800b122:	2c00      	cmp	r4, #0
 800b124:	d1c7      	bne.n	800b0b6 <__gethex+0x9a>
 800b126:	4627      	mov	r7, r4
 800b128:	e7c7      	b.n	800b0ba <__gethex+0x9e>
 800b12a:	464e      	mov	r6, r9
 800b12c:	462f      	mov	r7, r5
 800b12e:	2501      	movs	r5, #1
 800b130:	e7c3      	b.n	800b0ba <__gethex+0x9e>
 800b132:	2400      	movs	r4, #0
 800b134:	1cb1      	adds	r1, r6, #2
 800b136:	e7cc      	b.n	800b0d2 <__gethex+0xb6>
 800b138:	2401      	movs	r4, #1
 800b13a:	e7fb      	b.n	800b134 <__gethex+0x118>
 800b13c:	fb03 0002 	mla	r0, r3, r2, r0
 800b140:	e7ce      	b.n	800b0e0 <__gethex+0xc4>
 800b142:	4631      	mov	r1, r6
 800b144:	e7de      	b.n	800b104 <__gethex+0xe8>
 800b146:	eba6 0309 	sub.w	r3, r6, r9
 800b14a:	3b01      	subs	r3, #1
 800b14c:	4629      	mov	r1, r5
 800b14e:	2b07      	cmp	r3, #7
 800b150:	dc0a      	bgt.n	800b168 <__gethex+0x14c>
 800b152:	9801      	ldr	r0, [sp, #4]
 800b154:	f7fe f95e 	bl	8009414 <_Balloc>
 800b158:	4604      	mov	r4, r0
 800b15a:	b940      	cbnz	r0, 800b16e <__gethex+0x152>
 800b15c:	4b5c      	ldr	r3, [pc, #368]	@ (800b2d0 <__gethex+0x2b4>)
 800b15e:	4602      	mov	r2, r0
 800b160:	21e4      	movs	r1, #228	@ 0xe4
 800b162:	485c      	ldr	r0, [pc, #368]	@ (800b2d4 <__gethex+0x2b8>)
 800b164:	f7ff fed4 	bl	800af10 <__assert_func>
 800b168:	3101      	adds	r1, #1
 800b16a:	105b      	asrs	r3, r3, #1
 800b16c:	e7ef      	b.n	800b14e <__gethex+0x132>
 800b16e:	f100 0a14 	add.w	sl, r0, #20
 800b172:	2300      	movs	r3, #0
 800b174:	4655      	mov	r5, sl
 800b176:	469b      	mov	fp, r3
 800b178:	45b1      	cmp	r9, r6
 800b17a:	d337      	bcc.n	800b1ec <__gethex+0x1d0>
 800b17c:	f845 bb04 	str.w	fp, [r5], #4
 800b180:	eba5 050a 	sub.w	r5, r5, sl
 800b184:	10ad      	asrs	r5, r5, #2
 800b186:	6125      	str	r5, [r4, #16]
 800b188:	4658      	mov	r0, fp
 800b18a:	f7fe fa35 	bl	80095f8 <__hi0bits>
 800b18e:	016d      	lsls	r5, r5, #5
 800b190:	f8d8 6000 	ldr.w	r6, [r8]
 800b194:	1a2d      	subs	r5, r5, r0
 800b196:	42b5      	cmp	r5, r6
 800b198:	dd54      	ble.n	800b244 <__gethex+0x228>
 800b19a:	1bad      	subs	r5, r5, r6
 800b19c:	4629      	mov	r1, r5
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7fe fdc9 	bl	8009d36 <__any_on>
 800b1a4:	4681      	mov	r9, r0
 800b1a6:	b178      	cbz	r0, 800b1c8 <__gethex+0x1ac>
 800b1a8:	1e6b      	subs	r3, r5, #1
 800b1aa:	1159      	asrs	r1, r3, #5
 800b1ac:	f003 021f 	and.w	r2, r3, #31
 800b1b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b1b4:	f04f 0901 	mov.w	r9, #1
 800b1b8:	fa09 f202 	lsl.w	r2, r9, r2
 800b1bc:	420a      	tst	r2, r1
 800b1be:	d003      	beq.n	800b1c8 <__gethex+0x1ac>
 800b1c0:	454b      	cmp	r3, r9
 800b1c2:	dc36      	bgt.n	800b232 <__gethex+0x216>
 800b1c4:	f04f 0902 	mov.w	r9, #2
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7ff febe 	bl	800af4c <rshift>
 800b1d0:	442f      	add	r7, r5
 800b1d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1d6:	42bb      	cmp	r3, r7
 800b1d8:	da42      	bge.n	800b260 <__gethex+0x244>
 800b1da:	9801      	ldr	r0, [sp, #4]
 800b1dc:	4621      	mov	r1, r4
 800b1de:	f7fe f959 	bl	8009494 <_Bfree>
 800b1e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	25a3      	movs	r5, #163	@ 0xa3
 800b1ea:	e793      	b.n	800b114 <__gethex+0xf8>
 800b1ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b1f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b1f2:	d012      	beq.n	800b21a <__gethex+0x1fe>
 800b1f4:	2b20      	cmp	r3, #32
 800b1f6:	d104      	bne.n	800b202 <__gethex+0x1e6>
 800b1f8:	f845 bb04 	str.w	fp, [r5], #4
 800b1fc:	f04f 0b00 	mov.w	fp, #0
 800b200:	465b      	mov	r3, fp
 800b202:	7830      	ldrb	r0, [r6, #0]
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	f7ff fef3 	bl	800aff0 <__hexdig_fun>
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	f000 000f 	and.w	r0, r0, #15
 800b210:	4098      	lsls	r0, r3
 800b212:	ea4b 0b00 	orr.w	fp, fp, r0
 800b216:	3304      	adds	r3, #4
 800b218:	e7ae      	b.n	800b178 <__gethex+0x15c>
 800b21a:	45b1      	cmp	r9, r6
 800b21c:	d8ea      	bhi.n	800b1f4 <__gethex+0x1d8>
 800b21e:	492b      	ldr	r1, [pc, #172]	@ (800b2cc <__gethex+0x2b0>)
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff fe4b 	bl	800aec0 <strncmp>
 800b22a:	9b03      	ldr	r3, [sp, #12]
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d1e1      	bne.n	800b1f4 <__gethex+0x1d8>
 800b230:	e7a2      	b.n	800b178 <__gethex+0x15c>
 800b232:	1ea9      	subs	r1, r5, #2
 800b234:	4620      	mov	r0, r4
 800b236:	f7fe fd7e 	bl	8009d36 <__any_on>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d0c2      	beq.n	800b1c4 <__gethex+0x1a8>
 800b23e:	f04f 0903 	mov.w	r9, #3
 800b242:	e7c1      	b.n	800b1c8 <__gethex+0x1ac>
 800b244:	da09      	bge.n	800b25a <__gethex+0x23e>
 800b246:	1b75      	subs	r5, r6, r5
 800b248:	4621      	mov	r1, r4
 800b24a:	9801      	ldr	r0, [sp, #4]
 800b24c:	462a      	mov	r2, r5
 800b24e:	f7fe fb39 	bl	80098c4 <__lshift>
 800b252:	1b7f      	subs	r7, r7, r5
 800b254:	4604      	mov	r4, r0
 800b256:	f100 0a14 	add.w	sl, r0, #20
 800b25a:	f04f 0900 	mov.w	r9, #0
 800b25e:	e7b8      	b.n	800b1d2 <__gethex+0x1b6>
 800b260:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b264:	42bd      	cmp	r5, r7
 800b266:	dd6f      	ble.n	800b348 <__gethex+0x32c>
 800b268:	1bed      	subs	r5, r5, r7
 800b26a:	42ae      	cmp	r6, r5
 800b26c:	dc34      	bgt.n	800b2d8 <__gethex+0x2bc>
 800b26e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b272:	2b02      	cmp	r3, #2
 800b274:	d022      	beq.n	800b2bc <__gethex+0x2a0>
 800b276:	2b03      	cmp	r3, #3
 800b278:	d024      	beq.n	800b2c4 <__gethex+0x2a8>
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d115      	bne.n	800b2aa <__gethex+0x28e>
 800b27e:	42ae      	cmp	r6, r5
 800b280:	d113      	bne.n	800b2aa <__gethex+0x28e>
 800b282:	2e01      	cmp	r6, #1
 800b284:	d10b      	bne.n	800b29e <__gethex+0x282>
 800b286:	9a02      	ldr	r2, [sp, #8]
 800b288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	2301      	movs	r3, #1
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	f8ca 3000 	str.w	r3, [sl]
 800b296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b298:	2562      	movs	r5, #98	@ 0x62
 800b29a:	601c      	str	r4, [r3, #0]
 800b29c:	e73a      	b.n	800b114 <__gethex+0xf8>
 800b29e:	1e71      	subs	r1, r6, #1
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f7fe fd48 	bl	8009d36 <__any_on>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d1ed      	bne.n	800b286 <__gethex+0x26a>
 800b2aa:	9801      	ldr	r0, [sp, #4]
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7fe f8f1 	bl	8009494 <_Bfree>
 800b2b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	2550      	movs	r5, #80	@ 0x50
 800b2ba:	e72b      	b.n	800b114 <__gethex+0xf8>
 800b2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f3      	bne.n	800b2aa <__gethex+0x28e>
 800b2c2:	e7e0      	b.n	800b286 <__gethex+0x26a>
 800b2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1dd      	bne.n	800b286 <__gethex+0x26a>
 800b2ca:	e7ee      	b.n	800b2aa <__gethex+0x28e>
 800b2cc:	0800be68 	.word	0x0800be68
 800b2d0:	0800bd01 	.word	0x0800bd01
 800b2d4:	0800c016 	.word	0x0800c016
 800b2d8:	1e6f      	subs	r7, r5, #1
 800b2da:	f1b9 0f00 	cmp.w	r9, #0
 800b2de:	d130      	bne.n	800b342 <__gethex+0x326>
 800b2e0:	b127      	cbz	r7, 800b2ec <__gethex+0x2d0>
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7fe fd26 	bl	8009d36 <__any_on>
 800b2ea:	4681      	mov	r9, r0
 800b2ec:	117a      	asrs	r2, r7, #5
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b2f4:	f007 071f 	and.w	r7, r7, #31
 800b2f8:	40bb      	lsls	r3, r7
 800b2fa:	4213      	tst	r3, r2
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4620      	mov	r0, r4
 800b300:	bf18      	it	ne
 800b302:	f049 0902 	orrne.w	r9, r9, #2
 800b306:	f7ff fe21 	bl	800af4c <rshift>
 800b30a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b30e:	1b76      	subs	r6, r6, r5
 800b310:	2502      	movs	r5, #2
 800b312:	f1b9 0f00 	cmp.w	r9, #0
 800b316:	d047      	beq.n	800b3a8 <__gethex+0x38c>
 800b318:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d015      	beq.n	800b34c <__gethex+0x330>
 800b320:	2b03      	cmp	r3, #3
 800b322:	d017      	beq.n	800b354 <__gethex+0x338>
 800b324:	2b01      	cmp	r3, #1
 800b326:	d109      	bne.n	800b33c <__gethex+0x320>
 800b328:	f019 0f02 	tst.w	r9, #2
 800b32c:	d006      	beq.n	800b33c <__gethex+0x320>
 800b32e:	f8da 3000 	ldr.w	r3, [sl]
 800b332:	ea49 0903 	orr.w	r9, r9, r3
 800b336:	f019 0f01 	tst.w	r9, #1
 800b33a:	d10e      	bne.n	800b35a <__gethex+0x33e>
 800b33c:	f045 0510 	orr.w	r5, r5, #16
 800b340:	e032      	b.n	800b3a8 <__gethex+0x38c>
 800b342:	f04f 0901 	mov.w	r9, #1
 800b346:	e7d1      	b.n	800b2ec <__gethex+0x2d0>
 800b348:	2501      	movs	r5, #1
 800b34a:	e7e2      	b.n	800b312 <__gethex+0x2f6>
 800b34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b34e:	f1c3 0301 	rsb	r3, r3, #1
 800b352:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0f0      	beq.n	800b33c <__gethex+0x320>
 800b35a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b35e:	f104 0314 	add.w	r3, r4, #20
 800b362:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b366:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b36a:	f04f 0c00 	mov.w	ip, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f853 2b04 	ldr.w	r2, [r3], #4
 800b374:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b378:	d01b      	beq.n	800b3b2 <__gethex+0x396>
 800b37a:	3201      	adds	r2, #1
 800b37c:	6002      	str	r2, [r0, #0]
 800b37e:	2d02      	cmp	r5, #2
 800b380:	f104 0314 	add.w	r3, r4, #20
 800b384:	d13c      	bne.n	800b400 <__gethex+0x3e4>
 800b386:	f8d8 2000 	ldr.w	r2, [r8]
 800b38a:	3a01      	subs	r2, #1
 800b38c:	42b2      	cmp	r2, r6
 800b38e:	d109      	bne.n	800b3a4 <__gethex+0x388>
 800b390:	1171      	asrs	r1, r6, #5
 800b392:	2201      	movs	r2, #1
 800b394:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b398:	f006 061f 	and.w	r6, r6, #31
 800b39c:	fa02 f606 	lsl.w	r6, r2, r6
 800b3a0:	421e      	tst	r6, r3
 800b3a2:	d13a      	bne.n	800b41a <__gethex+0x3fe>
 800b3a4:	f045 0520 	orr.w	r5, r5, #32
 800b3a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3aa:	601c      	str	r4, [r3, #0]
 800b3ac:	9b02      	ldr	r3, [sp, #8]
 800b3ae:	601f      	str	r7, [r3, #0]
 800b3b0:	e6b0      	b.n	800b114 <__gethex+0xf8>
 800b3b2:	4299      	cmp	r1, r3
 800b3b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3b8:	d8d9      	bhi.n	800b36e <__gethex+0x352>
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	459b      	cmp	fp, r3
 800b3be:	db17      	blt.n	800b3f0 <__gethex+0x3d4>
 800b3c0:	6861      	ldr	r1, [r4, #4]
 800b3c2:	9801      	ldr	r0, [sp, #4]
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	f7fe f825 	bl	8009414 <_Balloc>
 800b3ca:	4681      	mov	r9, r0
 800b3cc:	b918      	cbnz	r0, 800b3d6 <__gethex+0x3ba>
 800b3ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b438 <__gethex+0x41c>)
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	2184      	movs	r1, #132	@ 0x84
 800b3d4:	e6c5      	b.n	800b162 <__gethex+0x146>
 800b3d6:	6922      	ldr	r2, [r4, #16]
 800b3d8:	3202      	adds	r2, #2
 800b3da:	f104 010c 	add.w	r1, r4, #12
 800b3de:	0092      	lsls	r2, r2, #2
 800b3e0:	300c      	adds	r0, #12
 800b3e2:	f7ff fd7f 	bl	800aee4 <memcpy>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	9801      	ldr	r0, [sp, #4]
 800b3ea:	f7fe f853 	bl	8009494 <_Bfree>
 800b3ee:	464c      	mov	r4, r9
 800b3f0:	6923      	ldr	r3, [r4, #16]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3f8:	6122      	str	r2, [r4, #16]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	615a      	str	r2, [r3, #20]
 800b3fe:	e7be      	b.n	800b37e <__gethex+0x362>
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	455a      	cmp	r2, fp
 800b404:	dd0b      	ble.n	800b41e <__gethex+0x402>
 800b406:	2101      	movs	r1, #1
 800b408:	4620      	mov	r0, r4
 800b40a:	f7ff fd9f 	bl	800af4c <rshift>
 800b40e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b412:	3701      	adds	r7, #1
 800b414:	42bb      	cmp	r3, r7
 800b416:	f6ff aee0 	blt.w	800b1da <__gethex+0x1be>
 800b41a:	2501      	movs	r5, #1
 800b41c:	e7c2      	b.n	800b3a4 <__gethex+0x388>
 800b41e:	f016 061f 	ands.w	r6, r6, #31
 800b422:	d0fa      	beq.n	800b41a <__gethex+0x3fe>
 800b424:	4453      	add	r3, sl
 800b426:	f1c6 0620 	rsb	r6, r6, #32
 800b42a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b42e:	f7fe f8e3 	bl	80095f8 <__hi0bits>
 800b432:	42b0      	cmp	r0, r6
 800b434:	dbe7      	blt.n	800b406 <__gethex+0x3ea>
 800b436:	e7f0      	b.n	800b41a <__gethex+0x3fe>
 800b438:	0800bd01 	.word	0x0800bd01

0800b43c <L_shift>:
 800b43c:	f1c2 0208 	rsb	r2, r2, #8
 800b440:	0092      	lsls	r2, r2, #2
 800b442:	b570      	push	{r4, r5, r6, lr}
 800b444:	f1c2 0620 	rsb	r6, r2, #32
 800b448:	6843      	ldr	r3, [r0, #4]
 800b44a:	6804      	ldr	r4, [r0, #0]
 800b44c:	fa03 f506 	lsl.w	r5, r3, r6
 800b450:	432c      	orrs	r4, r5
 800b452:	40d3      	lsrs	r3, r2
 800b454:	6004      	str	r4, [r0, #0]
 800b456:	f840 3f04 	str.w	r3, [r0, #4]!
 800b45a:	4288      	cmp	r0, r1
 800b45c:	d3f4      	bcc.n	800b448 <L_shift+0xc>
 800b45e:	bd70      	pop	{r4, r5, r6, pc}

0800b460 <__match>:
 800b460:	b530      	push	{r4, r5, lr}
 800b462:	6803      	ldr	r3, [r0, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b46a:	b914      	cbnz	r4, 800b472 <__match+0x12>
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	2001      	movs	r0, #1
 800b470:	bd30      	pop	{r4, r5, pc}
 800b472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b476:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b47a:	2d19      	cmp	r5, #25
 800b47c:	bf98      	it	ls
 800b47e:	3220      	addls	r2, #32
 800b480:	42a2      	cmp	r2, r4
 800b482:	d0f0      	beq.n	800b466 <__match+0x6>
 800b484:	2000      	movs	r0, #0
 800b486:	e7f3      	b.n	800b470 <__match+0x10>

0800b488 <__hexnan>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	680b      	ldr	r3, [r1, #0]
 800b48e:	6801      	ldr	r1, [r0, #0]
 800b490:	115e      	asrs	r6, r3, #5
 800b492:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b496:	f013 031f 	ands.w	r3, r3, #31
 800b49a:	b087      	sub	sp, #28
 800b49c:	bf18      	it	ne
 800b49e:	3604      	addne	r6, #4
 800b4a0:	2500      	movs	r5, #0
 800b4a2:	1f37      	subs	r7, r6, #4
 800b4a4:	4682      	mov	sl, r0
 800b4a6:	4690      	mov	r8, r2
 800b4a8:	9301      	str	r3, [sp, #4]
 800b4aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b4ae:	46b9      	mov	r9, r7
 800b4b0:	463c      	mov	r4, r7
 800b4b2:	9502      	str	r5, [sp, #8]
 800b4b4:	46ab      	mov	fp, r5
 800b4b6:	784a      	ldrb	r2, [r1, #1]
 800b4b8:	1c4b      	adds	r3, r1, #1
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	b342      	cbz	r2, 800b510 <__hexnan+0x88>
 800b4be:	4610      	mov	r0, r2
 800b4c0:	9105      	str	r1, [sp, #20]
 800b4c2:	9204      	str	r2, [sp, #16]
 800b4c4:	f7ff fd94 	bl	800aff0 <__hexdig_fun>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d151      	bne.n	800b570 <__hexnan+0xe8>
 800b4cc:	9a04      	ldr	r2, [sp, #16]
 800b4ce:	9905      	ldr	r1, [sp, #20]
 800b4d0:	2a20      	cmp	r2, #32
 800b4d2:	d818      	bhi.n	800b506 <__hexnan+0x7e>
 800b4d4:	9b02      	ldr	r3, [sp, #8]
 800b4d6:	459b      	cmp	fp, r3
 800b4d8:	dd13      	ble.n	800b502 <__hexnan+0x7a>
 800b4da:	454c      	cmp	r4, r9
 800b4dc:	d206      	bcs.n	800b4ec <__hexnan+0x64>
 800b4de:	2d07      	cmp	r5, #7
 800b4e0:	dc04      	bgt.n	800b4ec <__hexnan+0x64>
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f7ff ffa8 	bl	800b43c <L_shift>
 800b4ec:	4544      	cmp	r4, r8
 800b4ee:	d952      	bls.n	800b596 <__hexnan+0x10e>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f1a4 0904 	sub.w	r9, r4, #4
 800b4f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4fa:	f8cd b008 	str.w	fp, [sp, #8]
 800b4fe:	464c      	mov	r4, r9
 800b500:	461d      	mov	r5, r3
 800b502:	9903      	ldr	r1, [sp, #12]
 800b504:	e7d7      	b.n	800b4b6 <__hexnan+0x2e>
 800b506:	2a29      	cmp	r2, #41	@ 0x29
 800b508:	d157      	bne.n	800b5ba <__hexnan+0x132>
 800b50a:	3102      	adds	r1, #2
 800b50c:	f8ca 1000 	str.w	r1, [sl]
 800b510:	f1bb 0f00 	cmp.w	fp, #0
 800b514:	d051      	beq.n	800b5ba <__hexnan+0x132>
 800b516:	454c      	cmp	r4, r9
 800b518:	d206      	bcs.n	800b528 <__hexnan+0xa0>
 800b51a:	2d07      	cmp	r5, #7
 800b51c:	dc04      	bgt.n	800b528 <__hexnan+0xa0>
 800b51e:	462a      	mov	r2, r5
 800b520:	4649      	mov	r1, r9
 800b522:	4620      	mov	r0, r4
 800b524:	f7ff ff8a 	bl	800b43c <L_shift>
 800b528:	4544      	cmp	r4, r8
 800b52a:	d936      	bls.n	800b59a <__hexnan+0x112>
 800b52c:	f1a8 0204 	sub.w	r2, r8, #4
 800b530:	4623      	mov	r3, r4
 800b532:	f853 1b04 	ldr.w	r1, [r3], #4
 800b536:	f842 1f04 	str.w	r1, [r2, #4]!
 800b53a:	429f      	cmp	r7, r3
 800b53c:	d2f9      	bcs.n	800b532 <__hexnan+0xaa>
 800b53e:	1b3b      	subs	r3, r7, r4
 800b540:	f023 0303 	bic.w	r3, r3, #3
 800b544:	3304      	adds	r3, #4
 800b546:	3401      	adds	r4, #1
 800b548:	3e03      	subs	r6, #3
 800b54a:	42b4      	cmp	r4, r6
 800b54c:	bf88      	it	hi
 800b54e:	2304      	movhi	r3, #4
 800b550:	4443      	add	r3, r8
 800b552:	2200      	movs	r2, #0
 800b554:	f843 2b04 	str.w	r2, [r3], #4
 800b558:	429f      	cmp	r7, r3
 800b55a:	d2fb      	bcs.n	800b554 <__hexnan+0xcc>
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	b91b      	cbnz	r3, 800b568 <__hexnan+0xe0>
 800b560:	4547      	cmp	r7, r8
 800b562:	d128      	bne.n	800b5b6 <__hexnan+0x12e>
 800b564:	2301      	movs	r3, #1
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	2005      	movs	r0, #5
 800b56a:	b007      	add	sp, #28
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	3501      	adds	r5, #1
 800b572:	2d08      	cmp	r5, #8
 800b574:	f10b 0b01 	add.w	fp, fp, #1
 800b578:	dd06      	ble.n	800b588 <__hexnan+0x100>
 800b57a:	4544      	cmp	r4, r8
 800b57c:	d9c1      	bls.n	800b502 <__hexnan+0x7a>
 800b57e:	2300      	movs	r3, #0
 800b580:	f844 3c04 	str.w	r3, [r4, #-4]
 800b584:	2501      	movs	r5, #1
 800b586:	3c04      	subs	r4, #4
 800b588:	6822      	ldr	r2, [r4, #0]
 800b58a:	f000 000f 	and.w	r0, r0, #15
 800b58e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b592:	6020      	str	r0, [r4, #0]
 800b594:	e7b5      	b.n	800b502 <__hexnan+0x7a>
 800b596:	2508      	movs	r5, #8
 800b598:	e7b3      	b.n	800b502 <__hexnan+0x7a>
 800b59a:	9b01      	ldr	r3, [sp, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d0dd      	beq.n	800b55c <__hexnan+0xd4>
 800b5a0:	f1c3 0320 	rsb	r3, r3, #32
 800b5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a8:	40da      	lsrs	r2, r3
 800b5aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b5b4:	e7d2      	b.n	800b55c <__hexnan+0xd4>
 800b5b6:	3f04      	subs	r7, #4
 800b5b8:	e7d0      	b.n	800b55c <__hexnan+0xd4>
 800b5ba:	2004      	movs	r0, #4
 800b5bc:	e7d5      	b.n	800b56a <__hexnan+0xe2>

0800b5be <__ascii_mbtowc>:
 800b5be:	b082      	sub	sp, #8
 800b5c0:	b901      	cbnz	r1, 800b5c4 <__ascii_mbtowc+0x6>
 800b5c2:	a901      	add	r1, sp, #4
 800b5c4:	b142      	cbz	r2, 800b5d8 <__ascii_mbtowc+0x1a>
 800b5c6:	b14b      	cbz	r3, 800b5dc <__ascii_mbtowc+0x1e>
 800b5c8:	7813      	ldrb	r3, [r2, #0]
 800b5ca:	600b      	str	r3, [r1, #0]
 800b5cc:	7812      	ldrb	r2, [r2, #0]
 800b5ce:	1e10      	subs	r0, r2, #0
 800b5d0:	bf18      	it	ne
 800b5d2:	2001      	movne	r0, #1
 800b5d4:	b002      	add	sp, #8
 800b5d6:	4770      	bx	lr
 800b5d8:	4610      	mov	r0, r2
 800b5da:	e7fb      	b.n	800b5d4 <__ascii_mbtowc+0x16>
 800b5dc:	f06f 0001 	mvn.w	r0, #1
 800b5e0:	e7f8      	b.n	800b5d4 <__ascii_mbtowc+0x16>

0800b5e2 <_realloc_r>:
 800b5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	4615      	mov	r5, r2
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	b921      	cbnz	r1, 800b5f8 <_realloc_r+0x16>
 800b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	f7fb bfc4 	b.w	8007580 <_malloc_r>
 800b5f8:	b92a      	cbnz	r2, 800b606 <_realloc_r+0x24>
 800b5fa:	f7fd fec1 	bl	8009380 <_free_r>
 800b5fe:	2400      	movs	r4, #0
 800b600:	4620      	mov	r0, r4
 800b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b606:	f000 f840 	bl	800b68a <_malloc_usable_size_r>
 800b60a:	4285      	cmp	r5, r0
 800b60c:	4606      	mov	r6, r0
 800b60e:	d802      	bhi.n	800b616 <_realloc_r+0x34>
 800b610:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b614:	d8f4      	bhi.n	800b600 <_realloc_r+0x1e>
 800b616:	4629      	mov	r1, r5
 800b618:	4640      	mov	r0, r8
 800b61a:	f7fb ffb1 	bl	8007580 <_malloc_r>
 800b61e:	4607      	mov	r7, r0
 800b620:	2800      	cmp	r0, #0
 800b622:	d0ec      	beq.n	800b5fe <_realloc_r+0x1c>
 800b624:	42b5      	cmp	r5, r6
 800b626:	462a      	mov	r2, r5
 800b628:	4621      	mov	r1, r4
 800b62a:	bf28      	it	cs
 800b62c:	4632      	movcs	r2, r6
 800b62e:	f7ff fc59 	bl	800aee4 <memcpy>
 800b632:	4621      	mov	r1, r4
 800b634:	4640      	mov	r0, r8
 800b636:	f7fd fea3 	bl	8009380 <_free_r>
 800b63a:	463c      	mov	r4, r7
 800b63c:	e7e0      	b.n	800b600 <_realloc_r+0x1e>

0800b63e <__ascii_wctomb>:
 800b63e:	4603      	mov	r3, r0
 800b640:	4608      	mov	r0, r1
 800b642:	b141      	cbz	r1, 800b656 <__ascii_wctomb+0x18>
 800b644:	2aff      	cmp	r2, #255	@ 0xff
 800b646:	d904      	bls.n	800b652 <__ascii_wctomb+0x14>
 800b648:	228a      	movs	r2, #138	@ 0x8a
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	4770      	bx	lr
 800b652:	700a      	strb	r2, [r1, #0]
 800b654:	2001      	movs	r0, #1
 800b656:	4770      	bx	lr

0800b658 <fiprintf>:
 800b658:	b40e      	push	{r1, r2, r3}
 800b65a:	b503      	push	{r0, r1, lr}
 800b65c:	4601      	mov	r1, r0
 800b65e:	ab03      	add	r3, sp, #12
 800b660:	4805      	ldr	r0, [pc, #20]	@ (800b678 <fiprintf+0x20>)
 800b662:	f853 2b04 	ldr.w	r2, [r3], #4
 800b666:	6800      	ldr	r0, [r0, #0]
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	f000 f83f 	bl	800b6ec <_vfiprintf_r>
 800b66e:	b002      	add	sp, #8
 800b670:	f85d eb04 	ldr.w	lr, [sp], #4
 800b674:	b003      	add	sp, #12
 800b676:	4770      	bx	lr
 800b678:	2000002c 	.word	0x2000002c

0800b67c <abort>:
 800b67c:	b508      	push	{r3, lr}
 800b67e:	2006      	movs	r0, #6
 800b680:	f000 fa08 	bl	800ba94 <raise>
 800b684:	2001      	movs	r0, #1
 800b686:	f7f6 fe57 	bl	8002338 <_exit>

0800b68a <_malloc_usable_size_r>:
 800b68a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b68e:	1f18      	subs	r0, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	bfbc      	itt	lt
 800b694:	580b      	ldrlt	r3, [r1, r0]
 800b696:	18c0      	addlt	r0, r0, r3
 800b698:	4770      	bx	lr

0800b69a <__sfputc_r>:
 800b69a:	6893      	ldr	r3, [r2, #8]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	b410      	push	{r4}
 800b6a2:	6093      	str	r3, [r2, #8]
 800b6a4:	da08      	bge.n	800b6b8 <__sfputc_r+0x1e>
 800b6a6:	6994      	ldr	r4, [r2, #24]
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	db01      	blt.n	800b6b0 <__sfputc_r+0x16>
 800b6ac:	290a      	cmp	r1, #10
 800b6ae:	d103      	bne.n	800b6b8 <__sfputc_r+0x1e>
 800b6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6b4:	f000 b932 	b.w	800b91c <__swbuf_r>
 800b6b8:	6813      	ldr	r3, [r2, #0]
 800b6ba:	1c58      	adds	r0, r3, #1
 800b6bc:	6010      	str	r0, [r2, #0]
 800b6be:	7019      	strb	r1, [r3, #0]
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <__sfputs_r>:
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	4614      	mov	r4, r2
 800b6d0:	18d5      	adds	r5, r2, r3
 800b6d2:	42ac      	cmp	r4, r5
 800b6d4:	d101      	bne.n	800b6da <__sfputs_r+0x12>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e007      	b.n	800b6ea <__sfputs_r+0x22>
 800b6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6de:	463a      	mov	r2, r7
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff ffda 	bl	800b69a <__sfputc_r>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d1f3      	bne.n	800b6d2 <__sfputs_r+0xa>
 800b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6ec <_vfiprintf_r>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	b09d      	sub	sp, #116	@ 0x74
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	4698      	mov	r8, r3
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	b118      	cbz	r0, 800b704 <_vfiprintf_r+0x18>
 800b6fc:	6a03      	ldr	r3, [r0, #32]
 800b6fe:	b90b      	cbnz	r3, 800b704 <_vfiprintf_r+0x18>
 800b700:	f7fc fec2 	bl	8008488 <__sinit>
 800b704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b706:	07d9      	lsls	r1, r3, #31
 800b708:	d405      	bmi.n	800b716 <_vfiprintf_r+0x2a>
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	059a      	lsls	r2, r3, #22
 800b70e:	d402      	bmi.n	800b716 <_vfiprintf_r+0x2a>
 800b710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b712:	f7fc ffe0 	bl	80086d6 <__retarget_lock_acquire_recursive>
 800b716:	89ab      	ldrh	r3, [r5, #12]
 800b718:	071b      	lsls	r3, r3, #28
 800b71a:	d501      	bpl.n	800b720 <_vfiprintf_r+0x34>
 800b71c:	692b      	ldr	r3, [r5, #16]
 800b71e:	b99b      	cbnz	r3, 800b748 <_vfiprintf_r+0x5c>
 800b720:	4629      	mov	r1, r5
 800b722:	4630      	mov	r0, r6
 800b724:	f000 f938 	bl	800b998 <__swsetup_r>
 800b728:	b170      	cbz	r0, 800b748 <_vfiprintf_r+0x5c>
 800b72a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b72c:	07dc      	lsls	r4, r3, #31
 800b72e:	d504      	bpl.n	800b73a <_vfiprintf_r+0x4e>
 800b730:	f04f 30ff 	mov.w	r0, #4294967295
 800b734:	b01d      	add	sp, #116	@ 0x74
 800b736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73a:	89ab      	ldrh	r3, [r5, #12]
 800b73c:	0598      	lsls	r0, r3, #22
 800b73e:	d4f7      	bmi.n	800b730 <_vfiprintf_r+0x44>
 800b740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b742:	f7fc ffc9 	bl	80086d8 <__retarget_lock_release_recursive>
 800b746:	e7f3      	b.n	800b730 <_vfiprintf_r+0x44>
 800b748:	2300      	movs	r3, #0
 800b74a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b74c:	2320      	movs	r3, #32
 800b74e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b752:	f8cd 800c 	str.w	r8, [sp, #12]
 800b756:	2330      	movs	r3, #48	@ 0x30
 800b758:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b908 <_vfiprintf_r+0x21c>
 800b75c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b760:	f04f 0901 	mov.w	r9, #1
 800b764:	4623      	mov	r3, r4
 800b766:	469a      	mov	sl, r3
 800b768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b76c:	b10a      	cbz	r2, 800b772 <_vfiprintf_r+0x86>
 800b76e:	2a25      	cmp	r2, #37	@ 0x25
 800b770:	d1f9      	bne.n	800b766 <_vfiprintf_r+0x7a>
 800b772:	ebba 0b04 	subs.w	fp, sl, r4
 800b776:	d00b      	beq.n	800b790 <_vfiprintf_r+0xa4>
 800b778:	465b      	mov	r3, fp
 800b77a:	4622      	mov	r2, r4
 800b77c:	4629      	mov	r1, r5
 800b77e:	4630      	mov	r0, r6
 800b780:	f7ff ffa2 	bl	800b6c8 <__sfputs_r>
 800b784:	3001      	adds	r0, #1
 800b786:	f000 80a7 	beq.w	800b8d8 <_vfiprintf_r+0x1ec>
 800b78a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b78c:	445a      	add	r2, fp
 800b78e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b790:	f89a 3000 	ldrb.w	r3, [sl]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 809f 	beq.w	800b8d8 <_vfiprintf_r+0x1ec>
 800b79a:	2300      	movs	r3, #0
 800b79c:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a4:	f10a 0a01 	add.w	sl, sl, #1
 800b7a8:	9304      	str	r3, [sp, #16]
 800b7aa:	9307      	str	r3, [sp, #28]
 800b7ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7b2:	4654      	mov	r4, sl
 800b7b4:	2205      	movs	r2, #5
 800b7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ba:	4853      	ldr	r0, [pc, #332]	@ (800b908 <_vfiprintf_r+0x21c>)
 800b7bc:	f7f4 fd18 	bl	80001f0 <memchr>
 800b7c0:	9a04      	ldr	r2, [sp, #16]
 800b7c2:	b9d8      	cbnz	r0, 800b7fc <_vfiprintf_r+0x110>
 800b7c4:	06d1      	lsls	r1, r2, #27
 800b7c6:	bf44      	itt	mi
 800b7c8:	2320      	movmi	r3, #32
 800b7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7ce:	0713      	lsls	r3, r2, #28
 800b7d0:	bf44      	itt	mi
 800b7d2:	232b      	movmi	r3, #43	@ 0x2b
 800b7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7de:	d015      	beq.n	800b80c <_vfiprintf_r+0x120>
 800b7e0:	9a07      	ldr	r2, [sp, #28]
 800b7e2:	4654      	mov	r4, sl
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	f04f 0c0a 	mov.w	ip, #10
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7f0:	3b30      	subs	r3, #48	@ 0x30
 800b7f2:	2b09      	cmp	r3, #9
 800b7f4:	d94b      	bls.n	800b88e <_vfiprintf_r+0x1a2>
 800b7f6:	b1b0      	cbz	r0, 800b826 <_vfiprintf_r+0x13a>
 800b7f8:	9207      	str	r2, [sp, #28]
 800b7fa:	e014      	b.n	800b826 <_vfiprintf_r+0x13a>
 800b7fc:	eba0 0308 	sub.w	r3, r0, r8
 800b800:	fa09 f303 	lsl.w	r3, r9, r3
 800b804:	4313      	orrs	r3, r2
 800b806:	9304      	str	r3, [sp, #16]
 800b808:	46a2      	mov	sl, r4
 800b80a:	e7d2      	b.n	800b7b2 <_vfiprintf_r+0xc6>
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	1d19      	adds	r1, r3, #4
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	9103      	str	r1, [sp, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	bfbb      	ittet	lt
 800b818:	425b      	neglt	r3, r3
 800b81a:	f042 0202 	orrlt.w	r2, r2, #2
 800b81e:	9307      	strge	r3, [sp, #28]
 800b820:	9307      	strlt	r3, [sp, #28]
 800b822:	bfb8      	it	lt
 800b824:	9204      	strlt	r2, [sp, #16]
 800b826:	7823      	ldrb	r3, [r4, #0]
 800b828:	2b2e      	cmp	r3, #46	@ 0x2e
 800b82a:	d10a      	bne.n	800b842 <_vfiprintf_r+0x156>
 800b82c:	7863      	ldrb	r3, [r4, #1]
 800b82e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b830:	d132      	bne.n	800b898 <_vfiprintf_r+0x1ac>
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	1d1a      	adds	r2, r3, #4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	9203      	str	r2, [sp, #12]
 800b83a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b83e:	3402      	adds	r4, #2
 800b840:	9305      	str	r3, [sp, #20]
 800b842:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b918 <_vfiprintf_r+0x22c>
 800b846:	7821      	ldrb	r1, [r4, #0]
 800b848:	2203      	movs	r2, #3
 800b84a:	4650      	mov	r0, sl
 800b84c:	f7f4 fcd0 	bl	80001f0 <memchr>
 800b850:	b138      	cbz	r0, 800b862 <_vfiprintf_r+0x176>
 800b852:	9b04      	ldr	r3, [sp, #16]
 800b854:	eba0 000a 	sub.w	r0, r0, sl
 800b858:	2240      	movs	r2, #64	@ 0x40
 800b85a:	4082      	lsls	r2, r0
 800b85c:	4313      	orrs	r3, r2
 800b85e:	3401      	adds	r4, #1
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b866:	4829      	ldr	r0, [pc, #164]	@ (800b90c <_vfiprintf_r+0x220>)
 800b868:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b86c:	2206      	movs	r2, #6
 800b86e:	f7f4 fcbf 	bl	80001f0 <memchr>
 800b872:	2800      	cmp	r0, #0
 800b874:	d03f      	beq.n	800b8f6 <_vfiprintf_r+0x20a>
 800b876:	4b26      	ldr	r3, [pc, #152]	@ (800b910 <_vfiprintf_r+0x224>)
 800b878:	bb1b      	cbnz	r3, 800b8c2 <_vfiprintf_r+0x1d6>
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	3307      	adds	r3, #7
 800b87e:	f023 0307 	bic.w	r3, r3, #7
 800b882:	3308      	adds	r3, #8
 800b884:	9303      	str	r3, [sp, #12]
 800b886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b888:	443b      	add	r3, r7
 800b88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b88c:	e76a      	b.n	800b764 <_vfiprintf_r+0x78>
 800b88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b892:	460c      	mov	r4, r1
 800b894:	2001      	movs	r0, #1
 800b896:	e7a8      	b.n	800b7ea <_vfiprintf_r+0xfe>
 800b898:	2300      	movs	r3, #0
 800b89a:	3401      	adds	r4, #1
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	f04f 0c0a 	mov.w	ip, #10
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8aa:	3a30      	subs	r2, #48	@ 0x30
 800b8ac:	2a09      	cmp	r2, #9
 800b8ae:	d903      	bls.n	800b8b8 <_vfiprintf_r+0x1cc>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0c6      	beq.n	800b842 <_vfiprintf_r+0x156>
 800b8b4:	9105      	str	r1, [sp, #20]
 800b8b6:	e7c4      	b.n	800b842 <_vfiprintf_r+0x156>
 800b8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8bc:	4604      	mov	r4, r0
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e7f0      	b.n	800b8a4 <_vfiprintf_r+0x1b8>
 800b8c2:	ab03      	add	r3, sp, #12
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	462a      	mov	r2, r5
 800b8c8:	4b12      	ldr	r3, [pc, #72]	@ (800b914 <_vfiprintf_r+0x228>)
 800b8ca:	a904      	add	r1, sp, #16
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7fb ff83 	bl	80077d8 <_printf_float>
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	1c78      	adds	r0, r7, #1
 800b8d6:	d1d6      	bne.n	800b886 <_vfiprintf_r+0x19a>
 800b8d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8da:	07d9      	lsls	r1, r3, #31
 800b8dc:	d405      	bmi.n	800b8ea <_vfiprintf_r+0x1fe>
 800b8de:	89ab      	ldrh	r3, [r5, #12]
 800b8e0:	059a      	lsls	r2, r3, #22
 800b8e2:	d402      	bmi.n	800b8ea <_vfiprintf_r+0x1fe>
 800b8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8e6:	f7fc fef7 	bl	80086d8 <__retarget_lock_release_recursive>
 800b8ea:	89ab      	ldrh	r3, [r5, #12]
 800b8ec:	065b      	lsls	r3, r3, #25
 800b8ee:	f53f af1f 	bmi.w	800b730 <_vfiprintf_r+0x44>
 800b8f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8f4:	e71e      	b.n	800b734 <_vfiprintf_r+0x48>
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	4b05      	ldr	r3, [pc, #20]	@ (800b914 <_vfiprintf_r+0x228>)
 800b8fe:	a904      	add	r1, sp, #16
 800b900:	4630      	mov	r0, r6
 800b902:	f7fc fa01 	bl	8007d08 <_printf_i>
 800b906:	e7e4      	b.n	800b8d2 <_vfiprintf_r+0x1e6>
 800b908:	0800bfc1 	.word	0x0800bfc1
 800b90c:	0800bfcb 	.word	0x0800bfcb
 800b910:	080077d9 	.word	0x080077d9
 800b914:	0800b6c9 	.word	0x0800b6c9
 800b918:	0800bfc7 	.word	0x0800bfc7

0800b91c <__swbuf_r>:
 800b91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91e:	460e      	mov	r6, r1
 800b920:	4614      	mov	r4, r2
 800b922:	4605      	mov	r5, r0
 800b924:	b118      	cbz	r0, 800b92e <__swbuf_r+0x12>
 800b926:	6a03      	ldr	r3, [r0, #32]
 800b928:	b90b      	cbnz	r3, 800b92e <__swbuf_r+0x12>
 800b92a:	f7fc fdad 	bl	8008488 <__sinit>
 800b92e:	69a3      	ldr	r3, [r4, #24]
 800b930:	60a3      	str	r3, [r4, #8]
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	071a      	lsls	r2, r3, #28
 800b936:	d501      	bpl.n	800b93c <__swbuf_r+0x20>
 800b938:	6923      	ldr	r3, [r4, #16]
 800b93a:	b943      	cbnz	r3, 800b94e <__swbuf_r+0x32>
 800b93c:	4621      	mov	r1, r4
 800b93e:	4628      	mov	r0, r5
 800b940:	f000 f82a 	bl	800b998 <__swsetup_r>
 800b944:	b118      	cbz	r0, 800b94e <__swbuf_r+0x32>
 800b946:	f04f 37ff 	mov.w	r7, #4294967295
 800b94a:	4638      	mov	r0, r7
 800b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b94e:	6823      	ldr	r3, [r4, #0]
 800b950:	6922      	ldr	r2, [r4, #16]
 800b952:	1a98      	subs	r0, r3, r2
 800b954:	6963      	ldr	r3, [r4, #20]
 800b956:	b2f6      	uxtb	r6, r6
 800b958:	4283      	cmp	r3, r0
 800b95a:	4637      	mov	r7, r6
 800b95c:	dc05      	bgt.n	800b96a <__swbuf_r+0x4e>
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f7ff fa6b 	bl	800ae3c <_fflush_r>
 800b966:	2800      	cmp	r0, #0
 800b968:	d1ed      	bne.n	800b946 <__swbuf_r+0x2a>
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	60a3      	str	r3, [r4, #8]
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	6022      	str	r2, [r4, #0]
 800b976:	701e      	strb	r6, [r3, #0]
 800b978:	6962      	ldr	r2, [r4, #20]
 800b97a:	1c43      	adds	r3, r0, #1
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d004      	beq.n	800b98a <__swbuf_r+0x6e>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	07db      	lsls	r3, r3, #31
 800b984:	d5e1      	bpl.n	800b94a <__swbuf_r+0x2e>
 800b986:	2e0a      	cmp	r6, #10
 800b988:	d1df      	bne.n	800b94a <__swbuf_r+0x2e>
 800b98a:	4621      	mov	r1, r4
 800b98c:	4628      	mov	r0, r5
 800b98e:	f7ff fa55 	bl	800ae3c <_fflush_r>
 800b992:	2800      	cmp	r0, #0
 800b994:	d0d9      	beq.n	800b94a <__swbuf_r+0x2e>
 800b996:	e7d6      	b.n	800b946 <__swbuf_r+0x2a>

0800b998 <__swsetup_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4b29      	ldr	r3, [pc, #164]	@ (800ba40 <__swsetup_r+0xa8>)
 800b99c:	4605      	mov	r5, r0
 800b99e:	6818      	ldr	r0, [r3, #0]
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	b118      	cbz	r0, 800b9ac <__swsetup_r+0x14>
 800b9a4:	6a03      	ldr	r3, [r0, #32]
 800b9a6:	b90b      	cbnz	r3, 800b9ac <__swsetup_r+0x14>
 800b9a8:	f7fc fd6e 	bl	8008488 <__sinit>
 800b9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b0:	0719      	lsls	r1, r3, #28
 800b9b2:	d422      	bmi.n	800b9fa <__swsetup_r+0x62>
 800b9b4:	06da      	lsls	r2, r3, #27
 800b9b6:	d407      	bmi.n	800b9c8 <__swsetup_r+0x30>
 800b9b8:	2209      	movs	r2, #9
 800b9ba:	602a      	str	r2, [r5, #0]
 800b9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c6:	e033      	b.n	800ba30 <__swsetup_r+0x98>
 800b9c8:	0758      	lsls	r0, r3, #29
 800b9ca:	d512      	bpl.n	800b9f2 <__swsetup_r+0x5a>
 800b9cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9ce:	b141      	cbz	r1, 800b9e2 <__swsetup_r+0x4a>
 800b9d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9d4:	4299      	cmp	r1, r3
 800b9d6:	d002      	beq.n	800b9de <__swsetup_r+0x46>
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f7fd fcd1 	bl	8009380 <_free_r>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9e8:	81a3      	strh	r3, [r4, #12]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	6063      	str	r3, [r4, #4]
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f043 0308 	orr.w	r3, r3, #8
 800b9f8:	81a3      	strh	r3, [r4, #12]
 800b9fa:	6923      	ldr	r3, [r4, #16]
 800b9fc:	b94b      	cbnz	r3, 800ba12 <__swsetup_r+0x7a>
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba08:	d003      	beq.n	800ba12 <__swsetup_r+0x7a>
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f000 f883 	bl	800bb18 <__smakebuf_r>
 800ba12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba16:	f013 0201 	ands.w	r2, r3, #1
 800ba1a:	d00a      	beq.n	800ba32 <__swsetup_r+0x9a>
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	60a2      	str	r2, [r4, #8]
 800ba20:	6962      	ldr	r2, [r4, #20]
 800ba22:	4252      	negs	r2, r2
 800ba24:	61a2      	str	r2, [r4, #24]
 800ba26:	6922      	ldr	r2, [r4, #16]
 800ba28:	b942      	cbnz	r2, 800ba3c <__swsetup_r+0xa4>
 800ba2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba2e:	d1c5      	bne.n	800b9bc <__swsetup_r+0x24>
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	0799      	lsls	r1, r3, #30
 800ba34:	bf58      	it	pl
 800ba36:	6962      	ldrpl	r2, [r4, #20]
 800ba38:	60a2      	str	r2, [r4, #8]
 800ba3a:	e7f4      	b.n	800ba26 <__swsetup_r+0x8e>
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e7f7      	b.n	800ba30 <__swsetup_r+0x98>
 800ba40:	2000002c 	.word	0x2000002c

0800ba44 <_raise_r>:
 800ba44:	291f      	cmp	r1, #31
 800ba46:	b538      	push	{r3, r4, r5, lr}
 800ba48:	4605      	mov	r5, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	d904      	bls.n	800ba58 <_raise_r+0x14>
 800ba4e:	2316      	movs	r3, #22
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba5a:	b112      	cbz	r2, 800ba62 <_raise_r+0x1e>
 800ba5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba60:	b94b      	cbnz	r3, 800ba76 <_raise_r+0x32>
 800ba62:	4628      	mov	r0, r5
 800ba64:	f000 f830 	bl	800bac8 <_getpid_r>
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba72:	f000 b817 	b.w	800baa4 <_kill_r>
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d00a      	beq.n	800ba90 <_raise_r+0x4c>
 800ba7a:	1c59      	adds	r1, r3, #1
 800ba7c:	d103      	bne.n	800ba86 <_raise_r+0x42>
 800ba7e:	2316      	movs	r3, #22
 800ba80:	6003      	str	r3, [r0, #0]
 800ba82:	2001      	movs	r0, #1
 800ba84:	e7e7      	b.n	800ba56 <_raise_r+0x12>
 800ba86:	2100      	movs	r1, #0
 800ba88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4798      	blx	r3
 800ba90:	2000      	movs	r0, #0
 800ba92:	e7e0      	b.n	800ba56 <_raise_r+0x12>

0800ba94 <raise>:
 800ba94:	4b02      	ldr	r3, [pc, #8]	@ (800baa0 <raise+0xc>)
 800ba96:	4601      	mov	r1, r0
 800ba98:	6818      	ldr	r0, [r3, #0]
 800ba9a:	f7ff bfd3 	b.w	800ba44 <_raise_r>
 800ba9e:	bf00      	nop
 800baa0:	2000002c 	.word	0x2000002c

0800baa4 <_kill_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4d07      	ldr	r5, [pc, #28]	@ (800bac4 <_kill_r+0x20>)
 800baa8:	2300      	movs	r3, #0
 800baaa:	4604      	mov	r4, r0
 800baac:	4608      	mov	r0, r1
 800baae:	4611      	mov	r1, r2
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	f7f6 fc31 	bl	8002318 <_kill>
 800bab6:	1c43      	adds	r3, r0, #1
 800bab8:	d102      	bne.n	800bac0 <_kill_r+0x1c>
 800baba:	682b      	ldr	r3, [r5, #0]
 800babc:	b103      	cbz	r3, 800bac0 <_kill_r+0x1c>
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	bd38      	pop	{r3, r4, r5, pc}
 800bac2:	bf00      	nop
 800bac4:	200005c0 	.word	0x200005c0

0800bac8 <_getpid_r>:
 800bac8:	f7f6 bc1e 	b.w	8002308 <_getpid>

0800bacc <__swhatbuf_r>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	460c      	mov	r4, r1
 800bad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad4:	2900      	cmp	r1, #0
 800bad6:	b096      	sub	sp, #88	@ 0x58
 800bad8:	4615      	mov	r5, r2
 800bada:	461e      	mov	r6, r3
 800badc:	da0d      	bge.n	800bafa <__swhatbuf_r+0x2e>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bae4:	f04f 0100 	mov.w	r1, #0
 800bae8:	bf14      	ite	ne
 800baea:	2340      	movne	r3, #64	@ 0x40
 800baec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800baf0:	2000      	movs	r0, #0
 800baf2:	6031      	str	r1, [r6, #0]
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	b016      	add	sp, #88	@ 0x58
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	466a      	mov	r2, sp
 800bafc:	f000 f848 	bl	800bb90 <_fstat_r>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	dbec      	blt.n	800bade <__swhatbuf_r+0x12>
 800bb04:	9901      	ldr	r1, [sp, #4]
 800bb06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb0e:	4259      	negs	r1, r3
 800bb10:	4159      	adcs	r1, r3
 800bb12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb16:	e7eb      	b.n	800baf0 <__swhatbuf_r+0x24>

0800bb18 <__smakebuf_r>:
 800bb18:	898b      	ldrh	r3, [r1, #12]
 800bb1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb1c:	079d      	lsls	r5, r3, #30
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460c      	mov	r4, r1
 800bb22:	d507      	bpl.n	800bb34 <__smakebuf_r+0x1c>
 800bb24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	6163      	str	r3, [r4, #20]
 800bb30:	b003      	add	sp, #12
 800bb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb34:	ab01      	add	r3, sp, #4
 800bb36:	466a      	mov	r2, sp
 800bb38:	f7ff ffc8 	bl	800bacc <__swhatbuf_r>
 800bb3c:	9f00      	ldr	r7, [sp, #0]
 800bb3e:	4605      	mov	r5, r0
 800bb40:	4639      	mov	r1, r7
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7fb fd1c 	bl	8007580 <_malloc_r>
 800bb48:	b948      	cbnz	r0, 800bb5e <__smakebuf_r+0x46>
 800bb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb4e:	059a      	lsls	r2, r3, #22
 800bb50:	d4ee      	bmi.n	800bb30 <__smakebuf_r+0x18>
 800bb52:	f023 0303 	bic.w	r3, r3, #3
 800bb56:	f043 0302 	orr.w	r3, r3, #2
 800bb5a:	81a3      	strh	r3, [r4, #12]
 800bb5c:	e7e2      	b.n	800bb24 <__smakebuf_r+0xc>
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	6020      	str	r0, [r4, #0]
 800bb62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	9b01      	ldr	r3, [sp, #4]
 800bb6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb6e:	b15b      	cbz	r3, 800bb88 <__smakebuf_r+0x70>
 800bb70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb74:	4630      	mov	r0, r6
 800bb76:	f000 f81d 	bl	800bbb4 <_isatty_r>
 800bb7a:	b128      	cbz	r0, 800bb88 <__smakebuf_r+0x70>
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	f023 0303 	bic.w	r3, r3, #3
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	431d      	orrs	r5, r3
 800bb8c:	81a5      	strh	r5, [r4, #12]
 800bb8e:	e7cf      	b.n	800bb30 <__smakebuf_r+0x18>

0800bb90 <_fstat_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d07      	ldr	r5, [pc, #28]	@ (800bbb0 <_fstat_r+0x20>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	602b      	str	r3, [r5, #0]
 800bb9e:	f7f6 fc1b 	bl	80023d8 <_fstat>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	d102      	bne.n	800bbac <_fstat_r+0x1c>
 800bba6:	682b      	ldr	r3, [r5, #0]
 800bba8:	b103      	cbz	r3, 800bbac <_fstat_r+0x1c>
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	bd38      	pop	{r3, r4, r5, pc}
 800bbae:	bf00      	nop
 800bbb0:	200005c0 	.word	0x200005c0

0800bbb4 <_isatty_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4d06      	ldr	r5, [pc, #24]	@ (800bbd0 <_isatty_r+0x1c>)
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	602b      	str	r3, [r5, #0]
 800bbc0:	f7f6 fc1a 	bl	80023f8 <_isatty>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_isatty_r+0x1a>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_isatty_r+0x1a>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	200005c0 	.word	0x200005c0

0800bbd4 <_init>:
 800bbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd6:	bf00      	nop
 800bbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbda:	bc08      	pop	{r3}
 800bbdc:	469e      	mov	lr, r3
 800bbde:	4770      	bx	lr

0800bbe0 <_fini>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	bf00      	nop
 800bbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe6:	bc08      	pop	{r3}
 800bbe8:	469e      	mov	lr, r3
 800bbea:	4770      	bx	lr
