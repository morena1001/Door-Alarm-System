
Home Alarm System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005b4c  08005b4c  00006b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b84  08005b84  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b84  08005b84  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b84  08005b84  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b84  08005b84  00006b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b88  08005b88  00006b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005b8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000001c  08005ba8  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005ba8  00007254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001347a  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002540  00000000  00000000  0001a4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc9  00000000  00000000  0001db78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b84c  00000000  00000000  0001e941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e60  00000000  00000000  0003a18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adaac  00000000  00000000  0004ffed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fda99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049fc  00000000  00000000  000fdadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001024d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b34 	.word	0x08005b34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08005b34 	.word	0x08005b34

080001c8 <HD44780_Init>:
	0b01010,
	0b00100
};

void HD44780_Init(uint8_t rows)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80001d2:	4a38      	ldr	r2, [pc, #224]	@ (80002b4 <HD44780_Init+0xec>)
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80001d8:	4b37      	ldr	r3, [pc, #220]	@ (80002b8 <HD44780_Init+0xf0>)
 80001da:	2208      	movs	r2, #8
 80001dc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80001de:	4b37      	ldr	r3, [pc, #220]	@ (80002bc <HD44780_Init+0xf4>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80001e4:	4b33      	ldr	r3, [pc, #204]	@ (80002b4 <HD44780_Init+0xec>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d907      	bls.n	80001fc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80001ec:	4b33      	ldr	r3, [pc, #204]	@ (80002bc <HD44780_Init+0xf4>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	f043 0308 	orr.w	r3, r3, #8
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4b31      	ldr	r3, [pc, #196]	@ (80002bc <HD44780_Init+0xf4>)
 80001f8:	701a      	strb	r2, [r3, #0]
 80001fa:	e006      	b.n	800020a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80001fc:	4b2f      	ldr	r3, [pc, #188]	@ (80002bc <HD44780_Init+0xf4>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b2d      	ldr	r3, [pc, #180]	@ (80002bc <HD44780_Init+0xf4>)
 8000208:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800020a:	f000 f93f 	bl	800048c <DelayInit>
  HAL_Delay(50);
 800020e:	2032      	movs	r0, #50	@ 0x32
 8000210:	f000 ff16 	bl	8001040 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000214:	4b28      	ldr	r3, [pc, #160]	@ (80002b8 <HD44780_Init+0xf0>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f8fd 	bl	8000418 <ExpanderWrite>
  HAL_Delay(1000);
 800021e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000222:	f000 ff0d 	bl	8001040 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000226:	2030      	movs	r0, #48	@ 0x30
 8000228:	f000 f8e4 	bl	80003f4 <Write4Bits>
  DelayUS(4500);
 800022c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000230:	f000 f956 	bl	80004e0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000234:	2030      	movs	r0, #48	@ 0x30
 8000236:	f000 f8dd 	bl	80003f4 <Write4Bits>
  DelayUS(4500);
 800023a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800023e:	f000 f94f 	bl	80004e0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000242:	2030      	movs	r0, #48	@ 0x30
 8000244:	f000 f8d6 	bl	80003f4 <Write4Bits>
  DelayUS(4500);
 8000248:	f241 1094 	movw	r0, #4500	@ 0x1194
 800024c:	f000 f948 	bl	80004e0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000250:	2020      	movs	r0, #32
 8000252:	f000 f8cf 	bl	80003f4 <Write4Bits>
  DelayUS(100);
 8000256:	2064      	movs	r0, #100	@ 0x64
 8000258:	f000 f942 	bl	80004e0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800025c:	4b17      	ldr	r3, [pc, #92]	@ (80002bc <HD44780_Init+0xf4>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f887 	bl	800037a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <HD44780_Init+0xf8>)
 800026e:	2204      	movs	r2, #4
 8000270:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000272:	f000 f843 	bl	80002fc <HD44780_Display>
  HD44780_Clear();
 8000276:	f000 f82b 	bl	80002d0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <HD44780_Init+0xfc>)
 800027c:	2202      	movs	r2, #2
 800027e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000280:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <HD44780_Init+0xfc>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	f043 0304 	orr.w	r3, r3, #4
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f875 	bl	800037a <SendCommand>
  DelayUS(4500);
 8000290:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000294:	f000 f924 	bl	80004e0 <DelayUS>

  HD44780_CreateSpecialChar(0, up_arrow);
 8000298:	490b      	ldr	r1, [pc, #44]	@ (80002c8 <HD44780_Init+0x100>)
 800029a:	2000      	movs	r0, #0
 800029c:	f000 f844 	bl	8000328 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, down_arrow);
 80002a0:	490a      	ldr	r1, [pc, #40]	@ (80002cc <HD44780_Init+0x104>)
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 f840 	bl	8000328 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80002a8:	f000 f81d 	bl	80002e6 <HD44780_Home>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000003b 	.word	0x2000003b
 80002b8:	2000003c 	.word	0x2000003c
 80002bc:	20000038 	.word	0x20000038
 80002c0:	20000039 	.word	0x20000039
 80002c4:	2000003a 	.word	0x2000003a
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000008 	.word	0x20000008

080002d0 <HD44780_Clear>:

void HD44780_Clear()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f850 	bl	800037a <SendCommand>
  DelayUS(2000);
 80002da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002de:	f000 f8ff 	bl	80004e0 <DelayUS>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <HD44780_Home>:

void HD44780_Home()
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f000 f845 	bl	800037a <SendCommand>
  DelayUS(2000);
 80002f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002f4:	f000 f8f4 	bl	80004e0 <DelayUS>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <HD44780_Display+0x28>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <HD44780_Display+0x28>)
 800030c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800030e:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <HD44780_Display+0x28>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f82e 	bl	800037a <SendCommand>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000039 	.word	0x20000039

08000328 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	00db      	lsls	r3, r3, #3
 8000340:	b25b      	sxtb	r3, r3
 8000342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000346:	b25b      	sxtb	r3, r3
 8000348:	b2db      	uxtb	r3, r3
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f815 	bl	800037a <SendCommand>
  for (int i=0; i<8; i++)
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e009      	b.n	800036a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	4413      	add	r3, r2
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f819 	bl	8000396 <SendChar>
  for (int i=0; i<8; i++)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2b07      	cmp	r3, #7
 800036e:	ddf2      	ble.n	8000356 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	4603      	mov	r3, r0
 8000382:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f812 	bl	80003b2 <Send>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f804 	bl	80003b2 <Send>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b084      	sub	sp, #16
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	460a      	mov	r2, r1
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	4613      	mov	r3, r2
 80003c0:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	f023 030f 	bic.w	r3, r3, #15
 80003c8:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	011b      	lsls	r3, r3, #4
 80003ce:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003d0:	7bfa      	ldrb	r2, [r7, #15]
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 f80b 	bl	80003f4 <Write4Bits>
  Write4Bits((lownib)|mode);
 80003de:	7bba      	ldrb	r2, [r7, #14]
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f804 	bl	80003f4 <Write4Bits>
}
 80003ec:	bf00      	nop
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f809 	bl	8000418 <ExpanderWrite>
  PulseEnable(value);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f821 	bl	8000450 <PulseEnable>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000422:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <ExpanderWrite+0x30>)
 8000424:	781a      	ldrb	r2, [r3, #0]
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4313      	orrs	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800042e:	f107 020f 	add.w	r2, r7, #15
 8000432:	230a      	movs	r3, #10
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2301      	movs	r3, #1
 8000438:	214e      	movs	r1, #78	@ 0x4e
 800043a:	4804      	ldr	r0, [pc, #16]	@ (800044c <ExpanderWrite+0x34>)
 800043c:	f001 fe1c 	bl	8002078 <HAL_I2C_Master_Transmit>
}
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	2000003c 	.word	0x2000003c
 800044c:	20000090 	.word	0x20000090

08000450 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	f043 0304 	orr.w	r3, r3, #4
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ffd8 	bl	8000418 <ExpanderWrite>
  DelayUS(20);
 8000468:	2014      	movs	r0, #20
 800046a:	f000 f839 	bl	80004e0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f023 0304 	bic.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffce 	bl	8000418 <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f82f 	bl	80004e0 <DelayUS>
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <DelayInit>:

static void DelayInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <DelayInit+0x4c>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a10      	ldr	r2, [pc, #64]	@ (80004d8 <DelayInit+0x4c>)
 8000496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800049a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800049c:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <DelayInit+0x4c>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <DelayInit+0x4c>)
 80004a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004a6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <DelayInit+0x50>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	@ (80004dc <DelayInit+0x50>)
 80004ae:	f023 0301 	bic.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <DelayInit+0x50>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <DelayInit+0x50>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <DelayInit+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004c6:	bf00      	nop
  __ASM volatile ("NOP");
 80004c8:	bf00      	nop
  __ASM volatile ("NOP");
 80004ca:	bf00      	nop
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000edf0 	.word	0xe000edf0
 80004dc:	e0001000 	.word	0xe0001000

080004e0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004e0:	b480      	push	{r7}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <DelayUS+0x44>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <DelayUS+0x48>)
 80004ee:	fba2 2303 	umull	r2, r3, r2, r3
 80004f2:	0c9a      	lsrs	r2, r3, #18
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <DelayUS+0x4c>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <DelayUS+0x4c>)
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	429a      	cmp	r2, r3
 8000512:	d8f6      	bhi.n	8000502 <DelayUS+0x22>
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	371c      	adds	r7, #28
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000010 	.word	0x20000010
 8000528:	431bde83 	.word	0x431bde83
 800052c:	e0001000 	.word	0xe0001000

08000530 <AlarmPeripheral_Init>:
void AlarmIO_Test(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AlarmPeripheral_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	// Set up timer 1 PWM and timer 2 and 6 interrupts
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	480e      	ldr	r0, [pc, #56]	@ (8000570 <AlarmPeripheral_Init+0x40>)
 8000538:	f003 fe5c 	bl	80041f4 <HAL_TIM_PWM_Start>

	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	2019      	movs	r0, #25
 8000542:	f001 fb1a 	bl	8001b7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000546:	2019      	movs	r0, #25
 8000548:	f001 fb33 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim16);
 800054c:	4809      	ldr	r0, [pc, #36]	@ (8000574 <AlarmPeripheral_Init+0x44>)
 800054e:	f003 fda5 	bl	800409c <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	201c      	movs	r0, #28
 8000558:	f001 fb0f 	bl	8001b7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800055c:	201c      	movs	r0, #28
 800055e:	f001 fb28 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

	// Set up LCD screen
	HD44780_Init(2);
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff fe30 	bl	80001c8 <HD44780_Init>
	HD44780_Clear();
 8000568:	f7ff feb2 	bl	80002d0 <HD44780_Clear>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000e4 	.word	0x200000e4
 8000574:	2000017c 	.word	0x2000017c

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fcfa 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f812 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa48 	bl	8000a18 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000588:	f000 f874 	bl	8000674 <MX_ADC1_Init>
  MX_I2C1_Init();
 800058c:	f000 f8ce 	bl	800072c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000590:	f000 f90c 	bl	80007ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000594:	f000 f99a 	bl	80008cc <MX_TIM2_Init>
  MX_TIM16_Init();
 8000598:	f000 f9e6 	bl	8000968 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800059c:	f000 fa0c 	bl	80009b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AlarmPeripheral_Init();
 80005a0:	f7ff ffc6 	bl	8000530 <AlarmPeripheral_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x2c>

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	@ 0x70
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005b2:	2228      	movs	r2, #40	@ 0x28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fa8f 	bl	8005ada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2234      	movs	r2, #52	@ 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 fa81 	bl	8005ada <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005d8:	2303      	movs	r3, #3
 80005da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2310      	movs	r3, #16
 80005ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f902 	bl	800280c <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800060e:	f000 fa95 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f003 f92a 	bl	8003888 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063a:	f000 fa7f 	bl	8000b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <SystemClock_Config+0xc8>)
 8000640:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800064e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fb36 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000662:	f000 fa6b 	bl	8000b3c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3770      	adds	r7, #112	@ 0x70
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	000810a0 	.word	0x000810a0

08000674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068a:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_ADC1_Init+0xb4>)
 800068c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000690:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <MX_ADC1_Init+0xb4>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_ADC1_Init+0xb4>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <MX_ADC1_Init+0xb4>)
 80006e6:	f000 fccf 	bl	8001088 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80006f0:	f000 fa24 	bl	8000b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_ADC1_Init+0xb4>)
 8000712:	f000 fe3f 	bl	8001394 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800071c:	f000 fa0e 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000040 	.word	0x20000040

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f001 fbeb 	bl	8001f42 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f9e3 	bl	8000b3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f001 ffaf 	bl	80026dc <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f9da 	bl	8000b3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f001 fff1 	bl	8002772 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f9d1 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40005400 	.word	0x40005400
 80007a8:	00201d2b 	.word	0x00201d2b

080007ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b096      	sub	sp, #88	@ 0x58
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	222c      	movs	r2, #44	@ 0x2c
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 f97e 	bl	8005ada <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007de:	4b39      	ldr	r3, [pc, #228]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007e0:	4a39      	ldr	r2, [pc, #228]	@ (80008c8 <MX_TIM1_Init+0x11c>)
 80007e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 80007e4:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007e6:	221e      	movs	r2, #30
 80007e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b36      	ldr	r3, [pc, #216]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3522;
 80007f0:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007f2:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 80007f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b32      	ldr	r3, [pc, #200]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fe:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <MX_TIM1_Init+0x118>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b2f      	ldr	r3, [pc, #188]	@ (80008c4 <MX_TIM1_Init+0x118>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800080a:	482e      	ldr	r0, [pc, #184]	@ (80008c4 <MX_TIM1_Init+0x118>)
 800080c:	f003 fc9a 	bl	8004144 <HAL_TIM_PWM_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f991 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000826:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800082a:	4619      	mov	r1, r3
 800082c:	4825      	ldr	r0, [pc, #148]	@ (80008c4 <MX_TIM1_Init+0x118>)
 800082e:	f004 fcb9 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 f980 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083c:	2360      	movs	r3, #96	@ 0x60
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000858:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	4818      	ldr	r0, [pc, #96]	@ (80008c4 <MX_TIM1_Init+0x118>)
 8000862:	f003 feaf 	bl	80045c4 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800086c:	f000 f966 	bl	8000b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80008a6:	f004 fce3 	bl	8005270 <HAL_TIMEx_ConfigBreakDeadTime>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80008b0:	f000 f944 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80008b6:	f000 fa51 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 80008ba:	bf00      	nop
 80008bc:	3758      	adds	r7, #88	@ 0x58
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000e4 	.word	0x200000e4
 80008c8:	40012c00 	.word	0x40012c00

080008cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_TIM2_Init+0x98>)
 80008ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_TIM2_Init+0x98>)
 80008f4:	221e      	movs	r2, #30
 80008f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM2_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3522;
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000900:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8000904:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_TIM2_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000912:	4814      	ldr	r0, [pc, #80]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000914:	f003 fb6a 	bl	8003fec <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800091e:	f000 f90d 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000930:	f003 ff5c 	bl	80047ec <HAL_TIM_ConfigClockSource>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800093a:	f000 f8ff 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <MX_TIM2_Init+0x98>)
 800094c:	f004 fc2a 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000956:	f000 f8f1 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000130 	.word	0x20000130

08000968 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_TIM16_Init+0x48>)
 800096e:	4a11      	ldr	r2, [pc, #68]	@ (80009b4 <MX_TIM16_Init+0x4c>)
 8000970:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3999;
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_TIM16_Init+0x48>)
 8000974:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000978:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <MX_TIM16_Init+0x48>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1799;
 8000980:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_TIM16_Init+0x48>)
 8000982:	f240 7207 	movw	r2, #1799	@ 0x707
 8000986:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_TIM16_Init+0x48>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_TIM16_Init+0x48>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_TIM16_Init+0x48>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_TIM16_Init+0x48>)
 800099c:	f003 fb26 	bl	8003fec <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80009a6:	f000 f8c9 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000017c 	.word	0x2000017c
 80009b4:	40014400 	.word	0x40014400

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <MX_USART2_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009c4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USART2_UART_Init+0x58>)
 80009fc:	f004 fcce 	bl	800539c <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f899 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001c8 	.word	0x200001c8
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b40      	ldr	r3, [pc, #256]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a3f      	ldr	r2, [pc, #252]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b3a      	ldr	r3, [pc, #232]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a39      	ldr	r2, [pc, #228]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a33      	ldr	r2, [pc, #204]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <MX_GPIO_Init+0x118>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RM_Pin|SM_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2160      	movs	r1, #96	@ 0x60
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f001 fa19 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NP1_Pin NP2_Pin NP3_Pin NP4_Pin
                           NP5_Pin NP6_Pin NP7_Pin NP8_Pin
                           NP9_Pin NP0_Pin */
  GPIO_InitStruct.Pin = NP1_Pin|NP2_Pin|NP3_Pin|NP4_Pin
 8000a9a:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8000a9e:	617b      	str	r3, [r7, #20]
                          |NP5_Pin|NP6_Pin|NP7_Pin|NP8_Pin
                          |NP9_Pin|NP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4821      	ldr	r0, [pc, #132]	@ (8000b34 <MX_GPIO_Init+0x11c>)
 8000ab0:	f001 f89a 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RM_Pin SM_Pin */
  GPIO_InitStruct.Pin = RM_Pin|SM_Pin;
 8000ab4:	2360      	movs	r3, #96	@ 0x60
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f001 f88b 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LUB_Pin */
  GPIO_InitStruct.Pin = LUB_Pin;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LUB_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <MX_GPIO_Init+0x120>)
 8000ae8:	f001 f87e 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPB_Pin */
  GPIO_InitStruct.Pin = RPB_Pin;
 8000aec:	2302      	movs	r3, #2
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPB_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_GPIO_Init+0x120>)
 8000b02:	f001 f871 	bl	8001be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2006      	movs	r0, #6
 8000b0c:	f001 f835 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b10:	2006      	movs	r0, #6
 8000b12:	f001 f84e 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2007      	movs	r0, #7
 8000b1c:	f001 f82d 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b20:	2007      	movs	r0, #7
 8000b22:	f001 f846 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000400 	.word	0x48000400

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <Error_Handler+0x8>

08000b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <HAL_MspInit+0x44>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_MspInit+0x44>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x44>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bb0:	d124      	bne.n	8000bfc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb2:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_ADC_MspInit+0x74>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a13      	ldr	r2, [pc, #76]	@ (8000c04 <HAL_ADC_MspInit+0x74>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_ADC_MspInit+0x74>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_ADC_MspInit+0x74>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <HAL_ADC_MspInit+0x74>)
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_ADC_MspInit+0x74>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be2:	2301      	movs	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	2303      	movs	r3, #3
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 fff6 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	@ 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a17      	ldr	r2, [pc, #92]	@ (8000c84 <HAL_I2C_MspInit+0x7c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d127      	bne.n	8000c7a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a16      	ldr	r2, [pc, #88]	@ (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23c0      	movs	r3, #192	@ 0xc0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c52:	2304      	movs	r3, #4
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c5e:	f000 ffc3 	bl	8001be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000400 	.word	0x48000400

08000c90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <HAL_TIM_PWM_MspInit+0x44>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d113      	bne.n	8000cca <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_TIM_PWM_MspInit+0x48>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <HAL_TIM_PWM_MspInit+0x48>)
 8000ca8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_TIM_PWM_MspInit+0x48>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2019      	movs	r0, #25
 8000cc0:	f000 ff5b 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cc4:	2019      	movs	r0, #25
 8000cc6:	f000 ff74 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40012c00 	.word	0x40012c00
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cec:	d114      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_TIM_Base_MspInit+0x78>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <HAL_TIM_Base_MspInit+0x78>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_TIM_Base_MspInit+0x78>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	201c      	movs	r0, #28
 8000d0c:	f000 ff35 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d10:	201c      	movs	r0, #28
 8000d12:	f000 ff4e 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d16:	e018      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <HAL_TIM_Base_MspInit+0x7c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d113      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_TIM_Base_MspInit+0x78>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	@ (8000d54 <HAL_TIM_Base_MspInit+0x78>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_TIM_Base_MspInit+0x78>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2019      	movs	r0, #25
 8000d40:	f000 ff1b 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d44:	2019      	movs	r0, #25
 8000d46:	f000 ff34 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40014400 	.word	0x40014400

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a11      	ldr	r2, [pc, #68]	@ (8000dc0 <HAL_TIM_MspPostInit+0x64>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d11b      	bne.n	8000db6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_TIM_MspPostInit+0x6c>)
 8000db2:	f000 ff19 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40012c00 	.word	0x40012c00
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000800 	.word	0x48000800

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_UART_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d128      	bne.n	8000e40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_UART_MspInit+0x80>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f000 fed4 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	@ 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f8ab 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}

08000eae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LUB_Pin);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f001 f822 	bl	8001efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPB_Pin);
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f001 f81b 	bl	8001efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000ed2:	f003 fa75 	bl	80043c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000ed6:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000ed8:	f003 fa72 	bl	80043c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000e4 	.word	0x200000e4
 8000ee4:	2000017c 	.word	0x2000017c

08000ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <TIM2_IRQHandler+0x10>)
 8000eee:	f003 fa67 	bl	80043c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000130 	.word	0x20000130

08000efc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f004 fdcd 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fb11 	bl	8000578 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000f64:	08005b8c 	.word	0x08005b8c
  ldr r2, =_sbss
 8000f68:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000f6c:	20000254 	.word	0x20000254

08000f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_Init+0x28>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <HAL_Init+0x28>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 fded 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fdda 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fe05 	bl	8001bce <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 fdcd 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000018 	.word	0x20000018
 8000ffc:	20000014 	.word	0x20000014

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000018 	.word	0x20000018
 8001024:	20000250 	.word	0x20000250

08001028 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;  
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000250 	.word	0x20000250

08001040 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000018 	.word	0x20000018

08001088 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09a      	sub	sp, #104	@ 0x68
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e169      	b.n	800137c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d176      	bne.n	80011a8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d152      	bne.n	8001168 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fd57 	bl	8000b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d13b      	bne.n	8001168 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fc01 	bl	80018f8 <ADC_Disable>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	2b00      	cmp	r3, #0
 8001106:	d12f      	bne.n	8001168 <HAL_ADC_Init+0xe0>
 8001108:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800110c:	2b00      	cmp	r3, #0
 800110e:	d12b      	bne.n	8001168 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001118:	f023 0302 	bic.w	r3, r3, #2
 800111c:	f043 0202 	orr.w	r2, r3, #2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001132:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001142:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001144:	4b8f      	ldr	r3, [pc, #572]	@ (8001384 <HAL_ADC_Init+0x2fc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a8f      	ldr	r2, [pc, #572]	@ (8001388 <HAL_ADC_Init+0x300>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9a      	lsrs	r2, r3, #18
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800115a:	e002      	b.n	8001162 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	3b01      	subs	r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f9      	bne.n	800115c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001184:	d110      	bne.n	80011a8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f023 0312 	bic.w	r3, r3, #18
 800118e:	f043 0210 	orr.w	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 80d6 	bne.w	8001362 <HAL_ADC_Init+0x2da>
 80011b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 80d1 	bne.w	8001362 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 80c9 	bne.w	8001362 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011d8:	f043 0202 	orr.w	r2, r3, #2
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e0:	4b6a      	ldr	r3, [pc, #424]	@ (800138c <HAL_ADC_Init+0x304>)
 80011e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d108      	bne.n	8001208 <HAL_ADC_Init+0x180>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_ADC_Init+0x180>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <HAL_ADC_Init+0x182>
 8001208:	2300      	movs	r3, #0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d11c      	bne.n	8001248 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800120e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001210:	2b00      	cmp	r3, #0
 8001212:	d010      	beq.n	8001236 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d107      	bne.n	8001230 <HAL_ADC_Init+0x1a8>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_ADC_Init+0x1a8>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_ADC_Init+0x1aa>
 8001230:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001232:	2b00      	cmp	r3, #0
 8001234:	d108      	bne.n	8001248 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	431a      	orrs	r2, r3
 8001244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001246:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e5b      	ldrb	r3, [r3, #25]
 800124c:	035b      	lsls	r3, r3, #13
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001252:	2a01      	cmp	r2, #1
 8001254:	d002      	beq.n	800125c <HAL_ADC_Init+0x1d4>
 8001256:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800125a:	e000      	b.n	800125e <HAL_ADC_Init+0x1d6>
 800125c:	2200      	movs	r2, #0
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4313      	orrs	r3, r2
 800126c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800126e:	4313      	orrs	r3, r2
 8001270:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d11b      	bne.n	80012b4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e5b      	ldrb	r3, [r3, #25]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	3b01      	subs	r3, #1
 800128a:	045a      	lsls	r2, r3, #17
 800128c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800128e:	4313      	orrs	r3, r2
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	663b      	str	r3, [r7, #96]	@ 0x60
 8001296:	e00d      	b.n	80012b4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80012a0:	f043 0220 	orr.w	r2, r3, #32
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d007      	beq.n	80012cc <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	4313      	orrs	r3, r2
 80012c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012c8:	4313      	orrs	r3, r2
 80012ca:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d114      	bne.n	8001304 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012e8:	f023 0302 	bic.w	r3, r3, #2
 80012ec:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e1b      	ldrb	r3, [r3, #24]
 80012f2:	039a      	lsls	r2, r3, #14
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4313      	orrs	r3, r2
 80012fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001300:	4313      	orrs	r3, r2
 8001302:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <HAL_ADC_Init+0x308>)
 800130c:	4013      	ands	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001314:	430b      	orrs	r3, r1
 8001316:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10c      	bne.n	800133a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f023 010f 	bic.w	r1, r3, #15
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	631a      	str	r2, [r3, #48]	@ 0x30
 8001338:	e007      	b.n	800134a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 020f 	bic.w	r2, r2, #15
 8001348:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f023 0303 	bic.w	r3, r3, #3
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001360:	e00a      	b.n	8001378 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f023 0312 	bic.w	r3, r3, #18
 800136a:	f043 0210 	orr.w	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001378:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800137c:	4618      	mov	r0, r3
 800137e:	3768      	adds	r7, #104	@ 0x68
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000010 	.word	0x20000010
 8001388:	431bde83 	.word	0x431bde83
 800138c:	50000300 	.word	0x50000300
 8001390:	fff0c007 	.word	0xfff0c007

08001394 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001394:	b480      	push	{r7}
 8001396:	b09b      	sub	sp, #108	@ 0x6c
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x22>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e295      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x54e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f040 8279 	bne.w	80018c0 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d81c      	bhi.n	8001410 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	461a      	mov	r2, r3
 80013ea:	231f      	movs	r3, #31
 80013ec:	4093      	lsls	r3, r2
 80013ee:	43db      	mvns	r3, r3
 80013f0:	4019      	ands	r1, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	631a      	str	r2, [r3, #48]	@ 0x30
 800140e:	e063      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d81e      	bhi.n	8001456 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	3b1e      	subs	r3, #30
 800142c:	221f      	movs	r2, #31
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	4019      	ands	r1, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	3b1e      	subs	r3, #30
 8001448:	fa00 f203 	lsl.w	r2, r0, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34
 8001454:	e040      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b0e      	cmp	r3, #14
 800145c:	d81e      	bhi.n	800149c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	3b3c      	subs	r3, #60	@ 0x3c
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	3b3c      	subs	r3, #60	@ 0x3c
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38
 800149a:	e01d      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	3b5a      	subs	r3, #90	@ 0x5a
 80014b0:	221f      	movs	r2, #31
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	4019      	ands	r1, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	3b5a      	subs	r3, #90	@ 0x5a
 80014cc:	fa00 f203 	lsl.w	r2, r0, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 80e5 	bne.w	80016b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d91c      	bls.n	800152a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6999      	ldr	r1, [r3, #24]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6898      	ldr	r0, [r3, #8]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	3b1e      	subs	r3, #30
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e019      	b.n	800155e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6959      	ldr	r1, [r3, #20]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	2207      	movs	r2, #7
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	4019      	ands	r1, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6898      	ldr	r0, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	fa00 f203 	lsl.w	r2, r0, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	3b01      	subs	r3, #1
 800157c:	2b03      	cmp	r3, #3
 800157e:	d84f      	bhi.n	8001620 <HAL_ADC_ConfigChannel+0x28c>
 8001580:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <HAL_ADC_ConfigChannel+0x1f4>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001599 	.word	0x08001599
 800158c:	080015bb 	.word	0x080015bb
 8001590:	080015dd 	.word	0x080015dd
 8001594:	080015ff 	.word	0x080015ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800159e:	4b97      	ldr	r3, [pc, #604]	@ (80017fc <HAL_ADC_ConfigChannel+0x468>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	0691      	lsls	r1, r2, #26
 80015a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015aa:	430a      	orrs	r2, r1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015b6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015b8:	e07b      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015c0:	4b8e      	ldr	r3, [pc, #568]	@ (80017fc <HAL_ADC_ConfigChannel+0x468>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	0691      	lsls	r1, r2, #26
 80015ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015cc:	430a      	orrs	r2, r1
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015d8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015da:	e06a      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015e2:	4b86      	ldr	r3, [pc, #536]	@ (80017fc <HAL_ADC_ConfigChannel+0x468>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	0691      	lsls	r1, r2, #26
 80015ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015ee:	430a      	orrs	r2, r1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015fa:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015fc:	e059      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001604:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <HAL_ADC_ConfigChannel+0x468>)
 8001606:	4013      	ands	r3, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	0691      	lsls	r1, r2, #26
 800160e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001610:	430a      	orrs	r2, r1
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800161c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800161e:	e048      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001626:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	069b      	lsls	r3, r3, #26
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001642:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800164a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	069b      	lsls	r3, r3, #26
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001666:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800166e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	069b      	lsls	r3, r3, #26
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800168a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001692:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	069b      	lsls	r3, r3, #26
 800169c:	429a      	cmp	r2, r3
 800169e:	d107      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016ae:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80016b0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x33e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x33e>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x340>
 80016d2:	2300      	movs	r3, #0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f040 80fe 	bne.w	80018d6 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d00f      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001700:	e049      	b.n	8001796 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	409a      	lsls	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b09      	cmp	r3, #9
 8001722:	d91c      	bls.n	800175e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6999      	ldr	r1, [r3, #24]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1b      	subs	r3, #27
 8001736:	2207      	movs	r2, #7
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6898      	ldr	r0, [r3, #8]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	3b1b      	subs	r3, #27
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	619a      	str	r2, [r3, #24]
 800175c:	e01b      	b.n	8001796 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6959      	ldr	r1, [r3, #20]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	2207      	movs	r2, #7
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	4019      	ands	r1, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6898      	ldr	r0, [r3, #8]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	fa00 f203 	lsl.w	r2, r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_ADC_ConfigChannel+0x46c>)
 8001798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d105      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d014      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017b2:	2b11      	cmp	r3, #17
 80017b4:	d105      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00a      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	f040 8085 	bne.w	80018d6 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d17e      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d10c      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x470>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x470>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e004      	b.n	8001806 <HAL_ADC_ConfigChannel+0x472>
 80017fc:	83fff000 	.word	0x83fff000
 8001800:	50000300 	.word	0x50000300
 8001804:	2300      	movs	r3, #0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d150      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800180a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_ADC_ConfigChannel+0x498>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_ADC_ConfigChannel+0x498>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_ADC_ConfigChannel+0x49a>
 800182c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800182e:	2b00      	cmp	r3, #0
 8001830:	d13c      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b10      	cmp	r3, #16
 8001838:	d11d      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x4e2>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001842:	d118      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800184c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800184e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_ADC_ConfigChannel+0x55c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <HAL_ADC_ConfigChannel+0x560>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9a      	lsrs	r2, r3, #18
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001866:	e002      	b.n	800186e <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3b01      	subs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f9      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001874:	e02e      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b11      	cmp	r3, #17
 800187c:	d10b      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x502>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001886:	d106      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001892:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001894:	e01e      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d11a      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800189e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018a8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018aa:	e013      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f043 0220 	orr.w	r2, r3, #32
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80018be:	e00a      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80018d2:	e000      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018d4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	376c      	adds	r7, #108	@ 0x6c
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000010 	.word	0x20000010
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d108      	bne.n	8001924 <ADC_Disable+0x2c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <ADC_Disable+0x2c>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <ADC_Disable+0x2e>
 8001924:	2300      	movs	r3, #0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d047      	beq.n	80019ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030d 	and.w	r3, r3, #13
 8001934:	2b01      	cmp	r3, #1
 8001936:	d10f      	bne.n	8001958 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0202 	orr.w	r2, r2, #2
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2203      	movs	r2, #3
 800194e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001950:	f7ff fb6a 	bl	8001028 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001956:	e029      	b.n	80019ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f043 0210 	orr.w	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e023      	b.n	80019bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001974:	f7ff fb58 	bl	8001028 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d914      	bls.n	80019ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10d      	bne.n	80019ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f043 0210 	orr.w	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e007      	b.n	80019bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d0dc      	beq.n	8001974 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	@ (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	@ (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	@ 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e14e      	b.n	8001e96 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8140 	beq.w	8001e90 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d005      	beq.n	8001c28 <HAL_GPIO_Init+0x40>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d130      	bne.n	8001c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 0201 	and.w	r2, r3, #1
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d017      	beq.n	8001cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d123      	bne.n	8001d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	6939      	ldr	r1, [r7, #16]
 8001d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0203 	and.w	r2, r3, #3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 809a 	beq.w	8001e90 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5c:	4b55      	ldr	r3, [pc, #340]	@ (8001eb4 <HAL_GPIO_Init+0x2cc>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a54      	ldr	r2, [pc, #336]	@ (8001eb4 <HAL_GPIO_Init+0x2cc>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b52      	ldr	r3, [pc, #328]	@ (8001eb4 <HAL_GPIO_Init+0x2cc>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d74:	4a50      	ldr	r2, [pc, #320]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d9e:	d013      	beq.n	8001dc8 <HAL_GPIO_Init+0x1e0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a46      	ldr	r2, [pc, #280]	@ (8001ebc <HAL_GPIO_Init+0x2d4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00d      	beq.n	8001dc4 <HAL_GPIO_Init+0x1dc>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a45      	ldr	r2, [pc, #276]	@ (8001ec0 <HAL_GPIO_Init+0x2d8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <HAL_GPIO_Init+0x1d8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a44      	ldr	r2, [pc, #272]	@ (8001ec4 <HAL_GPIO_Init+0x2dc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_GPIO_Init+0x1d4>
 8001db8:	2303      	movs	r3, #3
 8001dba:	e006      	b.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	e004      	b.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e002      	b.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	f002 0203 	and.w	r2, r2, #3
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dda:	4937      	ldr	r1, [pc, #220]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de8:	4b37      	ldr	r3, [pc, #220]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e36:	4a24      	ldr	r2, [pc, #144]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f47f aea9 	bne.w	8001bf8 <HAL_GPIO_Init+0x10>
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	371c      	adds	r7, #28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	48000400 	.word	0x48000400
 8001ec0:	48000800 	.word	0x48000800
 8001ec4:	48000c00 	.word	0x48000c00
 8001ec8:	40010400 	.word	0x40010400

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f06:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f806 	bl	8001f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40010400 	.word	0x40010400

08001f2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e08d      	b.n	8002070 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7fe fe4d 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2224      	movs	r2, #36	@ 0x24
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d107      	bne.n	8001fbc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	e006      	b.n	8001fca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d108      	bne.n	8001fe4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	e007      	b.n	8001ff4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ff2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002006:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002016:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69d9      	ldr	r1, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	461a      	mov	r2, r3
 8002084:	460b      	mov	r3, r1
 8002086:	817b      	strh	r3, [r7, #10]
 8002088:	4613      	mov	r3, r2
 800208a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b20      	cmp	r3, #32
 8002096:	f040 80fd 	bne.w	8002294 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2C_Master_Transmit+0x30>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0f6      	b.n	8002296 <HAL_I2C_Master_Transmit+0x21e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020b0:	f7fe ffba 	bl	8001028 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2319      	movs	r3, #25
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f914 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0e1      	b.n	8002296 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2221      	movs	r2, #33	@ 0x21
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2210      	movs	r2, #16
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	893a      	ldrh	r2, [r7, #8]
 80020f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2bff      	cmp	r3, #255	@ 0xff
 8002102:	d906      	bls.n	8002112 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	22ff      	movs	r2, #255	@ 0xff
 8002108:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800210a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e007      	b.n	8002122 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800211c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002120:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d024      	beq.n	8002174 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	4b4e      	ldr	r3, [pc, #312]	@ (80022a0 <HAL_I2C_Master_Transmit+0x228>)
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fa83 	bl	8002678 <I2C_TransferConfig>
 8002172:	e066      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002178:	b2da      	uxtb	r2, r3
 800217a:	8979      	ldrh	r1, [r7, #10]
 800217c:	4b48      	ldr	r3, [pc, #288]	@ (80022a0 <HAL_I2C_Master_Transmit+0x228>)
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fa78 	bl	8002678 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002188:	e05b      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	6a39      	ldr	r1, [r7, #32]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f907 	bl	80023a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07b      	b.n	8002296 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d034      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x1ca>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d130      	bne.n	8002242 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f880 	bl	80022f0 <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e04d      	b.n	8002296 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2bff      	cmp	r3, #255	@ 0xff
 8002202:	d90e      	bls.n	8002222 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220e:	b2da      	uxtb	r2, r3
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	2300      	movs	r3, #0
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fa2c 	bl	8002678 <I2C_TransferConfig>
 8002220:	e00f      	b.n	8002242 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	2300      	movs	r3, #0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fa1b 	bl	8002678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d19e      	bne.n	800218a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	6a39      	ldr	r1, [r7, #32]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f8ed 	bl	8002430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e01a      	b.n	8002296 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2220      	movs	r2, #32
 8002266:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_I2C_Master_Transmit+0x22c>)
 8002274:	400b      	ands	r3, r1
 8002276:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	80002000 	.word	0x80002000
 80022a4:	fe00e800 	.word	0xfe00e800

080022a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d103      	bne.n	80022c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d007      	beq.n	80022e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	619a      	str	r2, [r3, #24]
  }
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002300:	e03b      	b.n	800237a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f8d6 	bl	80024b8 <I2C_IsErrorOccurred>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e041      	b.n	800239a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d02d      	beq.n	800237a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231e:	f7fe fe83 	bl	8001028 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <I2C_WaitOnFlagUntilTimeout+0x44>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d122      	bne.n	800237a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	4013      	ands	r3, r2
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	429a      	cmp	r2, r3
 8002350:	d113      	bne.n	800237a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4013      	ands	r3, r2
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	429a      	cmp	r2, r3
 8002396:	d0b4      	beq.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ae:	e033      	b.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f87f 	bl	80024b8 <I2C_IsErrorOccurred>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e031      	b.n	8002428 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d025      	beq.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023cc:	f7fe fe2c 	bl	8001028 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d302      	bcc.n	80023e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11a      	bne.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d013      	beq.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e007      	b.n	8002428 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d1c4      	bne.n	80023b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800243c:	e02f      	b.n	800249e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f838 	bl	80024b8 <I2C_IsErrorOccurred>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e02d      	b.n	80024ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7fe fde9 	bl	8001028 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11a      	bne.n	800249e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b20      	cmp	r3, #32
 8002474:	d013      	beq.n	800249e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e007      	b.n	80024ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d1c8      	bne.n	800243e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d068      	beq.n	80025b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ec:	e049      	b.n	8002582 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d045      	beq.n	8002582 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024f6:	f7fe fd97 	bl	8001028 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <I2C_IsErrorOccurred+0x54>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d13a      	bne.n	8002582 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002516:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800251e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800252a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800252e:	d121      	bne.n	8002574 <I2C_IsErrorOccurred+0xbc>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002536:	d01d      	beq.n	8002574 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b20      	cmp	r3, #32
 800253c:	d01a      	beq.n	8002574 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800254c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800254e:	f7fe fd6b 	bl	8001028 <HAL_GetTick>
 8002552:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002554:	e00e      	b.n	8002574 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002556:	f7fe fd67 	bl	8001028 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b19      	cmp	r3, #25
 8002562:	d907      	bls.n	8002574 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f043 0320 	orr.w	r3, r3, #32
 800256a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002572:	e006      	b.n	8002582 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b20      	cmp	r3, #32
 8002580:	d1e9      	bne.n	8002556 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b20      	cmp	r3, #32
 800258e:	d003      	beq.n	8002598 <I2C_IsErrorOccurred+0xe0>
 8002590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0aa      	beq.n	80024ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2220      	movs	r2, #32
 80025a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800261c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01c      	beq.n	8002666 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fe3b 	bl	80022a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <I2C_IsErrorOccurred+0x1bc>)
 800263e:	400b      	ands	r3, r1
 8002640:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800266a:	4618      	mov	r0, r3
 800266c:	3728      	adds	r7, #40	@ 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	fe00e800 	.word	0xfe00e800

08002678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	4613      	mov	r3, r2
 8002688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002690:	7a7b      	ldrb	r3, [r7, #9]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002698:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	0d5b      	lsrs	r3, r3, #21
 80026b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <I2C_TransferConfig+0x60>)
 80026b8:	430b      	orrs	r3, r1
 80026ba:	43db      	mvns	r3, r3
 80026bc:	ea02 0103 	and.w	r1, r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	03ff63ff 	.word	0x03ff63ff

080026dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d138      	bne.n	8002764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e032      	b.n	8002766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	@ 0x24
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800272e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b20      	cmp	r3, #32
 8002786:	d139      	bne.n	80027fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002792:	2302      	movs	r3, #2
 8002794:	e033      	b.n	80027fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2224      	movs	r2, #36	@ 0x24
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002812:	af00      	add	r7, sp, #0
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002822:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	f001 b823 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 817d 	beq.w	8002b42 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002848:	4bbc      	ldr	r3, [pc, #752]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	d00c      	beq.n	800286e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002854:	4bb9      	ldr	r3, [pc, #740]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d15c      	bne.n	800291a <HAL_RCC_OscConfig+0x10e>
 8002860:	4bb6      	ldr	r3, [pc, #728]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800286c:	d155      	bne.n	800291a <HAL_RCC_OscConfig+0x10e>
 800286e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002872:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002882:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_OscConfig+0x94>
 800289a:	4ba8      	ldr	r3, [pc, #672]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e015      	b.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028a4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80028b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80028bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80028c8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028d0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80028d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80028e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80028e4:	fab2 f282 	clz	r2, r2
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f042 0220 	orr.w	r2, r2, #32
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	f002 021f 	and.w	r2, r2, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 811f 	beq.w	8002b40 <HAL_RCC_OscConfig+0x334>
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 8116 	bne.w	8002b40 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	f000 bfaf 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x12e>
 800292c:	4b83      	ldr	r3, [pc, #524]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a82      	ldr	r2, [pc, #520]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e036      	b.n	80029a8 <HAL_RCC_OscConfig+0x19c>
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x158>
 800294a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7b      	ldr	r2, [pc, #492]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b79      	ldr	r3, [pc, #484]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a78      	ldr	r2, [pc, #480]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 800295c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e021      	b.n	80029a8 <HAL_RCC_OscConfig+0x19c>
 8002964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002968:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x184>
 8002976:	4b71      	ldr	r3, [pc, #452]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a70      	ldr	r2, [pc, #448]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b6e      	ldr	r3, [pc, #440]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6d      	ldr	r2, [pc, #436]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x19c>
 8002990:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a69      	ldr	r2, [pc, #420]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b67      	ldr	r3, [pc, #412]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a66      	ldr	r2, [pc, #408]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029a8:	4b64      	ldr	r3, [pc, #400]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	f023 020f 	bic.w	r2, r3, #15
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	495f      	ldr	r1, [pc, #380]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d059      	beq.n	8002a86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fb29 	bl	8001028 <HAL_GetTick>
 80029d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fb24 	bl	8001028 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b64      	cmp	r3, #100	@ 0x64
 80029ea:	d902      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	f000 bf43 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
 80029f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002a06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x218>
 8002a1e:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e015      	b.n	8002a50 <HAL_RCC_OscConfig+0x244>
 8002a24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a28:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a3c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a54:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002a58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a5c:	fa92 f2a2 	rbit	r2, r2
 8002a60:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002a64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f042 0220 	orr.w	r2, r2, #32
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f002 021f 	and.w	r2, r2, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ab      	beq.n	80029dc <HAL_RCC_OscConfig+0x1d0>
 8002a84:	e05d      	b.n	8002b42 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe facf 	bl	8001028 <HAL_GetTick>
 8002a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe faca 	bl	8001028 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	@ 0x64
 8002a9e:	d902      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f000 bee9 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
 8002aa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aaa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002aba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2cc>
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	e015      	b.n	8002b04 <HAL_RCC_OscConfig+0x2f8>
 8002ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002adc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002aec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002af4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002b00:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b08:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002b0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b10:	fa92 f2a2 	rbit	r2, r2
 8002b14:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002b18:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002b1c:	fab2 f282 	clz	r2, r2
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f042 0220 	orr.w	r2, r2, #32
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f002 021f 	and.w	r2, r2, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ab      	bne.n	8002a90 <HAL_RCC_OscConfig+0x284>
 8002b38:	e003      	b.n	8002b42 <HAL_RCC_OscConfig+0x336>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 817d 	beq.w	8002e52 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b58:	4ba6      	ldr	r3, [pc, #664]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b64:	4ba3      	ldr	r3, [pc, #652]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d172      	bne.n	8002c56 <HAL_RCC_OscConfig+0x44a>
 8002b70:	4ba0      	ldr	r3, [pc, #640]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d16c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x44a>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002b8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d102      	bne.n	8002bac <HAL_RCC_OscConfig+0x3a0>
 8002ba6:	4b93      	ldr	r3, [pc, #588]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e013      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c8>
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002bd0:	4b88      	ldr	r3, [pc, #544]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002bda:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002bde:	fa92 f2a2 	rbit	r2, r2
 8002be2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002be6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f042 0220 	orr.w	r2, r2, #32
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f002 021f 	and.w	r2, r2, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCC_OscConfig+0x410>
 8002c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f000 be2e 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b75      	ldr	r3, [pc, #468]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	21f8      	movs	r1, #248	@ 0xf8
 8002c32:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c3a:	fa91 f1a1 	rbit	r1, r1
 8002c3e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002c42:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002c46:	fab1 f181 	clz	r1, r1
 8002c4a:	b2c9      	uxtb	r1, r1
 8002c4c:	408b      	lsls	r3, r1
 8002c4e:	4969      	ldr	r1, [pc, #420]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c54:	e0fd      	b.n	8002e52 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8088 	beq.w	8002d78 <HAL_RCC_OscConfig+0x56c>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002c7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe f9c8 	bl	8001028 <HAL_GetTick>
 8002c98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9e:	f7fe f9c3 	bl	8001028 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d902      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	f000 bde2 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002cc6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4d8>
 8002cde:	4b45      	ldr	r3, [pc, #276]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e013      	b.n	8002d0c <HAL_RCC_OscConfig+0x500>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002cfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002d08:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002d12:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d16:	fa92 f2a2 	rbit	r2, r2
 8002d1a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002d1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f002 021f 	and.w	r2, r2, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0af      	beq.n	8002c9e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	21f8      	movs	r1, #248	@ 0xf8
 8002d54:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d5c:	fa91 f1a1 	rbit	r1, r1
 8002d60:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002d64:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002d68:	fab1 f181 	clz	r1, r1
 8002d6c:	b2c9      	uxtb	r1, r1
 8002d6e:	408b      	lsls	r3, r1
 8002d70:	4920      	ldr	r1, [pc, #128]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
 8002d76:	e06c      	b.n	8002e52 <HAL_RCC_OscConfig+0x646>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002d8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe f940 	bl	8001028 <HAL_GetTick>
 8002da8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe f93b 	bl	8001028 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	f000 bd5a 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d104      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5ec>
 8002dee:	4b01      	ldr	r3, [pc, #4]	@ (8002df4 <HAL_RCC_OscConfig+0x5e8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e015      	b.n	8002e20 <HAL_RCC_OscConfig+0x614>
 8002df4:	40021000 	.word	0x40021000
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002e10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002e1c:	4bc8      	ldr	r3, [pc, #800]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	2202      	movs	r2, #2
 8002e22:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002e26:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002e32:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f042 0220 	orr.w	r2, r2, #32
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ad      	bne.n	8002dae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8110 	beq.w	8003088 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d079      	beq.n	8002f6c <HAL_RCC_OscConfig+0x760>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4bab      	ldr	r3, [pc, #684]	@ (8003144 <HAL_RCC_OscConfig+0x938>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe f8c1 	bl	8001028 <HAL_GetTick>
 8002ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe f8bc 	bl	8001028 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d902      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	f000 bcdb 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002edc:	2202      	movs	r2, #2
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f00:	2202      	movs	r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1c:	4b88      	ldr	r3, [pc, #544]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 8002f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f28:	2102      	movs	r1, #2
 8002f2a:	6019      	str	r1, [r3, #0]
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f1a3 	rbit	r1, r3
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f42:	6019      	str	r1, [r3, #0]
  return result;
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2101      	movs	r1, #1
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0a0      	beq.n	8002eac <HAL_RCC_OscConfig+0x6a0>
 8002f6a:	e08d      	b.n	8003088 <HAL_RCC_OscConfig+0x87c>
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f8e:	601a      	str	r2, [r3, #0]
  return result;
 8002f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b68      	ldr	r3, [pc, #416]	@ (8003144 <HAL_RCC_OscConfig+0x938>)
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2300      	movs	r3, #0
 8002fac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe f83b 	bl	8001028 <HAL_GetTick>
 8002fb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7fe f836 	bl	8001028 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d902      	bls.n	8002fce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	f000 bc55 	b.w	8003878 <HAL_RCC_OscConfig+0x106c>
 8002fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	fa93 f2a3 	rbit	r2, r3
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003002:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800301e:	2202      	movs	r2, #2
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003026:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003038:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303a:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 800303c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003046:	2102      	movs	r1, #2
 8003048:	6019      	str	r1, [r3, #0]
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f1a3 	rbit	r1, r3
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003060:	6019      	str	r1, [r3, #0]
  return result;
 8003062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003066:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d197      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 81a1 	beq.w	80033e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a4:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b23      	ldr	r3, [pc, #140]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	61d3      	str	r3, [r2, #28]
 80030bc:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b1a      	ldr	r3, [pc, #104]	@ (8003148 <HAL_RCC_OscConfig+0x93c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11a      	bne.n	8003120 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ea:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <HAL_RCC_OscConfig+0x93c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a16      	ldr	r2, [pc, #88]	@ (8003148 <HAL_RCC_OscConfig+0x93c>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fd ff97 	bl	8001028 <HAL_GetTick>
 80030fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fe:	e009      	b.n	8003114 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003100:	f7fd ff92 	bl	8001028 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	@ 0x64
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e3b1      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <HAL_RCC_OscConfig+0x93c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ef      	beq.n	8003100 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10d      	bne.n	800314c <HAL_RCC_OscConfig+0x940>
 8003130:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a02      	ldr	r2, [pc, #8]	@ (8003140 <HAL_RCC_OscConfig+0x934>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	e03c      	b.n	80031b8 <HAL_RCC_OscConfig+0x9ac>
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	10908120 	.word	0x10908120
 8003148:	40007000 	.word	0x40007000
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <HAL_RCC_OscConfig+0x96a>
 800315c:	4bc1      	ldr	r3, [pc, #772]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4ac0      	ldr	r2, [pc, #768]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6213      	str	r3, [r2, #32]
 8003168:	4bbe      	ldr	r3, [pc, #760]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4abd      	ldr	r2, [pc, #756]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 800316e:	f023 0304 	bic.w	r3, r3, #4
 8003172:	6213      	str	r3, [r2, #32]
 8003174:	e020      	b.n	80031b8 <HAL_RCC_OscConfig+0x9ac>
 8003176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x994>
 8003186:	4bb7      	ldr	r3, [pc, #732]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4ab6      	ldr	r2, [pc, #728]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	4bb4      	ldr	r3, [pc, #720]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4ab3      	ldr	r2, [pc, #716]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6213      	str	r3, [r2, #32]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0x9ac>
 80031a0:	4bb0      	ldr	r3, [pc, #704]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4aaf      	ldr	r2, [pc, #700]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	4bad      	ldr	r3, [pc, #692]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4aac      	ldr	r2, [pc, #688]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 80031b2:	f023 0304 	bic.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8081 	beq.w	80032cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fd ff2d 	bl	8001028 <HAL_GetTick>
 80031ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fd ff28 	bl	8001028 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e345      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031f4:	2202      	movs	r2, #2
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003218:	2202      	movs	r2, #2
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003232:	601a      	str	r2, [r3, #0]
  return result;
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800323c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0xa4c>
 8003252:	4b84      	ldr	r3, [pc, #528]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	e013      	b.n	8003280 <HAL_RCC_OscConfig+0xa74>
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003260:	2202      	movs	r2, #2
 8003262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fa93 f2a3 	rbit	r2, r3
 8003272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003276:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	4b79      	ldr	r3, [pc, #484]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003284:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003288:	2102      	movs	r1, #2
 800328a:	6011      	str	r1, [r2, #0]
 800328c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003290:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	fa92 f1a2 	rbit	r1, r2
 800329a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800329e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032a2:	6011      	str	r1, [r2, #0]
  return result;
 80032a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f002 021f 	and.w	r2, r2, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f202 	lsl.w	r2, r1, r2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d084      	beq.n	80031d4 <HAL_RCC_OscConfig+0x9c8>
 80032ca:	e07f      	b.n	80033cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032cc:	f7fd feac 	bl	8001028 <HAL_GetTick>
 80032d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	e00b      	b.n	80032ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd fea7 	bl	8001028 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e2c4      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003316:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800331a:	2202      	movs	r2, #2
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003330:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003334:	601a      	str	r2, [r3, #0]
  return result;
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800333e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d102      	bne.n	800335a <HAL_RCC_OscConfig+0xb4e>
 8003354:	4b43      	ldr	r3, [pc, #268]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	e013      	b.n	8003382 <HAL_RCC_OscConfig+0xb76>
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003362:	2202      	movs	r2, #2
 8003364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003378:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b39      	ldr	r3, [pc, #228]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003386:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800338a:	2102      	movs	r1, #2
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003392:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fa92 f1a2 	rbit	r1, r2
 800339c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033a4:	6011      	str	r1, [r2, #0]
  return result;
 80033a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033aa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	fab2 f282 	clz	r2, r2
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f002 021f 	and.w	r2, r2, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d184      	bne.n	80032d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d4:	4b23      	ldr	r3, [pc, #140]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 80033da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8242 	beq.w	8003876 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <HAL_RCC_OscConfig+0xc58>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	f000 8213 	beq.w	8003826 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b02      	cmp	r3, #2
 800340e:	f040 8162 	bne.w	80036d6 <HAL_RCC_OscConfig+0xeca>
 8003412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003416:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800341a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800341e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003424:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f2a3 	rbit	r2, r3
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003436:	601a      	str	r2, [r3, #0]
  return result;
 8003438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003440:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800344c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	461a      	mov	r2, r3
 8003454:	2300      	movs	r3, #0
 8003456:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fd fde6 	bl	8001028 <HAL_GetTick>
 800345c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003460:	e00c      	b.n	800347c <HAL_RCC_OscConfig+0xc70>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003468:	f7fd fdde 	bl	8001028 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1fd      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
 800347c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003480:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003484:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034a0:	601a      	str	r2, [r3, #0]
  return result;
 80034a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0xcba>
 80034c0:	4bb0      	ldr	r3, [pc, #704]	@ (8003784 <HAL_RCC_OscConfig+0xf78>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	e027      	b.n	8003516 <HAL_RCC_OscConfig+0xd0a>
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	4b9c      	ldr	r3, [pc, #624]	@ (8003784 <HAL_RCC_OscConfig+0xf78>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800351a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800351e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003522:	6011      	str	r1, [r2, #0]
 8003524:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003528:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	fa92 f1a2 	rbit	r1, r2
 8003532:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003536:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800353a:	6011      	str	r1, [r2, #0]
  return result;
 800353c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003540:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	fab2 f282 	clz	r2, r2
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f042 0220 	orr.w	r2, r2, #32
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f002 021f 	and.w	r2, r2, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d182      	bne.n	8003468 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003562:	4b88      	ldr	r3, [pc, #544]	@ (8003784 <HAL_RCC_OscConfig+0xf78>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800356a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	430b      	orrs	r3, r1
 8003584:	497f      	ldr	r1, [pc, #508]	@ (8003784 <HAL_RCC_OscConfig+0xf78>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003592:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	fa93 f2a3 	rbit	r2, r3
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035ae:	601a      	str	r2, [r3, #0]
  return result;
 80035b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	461a      	mov	r2, r3
 80035cc:	2301      	movs	r3, #1
 80035ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fd2a 	bl	8001028 <HAL_GetTick>
 80035d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d8:	e009      	b.n	80035ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd fd25 	bl	8001028 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e144      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
 80035ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003600:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003612:	601a      	str	r2, [r3, #0]
  return result;
 8003614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003618:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800361c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_RCC_OscConfig+0xe2c>
 8003632:	4b54      	ldr	r3, [pc, #336]	@ (8003784 <HAL_RCC_OscConfig+0xf78>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	e027      	b.n	8003688 <HAL_RCC_OscConfig+0xe7c>
 8003638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003640:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	fa93 f2a3 	rbit	r2, r3
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003670:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	4b3f      	ldr	r3, [pc, #252]	@ (8003784 <HAL_RCC_OscConfig+0xf78>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800368c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003690:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003694:	6011      	str	r1, [r2, #0]
 8003696:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800369a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	fa92 f1a2 	rbit	r1, r2
 80036a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036ac:	6011      	str	r1, [r2, #0]
  return result;
 80036ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	fab2 f282 	clz	r2, r2
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f042 0220 	orr.w	r2, r2, #32
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	f002 021f 	and.w	r2, r2, #31
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f202 	lsl.w	r2, r1, r2
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d082      	beq.n	80035da <HAL_RCC_OscConfig+0xdce>
 80036d4:	e0cf      	b.n	8003876 <HAL_RCC_OscConfig+0x106a>
 80036d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036da:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	fa93 f2a3 	rbit	r2, r3
 80036f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036fa:	601a      	str	r2, [r3, #0]
  return result;
 80036fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003700:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003704:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003710:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fd fc84 	bl	8001028 <HAL_GetTick>
 8003720:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003724:	e009      	b.n	800373a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fc7f 	bl	8001028 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e09e      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
 800373a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003742:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	fa93 f2a3 	rbit	r2, r3
 8003756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800375e:	601a      	str	r2, [r3, #0]
  return result;
 8003760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003764:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003768:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d104      	bne.n	8003788 <HAL_RCC_OscConfig+0xf7c>
 800377e:	4b01      	ldr	r3, [pc, #4]	@ (8003784 <HAL_RCC_OscConfig+0xf78>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e029      	b.n	80037d8 <HAL_RCC_OscConfig+0xfcc>
 8003784:	40021000 	.word	0x40021000
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003790:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f2a3 	rbit	r2, r3
 80037ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_OscConfig+0x1078>)
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037dc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037e4:	6011      	str	r1, [r2, #0]
 80037e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037ea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	fa92 f1a2 	rbit	r1, r2
 80037f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80037fc:	6011      	str	r1, [r2, #0]
  return result;
 80037fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003802:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	fab2 f282 	clz	r2, r2
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f002 021f 	and.w	r2, r2, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d180      	bne.n	8003726 <HAL_RCC_OscConfig+0xf1a>
 8003824:	e027      	b.n	8003876 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e01e      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800383a:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_RCC_OscConfig+0x1078>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003842:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003846:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800384a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10b      	bne.n	8003872 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800385a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800385e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003866:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000

08003888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b09e      	sub	sp, #120	@ 0x78
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e162      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b90      	ldr	r3, [pc, #576]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d910      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 0207 	bic.w	r2, r3, #7
 80038b6:	498b      	ldr	r1, [pc, #556]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b89      	ldr	r3, [pc, #548]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e14a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b82      	ldr	r3, [pc, #520]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	497f      	ldr	r1, [pc, #508]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80dc 	beq.w	8003ab4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d13c      	bne.n	800397e <HAL_RCC_ClockConfig+0xf6>
 8003904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003908:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d102      	bne.n	800392e <HAL_RCC_ClockConfig+0xa6>
 8003928:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	e00f      	b.n	800394e <HAL_RCC_ClockConfig+0xc6>
 800392e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003932:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	667b      	str	r3, [r7, #100]	@ 0x64
 800393c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003940:	663b      	str	r3, [r7, #96]	@ 0x60
 8003942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800394a:	4b67      	ldr	r3, [pc, #412]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003952:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003956:	fa92 f2a2 	rbit	r2, r2
 800395a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800395c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800395e:	fab2 f282 	clz	r2, r2
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f042 0220 	orr.w	r2, r2, #32
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	f002 021f 	and.w	r2, r2, #31
 800396e:	2101      	movs	r1, #1
 8003970:	fa01 f202 	lsl.w	r2, r1, r2
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d17b      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0f3      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d13c      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x178>
 8003986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800398a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x128>
 80039aa:	4b4f      	ldr	r3, [pc, #316]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e00f      	b.n	80039d0 <HAL_RCC_ClockConfig+0x148>
 80039b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039cc:	4b46      	ldr	r3, [pc, #280]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039d4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80039de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0220 	orr.w	r2, r2, #32
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d13a      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0b2      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
 8003a00:	2302      	movs	r3, #2
 8003a02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x1a0>
 8003a22:	4b31      	ldr	r3, [pc, #196]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e00d      	b.n	8003a44 <HAL_RCC_ClockConfig+0x1bc>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a34:	2302      	movs	r3, #2
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	2202      	movs	r2, #2
 8003a46:	61ba      	str	r2, [r7, #24]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	fa92 f2a2 	rbit	r2, r2
 8003a4e:	617a      	str	r2, [r7, #20]
  return result;
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	fab2 f282 	clz	r2, r2
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f042 0220 	orr.w	r2, r2, #32
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f002 021f 	and.w	r2, r2, #31
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e079      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	491a      	ldr	r1, [pc, #104]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a84:	f7fd fad0 	bl	8001028 <HAL_GetTick>
 8003a88:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fd facc 	bl	8001028 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e061      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d214      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0207 	bic.w	r2, r3, #7
 8003aca:	4906      	ldr	r1, [pc, #24]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <HAL_RCC_ClockConfig+0x25c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e040      	b.n	8003b66 <HAL_RCC_ClockConfig+0x2de>
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	491a      	ldr	r1, [pc, #104]	@ (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b16:	4b16      	ldr	r3, [pc, #88]	@ (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4912      	ldr	r1, [pc, #72]	@ (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b2a:	f000 f829 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b2e:	4601      	mov	r1, r0
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <HAL_RCC_ClockConfig+0x2e8>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b38:	22f0      	movs	r2, #240	@ 0xf0
 8003b3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	fa92 f2a2 	rbit	r2, r2
 8003b42:	60fa      	str	r2, [r7, #12]
  return result;
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	fab2 f282 	clz	r2, r2
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	40d3      	lsrs	r3, r2
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <HAL_RCC_ClockConfig+0x2ec>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	fa21 f303 	lsr.w	r3, r1, r3
 8003b56:	4a08      	ldr	r2, [pc, #32]	@ (8003b78 <HAL_RCC_ClockConfig+0x2f0>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b5a:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <HAL_RCC_ClockConfig+0x2f4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fa1e 	bl	8000fa0 <HAL_InitTick>
  
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3778      	adds	r7, #120	@ 0x78
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08005b4c 	.word	0x08005b4c
 8003b78:	20000010 	.word	0x20000010
 8003b7c:	20000014 	.word	0x20000014

08003b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x30>
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x36>
 8003bae:	e026      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bb2:	613b      	str	r3, [r7, #16]
      break;
 8003bb4:	e026      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	0c9b      	lsrs	r3, r3, #18
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a17      	ldr	r2, [pc, #92]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003bc4:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	4a14      	ldr	r2, [pc, #80]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bce:	5cd3      	ldrb	r3, [r2, r3]
 8003bd0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e004      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	613b      	str	r3, [r7, #16]
      break;
 8003bfc:	e002      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bfe:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c00:	613b      	str	r3, [r7, #16]
      break;
 8003c02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c04:	693b      	ldr	r3, [r7, #16]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	007a1200 	.word	0x007a1200
 8003c1c:	08005b64 	.word	0x08005b64
 8003c20:	08005b74 	.word	0x08005b74
 8003c24:	003d0900 	.word	0x003d0900

08003c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000010 	.word	0x20000010

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c46:	f7ff ffef 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c54:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003c58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	fa92 f2a2 	rbit	r2, r2
 8003c60:	603a      	str	r2, [r7, #0]
  return result;
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	fab2 f282 	clz	r2, r2
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	40d3      	lsrs	r3, r2
 8003c6c:	4a04      	ldr	r2, [pc, #16]	@ (8003c80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08005b5c 	.word	0x08005b5c

08003c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c8a:	f7ff ffcd 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c8e:	4601      	mov	r1, r0
 8003c90:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003c98:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003c9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	fa92 f2a2 	rbit	r2, r2
 8003ca4:	603a      	str	r2, [r7, #0]
  return result;
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	fab2 f282 	clz	r2, r2
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	40d3      	lsrs	r3, r2
 8003cb0:	4a04      	ldr	r2, [pc, #16]	@ (8003cc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	08005b5c 	.word	0x08005b5c

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b092      	sub	sp, #72	@ 0x48
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80d4 	beq.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cec:	4b4e      	ldr	r3, [pc, #312]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10e      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	61d3      	str	r3, [r2, #28]
 8003d04:	4b48      	ldr	r3, [pc, #288]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b45      	ldr	r3, [pc, #276]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d118      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d22:	4b42      	ldr	r3, [pc, #264]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a41      	ldr	r2, [pc, #260]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd f97b 	bl	8001028 <HAL_GetTick>
 8003d32:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	e008      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fd f977 	bl	8001028 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b64      	cmp	r3, #100	@ 0x64
 8003d42:	d901      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e14b      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b38      	ldr	r3, [pc, #224]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d54:	4b34      	ldr	r3, [pc, #208]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8084 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d07c      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d74:	4b2c      	ldr	r3, [pc, #176]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2301      	movs	r3, #1
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dc6:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04b      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd f927 	bl	8001028 <HAL_GetTick>
 8003dda:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd f923 	bl	8001028 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0f5      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003df4:	2302      	movs	r3, #2
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e00:	2302      	movs	r3, #2
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	61fb      	str	r3, [r7, #28]
  return result;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d108      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e22:	4b01      	ldr	r3, [pc, #4]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	e00d      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	10908100 	.word	0x10908100
 8003e34:	2302      	movs	r3, #2
 8003e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	4b69      	ldr	r3, [pc, #420]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	2202      	movs	r2, #2
 8003e46:	613a      	str	r2, [r7, #16]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	fa92 f2a2 	rbit	r2, r2
 8003e4e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	fab2 f282 	clz	r2, r2
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f002 021f 	and.w	r2, r2, #31
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0b7      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	495b      	ldr	r1, [pc, #364]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b57      	ldr	r3, [pc, #348]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	4a56      	ldr	r2, [pc, #344]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea0:	4b51      	ldr	r3, [pc, #324]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	f023 0203 	bic.w	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	494e      	ldr	r1, [pc, #312]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	f023 0210 	bic.w	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	4947      	ldr	r1, [pc, #284]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003edc:	4b42      	ldr	r3, [pc, #264]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	493f      	ldr	r1, [pc, #252]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efa:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	f023 0220 	bic.w	r2, r3, #32
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	4938      	ldr	r1, [pc, #224]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f18:	4b33      	ldr	r3, [pc, #204]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	4930      	ldr	r1, [pc, #192]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f36:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4929      	ldr	r1, [pc, #164]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003f54:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	4921      	ldr	r1, [pc, #132]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f72:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	491a      	ldr	r1, [pc, #104]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f90:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	4912      	ldr	r1, [pc, #72]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003fae:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	490b      	ldr	r1, [pc, #44]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	4903      	ldr	r1, [pc, #12]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3748      	adds	r7, #72	@ 0x48
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000

08003fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e049      	b.n	8004092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fc fe62 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 fcda 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d001      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e03b      	b.n	800412c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <HAL_TIM_Base_Start_IT+0x9c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x4e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040de:	d004      	beq.n	80040ea <HAL_TIM_Base_Start_IT+0x4e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a15      	ldr	r2, [pc, #84]	@ (800413c <HAL_TIM_Base_Start_IT+0xa0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d115      	bne.n	8004116 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	4b13      	ldr	r3, [pc, #76]	@ (8004140 <HAL_TIM_Base_Start_IT+0xa4>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d015      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x8c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004102:	d011      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	e008      	b.n	8004128 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e000      	b.n	800412a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40014000 	.word	0x40014000
 8004140:	00010007 	.word	0x00010007

08004144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e049      	b.n	80041ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fc fd90 	bl	8000c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f000 fc2e 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_TIM_PWM_Start+0x24>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e03c      	b.n	8004292 <HAL_TIM_PWM_Start+0x9e>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b04      	cmp	r3, #4
 800421c:	d109      	bne.n	8004232 <HAL_TIM_PWM_Start+0x3e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	e02f      	b.n	8004292 <HAL_TIM_PWM_Start+0x9e>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d109      	bne.n	800424c <HAL_TIM_PWM_Start+0x58>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e022      	b.n	8004292 <HAL_TIM_PWM_Start+0x9e>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d109      	bne.n	8004266 <HAL_TIM_PWM_Start+0x72>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	bf14      	ite	ne
 800425e:	2301      	movne	r3, #1
 8004260:	2300      	moveq	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e015      	b.n	8004292 <HAL_TIM_PWM_Start+0x9e>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b10      	cmp	r3, #16
 800426a:	d109      	bne.n	8004280 <HAL_TIM_PWM_Start+0x8c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e008      	b.n	8004292 <HAL_TIM_PWM_Start+0x9e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e083      	b.n	80043a2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <HAL_TIM_PWM_Start+0xb6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042a8:	e023      	b.n	80042f2 <HAL_TIM_PWM_Start+0xfe>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_PWM_Start+0xc6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042b8:	e01b      	b.n	80042f2 <HAL_TIM_PWM_Start+0xfe>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0xd6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c8:	e013      	b.n	80042f2 <HAL_TIM_PWM_Start+0xfe>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xe6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042d8:	e00b      	b.n	80042f2 <HAL_TIM_PWM_Start+0xfe>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0xf6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042e8:	e003      	b.n	80042f2 <HAL_TIM_PWM_Start+0xfe>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 ff2c 	bl	8005158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a29      	ldr	r2, [pc, #164]	@ (80043ac <HAL_TIM_PWM_Start+0x1b8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_TIM_PWM_Start+0x134>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a28      	ldr	r2, [pc, #160]	@ (80043b0 <HAL_TIM_PWM_Start+0x1bc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_TIM_PWM_Start+0x134>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a26      	ldr	r2, [pc, #152]	@ (80043b4 <HAL_TIM_PWM_Start+0x1c0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIM_PWM_Start+0x134>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a25      	ldr	r2, [pc, #148]	@ (80043b8 <HAL_TIM_PWM_Start+0x1c4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <HAL_TIM_PWM_Start+0x138>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_TIM_PWM_Start+0x13a>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a19      	ldr	r2, [pc, #100]	@ (80043ac <HAL_TIM_PWM_Start+0x1b8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_TIM_PWM_Start+0x16c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004354:	d004      	beq.n	8004360 <HAL_TIM_PWM_Start+0x16c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a15      	ldr	r2, [pc, #84]	@ (80043b0 <HAL_TIM_PWM_Start+0x1bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d115      	bne.n	800438c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <HAL_TIM_PWM_Start+0x1c8>)
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b06      	cmp	r3, #6
 8004370:	d015      	beq.n	800439e <HAL_TIM_PWM_Start+0x1aa>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004378:	d011      	beq.n	800439e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438a:	e008      	b.n	800439e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e000      	b.n	80043a0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800
 80043bc:	00010007 	.word	0x00010007

080043c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d020      	beq.n	8004424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01b      	beq.n	8004424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0202 	mvn.w	r2, #2
 80043f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 facb 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fabd 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 face 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d020      	beq.n	8004470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0204 	mvn.w	r2, #4
 8004440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 faa5 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa97 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 faa8 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d020      	beq.n	80044bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01b      	beq.n	80044bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0208 	mvn.w	r2, #8
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2204      	movs	r2, #4
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa7f 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa71 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa82 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d020      	beq.n	8004508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01b      	beq.n	8004508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0210 	mvn.w	r2, #16
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2208      	movs	r2, #8
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa59 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa4b 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa5c 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0201 	mvn.w	r2, #1
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa29 	bl	800497e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 ff12 	bl	8005374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800456c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 ff0a 	bl	8005388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fa1b 	bl	80049ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0220 	mvn.w	r2, #32
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fed2 	bl	8005360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0ff      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b14      	cmp	r3, #20
 80045ee:	f200 80f0 	bhi.w	80047d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045f2:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	0800464d 	.word	0x0800464d
 80045fc:	080047d3 	.word	0x080047d3
 8004600:	080047d3 	.word	0x080047d3
 8004604:	080047d3 	.word	0x080047d3
 8004608:	0800468d 	.word	0x0800468d
 800460c:	080047d3 	.word	0x080047d3
 8004610:	080047d3 	.word	0x080047d3
 8004614:	080047d3 	.word	0x080047d3
 8004618:	080046cf 	.word	0x080046cf
 800461c:	080047d3 	.word	0x080047d3
 8004620:	080047d3 	.word	0x080047d3
 8004624:	080047d3 	.word	0x080047d3
 8004628:	0800470f 	.word	0x0800470f
 800462c:	080047d3 	.word	0x080047d3
 8004630:	080047d3 	.word	0x080047d3
 8004634:	080047d3 	.word	0x080047d3
 8004638:	08004751 	.word	0x08004751
 800463c:	080047d3 	.word	0x080047d3
 8004640:	080047d3 	.word	0x080047d3
 8004644:	080047d3 	.word	0x080047d3
 8004648:	08004791 	.word	0x08004791
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fa40 	bl	8004ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]
      break;
 800468a:	e0a5      	b.n	80047d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 faa6 	bl	8004be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	619a      	str	r2, [r3, #24]
      break;
 80046cc:	e084      	b.n	80047d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fb05 	bl	8004ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0208 	orr.w	r2, r2, #8
 80046e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0204 	bic.w	r2, r2, #4
 80046f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69d9      	ldr	r1, [r3, #28]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	61da      	str	r2, [r3, #28]
      break;
 800470c:	e064      	b.n	80047d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fb63 	bl	8004de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	61da      	str	r2, [r3, #28]
      break;
 800474e:	e043      	b.n	80047d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fba6 	bl	8004ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0204 	bic.w	r2, r2, #4
 800477a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800478e:	e023      	b.n	80047d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fbe4 	bl	8004f64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047d0:	e002      	b.n	80047d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
      break;
 80047d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop

080047ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIM_ConfigClockSource+0x1c>
 8004804:	2302      	movs	r3, #2
 8004806:	e0b6      	b.n	8004976 <HAL_TIM_ConfigClockSource+0x18a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004826:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800482a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004844:	d03e      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0xd8>
 8004846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484a:	f200 8087 	bhi.w	800495c <HAL_TIM_ConfigClockSource+0x170>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004852:	f000 8086 	beq.w	8004962 <HAL_TIM_ConfigClockSource+0x176>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485a:	d87f      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x170>
 800485c:	2b70      	cmp	r3, #112	@ 0x70
 800485e:	d01a      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0xaa>
 8004860:	2b70      	cmp	r3, #112	@ 0x70
 8004862:	d87b      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x170>
 8004864:	2b60      	cmp	r3, #96	@ 0x60
 8004866:	d050      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x11e>
 8004868:	2b60      	cmp	r3, #96	@ 0x60
 800486a:	d877      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x170>
 800486c:	2b50      	cmp	r3, #80	@ 0x50
 800486e:	d03c      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0xfe>
 8004870:	2b50      	cmp	r3, #80	@ 0x50
 8004872:	d873      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x170>
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	d058      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x13e>
 8004878:	2b40      	cmp	r3, #64	@ 0x40
 800487a:	d86f      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x170>
 800487c:	2b30      	cmp	r3, #48	@ 0x30
 800487e:	d064      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15e>
 8004880:	2b30      	cmp	r3, #48	@ 0x30
 8004882:	d86b      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x170>
 8004884:	2b20      	cmp	r3, #32
 8004886:	d060      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15e>
 8004888:	2b20      	cmp	r3, #32
 800488a:	d867      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x170>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d05c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15e>
 8004890:	2b10      	cmp	r3, #16
 8004892:	d05a      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15e>
 8004894:	e062      	b.n	800495c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048a6:	f000 fc37 	bl	8005118 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	609a      	str	r2, [r3, #8]
      break;
 80048c2:	e04f      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048d4:	f000 fc20 	bl	8005118 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048e6:	609a      	str	r2, [r3, #8]
      break;
 80048e8:	e03c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 fb94 	bl	8005024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2150      	movs	r1, #80	@ 0x50
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fbed 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004908:	e02c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004916:	461a      	mov	r2, r3
 8004918:	f000 fbb3 	bl	8005082 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2160      	movs	r1, #96	@ 0x60
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fbdd 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004928:	e01c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	461a      	mov	r2, r3
 8004938:	f000 fb74 	bl	8005024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2140      	movs	r1, #64	@ 0x40
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fbcd 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004948:	e00c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f000 fbc4 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 800495a:	e003      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e000      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a34      	ldr	r2, [pc, #208]	@ (8004ac8 <TIM_Base_SetConfig+0xe4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0x20>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a02:	d108      	bne.n	8004a16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac8 <TIM_Base_SetConfig+0xe4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <TIM_Base_SetConfig+0x5a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a24:	d00b      	beq.n	8004a3e <TIM_Base_SetConfig+0x5a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a28      	ldr	r2, [pc, #160]	@ (8004acc <TIM_Base_SetConfig+0xe8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_Base_SetConfig+0x5a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a27      	ldr	r2, [pc, #156]	@ (8004ad0 <TIM_Base_SetConfig+0xec>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_Base_SetConfig+0x5a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a26      	ldr	r2, [pc, #152]	@ (8004ad4 <TIM_Base_SetConfig+0xf0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <TIM_Base_SetConfig+0xe4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_Base_SetConfig+0xb0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a13      	ldr	r2, [pc, #76]	@ (8004acc <TIM_Base_SetConfig+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <TIM_Base_SetConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a12      	ldr	r2, [pc, #72]	@ (8004ad0 <TIM_Base_SetConfig+0xec>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0xb0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <TIM_Base_SetConfig+0xf0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d103      	bne.n	8004a9c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	611a      	str	r2, [r3, #16]
  }
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f023 0201 	bic.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 0302 	bic.w	r3, r3, #2
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a28      	ldr	r2, [pc, #160]	@ (8004bd4 <TIM_OC1_SetConfig+0xfc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <TIM_OC1_SetConfig+0x78>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a27      	ldr	r2, [pc, #156]	@ (8004bd8 <TIM_OC1_SetConfig+0x100>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <TIM_OC1_SetConfig+0x78>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a26      	ldr	r2, [pc, #152]	@ (8004bdc <TIM_OC1_SetConfig+0x104>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC1_SetConfig+0x78>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a25      	ldr	r2, [pc, #148]	@ (8004be0 <TIM_OC1_SetConfig+0x108>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10c      	bne.n	8004b6a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0308 	bic.w	r3, r3, #8
 8004b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <TIM_OC1_SetConfig+0xfc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_OC1_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <TIM_OC1_SetConfig+0x100>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_OC1_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <TIM_OC1_SetConfig+0x104>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_OC1_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a16      	ldr	r2, [pc, #88]	@ (8004be0 <TIM_OC1_SetConfig+0x108>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d111      	bne.n	8004bae <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f023 0210 	bic.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0320 	bic.w	r3, r3, #32
 8004c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a24      	ldr	r2, [pc, #144]	@ (8004cd4 <TIM_OC2_SetConfig+0xf0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10d      	bne.n	8004c64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <TIM_OC2_SetConfig+0xf0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <TIM_OC2_SetConfig+0xa0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd8 <TIM_OC2_SetConfig+0xf4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_OC2_SetConfig+0xa0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <TIM_OC2_SetConfig+0xf8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_OC2_SetConfig+0xa0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a18      	ldr	r2, [pc, #96]	@ (8004ce0 <TIM_OC2_SetConfig+0xfc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a23      	ldr	r2, [pc, #140]	@ (8004dd0 <TIM_OC3_SetConfig+0xec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10d      	bne.n	8004d62 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d60:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd0 <TIM_OC3_SetConfig+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a19      	ldr	r2, [pc, #100]	@ (8004dd4 <TIM_OC3_SetConfig+0xf0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a18      	ldr	r2, [pc, #96]	@ (8004dd8 <TIM_OC3_SetConfig+0xf4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC3_SetConfig+0x9e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	@ (8004ddc <TIM_OC3_SetConfig+0xf8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d113      	bne.n	8004daa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800

08004de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <TIM_OC4_SetConfig+0xb8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_OC4_SetConfig+0x7c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <TIM_OC4_SetConfig+0xbc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_OC4_SetConfig+0x7c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <TIM_OC4_SetConfig+0xc0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_OC4_SetConfig+0x7c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <TIM_OC4_SetConfig+0xc4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d109      	bne.n	8004e70 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	019b      	lsls	r3, r3, #6
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <TIM_OC5_SetConfig+0xac>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_OC5_SetConfig+0x72>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	@ (8004f58 <TIM_OC5_SetConfig+0xb0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_OC5_SetConfig+0x72>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	@ (8004f5c <TIM_OC5_SetConfig+0xb4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_OC5_SetConfig+0x72>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a12      	ldr	r2, [pc, #72]	@ (8004f60 <TIM_OC5_SetConfig+0xb8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d109      	bne.n	8004f2e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	051b      	lsls	r3, r3, #20
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <TIM_OC6_SetConfig+0xb0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_OC6_SetConfig+0x74>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	@ (8005018 <TIM_OC6_SetConfig+0xb4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_OC6_SetConfig+0x74>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a14      	ldr	r2, [pc, #80]	@ (800501c <TIM_OC6_SetConfig+0xb8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC6_SetConfig+0x74>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a13      	ldr	r2, [pc, #76]	@ (8005020 <TIM_OC6_SetConfig+0xbc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d109      	bne.n	8004fec <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 030a 	bic.w	r3, r3, #10
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f023 0210 	bic.w	r2, r3, #16
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f043 0307 	orr.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2201      	movs	r2, #1
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	43db      	mvns	r3, r3
 800517a:	401a      	ands	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	431a      	orrs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e04f      	b.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a21      	ldr	r2, [pc, #132]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a14      	ldr	r2, [pc, #80]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005224:	d004      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a10      	ldr	r2, [pc, #64]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10c      	bne.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005236:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	4313      	orrs	r3, r2
 8005240:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40014000 	.word	0x40014000

08005270 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005288:	2302      	movs	r3, #2
 800528a:	e060      	b.n	800534e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a14      	ldr	r2, [pc, #80]	@ (800535c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d115      	bne.n	800533c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	051b      	lsls	r3, r3, #20
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00

08005360 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e040      	b.n	8005430 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fb fd04 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2224      	movs	r2, #36	@ 0x24
 80053c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f95e 	bl	80056a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f825 	bl	8005438 <UART_SetConfig>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e01b      	b.n	8005430 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f9dd 	bl	80057e8 <UART_CheckIdleState>
 800542e:	4603      	mov	r3, r0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b8a      	ldr	r3, [pc, #552]	@ (800568c <UART_SetConfig+0x254>)
 8005464:	4013      	ands	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	430b      	orrs	r3, r1
 800546e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a78      	ldr	r2, [pc, #480]	@ (8005690 <UART_SetConfig+0x258>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d120      	bne.n	80054f6 <UART_SetConfig+0xbe>
 80054b4:	4b77      	ldr	r3, [pc, #476]	@ (8005694 <UART_SetConfig+0x25c>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d817      	bhi.n	80054f0 <UART_SetConfig+0xb8>
 80054c0:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <UART_SetConfig+0x90>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	080054d9 	.word	0x080054d9
 80054cc:	080054e5 	.word	0x080054e5
 80054d0:	080054eb 	.word	0x080054eb
 80054d4:	080054df 	.word	0x080054df
 80054d8:	2300      	movs	r3, #0
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e01d      	b.n	800551a <UART_SetConfig+0xe2>
 80054de:	2302      	movs	r3, #2
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e01a      	b.n	800551a <UART_SetConfig+0xe2>
 80054e4:	2304      	movs	r3, #4
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e017      	b.n	800551a <UART_SetConfig+0xe2>
 80054ea:	2308      	movs	r3, #8
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e014      	b.n	800551a <UART_SetConfig+0xe2>
 80054f0:	2310      	movs	r3, #16
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e011      	b.n	800551a <UART_SetConfig+0xe2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a67      	ldr	r2, [pc, #412]	@ (8005698 <UART_SetConfig+0x260>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d102      	bne.n	8005506 <UART_SetConfig+0xce>
 8005500:	2300      	movs	r3, #0
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e009      	b.n	800551a <UART_SetConfig+0xe2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a64      	ldr	r2, [pc, #400]	@ (800569c <UART_SetConfig+0x264>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d102      	bne.n	8005516 <UART_SetConfig+0xde>
 8005510:	2300      	movs	r3, #0
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e001      	b.n	800551a <UART_SetConfig+0xe2>
 8005516:	2310      	movs	r3, #16
 8005518:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005522:	d15a      	bne.n	80055da <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005524:	7ffb      	ldrb	r3, [r7, #31]
 8005526:	2b08      	cmp	r3, #8
 8005528:	d827      	bhi.n	800557a <UART_SetConfig+0x142>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <UART_SetConfig+0xf8>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005555 	.word	0x08005555
 8005534:	0800555d 	.word	0x0800555d
 8005538:	08005565 	.word	0x08005565
 800553c:	0800557b 	.word	0x0800557b
 8005540:	0800556b 	.word	0x0800556b
 8005544:	0800557b 	.word	0x0800557b
 8005548:	0800557b 	.word	0x0800557b
 800554c:	0800557b 	.word	0x0800557b
 8005550:	08005573 	.word	0x08005573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fe fb74 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8005558:	61b8      	str	r0, [r7, #24]
        break;
 800555a:	e013      	b.n	8005584 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800555c:	f7fe fb92 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 8005560:	61b8      	str	r0, [r7, #24]
        break;
 8005562:	e00f      	b.n	8005584 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b4e      	ldr	r3, [pc, #312]	@ (80056a0 <UART_SetConfig+0x268>)
 8005566:	61bb      	str	r3, [r7, #24]
        break;
 8005568:	e00c      	b.n	8005584 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7fe fb09 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 800556e:	61b8      	str	r0, [r7, #24]
        break;
 8005570:	e008      	b.n	8005584 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005576:	61bb      	str	r3, [r7, #24]
        break;
 8005578:	e004      	b.n	8005584 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	77bb      	strb	r3, [r7, #30]
        break;
 8005582:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d074      	beq.n	8005674 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	005a      	lsls	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	d916      	bls.n	80055d4 <UART_SetConfig+0x19c>
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ac:	d212      	bcs.n	80055d4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f023 030f 	bic.w	r3, r3, #15
 80055b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	89fb      	ldrh	r3, [r7, #14]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	89fa      	ldrh	r2, [r7, #14]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	e04f      	b.n	8005674 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	77bb      	strb	r3, [r7, #30]
 80055d8:	e04c      	b.n	8005674 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055da:	7ffb      	ldrb	r3, [r7, #31]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d828      	bhi.n	8005632 <UART_SetConfig+0x1fa>
 80055e0:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <UART_SetConfig+0x1b0>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005615 	.word	0x08005615
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	08005633 	.word	0x08005633
 80055f8:	08005623 	.word	0x08005623
 80055fc:	08005633 	.word	0x08005633
 8005600:	08005633 	.word	0x08005633
 8005604:	08005633 	.word	0x08005633
 8005608:	0800562b 	.word	0x0800562b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800560c:	f7fe fb18 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8005610:	61b8      	str	r0, [r7, #24]
        break;
 8005612:	e013      	b.n	800563c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005614:	f7fe fb36 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 8005618:	61b8      	str	r0, [r7, #24]
        break;
 800561a:	e00f      	b.n	800563c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800561c:	4b20      	ldr	r3, [pc, #128]	@ (80056a0 <UART_SetConfig+0x268>)
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	e00c      	b.n	800563c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005622:	f7fe faad 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8005626:	61b8      	str	r0, [r7, #24]
        break;
 8005628:	e008      	b.n	800563c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800562e:	61bb      	str	r3, [r7, #24]
        break;
 8005630:	e004      	b.n	800563c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	77bb      	strb	r3, [r7, #30]
        break;
 800563a:	bf00      	nop
    }

    if (pclk != 0U)
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d018      	beq.n	8005674 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	085a      	lsrs	r2, r3, #1
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b0f      	cmp	r3, #15
 800565a:	d909      	bls.n	8005670 <UART_SetConfig+0x238>
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005662:	d205      	bcs.n	8005670 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	b29a      	uxth	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60da      	str	r2, [r3, #12]
 800566e:	e001      	b.n	8005674 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005680:	7fbb      	ldrb	r3, [r7, #30]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	efff69f3 	.word	0xefff69f3
 8005690:	40013800 	.word	0x40013800
 8005694:	40021000 	.word	0x40021000
 8005698:	40004400 	.word	0x40004400
 800569c:	40004800 	.word	0x40004800
 80056a0:	007a1200 	.word	0x007a1200

080056a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01a      	beq.n	80057ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057a2:	d10a      	bne.n	80057ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b098      	sub	sp, #96	@ 0x60
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f8:	f7fb fc16 	bl	8001028 <HAL_GetTick>
 80057fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b08      	cmp	r3, #8
 800580a:	d12e      	bne.n	800586a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005814:	2200      	movs	r2, #0
 8005816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f88c 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d021      	beq.n	800586a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800583a:	653b      	str	r3, [r7, #80]	@ 0x50
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005844:	647b      	str	r3, [r7, #68]	@ 0x44
 8005846:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800584a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e6      	bne.n	8005826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e062      	b.n	8005930 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b04      	cmp	r3, #4
 8005876:	d149      	bne.n	800590c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005878:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f856 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d03c      	beq.n	800590c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	623b      	str	r3, [r7, #32]
   return(result);
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	617b      	str	r3, [r7, #20]
   return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e011      	b.n	8005930 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3758      	adds	r7, #88	@ 0x58
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005948:	e04f      	b.n	80059ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d04b      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005952:	f7fb fb69 	bl	8001028 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	429a      	cmp	r2, r3
 8005960:	d302      	bcc.n	8005968 <UART_WaitOnFlagUntilTimeout+0x30>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e04e      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d037      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b80      	cmp	r3, #128	@ 0x80
 800597e:	d034      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b40      	cmp	r3, #64	@ 0x40
 8005984:	d031      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b08      	cmp	r3, #8
 8005992:	d110      	bne.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2208      	movs	r2, #8
 800599a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f838 	bl	8005a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2208      	movs	r2, #8
 80059a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e029      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c4:	d111      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f81e 	bl	8005a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e00f      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4013      	ands	r3, r2
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	bf0c      	ite	eq
 80059fa:	2301      	moveq	r3, #1
 80059fc:	2300      	movne	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d0a0      	beq.n	800594a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b095      	sub	sp, #84	@ 0x54
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3308      	adds	r3, #8
 8005a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e5      	bne.n	8005a4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d118      	bne.n	8005aba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 0310 	bic.w	r3, r3, #16
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ace:	bf00      	nop
 8005ad0:	3754      	adds	r7, #84	@ 0x54
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <memset>:
 8005ada:	4402      	add	r2, r0
 8005adc:	4603      	mov	r3, r0
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d100      	bne.n	8005ae4 <memset+0xa>
 8005ae2:	4770      	bx	lr
 8005ae4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae8:	e7f9      	b.n	8005ade <memset+0x4>
	...

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4d0d      	ldr	r5, [pc, #52]	@ (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	@ (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2600      	movs	r6, #0
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4d0b      	ldr	r5, [pc, #44]	@ (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	@ (8005b30 <__libc_init_array+0x44>)
 8005b00:	f000 f818 	bl	8005b34 <_init>
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2600      	movs	r6, #0
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	08005b84 	.word	0x08005b84
 8005b28:	08005b84 	.word	0x08005b84
 8005b2c:	08005b84 	.word	0x08005b84
 8005b30:	08005b88 	.word	0x08005b88

08005b34 <_init>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr

08005b40 <_fini>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr
