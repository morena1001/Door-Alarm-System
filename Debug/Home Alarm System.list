
Home Alarm System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800653c  0800653c  0000753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006574  08006574  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006574  08006574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800657c  0800657c  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800657c  0800657c  0000757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006580  08006580  00007580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006584  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000020  080065a0  00008020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080065a0  00008274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d31  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280c  00000000  00000000  0001bd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e07  00000000  00000000  0001f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d346  00000000  00000000  0002055f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016844  00000000  00000000  0003d8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000add12  00000000  00000000  000540e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c18  00000000  00000000  00101e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00106a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006524 	.word	0x08006524

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08006524 	.word	0x08006524

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	@ 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <Check_Password>:
	alarm_system->password= "1001";

	user_input = "\0";
}

bool Check_Password(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	if (!strcmp(alarm_system->password, user_input))		return true;
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <Check_Password+0x28>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <Check_Password+0x2c>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe2f 	bl	80001c8 <strcmp>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d101      	bne.n	8000574 <Check_Password+0x20>
 8000570:	2301      	movs	r3, #1
 8000572:	e000      	b.n	8000576 <Check_Password+0x22>
	return false;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000040 	.word	0x20000040
 8000580:	2000003c 	.word	0x2000003c

08000584 <Lock_System>:

bool Lock_System(void) {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == ready) {
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <Lock_System+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d105      	bne.n	800059e <Lock_System+0x1a>
		alarm_system->state = set;
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <Lock_System+0x28>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2201      	movs	r2, #1
 8000598:	711a      	strb	r2, [r3, #4]
		return true;
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <Lock_System+0x1c>
	}
	return false;
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000040 	.word	0x20000040

080005b0 <Unlock_System>:

bool Unlock_System(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if (__GET_SYSTEM_STATE == set && Check_Password()) {
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <Unlock_System+0x2c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d10a      	bne.n	80005d4 <Unlock_System+0x24>
 80005be:	f7ff ffc9 	bl	8000554 <Check_Password>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d005      	beq.n	80005d4 <Unlock_System+0x24>
		alarm_system->state = ready;
 80005c8:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <Unlock_System+0x2c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	711a      	strb	r2, [r3, #4]
		return true;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e000      	b.n	80005d6 <Unlock_System+0x26>
	}
	return false;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000040 	.word	0x20000040

080005e0 <HD44780_Init>:
	0b01010,
	0b00100
};

void HD44780_Init(uint8_t rows)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005ea:	4a38      	ldr	r2, [pc, #224]	@ (80006cc <HD44780_Init+0xec>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005f0:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <HD44780_Init+0xf0>)
 80005f2:	2208      	movs	r2, #8
 80005f4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005f6:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <HD44780_Init+0xf4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005fc:	4b33      	ldr	r3, [pc, #204]	@ (80006cc <HD44780_Init+0xec>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d907      	bls.n	8000614 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000604:	4b33      	ldr	r3, [pc, #204]	@ (80006d4 <HD44780_Init+0xf4>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <HD44780_Init+0xf4>)
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	e006      	b.n	8000622 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000614:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <HD44780_Init+0xf4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <HD44780_Init+0xf4>)
 8000620:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000622:	f000 f93f 	bl	80008a4 <DelayInit>
  HAL_Delay(50);
 8000626:	2032      	movs	r0, #50	@ 0x32
 8000628:	f001 f84c 	bl	80016c4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800062c:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <HD44780_Init+0xf0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f8fd 	bl	8000830 <ExpanderWrite>
  HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f001 f843 	bl	80016c4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800063e:	2030      	movs	r0, #48	@ 0x30
 8000640:	f000 f8e4 	bl	800080c <Write4Bits>
  DelayUS(4500);
 8000644:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000648:	f000 f956 	bl	80008f8 <DelayUS>

  Write4Bits(0x03 << 4);
 800064c:	2030      	movs	r0, #48	@ 0x30
 800064e:	f000 f8dd 	bl	800080c <Write4Bits>
  DelayUS(4500);
 8000652:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000656:	f000 f94f 	bl	80008f8 <DelayUS>

  Write4Bits(0x03 << 4);
 800065a:	2030      	movs	r0, #48	@ 0x30
 800065c:	f000 f8d6 	bl	800080c <Write4Bits>
  DelayUS(4500);
 8000660:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000664:	f000 f948 	bl	80008f8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000668:	2020      	movs	r0, #32
 800066a:	f000 f8cf 	bl	800080c <Write4Bits>
  DelayUS(100);
 800066e:	2064      	movs	r0, #100	@ 0x64
 8000670:	f000 f942 	bl	80008f8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <HD44780_Init+0xf4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f043 0320 	orr.w	r3, r3, #32
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f887 	bl	8000792 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <HD44780_Init+0xf8>)
 8000686:	2204      	movs	r2, #4
 8000688:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800068a:	f000 f843 	bl	8000714 <HD44780_Display>
  HD44780_Clear();
 800068e:	f000 f82b 	bl	80006e8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <HD44780_Init+0xfc>)
 8000694:	2202      	movs	r2, #2
 8000696:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <HD44780_Init+0xfc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f875 	bl	8000792 <SendCommand>
  DelayUS(4500);
 80006a8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80006ac:	f000 f924 	bl	80008f8 <DelayUS>

  HD44780_CreateSpecialChar(0, up_arrow);
 80006b0:	490b      	ldr	r1, [pc, #44]	@ (80006e0 <HD44780_Init+0x100>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f844 	bl	8000740 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, down_arrow);
 80006b8:	490a      	ldr	r1, [pc, #40]	@ (80006e4 <HD44780_Init+0x104>)
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f840 	bl	8000740 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80006c0:	f000 f81d 	bl	80006fe <HD44780_Home>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000047 	.word	0x20000047
 80006d0:	20000048 	.word	0x20000048
 80006d4:	20000044 	.word	0x20000044
 80006d8:	20000045 	.word	0x20000045
 80006dc:	20000046 	.word	0x20000046
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008

080006e8 <HD44780_Clear>:

void HD44780_Clear()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 f850 	bl	8000792 <SendCommand>
  DelayUS(2000);
 80006f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006f6:	f000 f8ff 	bl	80008f8 <DelayUS>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HD44780_Home>:

void HD44780_Home()
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000702:	2002      	movs	r0, #2
 8000704:	f000 f845 	bl	8000792 <SendCommand>
  DelayUS(2000);
 8000708:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800070c:	f000 f8f4 	bl	80008f8 <DelayUS>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HD44780_Display+0x28>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HD44780_Display+0x28>)
 8000724:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000726:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HD44780_Display+0x28>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f82e 	bl	8000792 <SendCommand>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000045 	.word	0x20000045

08000740 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	b25b      	sxtb	r3, r3
 800075a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075e:	b25b      	sxtb	r3, r3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f815 	bl	8000792 <SendCommand>
  for (int i=0; i<8; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e009      	b.n	8000782 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f819 	bl	80007ae <SendChar>
  for (int i=0; i<8; i++)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b07      	cmp	r3, #7
 8000786:	ddf2      	ble.n	800076e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f812 	bl	80007ca <Send>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <SendChar>:

static void SendChar(uint8_t ch)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f804 	bl	80007ca <Send>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	460a      	mov	r2, r1
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	4613      	mov	r3, r2
 80007d8:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f023 030f 	bic.w	r3, r3, #15
 80007e0:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f80b 	bl	800080c <Write4Bits>
  Write4Bits((lownib)|mode);
 80007f6:	7bba      	ldrb	r2, [r7, #14]
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f804 	bl	800080c <Write4Bits>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f809 	bl	8000830 <ExpanderWrite>
  PulseEnable(value);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f821 	bl	8000868 <PulseEnable>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <ExpanderWrite+0x30>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4313      	orrs	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000846:	f107 020f 	add.w	r2, r7, #15
 800084a:	230a      	movs	r3, #10
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	214e      	movs	r1, #78	@ 0x4e
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <ExpanderWrite+0x34>)
 8000854:	f002 f908 	bl	8002a68 <HAL_I2C_Master_Transmit>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000048 	.word	0x20000048
 8000864:	2000009c 	.word	0x2000009c

08000868 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffd8 	bl	8000830 <ExpanderWrite>
  DelayUS(20);
 8000880:	2014      	movs	r0, #20
 8000882:	f000 f839 	bl	80008f8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f023 0304 	bic.w	r3, r3, #4
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffce 	bl	8000830 <ExpanderWrite>
  DelayUS(20);
 8000894:	2014      	movs	r0, #20
 8000896:	f000 f82f 	bl	80008f8 <DelayUS>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <DelayInit>:

static void DelayInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <DelayInit+0x4c>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <DelayInit+0x4c>)
 80008ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008b2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <DelayInit+0x4c>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <DelayInit+0x4c>)
 80008ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008be:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <DelayInit+0x50>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <DelayInit+0x50>)
 80008c6:	f023 0301 	bic.w	r3, r3, #1
 80008ca:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <DelayInit+0x50>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <DelayInit+0x50>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <DelayInit+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008de:	bf00      	nop
  __ASM volatile ("NOP");
 80008e0:	bf00      	nop
  __ASM volatile ("NOP");
 80008e2:	bf00      	nop
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000edf0 	.word	0xe000edf0
 80008f4:	e0001000 	.word	0xe0001000

080008f8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <DelayUS+0x44>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <DelayUS+0x48>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0c9a      	lsrs	r2, r3, #18
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	fb02 f303 	mul.w	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <DelayUS+0x4c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <DelayUS+0x4c>)
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f6      	bhi.n	800091a <DelayUS+0x22>
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	371c      	adds	r7, #28
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000010 	.word	0x20000010
 8000940:	431bde83 	.word	0x431bde83
 8000944:	e0001000 	.word	0xe0001000

08000948 <AlarmPeripheral_Init>:
void AlarmIO_Test(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AlarmPeripheral_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	// Set up timer 1 PWM and timer 2 and 6 interrupts
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	4810      	ldr	r0, [pc, #64]	@ (8000990 <AlarmPeripheral_Init+0x48>)
 8000950:	f004 f948 	bl	8004be4 <HAL_TIM_PWM_Start>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2036      	movs	r0, #54	@ 0x36
 800095a:	f001 fdee 	bl	800253a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800095e:	2036      	movs	r0, #54	@ 0x36
 8000960:	f001 fe07 	bl	8002572 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 8000964:	480b      	ldr	r0, [pc, #44]	@ (8000994 <AlarmPeripheral_Init+0x4c>)
 8000966:	f004 f891 	bl	8004a8c <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	201c      	movs	r0, #28
 8000970:	f001 fde3 	bl	800253a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000974:	201c      	movs	r0, #28
 8000976:	f001 fdfc 	bl	8002572 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim2);
 800097a:	4807      	ldr	r0, [pc, #28]	@ (8000998 <AlarmPeripheral_Init+0x50>)
 800097c:	f004 f886 	bl	8004a8c <HAL_TIM_Base_Start_IT>

	// Set up LCD screen
	HD44780_Init(2);
 8000980:	2002      	movs	r0, #2
 8000982:	f7ff fe2d 	bl	80005e0 <HD44780_Init>
	HD44780_Clear();
 8000986:	f7ff feaf 	bl	80006e8 <HD44780_Clear>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000f0 	.word	0x200000f0
 8000994:	20000188 	.word	0x20000188
 8000998:	2000013c 	.word	0x2000013c

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 fe2a 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f812 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 fa54 	bl	8000e54 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009ac:	f000 f870 	bl	8000a90 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009b0:	f000 f8ca 	bl	8000b48 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009b4:	f000 f908 	bl	8000bc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009b8:	f000 f996 	bl	8000ce8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009bc:	f000 fa1a 	bl	8000df4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009c0:	f000 f9e0 	bl	8000d84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  AlarmPeripheral_Init();
 80009c4:	f7ff ffc0 	bl	8000948 <AlarmPeripheral_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <main+0x2c>

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09c      	sub	sp, #112	@ 0x70
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009d6:	2228      	movs	r2, #40	@ 0x28
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 fd75 	bl	80064ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	463b      	mov	r3, r7
 80009f2:	2234      	movs	r2, #52	@ 0x34
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fd67 	bl	80064ca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009fc:	2303      	movs	r3, #3
 80009fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0e:	2310      	movs	r3, #16
 8000a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	2302      	movs	r3, #2
 8000a14:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a1c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fbe8 	bl	80031fc <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a32:	f000 faa1 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	230f      	movs	r3, #15
 8000a38:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a50:	2102      	movs	r1, #2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 fc10 	bl	8004278 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a5e:	f000 fa8b 	bl	8000f78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8000a62:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 8000a66:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a74:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fe1d 	bl	80046b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a84:	f000 fa78 	bl	8000f78 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3770      	adds	r7, #112	@ 0x70
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aa6:	4b27      	ldr	r3, [pc, #156]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000aa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000aac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aba:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac0:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b00:	4810      	ldr	r0, [pc, #64]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000b02:	f000 fe03 	bl	800170c <HAL_ADC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000b0c:	f000 fa34 	bl	8000f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_ADC1_Init+0xb4>)
 8000b2e:	f001 f8ad 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b38:	f000 fa1e 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000004c 	.word	0x2000004c

08000b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc0 <MX_I2C1_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b54:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc4 <MX_I2C1_Init+0x7c>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b84:	f001 fed5 	bl	8002932 <HAL_I2C_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8e:	f000 f9f3 	bl	8000f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b96:	f002 fa99 	bl	80030cc <HAL_I2CEx_ConfigAnalogFilter>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f000 f9ea 	bl	8000f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000ba8:	f002 fadb 	bl	8003162 <HAL_I2CEx_ConfigDigitalFilter>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f000 f9e1 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000009c 	.word	0x2000009c
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	00201d2b 	.word	0x00201d2b

08000bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b096      	sub	sp, #88	@ 0x58
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	222c      	movs	r2, #44	@ 0x2c
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 fc68 	bl	80064ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000bfc:	4a39      	ldr	r2, [pc, #228]	@ (8000ce4 <MX_TIM1_Init+0x11c>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 8000c00:	4b37      	ldr	r3, [pc, #220]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c02:	221e      	movs	r2, #30
 8000c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3522;
 8000c0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c0e:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8000c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c26:	482e      	ldr	r0, [pc, #184]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c28:	f003 ff84 	bl	8004b34 <HAL_TIM_PWM_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f9a1 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4825      	ldr	r0, [pc, #148]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c4a:	f004 ffa3 	bl	8005b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c54:	f000 f990 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c58:	2360      	movs	r3, #96	@ 0x60
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000c7e:	f004 f999 	bl	8004fb4 <HAL_TIM_PWM_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c88:	f000 f976 	bl	8000f78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000cc2:	f004 ffcd 	bl	8005c60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ccc:	f000 f954 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <MX_TIM1_Init+0x118>)
 8000cd2:	f000 fa5b 	bl	800118c <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3758      	adds	r7, #88	@ 0x58
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000f0 	.word	0x200000f0
 8000ce4:	40012c00 	.word	0x40012c00

08000ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d10:	221e      	movs	r2, #30
 8000d12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3522;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d1c:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8000d20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2e:	4814      	ldr	r0, [pc, #80]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d30:	f003 fe54 	bl	80049dc <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d3a:	f000 f91d 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d4c:	f004 fa46 	bl	80051dc <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d56:	f000 f90f 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <MX_TIM2_Init+0x98>)
 8000d68:	f004 ff14 	bl	8005b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d72:	f000 f901 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000013c 	.word	0x2000013c

08000d84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <MX_TIM6_Init+0x68>)
 8000d96:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <MX_TIM6_Init+0x6c>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_TIM6_Init+0x68>)
 8000d9c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000da0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <MX_TIM6_Init+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1799;
 8000da8:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <MX_TIM6_Init+0x68>)
 8000daa:	f240 7207 	movw	r2, #1799	@ 0x707
 8000dae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_TIM6_Init+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <MX_TIM6_Init+0x68>)
 8000db8:	f003 fe10 	bl	80049dc <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000dc2:	f000 f8d9 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_TIM6_Init+0x68>)
 8000dd4:	f004 fede 	bl	8005b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000dde:	f000 f8cb 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000188 	.word	0x20000188
 8000df0:	40001000 	.word	0x40001000

08000df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000dfa:	4a15      	ldr	r2, [pc, #84]	@ (8000e50 <MX_USART2_UART_Init+0x5c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e00:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_USART2_UART_Init+0x58>)
 8000e38:	f004 ffa8 	bl	8005d8c <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e42:	f000 f899 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001d4 	.word	0x200001d4
 8000e50:	40004400 	.word	0x40004400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6a:	4b40      	ldr	r3, [pc, #256]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b3a      	ldr	r3, [pc, #232]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a39      	ldr	r2, [pc, #228]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000e88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b37      	ldr	r3, [pc, #220]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b34      	ldr	r3, [pc, #208]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a33      	ldr	r2, [pc, #204]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b31      	ldr	r3, [pc, #196]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8000f6c <MX_GPIO_Init+0x118>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RM_Pin|SM_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2160      	movs	r1, #96	@ 0x60
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed2:	f001 fcf3 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NP1_Pin NP2_Pin NP3_Pin NP4_Pin
                           NP5_Pin NP6_Pin NP7_Pin NP8_Pin
                           NP9_Pin NP0_Pin */
  GPIO_InitStruct.Pin = NP1_Pin|NP2_Pin|NP3_Pin|NP4_Pin
 8000ed6:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8000eda:	617b      	str	r3, [r7, #20]
                          |NP5_Pin|NP6_Pin|NP7_Pin|NP8_Pin
                          |NP9_Pin|NP0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4821      	ldr	r0, [pc, #132]	@ (8000f70 <MX_GPIO_Init+0x11c>)
 8000eec:	f001 fb5c 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RM_Pin SM_Pin */
  GPIO_InitStruct.Pin = RM_Pin|SM_Pin;
 8000ef0:	2360      	movs	r3, #96	@ 0x60
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0a:	f001 fb4d 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LUB_Pin */
  GPIO_InitStruct.Pin = LUB_Pin;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LUB_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <MX_GPIO_Init+0x120>)
 8000f24:	f001 fb40 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPB_Pin */
  GPIO_InitStruct.Pin = RPB_Pin;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPB_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_GPIO_Init+0x120>)
 8000f3e:	f001 fb33 	bl	80025a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2006      	movs	r0, #6
 8000f48:	f001 faf7 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f4c:	2006      	movs	r0, #6
 8000f4e:	f001 fb10 	bl	8002572 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2007      	movs	r0, #7
 8000f58:	f001 faef 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f5c:	2007      	movs	r0, #7
 8000f5e:	f001 fb08 	bl	8002572 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000400 	.word	0x48000400

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fec:	d124      	bne.n	8001038 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_ADC_MspInit+0x74>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <HAL_ADC_MspInit+0x74>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_ADC_MspInit+0x74>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_ADC_MspInit+0x74>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <HAL_ADC_MspInit+0x74>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <HAL_ADC_MspInit+0x74>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101e:	2301      	movs	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f001 fab8 	bl	80025a8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <HAL_I2C_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d127      	bne.n	80010b6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107e:	23c0      	movs	r3, #192	@ 0xc0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001082:	2312      	movs	r3, #18
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <HAL_I2C_MspInit+0x84>)
 800109a:	f001 fa85 	bl	80025a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400

080010cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_TIM_PWM_MspInit+0x38>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_TIM_PWM_MspInit+0x3c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <HAL_TIM_PWM_MspInit+0x3c>)
 80010e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <HAL_TIM_PWM_MspInit+0x3c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40012c00 	.word	0x40012c00
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800111c:	d114      	bne.n	8001148 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_TIM_Base_MspInit+0x78>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_TIM_Base_MspInit+0x78>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_TIM_Base_MspInit+0x78>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	201c      	movs	r0, #28
 800113c:	f001 f9fd 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001140:	201c      	movs	r0, #28
 8001142:	f001 fa16 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001146:	e018      	b.n	800117a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_TIM_Base_MspInit+0x7c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d113      	bne.n	800117a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_TIM_Base_MspInit+0x78>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <HAL_TIM_Base_MspInit+0x78>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_TIM_Base_MspInit+0x78>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2036      	movs	r0, #54	@ 0x36
 8001170:	f001 f9e3 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001174:	2036      	movs	r0, #54	@ 0x36
 8001176:	f001 f9fc 	bl	8002572 <HAL_NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	40001000 	.word	0x40001000

0800118c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a11      	ldr	r2, [pc, #68]	@ (80011f0 <HAL_TIM_MspPostInit+0x64>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d11b      	bne.n	80011e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c6:	2301      	movs	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011e2:	f001 f9e1 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40012c00 	.word	0x40012c00
 80011f4:	40021000 	.word	0x40021000
 80011f8:	48000800 	.word	0x48000800

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_UART_MspInit+0x7c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d128      	bne.n	8001270 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_UART_MspInit+0x80>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_UART_MspInit+0x80>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800124e:	230c      	movs	r3, #12
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126c:	f001 f99c 	bl	80025a8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004400 	.word	0x40004400
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <NMI_Handler+0x4>

08001288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <MemManage_Handler+0x4>

08001298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f9d5 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e002      	b.n	80012f2 <EXTI0_IRQHandler+0x12>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012f8:	4293      	cmp	r3, r2
 80012fa:	ddf7      	ble.n	80012ec <EXTI0_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(LUB_GPIO_Port, LUB_Pin)) {
 80012fc:	2101      	movs	r1, #1
 80012fe:	4810      	ldr	r0, [pc, #64]	@ (8001340 <EXTI0_IRQHandler+0x60>)
 8001300:	f001 fac4 	bl	800288c <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d012      	beq.n	8001330 <EXTI0_IRQHandler+0x50>
		// If the system cannot be locked, try to unlock the system
		user_input = buffer;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <EXTI0_IRQHandler+0x64>)
 800130c:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <EXTI0_IRQHandler+0x68>)
 800130e:	601a      	str	r2, [r3, #0]
		if (!Lock_System())	{
 8001310:	f7ff f938 	bl	8000584 <Lock_System>
 8001314:	4603      	mov	r3, r0
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <EXTI0_IRQHandler+0x44>
			if (Unlock_System()) {
 8001320:	f7ff f946 	bl	80005b0 <Unlock_System>

		}


		// Reset input from number pad
		buffer[0] = '\0';
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <EXTI0_IRQHandler+0x68>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
		idx = 0;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <EXTI0_IRQHandler+0x6c>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LUB_Pin);
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fadb 	bl	80028ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	48000400 	.word	0x48000400
 8001344:	2000003c 	.word	0x2000003c
 8001348:	20000268 	.word	0x20000268
 800134c:	2000026d 	.word	0x2000026d

08001350 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	// Simple software debouncing
	for (int i = 0; i < 65535; i++);
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	e002      	b.n	8001362 <EXTI1_IRQHandler+0x12>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3301      	adds	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001368:	4293      	cmp	r3, r2
 800136a:	ddf7      	ble.n	800135c <EXTI1_IRQHandler+0xc>

	if (HAL_GPIO_ReadPin(RPB_GPIO_Port, RPB_Pin)) {
 800136c:	2102      	movs	r1, #2
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <EXTI1_IRQHandler+0x34>)
 8001370:	f001 fa8c 	bl	800288c <HAL_GPIO_ReadPin>

	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPB_Pin);
 8001374:	2002      	movs	r0, #2
 8001376:	f001 fab9 	bl	80028ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	48000400 	.word	0x48000400

08001388 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!buzzer_length_counter--)	Generate_Tone(false);
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <TIM2_IRQHandler+0x24>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	b291      	uxth	r1, r2
 8001394:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <TIM2_IRQHandler+0x24>)
 8001396:	8011      	strh	r1, [r2, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <TIM2_IRQHandler+0x1a>
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f8b9 	bl	8001514 <Generate_Tone>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a2:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <TIM2_IRQHandler+0x28>)
 80013a4:	f003 fd04 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000026e 	.word	0x2000026e
 80013b0:	2000013c 	.word	0x2000013c

080013b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	// Poll for the value of the IR sensor
	HAL_ADC_Start(&hadc1);
 80013b8:	4843      	ldr	r0, [pc, #268]	@ (80014c8 <TIM6_DAC_IRQHandler+0x114>)
 80013ba:	f000 fb2d 	bl	8001a18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80013be:	2164      	movs	r1, #100	@ 0x64
 80013c0:	4841      	ldr	r0, [pc, #260]	@ (80014c8 <TIM6_DAC_IRQHandler+0x114>)
 80013c2:	f000 fb97 	bl	8001af4 <HAL_ADC_PollForConversion>
	raw = (double) HAL_ADC_GetValue(&hadc1);
 80013c6:	4840      	ldr	r0, [pc, #256]	@ (80014c8 <TIM6_DAC_IRQHandler+0x114>)
 80013c8:	f000 fc52 	bl	8001c70 <HAL_ADC_GetValue>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f846 	bl	8000460 <__aeabi_ui2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	493c      	ldr	r1, [pc, #240]	@ (80014cc <TIM6_DAC_IRQHandler+0x118>)
 80013da:	e9c1 2300 	strd	r2, r3, [r1]
	if (raw < 1000.0) {
		// BEGIN TO SOUND THE ALARM
	}

	// Poll for the number pad
	if      (!HAL_GPIO_ReadPin(NP0_GPIO_Port, NP0_Pin))     Update_Buffer('0');
 80013de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e2:	483b      	ldr	r0, [pc, #236]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 80013e4:	f001 fa52 	bl	800288c <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <TIM6_DAC_IRQHandler+0x42>
 80013ee:	2030      	movs	r0, #48	@ 0x30
 80013f0:	f000 f872 	bl	80014d8 <Update_Buffer>
 80013f4:	e063      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP1_GPIO_Port, NP1_Pin)) 	Update_Buffer('1');
 80013f6:	2102      	movs	r1, #2
 80013f8:	4835      	ldr	r0, [pc, #212]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 80013fa:	f001 fa47 	bl	800288c <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <TIM6_DAC_IRQHandler+0x58>
 8001404:	2031      	movs	r0, #49	@ 0x31
 8001406:	f000 f867 	bl	80014d8 <Update_Buffer>
 800140a:	e058      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP2_GPIO_Port, NP2_Pin))		Update_Buffer('2');
 800140c:	2104      	movs	r1, #4
 800140e:	4830      	ldr	r0, [pc, #192]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 8001410:	f001 fa3c 	bl	800288c <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <TIM6_DAC_IRQHandler+0x6e>
 800141a:	2032      	movs	r0, #50	@ 0x32
 800141c:	f000 f85c 	bl	80014d8 <Update_Buffer>
 8001420:	e04d      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP3_GPIO_Port, NP3_Pin))		Update_Buffer('3');
 8001422:	2108      	movs	r1, #8
 8001424:	482a      	ldr	r0, [pc, #168]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 8001426:	f001 fa31 	bl	800288c <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d103      	bne.n	8001438 <TIM6_DAC_IRQHandler+0x84>
 8001430:	2033      	movs	r0, #51	@ 0x33
 8001432:	f000 f851 	bl	80014d8 <Update_Buffer>
 8001436:	e042      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP4_GPIO_Port, NP4_Pin))		Update_Buffer('4');
 8001438:	2110      	movs	r1, #16
 800143a:	4825      	ldr	r0, [pc, #148]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 800143c:	f001 fa26 	bl	800288c <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <TIM6_DAC_IRQHandler+0x9a>
 8001446:	2034      	movs	r0, #52	@ 0x34
 8001448:	f000 f846 	bl	80014d8 <Update_Buffer>
 800144c:	e037      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP5_GPIO_Port, NP5_Pin))		Update_Buffer('5');
 800144e:	2120      	movs	r1, #32
 8001450:	481f      	ldr	r0, [pc, #124]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 8001452:	f001 fa1b 	bl	800288c <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <TIM6_DAC_IRQHandler+0xb0>
 800145c:	2035      	movs	r0, #53	@ 0x35
 800145e:	f000 f83b 	bl	80014d8 <Update_Buffer>
 8001462:	e02c      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP6_GPIO_Port, NP6_Pin))		Update_Buffer('6');
 8001464:	2140      	movs	r1, #64	@ 0x40
 8001466:	481a      	ldr	r0, [pc, #104]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 8001468:	f001 fa10 	bl	800288c <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d103      	bne.n	800147a <TIM6_DAC_IRQHandler+0xc6>
 8001472:	2036      	movs	r0, #54	@ 0x36
 8001474:	f000 f830 	bl	80014d8 <Update_Buffer>
 8001478:	e021      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP7_GPIO_Port, NP7_Pin))		Update_Buffer('7');
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 800147e:	f001 fa05 	bl	800288c <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <TIM6_DAC_IRQHandler+0xdc>
 8001488:	2037      	movs	r0, #55	@ 0x37
 800148a:	f000 f825 	bl	80014d8 <Update_Buffer>
 800148e:	e016      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP8_GPIO_Port, NP8_Pin))		Update_Buffer('8');
 8001490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001494:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 8001496:	f001 f9f9 	bl	800288c <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <TIM6_DAC_IRQHandler+0xf4>
 80014a0:	2038      	movs	r0, #56	@ 0x38
 80014a2:	f000 f819 	bl	80014d8 <Update_Buffer>
 80014a6:	e00a      	b.n	80014be <TIM6_DAC_IRQHandler+0x10a>
	else if (!HAL_GPIO_ReadPin(NP9_GPIO_Port, NP9_Pin))		Update_Buffer('9');
 80014a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ac:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <TIM6_DAC_IRQHandler+0x11c>)
 80014ae:	f001 f9ed 	bl	800288c <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <TIM6_DAC_IRQHandler+0x10a>
 80014b8:	2039      	movs	r0, #57	@ 0x39
 80014ba:	f000 f80d 	bl	80014d8 <Update_Buffer>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <TIM6_DAC_IRQHandler+0x120>)
 80014c0:	f003 fc76 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000004c 	.word	0x2000004c
 80014cc:	20000260 	.word	0x20000260
 80014d0:	48000800 	.word	0x48000800
 80014d4:	20000188 	.word	0x20000188

080014d8 <Update_Buffer>:

/* USER CODE BEGIN 1 */
void Update_Buffer(char val) {
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	if (idx < 3)
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <Update_Buffer+0x34>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d809      	bhi.n	80014fe <Update_Buffer+0x26>
		buffer[idx++] = val;
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <Update_Buffer+0x34>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	b2d1      	uxtb	r1, r2
 80014f2:	4a06      	ldr	r2, [pc, #24]	@ (800150c <Update_Buffer+0x34>)
 80014f4:	7011      	strb	r1, [r2, #0]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <Update_Buffer+0x38>)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	5453      	strb	r3, [r2, r1]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000026d 	.word	0x2000026d
 8001510:	20000268 	.word	0x20000268

08001514 <Generate_Tone>:

void Generate_Tone(bool enable, ...) {
 8001514:	b40f      	push	{r0, r1, r2, r3}
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
	if (enable) {
 800151c:	7c3b      	ldrb	r3, [r7, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d018      	beq.n	8001554 <Generate_Tone+0x40>
		va_list arg_list;
		va_start(arg_list, enable);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	607b      	str	r3, [r7, #4]

		__HAL_TIM_SET_AUTORELOAD(&htim1, ENABLE_BEEP * 2);
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <Generate_Tone+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <Generate_Tone+0x64>)
 8001534:	f640 52c2 	movw	r2, #3522	@ 0xdc2
 8001538:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ENABLE_BEEP);
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <Generate_Tone+0x64>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8001542:	635a      	str	r2, [r3, #52]	@ 0x34
		buzzer_length_counter = (uint16_t) va_arg(arg_list, int);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1d1a      	adds	r2, r3, #4
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <Generate_Tone+0x68>)
 8001550:	801a      	strh	r2, [r3, #0]
	} else {
		__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	}
}
 8001552:	e00a      	b.n	800156a <Generate_Tone+0x56>
		__HAL_TIM_SET_AUTORELOAD(&htim1, 0);
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <Generate_Tone+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <Generate_Tone+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <Generate_Tone+0x64>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	b004      	add	sp, #16
 8001576:	4770      	bx	lr
 8001578:	200000f0 	.word	0x200000f0
 800157c:	2000026e 	.word	0x2000026e

08001580 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a8:	f7ff ffea 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	@ (80015e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <LoopForever+0xe>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	@ (80015f0 <LoopForever+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d2:	f004 ff83 	bl	80064dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d6:	f7ff f9e1 	bl	800099c <main>

080015da <LoopForever>:

LoopForever:
    b LoopForever
 80015da:	e7fe      	b.n	80015da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80015e8:	08006584 	.word	0x08006584
  ldr r2, =_sbss
 80015ec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80015f0:	20000274 	.word	0x20000274

080015f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 ff8b 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fcb6 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 ffa3 	bl	800258e <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 ff6b 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000010 	.word	0x20000010
 800167c:	20000018 	.word	0x20000018
 8001680:	20000014 	.word	0x20000014

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000018 	.word	0x20000018
 80016a8:	20000270 	.word	0x20000270

080016ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000270 	.word	0x20000270

080016c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000018 	.word	0x20000018

0800170c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b09a      	sub	sp, #104	@ 0x68
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e169      	b.n	8001a00 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d176      	bne.n	800182c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d152      	bne.n	80017ec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fc33 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d13b      	bne.n	80017ec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fd9f 	bl	80022b8 <ADC_Disable>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	d12f      	bne.n	80017ec <HAL_ADC_Init+0xe0>
 800178c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001790:	2b00      	cmp	r3, #0
 8001792:	d12b      	bne.n	80017ec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800179c:	f023 0302 	bic.w	r3, r3, #2
 80017a0:	f043 0202 	orr.w	r2, r3, #2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017b6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017c6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001a08 <HAL_ADC_Init+0x2fc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a8f      	ldr	r2, [pc, #572]	@ (8001a0c <HAL_ADC_Init+0x300>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9a      	lsrs	r2, r3, #18
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017de:	e002      	b.n	80017e6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f9      	bne.n	80017e0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001808:	d110      	bne.n	800182c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f023 0312 	bic.w	r3, r3, #18
 8001812:	f043 0210 	orr.w	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 80d6 	bne.w	80019e6 <HAL_ADC_Init+0x2da>
 800183a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80d1 	bne.w	80019e6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 80c9 	bne.w	80019e6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800185c:	f043 0202 	orr.w	r2, r3, #2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001864:	4b6a      	ldr	r3, [pc, #424]	@ (8001a10 <HAL_ADC_Init+0x304>)
 8001866:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_ADC_Init+0x180>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_ADC_Init+0x180>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_ADC_Init+0x182>
 800188c:	2300      	movs	r3, #0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11c      	bne.n	80018cc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001892:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001894:	2b00      	cmp	r3, #0
 8001896:	d010      	beq.n	80018ba <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <HAL_ADC_Init+0x1a8>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_Init+0x1a8>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_ADC_Init+0x1aa>
 80018b4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ca:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7e5b      	ldrb	r3, [r3, #25]
 80018d0:	035b      	lsls	r3, r3, #13
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018d6:	2a01      	cmp	r2, #1
 80018d8:	d002      	beq.n	80018e0 <HAL_ADC_Init+0x1d4>
 80018da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018de:	e000      	b.n	80018e2 <HAL_ADC_Init+0x1d6>
 80018e0:	2200      	movs	r2, #0
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018f2:	4313      	orrs	r3, r2
 80018f4:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d11b      	bne.n	8001938 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e5b      	ldrb	r3, [r3, #25]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	3b01      	subs	r3, #1
 800190e:	045a      	lsls	r2, r3, #17
 8001910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001912:	4313      	orrs	r3, r2
 8001914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001918:	663b      	str	r3, [r7, #96]	@ 0x60
 800191a:	e00d      	b.n	8001938 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001924:	f043 0220 	orr.w	r2, r3, #32
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193c:	2b01      	cmp	r3, #1
 800193e:	d007      	beq.n	8001950 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001948:	4313      	orrs	r3, r2
 800194a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800194c:	4313      	orrs	r3, r2
 800194e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d114      	bne.n	8001988 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800196c:	f023 0302 	bic.w	r3, r3, #2
 8001970:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7e1b      	ldrb	r3, [r3, #24]
 8001976:	039a      	lsls	r2, r3, #14
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4313      	orrs	r3, r2
 8001982:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001984:	4313      	orrs	r3, r2
 8001986:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b21      	ldr	r3, [pc, #132]	@ (8001a14 <HAL_ADC_Init+0x308>)
 8001990:	4013      	ands	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001998:	430b      	orrs	r3, r1
 800199a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10c      	bne.n	80019be <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f023 010f 	bic.w	r1, r3, #15
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80019bc:	e007      	b.n	80019ce <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020f 	bic.w	r2, r2, #15
 80019cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f023 0303 	bic.w	r3, r3, #3
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e4:	e00a      	b.n	80019fc <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f023 0312 	bic.w	r3, r3, #18
 80019ee:	f043 0210 	orr.w	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3768      	adds	r7, #104	@ 0x68
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000010 	.word	0x20000010
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	50000300 	.word	0x50000300
 8001a14:	fff0c007 	.word	0xfff0c007

08001a18 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d158      	bne.n	8001ae4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_Start+0x28>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e054      	b.n	8001aea <HAL_ADC_Start+0xd2>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fbd1 	bl	80021f0 <ADC_Enable>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d140      	bne.n	8001ada <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa8:	f023 0206 	bic.w	r2, r3, #6
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	221c      	movs	r2, #28
 8001ac6:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0204 	orr.w	r2, r2, #4
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e006      	b.n	8001ae8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001ae2:	e001      	b.n	8001ae8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d102      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e02e      	b.n	8001b6e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b10:	4b56      	ldr	r3, [pc, #344]	@ (8001c6c <HAL_ADC_PollForConversion+0x178>)
 8001b12:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d112      	bne.n	8001b46 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d11d      	bne.n	8001b6a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e08d      	b.n	8001c62 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f043 0220 	orr.w	r2, r3, #32
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07b      	b.n	8001c62 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001b76:	f7ff fd99 	bl	80016ac <HAL_GetTick>
 8001b7a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b7c:	e021      	b.n	8001bc2 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d01d      	beq.n	8001bc2 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_ADC_PollForConversion+0xa8>
 8001b8c:	f7ff fd8e 	bl	80016ac <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d212      	bcs.n	8001bc2 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e04f      	b.n	8001c62 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0d6      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d131      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d12c      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d125      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d112      	bne.n	8001c36 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d112      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c34:	e00b      	b.n	8001c4e <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	50000300 	.word	0x50000300

08001c70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b09b      	sub	sp, #108	@ 0x6c
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x22>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e295      	b.n	80021da <HAL_ADC_ConfigChannel+0x54e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 8279 	bne.w	80021b8 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d81c      	bhi.n	8001d08 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4019      	ands	r1, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d06:	e063      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d81e      	bhi.n	8001d4e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	3b1e      	subs	r3, #30
 8001d24:	221f      	movs	r2, #31
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4019      	ands	r1, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	fa00 f203 	lsl.w	r2, r0, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d4c:	e040      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b0e      	cmp	r3, #14
 8001d54:	d81e      	bhi.n	8001d94 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	3b3c      	subs	r3, #60	@ 0x3c
 8001d6a:	221f      	movs	r2, #31
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4019      	ands	r1, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	3b3c      	subs	r3, #60	@ 0x3c
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d92:	e01d      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	3b5a      	subs	r3, #90	@ 0x5a
 8001da8:	221f      	movs	r2, #31
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4019      	ands	r1, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	3b5a      	subs	r3, #90	@ 0x5a
 8001dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80e5 	bne.w	8001faa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d91c      	bls.n	8001e22 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6999      	ldr	r1, [r3, #24]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	3b1e      	subs	r3, #30
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4019      	ands	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6898      	ldr	r0, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	3b1e      	subs	r3, #30
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	619a      	str	r2, [r3, #24]
 8001e20:	e019      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6959      	ldr	r1, [r3, #20]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	2207      	movs	r2, #7
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4019      	ands	r1, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6898      	ldr	r0, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d84f      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0x28c>
 8001e78:	a201      	add	r2, pc, #4	@ (adr r2, 8001e80 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001e91 	.word	0x08001e91
 8001e84:	08001eb3 	.word	0x08001eb3
 8001e88:	08001ed5 	.word	0x08001ed5
 8001e8c:	08001ef7 	.word	0x08001ef7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e96:	4b97      	ldr	r3, [pc, #604]	@ (80020f4 <HAL_ADC_ConfigChannel+0x468>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	0691      	lsls	r1, r2, #26
 8001ea0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001eae:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eb0:	e07b      	b.n	8001faa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001eb8:	4b8e      	ldr	r3, [pc, #568]	@ (80020f4 <HAL_ADC_ConfigChannel+0x468>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	0691      	lsls	r1, r2, #26
 8001ec2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ed0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ed2:	e06a      	b.n	8001faa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001eda:	4b86      	ldr	r3, [pc, #536]	@ (80020f4 <HAL_ADC_ConfigChannel+0x468>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	0691      	lsls	r1, r2, #26
 8001ee4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ef2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ef4:	e059      	b.n	8001faa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001efc:	4b7d      	ldr	r3, [pc, #500]	@ (80020f4 <HAL_ADC_ConfigChannel+0x468>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	0691      	lsls	r1, r2, #26
 8001f06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001f14:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f16:	e048      	b.n	8001faa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f3a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	069b      	lsls	r3, r3, #26
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f5e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	069b      	lsls	r3, r3, #26
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f82:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001fa8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x33e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x33e>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x340>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 80fe 	bne.w	80021ce <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d00f      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43da      	mvns	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001ff8:	e049      	b.n	800208e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2201      	movs	r2, #1
 8002008:	409a      	lsls	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b09      	cmp	r3, #9
 800201a:	d91c      	bls.n	8002056 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6999      	ldr	r1, [r3, #24]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	3b1b      	subs	r3, #27
 800202e:	2207      	movs	r2, #7
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4019      	ands	r1, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6898      	ldr	r0, [r3, #8]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	3b1b      	subs	r3, #27
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	619a      	str	r2, [r3, #24]
 8002054:	e01b      	b.n	800208e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6959      	ldr	r1, [r3, #20]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	2207      	movs	r2, #7
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	4019      	ands	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6898      	ldr	r0, [r3, #8]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	fa00 f203 	lsl.w	r2, r0, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <HAL_ADC_ConfigChannel+0x46c>)
 8002090:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b10      	cmp	r3, #16
 8002098:	d105      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800209a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d014      	beq.n	80020d0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020aa:	2b11      	cmp	r3, #17
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020be:	2b12      	cmp	r3, #18
 80020c0:	f040 8085 	bne.w	80021ce <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d17e      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10c      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x470>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x470>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e004      	b.n	80020fe <HAL_ADC_ConfigChannel+0x472>
 80020f4:	83fff000 	.word	0x83fff000
 80020f8:	50000300 	.word	0x50000300
 80020fc:	2300      	movs	r3, #0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d150      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002102:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002104:	2b00      	cmp	r3, #0
 8002106:	d010      	beq.n	800212a <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x498>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x498>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_ADC_ConfigChannel+0x49a>
 8002124:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	d13c      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b10      	cmp	r3, #16
 8002130:	d11d      	bne.n	800216e <HAL_ADC_ConfigChannel+0x4e2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800213a:	d118      	bne.n	800216e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800213c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002146:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002148:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <HAL_ADC_ConfigChannel+0x55c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a27      	ldr	r2, [pc, #156]	@ (80021ec <HAL_ADC_ConfigChannel+0x560>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9a      	lsrs	r2, r3, #18
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215e:	e002      	b.n	8002166 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	3b01      	subs	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800216c:	e02e      	b.n	80021cc <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b11      	cmp	r3, #17
 8002174:	d10b      	bne.n	800218e <HAL_ADC_ConfigChannel+0x502>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800217e:	d106      	bne.n	800218e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800218a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800218c:	e01e      	b.n	80021cc <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b12      	cmp	r3, #18
 8002194:	d11a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800219e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021a0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021a2:	e013      	b.n	80021cc <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f043 0220 	orr.w	r2, r3, #32
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021b6:	e00a      	b.n	80021ce <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021ca:	e000      	b.n	80021ce <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021cc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021da:	4618      	mov	r0, r3
 80021dc:	376c      	adds	r7, #108	@ 0x6c
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000010 	.word	0x20000010
 80021ec:	431bde83 	.word	0x431bde83

080021f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <ADC_Enable+0x2c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <ADC_Enable+0x2c>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <ADC_Enable+0x2e>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d143      	bne.n	80022aa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <ADC_Enable+0xc4>)
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f043 0210 	orr.w	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e02f      	b.n	80022ac <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800225c:	f7ff fa26 	bl	80016ac <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002262:	e01b      	b.n	800229c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002264:	f7ff fa22 	bl	80016ac <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d914      	bls.n	800229c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d00d      	beq.n	800229c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f043 0210 	orr.w	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e007      	b.n	80022ac <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d1dc      	bne.n	8002264 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	8000003f 	.word	0x8000003f

080022b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <ADC_Disable+0x2c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <ADC_Disable+0x2c>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <ADC_Disable+0x2e>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d047      	beq.n	800237a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030d 	and.w	r3, r3, #13
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10f      	bne.n	8002318 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0202 	orr.w	r2, r2, #2
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2203      	movs	r2, #3
 800230e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002310:	f7ff f9cc 	bl	80016ac <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002316:	e029      	b.n	800236c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e023      	b.n	800237c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002334:	f7ff f9ba 	bl	80016ac <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d914      	bls.n	800236c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10d      	bne.n	800236c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e007      	b.n	800237c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d0dc      	beq.n	8002334 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	@ (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff3e 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff31 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa2 	bl	80024e0 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b6:	e14e      	b.n	8002856 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8140 	beq.w	8002850 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d005      	beq.n	80025e8 <HAL_GPIO_Init+0x40>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d130      	bne.n	800264a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261e:	2201      	movs	r2, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0201 	and.w	r2, r3, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b03      	cmp	r3, #3
 8002654:	d017      	beq.n	8002686 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d123      	bne.n	80026da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	6939      	ldr	r1, [r7, #16]
 80026d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0203 	and.w	r2, r3, #3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 809a 	beq.w	8002850 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271c:	4b55      	ldr	r3, [pc, #340]	@ (8002874 <HAL_GPIO_Init+0x2cc>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4a54      	ldr	r2, [pc, #336]	@ (8002874 <HAL_GPIO_Init+0x2cc>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <HAL_GPIO_Init+0x2cc>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002734:	4a50      	ldr	r2, [pc, #320]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800275e:	d013      	beq.n	8002788 <HAL_GPIO_Init+0x1e0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a46      	ldr	r2, [pc, #280]	@ (800287c <HAL_GPIO_Init+0x2d4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00d      	beq.n	8002784 <HAL_GPIO_Init+0x1dc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a45      	ldr	r2, [pc, #276]	@ (8002880 <HAL_GPIO_Init+0x2d8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <HAL_GPIO_Init+0x1d8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a44      	ldr	r2, [pc, #272]	@ (8002884 <HAL_GPIO_Init+0x2dc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_GPIO_Init+0x1d4>
 8002778:	2303      	movs	r3, #3
 800277a:	e006      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 800277c:	2305      	movs	r3, #5
 800277e:	e004      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 8002780:	2302      	movs	r3, #2
 8002782:	e002      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 8002788:	2300      	movs	r3, #0
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	f002 0203 	and.w	r2, r2, #3
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	4093      	lsls	r3, r2
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800279a:	4937      	ldr	r1, [pc, #220]	@ (8002878 <HAL_GPIO_Init+0x2d0>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a8:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027f6:	4a24      	ldr	r2, [pc, #144]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fc:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800284a:	4a0f      	ldr	r2, [pc, #60]	@ (8002888 <HAL_GPIO_Init+0x2e0>)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f aea9 	bne.w	80025b8 <HAL_GPIO_Init+0x10>
  }
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	48000400 	.word	0x48000400
 8002880:	48000800 	.word	0x48000800
 8002884:	48000c00 	.word	0x48000c00
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002902:	4a05      	ldr	r2, [pc, #20]	@ (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f806 	bl	800291c <HAL_GPIO_EXTI_Callback>
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e08d      	b.n	8002a60 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d106      	bne.n	800295e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fe fb73 	bl	8001044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2224      	movs	r2, #36	@ 0x24
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0201 	bic.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002982:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002992:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	e006      	b.n	80029ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d108      	bne.n	80029d4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	e007      	b.n	80029e4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a06:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69d9      	ldr	r1, [r3, #28]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	817b      	strh	r3, [r7, #10]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 80fd 	bne.w	8002c84 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2C_Master_Transmit+0x30>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0f6      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x21e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fe04 	bl	80016ac <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2319      	movs	r3, #25
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f914 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0e1      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	@ 0x21
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2210      	movs	r2, #16
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2bff      	cmp	r3, #255	@ 0xff
 8002af2:	d906      	bls.n	8002b02 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	22ff      	movs	r2, #255	@ 0xff
 8002af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002afa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e007      	b.n	8002b12 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b10:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d024      	beq.n	8002b64 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	8979      	ldrh	r1, [r7, #10]
 8002b56:	4b4e      	ldr	r3, [pc, #312]	@ (8002c90 <HAL_I2C_Master_Transmit+0x228>)
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fa83 	bl	8003068 <I2C_TransferConfig>
 8002b62:	e066      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	8979      	ldrh	r1, [r7, #10]
 8002b6c:	4b48      	ldr	r3, [pc, #288]	@ (8002c90 <HAL_I2C_Master_Transmit+0x228>)
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa78 	bl	8003068 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b78:	e05b      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f907 	bl	8002d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07b      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d034      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0x1ca>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d130      	bne.n	8002c32 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2180      	movs	r1, #128	@ 0x80
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f880 	bl	8002ce0 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e04d      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2bff      	cmp	r3, #255	@ 0xff
 8002bf2:	d90e      	bls.n	8002c12 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	22ff      	movs	r2, #255	@ 0xff
 8002bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	2300      	movs	r3, #0
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fa2c 	bl	8003068 <I2C_TransferConfig>
 8002c10:	e00f      	b.n	8002c32 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	8979      	ldrh	r1, [r7, #10]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fa1b 	bl	8003068 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d19e      	bne.n	8002b7a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	6a39      	ldr	r1, [r7, #32]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f8ed 	bl	8002e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e01a      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2220      	movs	r2, #32
 8002c56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_I2C_Master_Transmit+0x22c>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	80002000 	.word	0x80002000
 8002c94:	fe00e800 	.word	0xfe00e800

08002c98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d103      	bne.n	8002cb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d007      	beq.n	8002cd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	619a      	str	r2, [r3, #24]
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf0:	e03b      	b.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f8d6 	bl	8002ea8 <I2C_IsErrorOccurred>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e041      	b.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d02d      	beq.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe fccd 	bl	80016ac <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d122      	bne.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d113      	bne.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4013      	ands	r3, r2
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	bf0c      	ite	eq
 8002d7a:	2301      	moveq	r3, #1
 8002d7c:	2300      	movne	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d0b4      	beq.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d9e:	e033      	b.n	8002e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f87f 	bl	8002ea8 <I2C_IsErrorOccurred>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e031      	b.n	8002e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d025      	beq.n	8002e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbc:	f7fe fc76 	bl	80016ac <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11a      	bne.n	8002e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d013      	beq.n	8002e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e007      	b.n	8002e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d1c4      	bne.n	8002da0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2c:	e02f      	b.n	8002e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f838 	bl	8002ea8 <I2C_IsErrorOccurred>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e02d      	b.n	8002e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7fe fc33 	bl	80016ac <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d11a      	bne.n	8002e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d013      	beq.n	8002e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e007      	b.n	8002e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d1c8      	bne.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	@ 0x28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d068      	beq.n	8002fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002edc:	e049      	b.n	8002f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d045      	beq.n	8002f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7fe fbe1 	bl	80016ac <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <I2C_IsErrorOccurred+0x54>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d13a      	bne.n	8002f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f1e:	d121      	bne.n	8002f64 <I2C_IsErrorOccurred+0xbc>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f26:	d01d      	beq.n	8002f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d01a      	beq.n	8002f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f3e:	f7fe fbb5 	bl	80016ac <HAL_GetTick>
 8002f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f44:	e00e      	b.n	8002f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f46:	f7fe fbb1 	bl	80016ac <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b19      	cmp	r3, #25
 8002f52:	d907      	bls.n	8002f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f043 0320 	orr.w	r3, r3, #32
 8002f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f62:	e006      	b.n	8002f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d1e9      	bne.n	8002f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d003      	beq.n	8002f88 <I2C_IsErrorOccurred+0xe0>
 8002f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0aa      	beq.n	8002ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2220      	movs	r2, #32
 8002f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800300c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01c      	beq.n	8003056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fe3b 	bl	8002c98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <I2C_IsErrorOccurred+0x1bc>)
 800302e:	400b      	ands	r3, r1
 8003030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	431a      	orrs	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800305a:	4618      	mov	r0, r3
 800305c:	3728      	adds	r7, #40	@ 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	fe00e800 	.word	0xfe00e800

08003068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	4613      	mov	r3, r2
 8003078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003080:	7a7b      	ldrb	r3, [r7, #9]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	4313      	orrs	r3, r2
 8003092:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	0d5b      	lsrs	r3, r3, #21
 80030a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030a6:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <I2C_TransferConfig+0x60>)
 80030a8:	430b      	orrs	r3, r1
 80030aa:	43db      	mvns	r3, r3
 80030ac:	ea02 0103 	and.w	r1, r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	03ff63ff 	.word	0x03ff63ff

080030cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d138      	bne.n	8003154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e032      	b.n	8003156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	@ 0x24
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800311e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d139      	bne.n	80031ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003182:	2302      	movs	r3, #2
 8003184:	e033      	b.n	80031ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2224      	movs	r2, #36	@ 0x24
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003202:	af00      	add	r7, sp, #0
 8003204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f001 b823 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 817d 	beq.w	8003532 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003238:	4bbc      	ldr	r3, [pc, #752]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b04      	cmp	r3, #4
 8003242:	d00c      	beq.n	800325e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003244:	4bb9      	ldr	r3, [pc, #740]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d15c      	bne.n	800330a <HAL_RCC_OscConfig+0x10e>
 8003250:	4bb6      	ldr	r3, [pc, #728]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325c:	d155      	bne.n	800330a <HAL_RCC_OscConfig+0x10e>
 800325e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003262:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003272:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_RCC_OscConfig+0x94>
 800328a:	4ba8      	ldr	r3, [pc, #672]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	e015      	b.n	80032bc <HAL_RCC_OscConfig+0xc0>
 8003290:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003294:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80032a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80032ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80032b8:	4b9c      	ldr	r3, [pc, #624]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80032c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80032c8:	fa92 f2a2 	rbit	r2, r2
 80032cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80032d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80032d4:	fab2 f282 	clz	r2, r2
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	f042 0220 	orr.w	r2, r2, #32
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f002 021f 	and.w	r2, r2, #31
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 811f 	beq.w	8003530 <HAL_RCC_OscConfig+0x334>
 80032f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 8116 	bne.w	8003530 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f000 bfaf 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x12e>
 800331c:	4b83      	ldr	r3, [pc, #524]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a82      	ldr	r2, [pc, #520]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e036      	b.n	8003398 <HAL_RCC_OscConfig+0x19c>
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x158>
 800333a:	4b7c      	ldr	r3, [pc, #496]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7b      	ldr	r2, [pc, #492]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b79      	ldr	r3, [pc, #484]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a78      	ldr	r2, [pc, #480]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800334c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e021      	b.n	8003398 <HAL_RCC_OscConfig+0x19c>
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x184>
 8003366:	4b71      	ldr	r3, [pc, #452]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a70      	ldr	r2, [pc, #448]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b6e      	ldr	r3, [pc, #440]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6d      	ldr	r2, [pc, #436]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0x19c>
 8003380:	4b6a      	ldr	r3, [pc, #424]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a69      	ldr	r2, [pc, #420]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b67      	ldr	r3, [pc, #412]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a66      	ldr	r2, [pc, #408]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003396:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003398:	4b64      	ldr	r3, [pc, #400]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	f023 020f 	bic.w	r2, r3, #15
 80033a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	495f      	ldr	r1, [pc, #380]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d059      	beq.n	8003476 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fe f973 	bl	80016ac <HAL_GetTick>
 80033c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe f96e 	bl	80016ac <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	@ 0x64
 80033da:	d902      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	f000 bf43 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
 80033e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80033f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_RCC_OscConfig+0x218>
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e015      	b.n	8003440 <HAL_RCC_OscConfig+0x244>
 8003414:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003418:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003428:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800342c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003430:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800343c:	4b3b      	ldr	r3, [pc, #236]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003444:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003448:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800344c:	fa92 f2a2 	rbit	r2, r2
 8003450:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003454:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f042 0220 	orr.w	r2, r2, #32
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f002 021f 	and.w	r2, r2, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ab      	beq.n	80033cc <HAL_RCC_OscConfig+0x1d0>
 8003474:	e05d      	b.n	8003532 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe f919 	bl	80016ac <HAL_GetTick>
 800347a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003480:	f7fe f914 	bl	80016ac <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	@ 0x64
 800348e:	d902      	bls.n	8003496 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	f000 bee9 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
 8003496:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800349a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80034aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2cc>
 80034c2:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	e015      	b.n	80034f4 <HAL_RCC_OscConfig+0x2f8>
 80034c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034cc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80034dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034e0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80034e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80034f0:	4b0e      	ldr	r3, [pc, #56]	@ (800352c <HAL_RCC_OscConfig+0x330>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034f8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80034fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003500:	fa92 f2a2 	rbit	r2, r2
 8003504:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003508:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0220 	orr.w	r2, r2, #32
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ab      	bne.n	8003480 <HAL_RCC_OscConfig+0x284>
 8003528:	e003      	b.n	8003532 <HAL_RCC_OscConfig+0x336>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 817d 	beq.w	8003842 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003548:	4ba6      	ldr	r3, [pc, #664]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003554:	4ba3      	ldr	r3, [pc, #652]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d172      	bne.n	8003646 <HAL_RCC_OscConfig+0x44a>
 8003560:	4ba0      	ldr	r3, [pc, #640]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d16c      	bne.n	8003646 <HAL_RCC_OscConfig+0x44a>
 800356c:	2302      	movs	r3, #2
 800356e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800357e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_RCC_OscConfig+0x3a0>
 8003596:	4b93      	ldr	r3, [pc, #588]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	e013      	b.n	80035c4 <HAL_RCC_OscConfig+0x3c8>
 800359c:	2302      	movs	r3, #2
 800359e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80035ae:	2302      	movs	r3, #2
 80035b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80035b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80035c0:	4b88      	ldr	r3, [pc, #544]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	2202      	movs	r2, #2
 80035c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80035ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80035ce:	fa92 f2a2 	rbit	r2, r2
 80035d2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80035d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0220 	orr.w	r2, r2, #32
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCC_OscConfig+0x410>
 80035f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d002      	beq.n	800360c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f000 be2e 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b75      	ldr	r3, [pc, #468]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003618:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	21f8      	movs	r1, #248	@ 0xf8
 8003622:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800362a:	fa91 f1a1 	rbit	r1, r1
 800362e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003632:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003636:	fab1 f181 	clz	r1, r1
 800363a:	b2c9      	uxtb	r1, r1
 800363c:	408b      	lsls	r3, r1
 800363e:	4969      	ldr	r1, [pc, #420]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003644:	e0fd      	b.n	8003842 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8088 	beq.w	8003768 <HAL_RCC_OscConfig+0x56c>
 8003658:	2301      	movs	r3, #1
 800365a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800366a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003678:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	461a      	mov	r2, r3
 8003680:	2301      	movs	r3, #1
 8003682:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe f812 	bl	80016ac <HAL_GetTick>
 8003688:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368e:	f7fe f80d 	bl	80016ac <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	f000 bde2 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80036b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4d8>
 80036ce:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	e013      	b.n	80036fc <HAL_RCC_OscConfig+0x500>
 80036d4:	2302      	movs	r3, #2
 80036d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80036e6:	2302      	movs	r3, #2
 80036e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80036ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80036f8:	4b3a      	ldr	r3, [pc, #232]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	2202      	movs	r2, #2
 80036fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003702:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003706:	fa92 f2a2 	rbit	r2, r2
 800370a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800370e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	f042 0220 	orr.w	r2, r2, #32
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f002 021f 	and.w	r2, r2, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0af      	beq.n	800368e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4b2d      	ldr	r3, [pc, #180]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	21f8      	movs	r1, #248	@ 0xf8
 8003744:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800374c:	fa91 f1a1 	rbit	r1, r1
 8003750:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003754:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003758:	fab1 f181 	clz	r1, r1
 800375c:	b2c9      	uxtb	r1, r1
 800375e:	408b      	lsls	r3, r1
 8003760:	4920      	ldr	r1, [pc, #128]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
 8003766:	e06c      	b.n	8003842 <HAL_RCC_OscConfig+0x646>
 8003768:	2301      	movs	r3, #1
 800376a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800377a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003788:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	461a      	mov	r2, r3
 8003790:	2300      	movs	r3, #0
 8003792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd ff8a 	bl	80016ac <HAL_GetTick>
 8003798:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379e:	f7fd ff85 	bl	80016ac <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d902      	bls.n	80037b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	f000 bd5a 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80037c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d104      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5ec>
 80037de:	4b01      	ldr	r3, [pc, #4]	@ (80037e4 <HAL_RCC_OscConfig+0x5e8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	e015      	b.n	8003810 <HAL_RCC_OscConfig+0x614>
 80037e4:	40021000 	.word	0x40021000
 80037e8:	2302      	movs	r3, #2
 80037ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80037fa:	2302      	movs	r3, #2
 80037fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003800:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800380c:	4bc8      	ldr	r3, [pc, #800]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	2202      	movs	r2, #2
 8003812:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003816:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800381a:	fa92 f2a2 	rbit	r2, r2
 800381e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003822:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003826:	fab2 f282 	clz	r2, r2
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f042 0220 	orr.w	r2, r2, #32
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f002 021f 	and.w	r2, r2, #31
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ad      	bne.n	800379e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8110 	beq.w	8003a78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d079      	beq.n	800395c <HAL_RCC_OscConfig+0x760>
 8003868:	2301      	movs	r3, #1
 800386a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800387a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	4bab      	ldr	r3, [pc, #684]	@ (8003b34 <HAL_RCC_OscConfig+0x938>)
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	461a      	mov	r2, r3
 800388e:	2301      	movs	r3, #1
 8003890:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fd ff0b 	bl	80016ac <HAL_GetTick>
 8003896:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389c:	f7fd ff06 	bl	80016ac <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d902      	bls.n	80038b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	f000 bcdb 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
 80038b2:	2302      	movs	r3, #2
 80038b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80038cc:	2202      	movs	r2, #2
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038f0:	2202      	movs	r2, #2
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800390a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390c:	4b88      	ldr	r3, [pc, #544]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 800390e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003914:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003918:	2102      	movs	r1, #2
 800391a:	6019      	str	r1, [r3, #0]
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f1a3 	rbit	r1, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003932:	6019      	str	r1, [r3, #0]
  return result;
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	2101      	movs	r1, #1
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0a0      	beq.n	800389c <HAL_RCC_OscConfig+0x6a0>
 800395a:	e08d      	b.n	8003a78 <HAL_RCC_OscConfig+0x87c>
 800395c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003960:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fa93 f2a3 	rbit	r2, r3
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800397e:	601a      	str	r2, [r3, #0]
  return result;
 8003980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003984:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003988:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	4b68      	ldr	r3, [pc, #416]	@ (8003b34 <HAL_RCC_OscConfig+0x938>)
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fd fe85 	bl	80016ac <HAL_GetTick>
 80039a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fd fe80 	bl	80016ac <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d902      	bls.n	80039be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	f000 bc55 	b.w	8004268 <HAL_RCC_OscConfig+0x106c>
 80039be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039c6:	2202      	movs	r2, #2
 80039c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80039ea:	2202      	movs	r2, #2
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a0e:	2202      	movs	r2, #2
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2a:	4b41      	ldr	r3, [pc, #260]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 8003a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a36:	2102      	movs	r1, #2
 8003a38:	6019      	str	r1, [r3, #0]
 8003a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	fa93 f1a3 	rbit	r1, r3
 8003a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a50:	6019      	str	r1, [r3, #0]
  return result;
 8003a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	fab3 f383 	clz	r3, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d197      	bne.n	80039a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 81a1 	beq.w	8003dd0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a94:	4b26      	ldr	r3, [pc, #152]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d116      	bne.n	8003ace <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4a22      	ldr	r2, [pc, #136]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	61d3      	str	r3, [r2, #28]
 8003aac:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003ac6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b1a      	ldr	r3, [pc, #104]	@ (8003b38 <HAL_RCC_OscConfig+0x93c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11a      	bne.n	8003b10 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b17      	ldr	r3, [pc, #92]	@ (8003b38 <HAL_RCC_OscConfig+0x93c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <HAL_RCC_OscConfig+0x93c>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd fde1 	bl	80016ac <HAL_GetTick>
 8003aea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	e009      	b.n	8003b04 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fd fddc 	bl	80016ac <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	@ 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e3b1      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <HAL_RCC_OscConfig+0x93c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCC_OscConfig+0x940>
 8003b20:	4b03      	ldr	r3, [pc, #12]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a02      	ldr	r2, [pc, #8]	@ (8003b30 <HAL_RCC_OscConfig+0x934>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	e03c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x9ac>
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	10908120 	.word	0x10908120
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x96a>
 8003b4c:	4bc1      	ldr	r3, [pc, #772]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4ac0      	ldr	r2, [pc, #768]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	4bbe      	ldr	r3, [pc, #760]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4abd      	ldr	r2, [pc, #756]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e020      	b.n	8003ba8 <HAL_RCC_OscConfig+0x9ac>
 8003b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x994>
 8003b76:	4bb7      	ldr	r3, [pc, #732]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4ab6      	ldr	r2, [pc, #728]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	6213      	str	r3, [r2, #32]
 8003b82:	4bb4      	ldr	r3, [pc, #720]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4ab3      	ldr	r2, [pc, #716]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x9ac>
 8003b90:	4bb0      	ldr	r3, [pc, #704]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4aaf      	ldr	r2, [pc, #700]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	4bad      	ldr	r3, [pc, #692]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4aac      	ldr	r2, [pc, #688]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003ba2:	f023 0304 	bic.w	r3, r3, #4
 8003ba6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8081 	beq.w	8003cbc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fd fd77 	bl	80016ac <HAL_GetTick>
 8003bbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fd fd72 	bl	80016ac <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e345      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
 8003bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003be4:	2202      	movs	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c08:	2202      	movs	r2, #2
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c10:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c22:	601a      	str	r2, [r3, #0]
  return result;
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d102      	bne.n	8003c48 <HAL_RCC_OscConfig+0xa4c>
 8003c42:	4b84      	ldr	r3, [pc, #528]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	e013      	b.n	8003c70 <HAL_RCC_OscConfig+0xa74>
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c50:	2202      	movs	r2, #2
 8003c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	4b79      	ldr	r3, [pc, #484]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003c78:	2102      	movs	r1, #2
 8003c7a:	6011      	str	r1, [r2, #0]
 8003c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	fa92 f1a2 	rbit	r1, r2
 8003c8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c8e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003c92:	6011      	str	r1, [r2, #0]
  return result;
 8003c94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c98:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	fab2 f282 	clz	r2, r2
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f002 021f 	and.w	r2, r2, #31
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d084      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x9c8>
 8003cba:	e07f      	b.n	8003dbc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbc:	f7fd fcf6 	bl	80016ac <HAL_GetTick>
 8003cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc4:	e00b      	b.n	8003cde <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd fcf1 	bl	80016ac <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e2c4      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
 8003cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	fa93 f2a3 	rbit	r2, r3
 8003cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d12:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d24:	601a      	str	r2, [r3, #0]
  return result;
 8003d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f043 0302 	orr.w	r3, r3, #2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_OscConfig+0xb4e>
 8003d44:	4b43      	ldr	r3, [pc, #268]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	e013      	b.n	8003d72 <HAL_RCC_OscConfig+0xb76>
 8003d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d52:	2202      	movs	r2, #2
 8003d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	fa93 f2a3 	rbit	r2, r3
 8003d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d68:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d76:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d82:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	fa92 f1a2 	rbit	r1, r2
 8003d8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d90:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003d94:	6011      	str	r1, [r2, #0]
  return result;
 8003d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d9a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	fab2 f282 	clz	r2, r2
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f002 021f 	and.w	r2, r2, #31
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f202 	lsl.w	r2, r1, r2
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d184      	bne.n	8003cc6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dbc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b23      	ldr	r3, [pc, #140]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8242 	beq.w	8004266 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <HAL_RCC_OscConfig+0xc58>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	f000 8213 	beq.w	8004216 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f040 8162 	bne.w	80040c6 <HAL_RCC_OscConfig+0xeca>
 8003e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e06:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e14:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	fa93 f2a3 	rbit	r2, r3
 8003e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e22:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e26:	601a      	str	r2, [r3, #0]
  return result;
 8003e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	461a      	mov	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd fc30 	bl	80016ac <HAL_GetTick>
 8003e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e50:	e00c      	b.n	8003e6c <HAL_RCC_OscConfig+0xc70>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fd fc28 	bl	80016ac <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1fd      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
 8003e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e70:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003e90:	601a      	str	r2, [r3, #0]
  return result;
 8003e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e96:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003e9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d102      	bne.n	8003eb6 <HAL_RCC_OscConfig+0xcba>
 8003eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8004174 <HAL_RCC_OscConfig+0xf78>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	e027      	b.n	8003f06 <HAL_RCC_OscConfig+0xd0a>
 8003eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ebe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	fa93 f2a3 	rbit	r2, r3
 8003ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ee4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	fa93 f2a3 	rbit	r2, r3
 8003ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	4b9c      	ldr	r3, [pc, #624]	@ (8004174 <HAL_RCC_OscConfig+0xf78>)
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f0a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f12:	6011      	str	r1, [r2, #0]
 8003f14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f18:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	fa92 f1a2 	rbit	r1, r2
 8003f22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f26:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f2a:	6011      	str	r1, [r2, #0]
  return result;
 8003f2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f30:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	fab2 f282 	clz	r2, r2
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	f042 0220 	orr.w	r2, r2, #32
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f002 021f 	and.w	r2, r2, #31
 8003f46:	2101      	movs	r1, #1
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d182      	bne.n	8003e58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f52:	4b88      	ldr	r3, [pc, #544]	@ (8004174 <HAL_RCC_OscConfig+0xf78>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	430b      	orrs	r3, r1
 8003f74:	497f      	ldr	r1, [pc, #508]	@ (8004174 <HAL_RCC_OscConfig+0xf78>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003f82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	fa93 f2a3 	rbit	r2, r3
 8003f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003f9e:	601a      	str	r2, [r3, #0]
  return result;
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fa8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fb74 	bl	80016ac <HAL_GetTick>
 8003fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc8:	e009      	b.n	8003fde <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fd fb6f 	bl	80016ac <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e144      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
 8003fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003fe6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004002:	601a      	str	r2, [r3, #0]
  return result;
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800400c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d102      	bne.n	8004028 <HAL_RCC_OscConfig+0xe2c>
 8004022:	4b54      	ldr	r3, [pc, #336]	@ (8004174 <HAL_RCC_OscConfig+0xf78>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	e027      	b.n	8004078 <HAL_RCC_OscConfig+0xe7c>
 8004028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004030:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	fa93 f2a3 	rbit	r2, r3
 8004044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004048:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004052:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004056:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004060:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	fa93 f2a3 	rbit	r2, r3
 800406a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	4b3f      	ldr	r3, [pc, #252]	@ (8004174 <HAL_RCC_OscConfig+0xf78>)
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800407c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004080:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800408a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	fa92 f1a2 	rbit	r1, r2
 8004094:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004098:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800409c:	6011      	str	r1, [r2, #0]
  return result;
 800409e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	fab2 f282 	clz	r2, r2
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	f042 0220 	orr.w	r2, r2, #32
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	f002 021f 	and.w	r2, r2, #31
 80040b8:	2101      	movs	r1, #1
 80040ba:	fa01 f202 	lsl.w	r2, r1, r2
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d082      	beq.n	8003fca <HAL_RCC_OscConfig+0xdce>
 80040c4:	e0cf      	b.n	8004266 <HAL_RCC_OscConfig+0x106a>
 80040c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80040ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	fa93 f2a3 	rbit	r2, r3
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80040ea:	601a      	str	r2, [r3, #0]
  return result;
 80040ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80040f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004100:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	461a      	mov	r2, r3
 8004108:	2300      	movs	r3, #0
 800410a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fd face 	bl	80016ac <HAL_GetTick>
 8004110:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004114:	e009      	b.n	800412a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004116:	f7fd fac9 	bl	80016ac <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e09e      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
 800412a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	fa93 f2a3 	rbit	r2, r3
 8004146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800414e:	601a      	str	r2, [r3, #0]
  return result;
 8004150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004154:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004158:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d104      	bne.n	8004178 <HAL_RCC_OscConfig+0xf7c>
 800416e:	4b01      	ldr	r3, [pc, #4]	@ (8004174 <HAL_RCC_OscConfig+0xf78>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	e029      	b.n	80041c8 <HAL_RCC_OscConfig+0xfcc>
 8004174:	40021000 	.word	0x40021000
 8004178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004180:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	fa93 f2a3 	rbit	r2, r3
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	fa93 f2a3 	rbit	r2, r3
 80041ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004274 <HAL_RCC_OscConfig+0x1078>)
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041cc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80041d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80041d4:	6011      	str	r1, [r2, #0]
 80041d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	fa92 f1a2 	rbit	r1, r2
 80041e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80041ec:	6011      	str	r1, [r2, #0]
  return result;
 80041ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	fab2 f282 	clz	r2, r2
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	f042 0220 	orr.w	r2, r2, #32
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	f002 021f 	and.w	r2, r2, #31
 8004208:	2101      	movs	r1, #1
 800420a:	fa01 f202 	lsl.w	r2, r1, r2
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d180      	bne.n	8004116 <HAL_RCC_OscConfig+0xf1a>
 8004214:	e027      	b.n	8004266 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e01e      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800422a:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <HAL_RCC_OscConfig+0x1078>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004232:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004236:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800423a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	429a      	cmp	r2, r3
 8004248:	d10b      	bne.n	8004262 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800424a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800424e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800425e:	429a      	cmp	r2, r3
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000

08004278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b09e      	sub	sp, #120	@ 0x78
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e162      	b.n	8004556 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b90      	ldr	r3, [pc, #576]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d910      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b8d      	ldr	r3, [pc, #564]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0207 	bic.w	r2, r3, #7
 80042a6:	498b      	ldr	r1, [pc, #556]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b89      	ldr	r3, [pc, #548]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e14a      	b.n	8004556 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042cc:	4b82      	ldr	r3, [pc, #520]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	497f      	ldr	r1, [pc, #508]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80dc 	beq.w	80044a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d13c      	bne.n	800436e <HAL_RCC_ClockConfig+0xf6>
 80042f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d102      	bne.n	800431e <HAL_RCC_ClockConfig+0xa6>
 8004318:	4b6f      	ldr	r3, [pc, #444]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	e00f      	b.n	800433e <HAL_RCC_ClockConfig+0xc6>
 800431e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004322:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004326:	fa93 f3a3 	rbit	r3, r3
 800432a:	667b      	str	r3, [r7, #100]	@ 0x64
 800432c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004330:	663b      	str	r3, [r7, #96]	@ 0x60
 8004332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800433a:	4b67      	ldr	r3, [pc, #412]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004342:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004346:	fa92 f2a2 	rbit	r2, r2
 800434a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800434c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800434e:	fab2 f282 	clz	r2, r2
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	f042 0220 	orr.w	r2, r2, #32
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f002 021f 	and.w	r2, r2, #31
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d17b      	bne.n	8004462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0f3      	b.n	8004556 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d13c      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x178>
 8004376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800437a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d102      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x128>
 800439a:	4b4f      	ldr	r3, [pc, #316]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	e00f      	b.n	80043c0 <HAL_RCC_ClockConfig+0x148>
 80043a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043bc:	4b46      	ldr	r3, [pc, #280]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043c8:	fa92 f2a2 	rbit	r2, r2
 80043cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80043ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043d0:	fab2 f282 	clz	r2, r2
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f042 0220 	orr.w	r2, r2, #32
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	f002 021f 	and.w	r2, r2, #31
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f202 	lsl.w	r2, r1, r2
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d13a      	bne.n	8004462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0b2      	b.n	8004556 <HAL_RCC_ClockConfig+0x2de>
 80043f0:	2302      	movs	r3, #2
 80043f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d102      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e00d      	b.n	8004434 <HAL_RCC_ClockConfig+0x1bc>
 8004418:	2302      	movs	r3, #2
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
 8004424:	2302      	movs	r3, #2
 8004426:	623b      	str	r3, [r7, #32]
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	2202      	movs	r2, #2
 8004436:	61ba      	str	r2, [r7, #24]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	fa92 f2a2 	rbit	r2, r2
 800443e:	617a      	str	r2, [r7, #20]
  return result;
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	fab2 f282 	clz	r2, r2
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	f042 0220 	orr.w	r2, r2, #32
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	f002 021f 	and.w	r2, r2, #31
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f202 	lsl.w	r2, r1, r2
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e079      	b.n	8004556 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004462:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f023 0203 	bic.w	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	491a      	ldr	r1, [pc, #104]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004474:	f7fd f91a 	bl	80016ac <HAL_GetTick>
 8004478:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447a:	e00a      	b.n	8004492 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fd f916 	bl	80016ac <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e061      	b.n	8004556 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	4b11      	ldr	r3, [pc, #68]	@ (80044d8 <HAL_RCC_ClockConfig+0x260>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 020c 	and.w	r2, r3, #12
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d1eb      	bne.n	800447c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d214      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 0207 	bic.w	r2, r3, #7
 80044ba:	4906      	ldr	r1, [pc, #24]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b04      	ldr	r3, [pc, #16]	@ (80044d4 <HAL_RCC_ClockConfig+0x25c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e040      	b.n	8004556 <HAL_RCC_ClockConfig+0x2de>
 80044d4:	40022000 	.word	0x40022000
 80044d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004560 <HAL_RCC_ClockConfig+0x2e8>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	491a      	ldr	r1, [pc, #104]	@ (8004560 <HAL_RCC_ClockConfig+0x2e8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004506:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <HAL_RCC_ClockConfig+0x2e8>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4912      	ldr	r1, [pc, #72]	@ (8004560 <HAL_RCC_ClockConfig+0x2e8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800451a:	f000 f829 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 800451e:	4601      	mov	r1, r0
 8004520:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <HAL_RCC_ClockConfig+0x2e8>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004528:	22f0      	movs	r2, #240	@ 0xf0
 800452a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	fa92 f2a2 	rbit	r2, r2
 8004532:	60fa      	str	r2, [r7, #12]
  return result;
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	fab2 f282 	clz	r2, r2
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	40d3      	lsrs	r3, r2
 800453e:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <HAL_RCC_ClockConfig+0x2ec>)
 8004540:	5cd3      	ldrb	r3, [r2, r3]
 8004542:	fa21 f303 	lsr.w	r3, r1, r3
 8004546:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <HAL_RCC_ClockConfig+0x2f0>)
 8004548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800454a:	4b08      	ldr	r3, [pc, #32]	@ (800456c <HAL_RCC_ClockConfig+0x2f4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd f868 	bl	8001624 <HAL_InitTick>
  
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3778      	adds	r7, #120	@ 0x78
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	0800653c 	.word	0x0800653c
 8004568:	20000010 	.word	0x20000010
 800456c:	20000014 	.word	0x20000014

08004570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800458a:	4b1e      	ldr	r3, [pc, #120]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x94>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b04      	cmp	r3, #4
 8004598:	d002      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x30>
 800459a:	2b08      	cmp	r3, #8
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_GetSysClockFreq+0x36>
 800459e:	e026      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045a0:	4b19      	ldr	r3, [pc, #100]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x98>)
 80045a2:	613b      	str	r3, [r7, #16]
      break;
 80045a4:	e026      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	0c9b      	lsrs	r3, r3, #18
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	4a17      	ldr	r2, [pc, #92]	@ (800460c <HAL_RCC_GetSysClockFreq+0x9c>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80045b4:	4b13      	ldr	r3, [pc, #76]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x94>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	4a14      	ldr	r2, [pc, #80]	@ (8004610 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e004      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004614 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
      break;
 80045ec:	e002      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045ee:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x98>)
 80045f0:	613b      	str	r3, [r7, #16]
      break;
 80045f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f4:	693b      	ldr	r3, [r7, #16]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	007a1200 	.word	0x007a1200
 800460c:	08006554 	.word	0x08006554
 8004610:	08006564 	.word	0x08006564
 8004614:	003d0900 	.word	0x003d0900

08004618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800461c:	4b03      	ldr	r3, [pc, #12]	@ (800462c <HAL_RCC_GetHCLKFreq+0x14>)
 800461e:	681b      	ldr	r3, [r3, #0]
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000010 	.word	0x20000010

08004630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004636:	f7ff ffef 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 800463a:	4601      	mov	r1, r0
 800463c:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004644:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004648:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	fa92 f2a2 	rbit	r2, r2
 8004650:	603a      	str	r2, [r7, #0]
  return result;
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	fab2 f282 	clz	r2, r2
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	40d3      	lsrs	r3, r2
 800465c:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <HAL_RCC_GetPCLK1Freq+0x40>)
 800465e:	5cd3      	ldrb	r3, [r2, r3]
 8004660:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40021000 	.word	0x40021000
 8004670:	0800654c 	.word	0x0800654c

08004674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800467a:	f7ff ffcd 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 800467e:	4601      	mov	r1, r0
 8004680:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004688:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800468c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	fa92 f2a2 	rbit	r2, r2
 8004694:	603a      	str	r2, [r7, #0]
  return result;
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	fab2 f282 	clz	r2, r2
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	40d3      	lsrs	r3, r2
 80046a0:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046a2:	5cd3      	ldrb	r3, [r2, r3]
 80046a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000
 80046b4:	0800654c 	.word	0x0800654c

080046b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b092      	sub	sp, #72	@ 0x48
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80d4 	beq.w	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10e      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	61d3      	str	r3, [r2, #28]
 80046f4:	4b48      	ldr	r3, [pc, #288]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004706:	4b45      	ldr	r3, [pc, #276]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d118      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004712:	4b42      	ldr	r3, [pc, #264]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a41      	ldr	r2, [pc, #260]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fc ffc5 	bl	80016ac <HAL_GetTick>
 8004722:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	e008      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fc ffc1 	bl	80016ac <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b64      	cmp	r3, #100	@ 0x64
 8004732:	d901      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e14b      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	4b38      	ldr	r3, [pc, #224]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004744:	4b34      	ldr	r3, [pc, #208]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800474e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8084 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004760:	429a      	cmp	r2, r3
 8004762:	d07c      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004764:	4b2c      	ldr	r3, [pc, #176]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004772:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800477c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	4b26      	ldr	r3, [pc, #152]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	461a      	mov	r2, r3
 800478e:	2301      	movs	r3, #1
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80047a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047b6:	4a18      	ldr	r2, [pc, #96]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d04b      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c6:	f7fc ff71 	bl	80016ac <HAL_GetTick>
 80047ca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fc ff6d 	bl	80016ac <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e0f5      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80047e4:	2302      	movs	r3, #2
 80047e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f0:	2302      	movs	r3, #2
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	61fb      	str	r3, [r7, #28]
  return result;
 80047fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d108      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004812:	4b01      	ldr	r3, [pc, #4]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	e00d      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
 8004820:	10908100 	.word	0x10908100
 8004824:	2302      	movs	r3, #2
 8004826:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	4b69      	ldr	r3, [pc, #420]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	2202      	movs	r2, #2
 8004836:	613a      	str	r2, [r7, #16]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	fa92 f2a2 	rbit	r2, r2
 800483e:	60fa      	str	r2, [r7, #12]
  return result;
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	fab2 f282 	clz	r2, r2
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f002 021f 	and.w	r2, r2, #31
 8004852:	2101      	movs	r1, #1
 8004854:	fa01 f202 	lsl.w	r2, r1, r2
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0b7      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800485e:	4b5e      	ldr	r3, [pc, #376]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	495b      	ldr	r1, [pc, #364]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800486c:	4313      	orrs	r3, r2
 800486e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004870:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004878:	4b57      	ldr	r3, [pc, #348]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4a56      	ldr	r2, [pc, #344]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800487e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004882:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004890:	4b51      	ldr	r3, [pc, #324]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	f023 0203 	bic.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	494e      	ldr	r1, [pc, #312]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ae:	4b4a      	ldr	r3, [pc, #296]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	4947      	ldr	r1, [pc, #284]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048cc:	4b42      	ldr	r3, [pc, #264]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d8:	493f      	ldr	r1, [pc, #252]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ea:	4b3b      	ldr	r3, [pc, #236]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	f023 0220 	bic.w	r2, r3, #32
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	4938      	ldr	r1, [pc, #224]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004908:	4b33      	ldr	r3, [pc, #204]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	4930      	ldr	r1, [pc, #192]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004916:	4313      	orrs	r3, r2
 8004918:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004926:	4b2c      	ldr	r3, [pc, #176]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	4929      	ldr	r1, [pc, #164]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004944:	4b24      	ldr	r3, [pc, #144]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	4921      	ldr	r1, [pc, #132]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004952:	4313      	orrs	r3, r2
 8004954:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004962:	4b1d      	ldr	r3, [pc, #116]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	491a      	ldr	r1, [pc, #104]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004970:	4313      	orrs	r3, r2
 8004972:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004980:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	4912      	ldr	r1, [pc, #72]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800498e:	4313      	orrs	r3, r2
 8004990:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800499e:	4b0e      	ldr	r3, [pc, #56]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	490b      	ldr	r1, [pc, #44]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80049bc:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c8:	4903      	ldr	r1, [pc, #12]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3748      	adds	r7, #72	@ 0x48
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e049      	b.n	8004a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc fb82 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fcda 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e03b      	b.n	8004b1c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x4e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ace:	d004      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x4e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d115      	bne.n	8004b06 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b13      	ldr	r3, [pc, #76]	@ (8004b30 <HAL_TIM_Base_Start_IT+0xa4>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d015      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x8c>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af2:	d011      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	e008      	b.n	8004b18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e000      	b.n	8004b1a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e049      	b.n	8004bda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc fab6 	bl	80010cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fc2e 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x24>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e03c      	b.n	8004c82 <HAL_TIM_PWM_Start+0x9e>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d109      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x3e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	e02f      	b.n	8004c82 <HAL_TIM_PWM_Start+0x9e>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x58>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e022      	b.n	8004c82 <HAL_TIM_PWM_Start+0x9e>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d109      	bne.n	8004c56 <HAL_TIM_PWM_Start+0x72>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	e015      	b.n	8004c82 <HAL_TIM_PWM_Start+0x9e>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d109      	bne.n	8004c70 <HAL_TIM_PWM_Start+0x8c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e008      	b.n	8004c82 <HAL_TIM_PWM_Start+0x9e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e083      	b.n	8004d92 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_PWM_Start+0xb6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c98:	e023      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xfe>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_PWM_Start+0xc6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ca8:	e01b      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xfe>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_PWM_Start+0xd6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cb8:	e013      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xfe>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_PWM_Start+0xe6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cc8:	e00b      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xfe>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_PWM_Start+0xf6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cd8:	e003      	b.n	8004ce2 <HAL_TIM_PWM_Start+0xfe>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 ff2c 	bl	8005b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	@ (8004d9c <HAL_TIM_PWM_Start+0x1b8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_PWM_Start+0x134>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a28      	ldr	r2, [pc, #160]	@ (8004da0 <HAL_TIM_PWM_Start+0x1bc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_PWM_Start+0x134>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a26      	ldr	r2, [pc, #152]	@ (8004da4 <HAL_TIM_PWM_Start+0x1c0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_PWM_Start+0x134>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a25      	ldr	r2, [pc, #148]	@ (8004da8 <HAL_TIM_PWM_Start+0x1c4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_PWM_Start+0x138>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_TIM_PWM_Start+0x13a>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <HAL_TIM_PWM_Start+0x1b8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x16c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d44:	d004      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x16c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <HAL_TIM_PWM_Start+0x1bc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d115      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <HAL_TIM_PWM_Start+0x1c8>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d015      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x1aa>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d68:	d011      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7a:	e008      	b.n	8004d8e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e000      	b.n	8004d90 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800
 8004dac:	00010007 	.word	0x00010007

08004db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0202 	mvn.w	r2, #2
 8004de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 facb 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fabd 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 face 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0204 	mvn.w	r2, #4
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 faa5 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa97 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 faa8 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d020      	beq.n	8004eac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0208 	mvn.w	r2, #8
 8004e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2204      	movs	r2, #4
 8004e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa7f 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa71 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa82 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d020      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01b      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0210 	mvn.w	r2, #16
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fa59 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa4b 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa5c 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0201 	mvn.w	r2, #1
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa29 	bl	800536e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 ff12 	bl	8005d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 ff0a 	bl	8005d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa1b 	bl	80053be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0220 	mvn.w	r2, #32
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fed2 	bl	8005d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e0ff      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b14      	cmp	r3, #20
 8004fde:	f200 80f0 	bhi.w	80051c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	080051c3 	.word	0x080051c3
 8004ff0:	080051c3 	.word	0x080051c3
 8004ff4:	080051c3 	.word	0x080051c3
 8004ff8:	0800507d 	.word	0x0800507d
 8004ffc:	080051c3 	.word	0x080051c3
 8005000:	080051c3 	.word	0x080051c3
 8005004:	080051c3 	.word	0x080051c3
 8005008:	080050bf 	.word	0x080050bf
 800500c:	080051c3 	.word	0x080051c3
 8005010:	080051c3 	.word	0x080051c3
 8005014:	080051c3 	.word	0x080051c3
 8005018:	080050ff 	.word	0x080050ff
 800501c:	080051c3 	.word	0x080051c3
 8005020:	080051c3 	.word	0x080051c3
 8005024:	080051c3 	.word	0x080051c3
 8005028:	08005141 	.word	0x08005141
 800502c:	080051c3 	.word	0x080051c3
 8005030:	080051c3 	.word	0x080051c3
 8005034:	080051c3 	.word	0x080051c3
 8005038:	08005181 	.word	0x08005181
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fa40 	bl	80054c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	619a      	str	r2, [r3, #24]
      break;
 800507a:	e0a5      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 faa6 	bl	80055d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	021a      	lsls	r2, r3, #8
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	619a      	str	r2, [r3, #24]
      break;
 80050bc:	e084      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb05 	bl	80056d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0208 	orr.w	r2, r2, #8
 80050d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0204 	bic.w	r2, r2, #4
 80050e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	61da      	str	r2, [r3, #28]
      break;
 80050fc:	e064      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fb63 	bl	80057d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	021a      	lsls	r2, r3, #8
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	61da      	str	r2, [r3, #28]
      break;
 800513e:	e043      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fba6 	bl	8005898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0208 	orr.w	r2, r2, #8
 800515a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0204 	bic.w	r2, r2, #4
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800517e:	e023      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fbe4 	bl	8005954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800519a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051c0:	e002      	b.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
      break;
 80051c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop

080051dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_ConfigClockSource+0x1c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e0b6      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x18a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005216:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005234:	d03e      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xd8>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800523a:	f200 8087 	bhi.w	800534c <HAL_TIM_ConfigClockSource+0x170>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	f000 8086 	beq.w	8005352 <HAL_TIM_ConfigClockSource+0x176>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	d87f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800524c:	2b70      	cmp	r3, #112	@ 0x70
 800524e:	d01a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xaa>
 8005250:	2b70      	cmp	r3, #112	@ 0x70
 8005252:	d87b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 8005254:	2b60      	cmp	r3, #96	@ 0x60
 8005256:	d050      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x11e>
 8005258:	2b60      	cmp	r3, #96	@ 0x60
 800525a:	d877      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800525c:	2b50      	cmp	r3, #80	@ 0x50
 800525e:	d03c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xfe>
 8005260:	2b50      	cmp	r3, #80	@ 0x50
 8005262:	d873      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d058      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x13e>
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d86f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800526c:	2b30      	cmp	r3, #48	@ 0x30
 800526e:	d064      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005270:	2b30      	cmp	r3, #48	@ 0x30
 8005272:	d86b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d060      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d867      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005280:	2b10      	cmp	r3, #16
 8005282:	d05a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005284:	e062      	b.n	800534c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	f000 fc37 	bl	8005b08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e04f      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	f000 fc20 	bl	8005b08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e03c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fb94 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2150      	movs	r1, #80	@ 0x50
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fbed 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e02c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 fbb3 	bl	8005a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2160      	movs	r1, #96	@ 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fbdd 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005318:	e01c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 fb74 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2140      	movs	r1, #64	@ 0x40
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fbcd 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005338:	e00c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f000 fbc4 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 800534a:	e003      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e000      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a34      	ldr	r2, [pc, #208]	@ (80054b8 <TIM_Base_SetConfig+0xe4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0x20>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f2:	d108      	bne.n	8005406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2b      	ldr	r2, [pc, #172]	@ (80054b8 <TIM_Base_SetConfig+0xe4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00f      	beq.n	800542e <TIM_Base_SetConfig+0x5a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005414:	d00b      	beq.n	800542e <TIM_Base_SetConfig+0x5a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a28      	ldr	r2, [pc, #160]	@ (80054bc <TIM_Base_SetConfig+0xe8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <TIM_Base_SetConfig+0x5a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a27      	ldr	r2, [pc, #156]	@ (80054c0 <TIM_Base_SetConfig+0xec>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_Base_SetConfig+0x5a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <TIM_Base_SetConfig+0xf0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a14      	ldr	r2, [pc, #80]	@ (80054b8 <TIM_Base_SetConfig+0xe4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0xb0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a13      	ldr	r2, [pc, #76]	@ (80054bc <TIM_Base_SetConfig+0xe8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0xb0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a12      	ldr	r2, [pc, #72]	@ (80054c0 <TIM_Base_SetConfig+0xec>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0xb0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a11      	ldr	r2, [pc, #68]	@ (80054c4 <TIM_Base_SetConfig+0xf0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	611a      	str	r2, [r3, #16]
  }
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800

080054c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f023 0201 	bic.w	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f023 0302 	bic.w	r3, r3, #2
 8005514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a28      	ldr	r2, [pc, #160]	@ (80055c4 <TIM_OC1_SetConfig+0xfc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_OC1_SetConfig+0x78>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a27      	ldr	r2, [pc, #156]	@ (80055c8 <TIM_OC1_SetConfig+0x100>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_OC1_SetConfig+0x78>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a26      	ldr	r2, [pc, #152]	@ (80055cc <TIM_OC1_SetConfig+0x104>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC1_SetConfig+0x78>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a25      	ldr	r2, [pc, #148]	@ (80055d0 <TIM_OC1_SetConfig+0x108>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10c      	bne.n	800555a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0308 	bic.w	r3, r3, #8
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a19      	ldr	r2, [pc, #100]	@ (80055c4 <TIM_OC1_SetConfig+0xfc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_OC1_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a18      	ldr	r2, [pc, #96]	@ (80055c8 <TIM_OC1_SetConfig+0x100>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_OC1_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a17      	ldr	r2, [pc, #92]	@ (80055cc <TIM_OC1_SetConfig+0x104>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_OC1_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a16      	ldr	r2, [pc, #88]	@ (80055d0 <TIM_OC1_SetConfig+0x108>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d111      	bne.n	800559e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f023 0210 	bic.w	r2, r3, #16
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0320 	bic.w	r3, r3, #32
 8005622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a24      	ldr	r2, [pc, #144]	@ (80056c4 <TIM_OC2_SetConfig+0xf0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10d      	bne.n	8005654 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800563e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1b      	ldr	r2, [pc, #108]	@ (80056c4 <TIM_OC2_SetConfig+0xf0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_OC2_SetConfig+0xa0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1a      	ldr	r2, [pc, #104]	@ (80056c8 <TIM_OC2_SetConfig+0xf4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC2_SetConfig+0xa0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a19      	ldr	r2, [pc, #100]	@ (80056cc <TIM_OC2_SetConfig+0xf8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC2_SetConfig+0xa0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <TIM_OC2_SetConfig+0xfc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d113      	bne.n	800569c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800567a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005682:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a23      	ldr	r2, [pc, #140]	@ (80057c0 <TIM_OC3_SetConfig+0xec>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10d      	bne.n	8005752 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800573c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005750:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1a      	ldr	r2, [pc, #104]	@ (80057c0 <TIM_OC3_SetConfig+0xec>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_OC3_SetConfig+0x9e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a19      	ldr	r2, [pc, #100]	@ (80057c4 <TIM_OC3_SetConfig+0xf0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_OC3_SetConfig+0x9e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a18      	ldr	r2, [pc, #96]	@ (80057c8 <TIM_OC3_SetConfig+0xf4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC3_SetConfig+0x9e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a17      	ldr	r2, [pc, #92]	@ (80057cc <TIM_OC3_SetConfig+0xf8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d113      	bne.n	800579a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800

080057d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800581e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	031b      	lsls	r3, r3, #12
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a16      	ldr	r2, [pc, #88]	@ (8005888 <TIM_OC4_SetConfig+0xb8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_OC4_SetConfig+0x7c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a15      	ldr	r2, [pc, #84]	@ (800588c <TIM_OC4_SetConfig+0xbc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_OC4_SetConfig+0x7c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a14      	ldr	r2, [pc, #80]	@ (8005890 <TIM_OC4_SetConfig+0xc0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_OC4_SetConfig+0x7c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a13      	ldr	r2, [pc, #76]	@ (8005894 <TIM_OC4_SetConfig+0xc4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d109      	bne.n	8005860 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005852:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	019b      	lsls	r3, r3, #6
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a15      	ldr	r2, [pc, #84]	@ (8005944 <TIM_OC5_SetConfig+0xac>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_OC5_SetConfig+0x72>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a14      	ldr	r2, [pc, #80]	@ (8005948 <TIM_OC5_SetConfig+0xb0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_OC5_SetConfig+0x72>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <TIM_OC5_SetConfig+0xb4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_OC5_SetConfig+0x72>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <TIM_OC5_SetConfig+0xb8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d109      	bne.n	800591e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	621a      	str	r2, [r3, #32]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800

08005954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800599a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	051b      	lsls	r3, r3, #20
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a16      	ldr	r2, [pc, #88]	@ (8005a04 <TIM_OC6_SetConfig+0xb0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00b      	beq.n	80059c8 <TIM_OC6_SetConfig+0x74>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <TIM_OC6_SetConfig+0xb4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d007      	beq.n	80059c8 <TIM_OC6_SetConfig+0x74>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a14      	ldr	r2, [pc, #80]	@ (8005a0c <TIM_OC6_SetConfig+0xb8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_OC6_SetConfig+0x74>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a13      	ldr	r2, [pc, #76]	@ (8005a10 <TIM_OC6_SetConfig+0xbc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d109      	bne.n	80059dc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	029b      	lsls	r3, r3, #10
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 030a 	bic.w	r3, r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 0210 	bic.w	r2, r3, #16
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	031b      	lsls	r3, r3, #12
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f043 0307 	orr.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1a      	ldr	r2, [r3, #32]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e04f      	b.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a21      	ldr	r2, [pc, #132]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d108      	bne.n	8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005bdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a14      	ldr	r2, [pc, #80]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c14:	d004      	beq.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10c      	bne.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40014000 	.word	0x40014000

08005c60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e060      	b.n	8005d3e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a14      	ldr	r2, [pc, #80]	@ (8005d4c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d115      	bne.n	8005d2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	051b      	lsls	r3, r3, #20
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40012c00 	.word	0x40012c00

08005d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e040      	b.n	8005e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fb fa24 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2224      	movs	r2, #36	@ 0x24
 8005db8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f95e 	bl	8006094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f825 	bl	8005e28 <UART_SetConfig>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e01b      	b.n	8005e20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9dd 	bl	80061d8 <UART_CheckIdleState>
 8005e1e:	4603      	mov	r3, r0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b8a      	ldr	r3, [pc, #552]	@ (800607c <UART_SetConfig+0x254>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	6979      	ldr	r1, [r7, #20]
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a78      	ldr	r2, [pc, #480]	@ (8006080 <UART_SetConfig+0x258>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d120      	bne.n	8005ee6 <UART_SetConfig+0xbe>
 8005ea4:	4b77      	ldr	r3, [pc, #476]	@ (8006084 <UART_SetConfig+0x25c>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d817      	bhi.n	8005ee0 <UART_SetConfig+0xb8>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0x90>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ed5 	.word	0x08005ed5
 8005ec0:	08005edb 	.word	0x08005edb
 8005ec4:	08005ecf 	.word	0x08005ecf
 8005ec8:	2300      	movs	r3, #0
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e01d      	b.n	8005f0a <UART_SetConfig+0xe2>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e01a      	b.n	8005f0a <UART_SetConfig+0xe2>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e017      	b.n	8005f0a <UART_SetConfig+0xe2>
 8005eda:	2308      	movs	r3, #8
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e014      	b.n	8005f0a <UART_SetConfig+0xe2>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e011      	b.n	8005f0a <UART_SetConfig+0xe2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a67      	ldr	r2, [pc, #412]	@ (8006088 <UART_SetConfig+0x260>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d102      	bne.n	8005ef6 <UART_SetConfig+0xce>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e009      	b.n	8005f0a <UART_SetConfig+0xe2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a64      	ldr	r2, [pc, #400]	@ (800608c <UART_SetConfig+0x264>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d102      	bne.n	8005f06 <UART_SetConfig+0xde>
 8005f00:	2300      	movs	r3, #0
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e001      	b.n	8005f0a <UART_SetConfig+0xe2>
 8005f06:	2310      	movs	r3, #16
 8005f08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f12:	d15a      	bne.n	8005fca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005f14:	7ffb      	ldrb	r3, [r7, #31]
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d827      	bhi.n	8005f6a <UART_SetConfig+0x142>
 8005f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f20 <UART_SetConfig+0xf8>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	08005f6b 	.word	0x08005f6b
 8005f30:	08005f5b 	.word	0x08005f5b
 8005f34:	08005f6b 	.word	0x08005f6b
 8005f38:	08005f6b 	.word	0x08005f6b
 8005f3c:	08005f6b 	.word	0x08005f6b
 8005f40:	08005f63 	.word	0x08005f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f44:	f7fe fb74 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 8005f48:	61b8      	str	r0, [r7, #24]
        break;
 8005f4a:	e013      	b.n	8005f74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7fe fb92 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8005f50:	61b8      	str	r0, [r7, #24]
        break;
 8005f52:	e00f      	b.n	8005f74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f54:	4b4e      	ldr	r3, [pc, #312]	@ (8006090 <UART_SetConfig+0x268>)
 8005f56:	61bb      	str	r3, [r7, #24]
        break;
 8005f58:	e00c      	b.n	8005f74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5a:	f7fe fb09 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 8005f5e:	61b8      	str	r0, [r7, #24]
        break;
 8005f60:	e008      	b.n	8005f74 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f66:	61bb      	str	r3, [r7, #24]
        break;
 8005f68:	e004      	b.n	8005f74 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	77bb      	strb	r3, [r7, #30]
        break;
 8005f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d074      	beq.n	8006064 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	005a      	lsls	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	d916      	bls.n	8005fc4 <UART_SetConfig+0x19c>
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d212      	bcs.n	8005fc4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f023 030f 	bic.w	r3, r3, #15
 8005fa6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	89fb      	ldrh	r3, [r7, #14]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	89fa      	ldrh	r2, [r7, #14]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	e04f      	b.n	8006064 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	77bb      	strb	r3, [r7, #30]
 8005fc8:	e04c      	b.n	8006064 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d828      	bhi.n	8006022 <UART_SetConfig+0x1fa>
 8005fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <UART_SetConfig+0x1b0>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	0800600d 	.word	0x0800600d
 8005fe4:	08006023 	.word	0x08006023
 8005fe8:	08006013 	.word	0x08006013
 8005fec:	08006023 	.word	0x08006023
 8005ff0:	08006023 	.word	0x08006023
 8005ff4:	08006023 	.word	0x08006023
 8005ff8:	0800601b 	.word	0x0800601b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ffc:	f7fe fb18 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 8006000:	61b8      	str	r0, [r7, #24]
        break;
 8006002:	e013      	b.n	800602c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fe fb36 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8006008:	61b8      	str	r0, [r7, #24]
        break;
 800600a:	e00f      	b.n	800602c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800600c:	4b20      	ldr	r3, [pc, #128]	@ (8006090 <UART_SetConfig+0x268>)
 800600e:	61bb      	str	r3, [r7, #24]
        break;
 8006010:	e00c      	b.n	800602c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006012:	f7fe faad 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 8006016:	61b8      	str	r0, [r7, #24]
        break;
 8006018:	e008      	b.n	800602c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800601e:	61bb      	str	r3, [r7, #24]
        break;
 8006020:	e004      	b.n	800602c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	77bb      	strb	r3, [r7, #30]
        break;
 800602a:	bf00      	nop
    }

    if (pclk != 0U)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d018      	beq.n	8006064 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085a      	lsrs	r2, r3, #1
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	441a      	add	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d909      	bls.n	8006060 <UART_SetConfig+0x238>
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006052:	d205      	bcs.n	8006060 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	b29a      	uxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	e001      	b.n	8006064 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006070:	7fbb      	ldrb	r3, [r7, #30]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	efff69f3 	.word	0xefff69f3
 8006080:	40013800 	.word	0x40013800
 8006084:	40021000 	.word	0x40021000
 8006088:	40004400 	.word	0x40004400
 800608c:	40004800 	.word	0x40004800
 8006090:	007a1200 	.word	0x007a1200

08006094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01a      	beq.n	80061aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006192:	d10a      	bne.n	80061aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b098      	sub	sp, #96	@ 0x60
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e8:	f7fb fa60 	bl	80016ac <HAL_GetTick>
 80061ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d12e      	bne.n	800625a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006204:	2200      	movs	r2, #0
 8006206:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f88c 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d021      	beq.n	800625a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800622a:	653b      	str	r3, [r7, #80]	@ 0x50
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006234:	647b      	str	r3, [r7, #68]	@ 0x44
 8006236:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800623a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e6      	bne.n	8006216 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e062      	b.n	8006320 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d149      	bne.n	80062fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006268:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006270:	2200      	movs	r2, #0
 8006272:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f856 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d03c      	beq.n	80062fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	623b      	str	r3, [r7, #32]
   return(result);
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e6      	bne.n	8006282 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3308      	adds	r3, #8
 80062d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062d4:	61fa      	str	r2, [r7, #28]
 80062d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	69b9      	ldr	r1, [r7, #24]
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	617b      	str	r3, [r7, #20]
   return(result);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e011      	b.n	8006320 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3758      	adds	r7, #88	@ 0x58
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006338:	e04f      	b.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d04b      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fb f9b3 	bl	80016ac <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <UART_WaitOnFlagUntilTimeout+0x30>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e04e      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d037      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b80      	cmp	r3, #128	@ 0x80
 800636e:	d034      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b40      	cmp	r3, #64	@ 0x40
 8006374:	d031      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b08      	cmp	r3, #8
 8006382:	d110      	bne.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2208      	movs	r2, #8
 800638a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f838 	bl	8006402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2208      	movs	r2, #8
 8006396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e029      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b4:	d111      	bne.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f81e 	bl	8006402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e00f      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d0a0      	beq.n	800633a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006402:	b480      	push	{r7}
 8006404:	b095      	sub	sp, #84	@ 0x54
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800641e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006428:	643b      	str	r3, [r7, #64]	@ 0x40
 800642a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800642e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3308      	adds	r3, #8
 8006442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	61fb      	str	r3, [r7, #28]
   return(result);
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800645c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800645e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e5      	bne.n	800643c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006474:	2b01      	cmp	r3, #1
 8006476:	d118      	bne.n	80064aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	60bb      	str	r3, [r7, #8]
   return(result);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f023 0310 	bic.w	r3, r3, #16
 800648c:	647b      	str	r3, [r7, #68]	@ 0x44
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	613b      	str	r3, [r7, #16]
   return(result);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e6      	bne.n	8006478 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064be:	bf00      	nop
 80064c0:	3754      	adds	r7, #84	@ 0x54
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <memset>:
 80064ca:	4402      	add	r2, r0
 80064cc:	4603      	mov	r3, r0
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d100      	bne.n	80064d4 <memset+0xa>
 80064d2:	4770      	bx	lr
 80064d4:	f803 1b01 	strb.w	r1, [r3], #1
 80064d8:	e7f9      	b.n	80064ce <memset+0x4>
	...

080064dc <__libc_init_array>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4d0d      	ldr	r5, [pc, #52]	@ (8006514 <__libc_init_array+0x38>)
 80064e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006518 <__libc_init_array+0x3c>)
 80064e2:	1b64      	subs	r4, r4, r5
 80064e4:	10a4      	asrs	r4, r4, #2
 80064e6:	2600      	movs	r6, #0
 80064e8:	42a6      	cmp	r6, r4
 80064ea:	d109      	bne.n	8006500 <__libc_init_array+0x24>
 80064ec:	4d0b      	ldr	r5, [pc, #44]	@ (800651c <__libc_init_array+0x40>)
 80064ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006520 <__libc_init_array+0x44>)
 80064f0:	f000 f818 	bl	8006524 <_init>
 80064f4:	1b64      	subs	r4, r4, r5
 80064f6:	10a4      	asrs	r4, r4, #2
 80064f8:	2600      	movs	r6, #0
 80064fa:	42a6      	cmp	r6, r4
 80064fc:	d105      	bne.n	800650a <__libc_init_array+0x2e>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	f855 3b04 	ldr.w	r3, [r5], #4
 8006504:	4798      	blx	r3
 8006506:	3601      	adds	r6, #1
 8006508:	e7ee      	b.n	80064e8 <__libc_init_array+0xc>
 800650a:	f855 3b04 	ldr.w	r3, [r5], #4
 800650e:	4798      	blx	r3
 8006510:	3601      	adds	r6, #1
 8006512:	e7f2      	b.n	80064fa <__libc_init_array+0x1e>
 8006514:	0800657c 	.word	0x0800657c
 8006518:	0800657c 	.word	0x0800657c
 800651c:	0800657c 	.word	0x0800657c
 8006520:	08006580 	.word	0x08006580

08006524 <_init>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr

08006530 <_fini>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr
